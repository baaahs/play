{"version":3,"file":"klock-root-klock.js","sources":["util/Preconditions.kt","kotlin/math.kt","collections/Collections.kt","text/StringBuilder.kt","util/Standard.kt","generated/_Collections.kt","kotlin/text/regex.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateException.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateFormat.kt","util/Lazy.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimeSpan.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateTime.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateTimeRange.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/MonthSpan.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateTimeSpan.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/internal.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateTimeSpanFormat.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DateTimeTz.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/DayOfWeek.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/ISO8601.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/FastForEach.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/KlockLocale.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/Measure.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/Month.kt","arrayUtils.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/PatternDateFormat.kt","text/Strings.kt","collections/MutableCollections.kt","kotlin/text/string.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/PerformanceCounter.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimeFormat.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimeProvider.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimezoneOffset.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/Year.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/YearMonth.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/MicroStrReader.kt","../../../../../../../../../../dummy.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/internal/NiceStr.kt","../../../../../klock/src/jsMain/kotlin/com/soywiz/klock/internal/DateExt.kt","../../../../../klock/src/jsMain/kotlin/com/soywiz/klock/internal/KlockInternal.kt","../../../../../klock/src/jsMain/kotlin/com/soywiz/klock/js/DateExt.kt","kotlin/jsTypeOf.kt"],"sourcesContent":["/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.withSign(sign: Double): Double {\n    val thisSignBit = js(\"Kotlin\").doubleSignBit(this).unsafeCast<Int>()\n    val newSignBit = js(\"Kotlin\").doubleSignBit(sign).unsafeCast<Int>()\n    return if (thisSignBit == newSignBit) this else -this\n}\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String =\n    StringBuilder().apply(builderAction).toString()\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String =\n    StringBuilder(capacity).apply(builderAction).toString()\n\n/**\n * Appends all arguments to the given [Appendable].\n */\npublic fun <T : Appendable> T.append(vararg value: CharSequence?): T {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n\ninternal fun <T> Appendable.appendElement(element: T, transform: ((T) -> CharSequence)?) {\n    when {\n        transform != null -> append(transform(element))\n        element is CharSequence? -> append(element)\n        element is Char -> append(element)\n        else -> append(element.toString())\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Provides enumeration values to use to set regular expression options.\n */\npublic actual enum class RegexOption(val value: String) {\n    /** Enables case-insensitive matching. */\n    IGNORE_CASE(\"i\"),\n    /** Enables multiline mode.\n     *\n     * In multiline mode the expressions `^` and `$` match just after or just before,\n     * respectively, a line terminator or the end of the input sequence. */\n    MULTILINE(\"m\")\n}\n\n\n/**\n * Represents the results from a single capturing group within a [MatchResult] of [Regex].\n *\n * @param value The value of captured group.\n */\npublic actual data class MatchGroup(actual val value: String)\n\n\n/**\n * Represents a compiled regular expression.\n * Provides functions to match strings in text with a pattern, replace the found occurrences and split text around matches.\n *\n * For pattern syntax reference see [MDN RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_meaning_in_regular_expressions)\n * and [http://www.w3schools.com/jsref/jsref_obj_regexp.asp](https://www.w3schools.com/jsref/jsref_obj_regexp.asp).\n *\n * @constructor Creates a regular expression from the specified [pattern] string and the specified set of [options].\n */\npublic actual class Regex actual constructor(pattern: String, options: Set<RegexOption>) {\n\n    /** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n    public actual constructor(pattern: String, option: RegexOption) : this(pattern, setOf(option))\n\n    /** Creates a regular expression from the specified [pattern] string and the default options.  */\n    public actual constructor(pattern: String) : this(pattern, emptySet())\n\n\n    /** The pattern string of this regular expression. */\n    public actual val pattern: String = pattern\n    /** The set of options that were used to create this regular expression. */\n    public actual val options: Set<RegexOption> = options.toSet()\n    private val nativePattern: RegExp = RegExp(pattern, options.map { it.value }.joinToString(separator = \"\") + \"g\")\n\n    /** Indicates whether the regular expression matches the entire [input]. */\n    public actual infix fun matches(input: CharSequence): Boolean {\n        nativePattern.reset()\n        val match = nativePattern.exec(input.toString())\n        return match != null && match.index == 0 && nativePattern.lastIndex == input.length\n    }\n\n    /** Indicates whether the regular expression can find at least one match in the specified [input]. */\n    public actual fun containsMatchIn(input: CharSequence): Boolean {\n        nativePattern.reset()\n        return nativePattern.test(input.toString())\n    }\n\n    /** Returns the first match of a regular expression in the [input], beginning at the specified [startIndex].\n     *\n     * @param startIndex An index to start search with, by default 0. Must be not less than zero and not greater than `input.length()`\n     * @return An instance of [MatchResult] if match was found or `null` otherwise.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun find(input: CharSequence, startIndex: Int = 0): MatchResult? = nativePattern.findNext(input.toString(), startIndex)\n\n    /**\n     * Returns a sequence of all occurrences of a regular expression within the [input] string, beginning at the specified [startIndex].\n     *\n     * @sample samples.text.Regexps.findAll\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun findAll(input: CharSequence, startIndex: Int = 0): Sequence<MatchResult> =\n        generateSequence({ find(input, startIndex) }, { match -> match.next() })\n\n    /**\n     * Attempts to match the entire [input] CharSequence against the pattern.\n     *\n     * @return An instance of [MatchResult] if the entire input matches or `null` otherwise.\n     */\n    public actual fun matchEntire(input: CharSequence): MatchResult? {\n        if (pattern.startsWith('^') && pattern.endsWith('$'))\n            return find(input)\n        else\n            return Regex(\"^${pattern.trimStart('^').trimEnd('$')}$\", options).find(input)\n    }\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replace(input: CharSequence, replacement: String): String = input.toString().nativeReplace(nativePattern, replacement)\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with the result of\n     * the given function [transform] that takes [MatchResult] and returns a string to be used as a\n     * replacement for that match.\n     */\n    public actual inline fun replace(input: CharSequence, transform: (MatchResult) -> CharSequence): String {\n        var match = find(input)\n        if (match == null) return input.toString()\n\n        var lastStart = 0\n        val length = input.length\n        val sb = StringBuilder(length)\n        do {\n            val foundMatch = match!!\n            sb.append(input, lastStart, foundMatch.range.start)\n            sb.append(transform(foundMatch))\n            lastStart = foundMatch.range.endInclusive + 1\n            match = foundMatch.next()\n        } while (lastStart < length && match != null)\n\n        if (lastStart < length) {\n            sb.append(input, lastStart, length)\n        }\n\n        return sb.toString()\n    }\n\n    /**\n     * Replaces the first occurrence of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * @param replacement A replacement expression that can include substitutions. See [String.prototype.replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) function docs for details.\n     */\n    public actual fun replaceFirst(input: CharSequence, replacement: String): String {\n        val nonGlobalOptions = options.map { it.value }.joinToString(separator = \"\")\n        return input.toString().nativeReplace(RegExp(pattern, nonGlobalOptions), replacement)\n    }\n\n    /**\n     * Splits the [input] CharSequence around matches of this regular expression.\n     *\n     * @param limit Non-negative value specifying the maximum number of substrings the string can be split to.\n     * Zero by default means no limit is set.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun split(input: CharSequence, limit: Int = 0): List<String> {\n        require(limit >= 0) { \"Limit must be non-negative, but was $limit\" }\n        val matches = findAll(input).let { if (limit == 0) it else it.take(limit - 1) }\n        val result = mutableListOf<String>()\n        var lastStart = 0\n\n        for (match in matches) {\n            result.add(input.subSequence(lastStart, match.range.start).toString())\n            lastStart = match.range.endInclusive + 1\n        }\n        result.add(input.subSequence(lastStart, input.length).toString())\n        return result\n    }\n\n\n    /**\n     * Returns the string representation of this regular expression, namely the [pattern] of this regular expression.\n     *\n     * Note that another regular expression constructed from the same pattern string may have different [options]\n     * and may match strings differently.\n     */\n    public override fun toString(): String = nativePattern.toString()\n\n    actual companion object {\n        /**\n         * Returns a regular expression that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun fromLiteral(literal: String): Regex = Regex(escape(literal))\n\n        /**\n         * Returns a regular expression pattern string that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun escape(literal: String): String = literal.nativeReplace(patternEscape, \"\\\\$&\")\n\n        /**\n         * Returns a literal replacement expression for the specified [literal] string.\n         * No characters of that string will have special meaning when it is used as a replacement string in [Regex.replace] function.\n         */\n        public actual fun escapeReplacement(literal: String): String = literal.nativeReplace(replacementEscape, \"$$$$\")\n\n        private val patternEscape = RegExp(\"\"\"[-\\\\^$*+?.()|[\\]{}]\"\"\", \"g\")\n        private val replacementEscape = RegExp(\"\"\"\\$\"\"\", \"g\")\n    }\n}\n\n/** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_sb3q2\\$\")\npublic fun Regex_0(pattern: String, option: RegexOption): Regex = Regex(pattern, setOf(option))\n\n/** Creates a regular expression from the specified [pattern] string and the default options.  */\n@Deprecated(\"Provided for binary compatibility\", level = DeprecationLevel.HIDDEN)\n@JsName(\"Regex_61zpoe\\$\")\npublic fun Regex_1(pattern: String): Regex = Regex(pattern, emptySet())\n\n\n\n\nprivate fun RegExp.findNext(input: String, from: Int): MatchResult? {\n    this.lastIndex = from\n    val match = exec(input)\n    if (match == null) return null\n    val range = match.index..lastIndex - 1\n\n    return object : MatchResult {\n        override val range: IntRange = range\n        override val value: String\n            get() = match[0]!!\n\n        override val groups: MatchGroupCollection = object : MatchGroupCollection, AbstractCollection<MatchGroup?>() {\n            override val size: Int get() = match.length\n            override fun iterator(): Iterator<MatchGroup?> = indices.asSequence().map { this[it] }.iterator()\n            override fun get(index: Int): MatchGroup? = match[index]?.let { MatchGroup(it) }\n        }\n\n\n        private var groupValues_: List<String>? = null\n\n        override val groupValues: List<String>\n            get() {\n                if (groupValues_ == null) {\n                    groupValues_ = object : AbstractList<String>() {\n                        override val size: Int get() = match.length\n                        override fun get(index: Int): String = match[index] ?: \"\"\n                    }\n                }\n                return groupValues_!!\n            }\n\n        override fun next(): MatchResult? = this@findNext.findNext(input, if (range.isEmpty()) range.start + 1 else range.endInclusive + 1)\n    }\n}\n",null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.append(this, 0, startIndex)\n    sb.append(replacement)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.append(this, 0, startIndex)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n/**\n * Randomly shuffles elements in this mutable list using the specified [random] instance as the source of randomness.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n",null,null,null,null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Function corresponding to JavaScript's `typeof` operator\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"UNUSED_PARAMETER\")\npublic inline fun jsTypeOf(a: Any?): String = js(\"typeof a\")\n"],"names":[],"mappings":"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"}