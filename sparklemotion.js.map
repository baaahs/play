{"version":3,"file":"sparklemotion.js","sources":["kotlin/math.kt","../../../../../src/commonMain/kotlin/baaahs/Brain.kt","collections/Sets.kt","collections/Maps.kt","collections/Collections.kt","kotlin/collections.kt","generated/_Collections.kt","../../../../../src/commonMain/kotlin/baaahs/Mapper.kt","comparisons/Comparisons.kt","kotlin/Comparator.kt","util/Standard.kt","text/Strings.kt","kotlin/text/numberConversions.kt","../../../../../src/commonMain/kotlin/baaahs/glsl/GlslRenderer.kt","generated/_ArraysJs.kt","../../../../../src/commonMain/kotlin/baaahs/io/ByteArrayReader.kt","generated/_Arrays.kt","arrayUtils.kt","../../../../../src/commonMain/kotlin/baaahs/shows/PanelTweenShow.kt","../../../../../src/commonMain/kotlin/generated/gen-consumer-tags.kt","../../../../../src/commonMain/kotlin/api.kt","../../../../../src/commonMain/kotlin/generated/gen-tags-t.kt","../../../../../src/jsMain/kotlin/generated/gen-consumer-tags-js.kt","../../../../../src/commonMain/kotlin/generated/gen-tag-unions.kt","../../../../../src/jsMain/kotlin/baaahs/SheepSimulator.kt","../../../src/main/kotlin/react/dom/ReactDOMTags.kt","../../../../../src/commonMain/kotlin/baaahs/BeatData.kt","../../../../../src/commonMain/kotlin/baaahs/Color.kt","kotlin/text/string.kt","../../../../../src/commonMain/kotlin/baaahs/Config.kt","../../../../../src/commonMain/kotlin/baaahs/Display.kt","../../../../../src/commonMain/kotlin/baaahs/Dmx.kt","../../../../../src/commonMain/kotlin/baaahs/FirmwareDaddy.kt","../../../../../src/commonMain/kotlin/baaahs/Gadget.kt","generated/_Maps.kt","../../../../../src/commonMain/kotlin/baaahs/GadgetManager.kt","../../../../../src/commonMain/kotlin/baaahs/MediaDevices.kt","../../../../../src/commonMain/kotlin/baaahs/MovingHead.kt","../../../../../src/commonMain/kotlin/baaahs/MovingHeadManager.kt","../../../../../src/commonMain/kotlin/baaahs/Pinky.kt","../../../../../src/commonMain/kotlin/baaahs/Pluggables.kt","../../../../../src/commonMain/kotlin/baaahs/PubSub.kt","../../../../../src/commonMain/kotlin/baaahs/Shaders.kt","util/Lazy.kt","../../../../../src/commonMain/kotlin/baaahs/SheepModel.kt","../../../../../src/commonMain/kotlin/baaahs/Show.kt","../../../../../src/commonMain/kotlin/baaahs/ShowRunner.kt","collections/MutableCollections.kt","../../../../../src/commonMain/kotlin/baaahs/SoundAnalyzer.kt","../../../../../src/commonMain/kotlin/baaahs/SparkleMotion.kt","../../../../../src/commonMain/kotlin/baaahs/Surface.kt","../../../../../src/commonMain/kotlin/baaahs/Topics.kt","../../../../../src/commonMain/kotlin/baaahs/api/ws/WebSocketClient.kt","../../../../../src/commonMain/kotlin/baaahs/api/ws/WebSocketRouter.kt","../../../../../src/commonMain/kotlin/baaahs/dmx/LixadaMiniMovingHead.kt","../../../../../src/commonMain/kotlin/baaahs/dmx/Shenzarpy.kt","../../../../../src/commonMain/kotlin/baaahs/gadgets/ColorPicker.kt","../../../../../src/commonMain/kotlin/baaahs/gadgets/PalettePicker.kt","../../../../../src/commonMain/kotlin/baaahs/gadgets/Slider.kt","../../../../../src/commonMain/kotlin/baaahs/geom/Matrix4.kt","../../../../../src/commonMain/kotlin/baaahs/geom/Vector2F.kt","../../../../../src/commonMain/kotlin/baaahs/geom/Vector3F.kt","../../../../../src/commonMain/kotlin/baaahs/glsl/GlslBase.kt","../../../../../src/commonMain/kotlin/baaahs/glsl/GlslContext.kt","../../../../../src/commonMain/kotlin/baaahs/glsl/GlslManager.kt","../../../../../src/commonMain/kotlin/baaahs/glsl/GlslPlugin.kt","../../../../../src/commonMain/kotlin/baaahs/glsl/GlslSurface.kt","../../../../../src/commonMain/kotlin/baaahs/glsl/Program.kt","util/Preconditions.kt","text/regex/MatchResult.kt","../../../../../src/commonMain/kotlin/baaahs/glsl/Quad.kt","../../../../../src/commonMain/kotlin/baaahs/glsl/Shader.kt","../../../../../src/commonMain/kotlin/baaahs/glsl/SurfacePixelStrategy.kt","../../../../../src/commonMain/kotlin/baaahs/glsl/Uniform.kt","../../../../../src/commonMain/kotlin/baaahs/glsl/UniformSetter.kt","../../../../../src/commonMain/kotlin/baaahs/glsl/UvTranslator.kt","../../../../../src/commonMain/kotlin/baaahs/imaging/Imaging.kt","kotlin/numbers_js-v1.kt","../../../../../src/commonMain/kotlin/baaahs/io/ByteArrayWriter.kt","../../../../../src/commonMain/kotlin/baaahs/io/Fs.kt","../../../../../src/commonMain/kotlin/baaahs/mapper/DateTimeSerializer.kt","../../../../../src/commonMain/kotlin/baaahs/mapper/ImageProcessing.kt","../../../../../src/commonMain/kotlin/baaahs/mapper/MappingResults.kt","../../../../../src/commonMain/kotlin/baaahs/mapper/MappingSession.kt","../../../../../src/commonMain/kotlin/baaahs/mapper/PinkyMapperHandlers.kt","../../../../../src/commonMain/kotlin/baaahs/mapper/Storage.kt","../../../../../src/commonMain/kotlin/baaahs/net/FragmentingUdpLink.kt","../../../../../src/commonMain/kotlin/baaahs/net/Network.kt","../../../../../src/commonMain/kotlin/baaahs/proto/Protocol.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/CompositorShader.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/GlslShader.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/HeartShader.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/PixelShader.kt","kotlin/kotlin.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/RandomShader.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/SimpleSpatialShader.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/SineWaveShader.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/SolidShader.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/SoundAnalysisPlugin.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/SparkleShader.kt","../../../../../src/commonMain/kotlin/baaahs/shows/AllShows.kt","../../../../../src/commonMain/kotlin/baaahs/shows/CompositeShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/CreepingPixelsShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/GlslShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/HeartbleatShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/LifeyShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/PixelTweenShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/RandomShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/SimpleSpatialShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/SolidColorShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/SomeDumbShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/ThumpShow.kt","../../../../../src/commonMain/kotlin/baaahs/sim/FakeDmxUniverse.kt","../../../../../src/commonMain/kotlin/baaahs/sim/FakeFs.kt","../../../../../src/commonMain/kotlin/baaahs/sim/FakeNetwork.kt","../../../../../src/commonMain/kotlin/baaahs/util.kt","../../../../../src/jsMain/kotlin/baaahs/AdminUi.kt","../../../src/main/kotlin/kotlinext/js/Helpers.kt","../../../../../src/jsMain/kotlin/baaahs/JsDisplay.kt","org.w3c/org.w3c.dom.kt","../../../../../src/jsMain/kotlin/baaahs/JsMain.kt","../../../../../src/commonMain/kotlin/generated/gen-tag-groups.kt","../../../../../src/jsMain/kotlin/baaahs/JsMapperUi.kt","../../../../../src/jsMain/kotlin/baaahs/Launcher.kt","../../../../../src/jsMain/kotlin/baaahs/View.kt","../../../../../src/jsMain/kotlin/baaahs/WebUi.kt","../../../../../src/jsMain/kotlin/baaahs/admin/AdminPage.kt","../../../../../src/jsMain/kotlin/baaahs/browser/RealMediaDevices.kt","org.w3c/org.w3c.dom.mediacapture.kt","../../../../../src/jsMain/kotlin/baaahs/geom/Vector2.kt","../../../../../src/jsMain/kotlin/baaahs/glsl/JsGlsl.kt","../../../../../src/jsMain/kotlin/baaahs/imaging/JsImaging.kt","org.w3c/org.khronos.webgl.kt","../../../../../src/jsMain/kotlin/baaahs/jsImpl.kt","../../../../../src/jsMain/kotlin/baaahs/net/BrowserNetwork.kt","../../../../../src/jsMain/kotlin/baaahs/net/BrowserUdpProxy.kt","../../../../../src/jsMain/kotlin/baaahs/sim/BridgeClient.kt","../../../../../src/jsMain/kotlin/baaahs/sim/FakeMediaDevices.kt","../../../../../src/jsMain/kotlin/baaahs/util.kt","../../../../../src/jsMain/kotlin/baaahs/visualizer/SwirlyPixelArranger.kt","../../../../../src/jsMain/kotlin/baaahs/visualizer/Visualizer.kt","../../../../../src/jsMain/kotlin/baaahs/visualizer/VisualizerListenerClient.kt","../../../../../src/jsMain/kotlin/baaahs/visualizer/VizSurface.kt","../../../../../src/jsMain/kotlin/baaahs/visualizer/util.kt"],"sourcesContent":["/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","package baaahs\n\nimport baaahs.geom.Vector3F\nimport baaahs.io.ByteArrayReader\nimport baaahs.net.FragmentingUdpLink\nimport baaahs.net.Network\nimport baaahs.proto.*\nimport kotlinx.coroutines.delay\n\nclass Brain(\n    val id: String,\n    private val network: Network,\n    private val display: BrainDisplay,\n    private val pixels: Pixels\n) : Network.UdpListener {\n    private lateinit var link: Network.Link\n    private lateinit var udpSocket: Network.UdpSocket\n    private var lastInstructionsReceivedAtMs: Long = 0\n    private var surfaceName : String? = null\n    private var surface : Surface = AnonymousSurface(BrainId(id))\n        set(value) { field = value; display.surface = value }\n    private var currentShaderDesc: ByteArray? = null\n    private var currentRenderTree: RenderTree<*>? = null\n\n    suspend fun run() {\n        link = FragmentingUdpLink(network.link())\n        udpSocket = link.listenUdp(Ports.BRAIN, this)\n\n        display.id = id\n        display.haveLink(link)\n        display.onReset = {\n            logger.info { \"Resetting Brain $id!\" }\n            reset()\n        }\n\n        sendHello()\n    }\n\n    private suspend fun reset() {\n        lastInstructionsReceivedAtMs = 0\n        surfaceName = null\n        surface = AnonymousSurface(BrainId(id))\n        currentShaderDesc = null\n        currentRenderTree = null\n\n        for (i in pixels.indices) pixels[i] = Color.WHITE\n\n        sendHello()\n    }\n\n    /**\n     * So that the JVM standalone can boot up and have a surface name without mapping\n     */\n    fun forcedSurfaceName(name: String) {\n        surfaceName = name\n    }\n\n    private suspend fun sendHello() {\n        while (true) {\n            val elapsedSinceMessageMs = getTimeMillis() - lastInstructionsReceivedAtMs\n            if (elapsedSinceMessageMs > 10000) {\n                if (lastInstructionsReceivedAtMs != 0L) {\n                    logger.info { \"$id: haven't heard from Pinky in ${elapsedSinceMessageMs}ms\" }\n                }\n                udpSocket.broadcastUdp(Ports.PINKY, BrainHelloMessage(id, surfaceName))\n            }\n\n            delay(5000)\n        }\n    }\n\n    override fun receive(fromAddress: Network.Address, fromPort: Int, bytes: ByteArray) {\n        val now = getTimeMillis()\n        lastInstructionsReceivedAtMs = now\n\n        val reader = ByteArrayReader(bytes)\n\n        try {\n            // Inline message parsing here so we can optimize stuff.\n            val type = Type.get(reader.readByte())\n            // println(\"Got a message of type ${type}\")\n            when (type) {\n                Type.BRAIN_PANEL_SHADE -> {\n                    val pongData = if (reader.readBoolean()) {\n                        reader.readBytes()\n                    } else {\n                        null\n                    }\n                    val shaderDesc = reader.readBytes()\n\n                    // If possible, use the previously-built Shader stuff:\n                    val theCurrentShaderDesc = currentShaderDesc\n                    if (theCurrentShaderDesc == null || !theCurrentShaderDesc.contentEquals(shaderDesc)) {\n                        currentShaderDesc = shaderDesc\n\n                        @Suppress(\"UNCHECKED_CAST\")\n                        val shader = Shader.parse(ByteArrayReader(shaderDesc)) as Shader<Shader.Buffer>\n                        val newRenderTree = RenderTree(\n                            shader,\n                            shader.createRenderer(surface),\n                            shader.createBuffer(surface)\n                        )\n                        currentRenderTree?.release()\n                        currentRenderTree = newRenderTree\n                    }\n\n                    with(currentRenderTree!!) {\n                        read(reader)\n                        draw(pixels)\n                    }\n\n                    if (pongData != null) {\n                        udpSocket.sendUdp(fromAddress, fromPort, PingMessage(pongData, true))\n                    }\n\n                }\n\n                Type.BRAIN_ID_REQUEST -> {\n                    udpSocket.sendUdp(fromAddress, fromPort, BrainHelloMessage(id, surfaceName))\n                }\n\n                Type.BRAIN_MAPPING -> {\n                    val message = BrainMappingMessage.parse(reader)\n                    surfaceName = message.surfaceName\n                    surface = if (message.surfaceName != null) {\n                        val fakeModelSurface = FakeModelSurface(message.surfaceName)\n                        IdentifiedSurface(fakeModelSurface, message.pixelCount, message.pixelLocations)\n                    } else {\n                        AnonymousSurface(BrainId(id))\n                    }\n\n                    // next frame we'll need to recreate everything...\n                    currentShaderDesc = null\n                    currentRenderTree = null\n\n                    udpSocket.broadcastUdp(Ports.PINKY, BrainHelloMessage(id, surfaceName))\n                }\n\n                Type.PING -> {\n                    val ping = PingMessage.parse(reader)\n                    if (!ping.isPong) {\n                        udpSocket.sendUdp(fromAddress, fromPort, PingMessage(ping.data, isPong = true))\n                    }\n                }\n\n                // Other message types are ignored by Brains.\n                else -> {\n                    // no-op\n                }\n            }\n        } catch (e: Exception) {\n            logger.error(e) { \"Brain $id failed to handle a packet.\" }\n        }\n    }\n\n    class RenderTree<B : Shader.Buffer>(val shader: Shader<B>, val renderer: Shader.Renderer<B>, val buffer: B) {\n        fun read(reader: ByteArrayReader) = buffer.read(reader)\n\n        fun draw(pixels: Pixels) {\n            renderer.beginFrame(buffer, pixels.size)\n            for (i in pixels.indices) {\n                pixels[i] = renderer.draw(buffer, i)\n            }\n            renderer.endFrame()\n            pixels.finishedFrame()\n        }\n\n        fun release() {\n            renderer.release()\n        }\n    }\n\n    class FakeModelSurface(override val name: String, override val description: String = name) : Model.Surface {\n        override val expectedPixelCount: Int? = null\n\n        override fun allVertices(): Collection<Vector3F> = emptyList()\n\n        override val faces: List<Model.Face> = emptyList()\n        override val lines: List<Model.Line> = emptyList()\n    }\n\n    companion object {\n        val logger = Logger(\"Brain\")\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.readOnlySet\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n * @sample samples.collections.Collections.Sets.emptyMutableSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.mutableSet\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/**\n * Returns an empty new [LinkedHashSet].\n * @sample samples.collections.Collections.Sets.emptyLinkedHashSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.linkedHashSet\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(@BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashSet<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildSet(capacity: Int, @BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashSet<E>(mapCapacity(capacity)).apply(builderAction)\n}\n\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashMap<K, V>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashMap<K, V>(mapCapacity(capacity)).apply(builderAction)\n}\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Checks a collection builder function capacity argument.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal expect fun checkBuilderCapacity(capacity: Int)\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return ArrayList<E>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction)\n}\n\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal actual fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the list is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","package baaahs\n\nimport baaahs.geom.Matrix4\nimport baaahs.geom.Vector2F\nimport baaahs.geom.Vector3F\nimport baaahs.imaging.Bitmap\nimport baaahs.imaging.Image\nimport baaahs.imaging.NativeBitmap\nimport baaahs.mapper.ImageProcessing\nimport baaahs.api.ws.WebSocketClient\nimport baaahs.mapper.MappingSession\nimport baaahs.net.FragmentingUdpLink\nimport baaahs.net.Network\nimport baaahs.proto.*\nimport baaahs.shaders.PixelShader\nimport baaahs.shaders.SolidShader\nimport com.soywiz.klock.DateTime\nimport kotlinx.coroutines.*\nimport kotlinx.coroutines.channels.Channel\nimport kotlin.math.abs\nimport kotlin.random.Random\n\nclass Mapper(\n    private val network: Network,\n    model: Model<*>,\n    private val mapperUi: MapperUi,\n    private val mediaDevices: MediaDevices,\n    private val pinkyAddress: Network.Address\n) : Network.UdpListener, MapperUi.Listener, CoroutineScope by MainScope() {\n    private val maxPixelsPerBrain = SparkleMotion.MAX_PIXEL_COUNT\n\n    // TODO: getCamera should just return max available size?\n    lateinit var camera: MediaDevices.Camera\n\n    private lateinit var link: Network.Link\n    private lateinit var udpSocket: Network.UdpSocket\n    private lateinit var webSocketClient: WebSocketClient\n    private var isRunning: Boolean = false\n    private var isPaused: Boolean = false\n    private var newIncomingImage: Image? = null\n\n    private var suppressShowsJob: Job? = null\n    private val brainsToMap: MutableMap<Network.Address, BrainToMap> = mutableMapOf()\n\n    private val activeColor = Color(0x07, 0xFF, 0x07)\n    private val inactiveColor = Color(0x01, 0x00, 0x01)\n\n    init {\n        mapperUi.listen(this)\n        mapperUi.addWireframe(model)\n    }\n\n    fun start() = doRunBlocking {\n        link = FragmentingUdpLink(network.link())\n        udpSocket = link.listenUdp(0, this)\n        webSocketClient = WebSocketClient(link, pinkyAddress)\n\n        launch {\n            webSocketClient.listSessions().forEach { mapperUi.addExistingSession(it) }\n\n            onStart()\n        }\n    }\n\n    override fun onStart() {\n        isPaused = false\n\n        if (!isRunning) {\n            camera = mediaDevices.getCamera().apply { onImage = { image -> haveImage(image) } }\n\n            // Restart.\n            isRunning = true\n            launch { startNewSession() }\n        }\n    }\n\n    override fun onPause() {\n        isPaused = true\n    }\n\n    override fun onStop() {\n        onClose()\n    }\n\n    override fun onClose() {\n        logger.info { \"Shutting down Mapper...\" }\n        isRunning = false\n        camera.close()\n\n        suppressShowsJob?.cancel()\n        udpSocket.broadcastUdp(Ports.PINKY, MapperHelloMessage(false))\n\n        mapperUi.close()\n    }\n\n    suspend fun startNewSession() {\n        mapperUi.showMessage(\"ESTABLISHING UPLINK\u2026\")\n\n        // shut down Pinky, advertise for Brains...\n        retry {\n            udpSocket.broadcastUdp(Ports.PINKY, MapperHelloMessage(true))\n            delay(1000L)\n            udpSocket.broadcastUdp(Ports.BRAIN, solidColor(inactiveColor))\n        }\n\n        // keep Pinky from waking up while we're running...\n        suppressShows()\n\n        // wait for responses from Brains\n        pauseForUserInteraction(\"PRESS PLAY WHEN ALL SURFACES ARE GREEN\")\n        val brainIdRequestJob = coroutineScope {\n            launch {\n                while (isPaused) {\n                    udpSocket.broadcastUdp(Ports.BRAIN, BrainIdRequest())\n                    delay(1000L)\n                }\n            }\n        }\n\n        mapperUi.showMessage(\"${brainsToMap.size} SURFACES DISCOVERED!\")\n        waitUntilUnpaused()\n        brainIdRequestJob.cancelAndJoin()\n\n        if (brainsToMap.isEmpty()) {\n            mapperUi.showMessage(\"NO SURFACES DISCOVERED! TRY AGAIN!\")\n            isRunning = false\n            return\n        }\n\n        mapperUi.showMessage(\"READY PLAYER ONE\u2026\")\n        pauseForUserInteraction(\"ALIGN MODEL AND PRESS PLAY WHEN READY\")\n        waitUntilUnpaused()\n\n        Session().start()\n    }\n\n    inner class Session {\n        val sessionStartTime = DateTime.now()\n        val visibleSurfaces = mapperUi.getVisibleSurfaces()\n        private var baseBitmap: Bitmap? = null\n        val cameraOrientation = mapperUi.lockUi()\n        lateinit var deltaBitmap: Bitmap\n\n        fun resetToBase() {\n            brainsToMap.values.forEach {\n                it.pixelShaderBuffer.setAll(0)\n            }\n        }\n\n        suspend fun allPixelsOff() {\n            resetToBase()\n            sendToAllReliably(brainsToMap.values) { it.pixelShaderBuffer }\n        }\n\n        fun brainsWithPixel(pixelIndex: Int) =\n            brainsToMap.values.filter { pixelIndex < it.expectedPixelCountOrDefault }\n\n        suspend fun turnOnPixel(pixelIndex: Int) {\n            resetToBase()\n\n            val relevantBrains = brainsWithPixel(pixelIndex)\n            relevantBrains.forEach {\n                it.pixelShaderBuffer[pixelIndex] = 1\n            }\n\n            sendToAllReliably(relevantBrains) { it.pixelShaderBuffer }\n        }\n\n        suspend fun start() {\n            mapperUi.showMessage(\"CALIBRATING\u2026\")\n            logger.info { \"Visible surfaces: ${visibleSurfaces.joinToString { it.modelSurface.name }}\" }\n\n            // Blackout for base image.\n            sendToAllReliably(brainsToMap.values) { solidColorBuffer(inactiveColor) }\n            delay(1000L) // wait for focus\n\n            // Create base image from the brightest of a few samples.\n            val bitmap = getBrightImageBitmap(5)\n            baseBitmap = bitmap\n            deltaBitmap = NativeBitmap(bitmap.width, bitmap.height)\n\n            val baseImageName = webSocketClient.saveImage(sessionStartTime, \"base\", bitmap)\n\n            mapperUi.showMessage(\"MAPPING\u2026\")\n            mapperUi.showStats(brainsToMap.size, 0, -1)\n\n            try {\n                logger.info { \"identify surfaces...\" }\n                // light up each brain in an arbitrary sequence and capture its delta...\n                brainsToMap.values.forEachIndexed { index, brainToMap ->\n                    identifyBrain(index, brainToMap)\n\n                    // the next line causes the UI to wait after each panel has been identified...\n                    pauseForUserInteraction()\n\n                    var retryCount = 0\n                    mapperUi.setRedo {\n                        identifyBrain(index, brainToMap, ++retryCount)\n                    }\n\n                    waitUntilUnpaused()\n                    mapperUi.setRedo(null)\n\n                    deliverer.send(brainToMap, solidColorBuffer(inactiveColor))\n                    deliverer.await()\n                }\n\n                delay(1000L)\n\n//            mapperUi.showMessage(\"SEEKING LIMITS\u2026\")\n//            var maxPixel = 0\n                // binary search for highest present pixel 0..MAX_PIXEL_COUNT\u2026\n\n                logger.info { \"identify pixels...\" }\n                // light up each pixel...\n\n                // Turn all pixels off.\n                resetToBase()\n                sendToAllReliably(brainsToMap.values) { it.pixelShaderBuffer }\n                delay(1000L)\n\n                val maxPixelForTheseBrains = brainsToMap.values.map { it.expectedPixelCountOrDefault }.max()!!\n                val pixelStep = 4\n                fun actualPixelIndex(pixelIndexX: Int) =\n                    pixelIndexX * pixelStep % maxPixelForTheseBrains + pixelIndexX * pixelStep / maxPixelForTheseBrains\n\n\n                for (pixelIndexX in 0 until maxPixelForTheseBrains) {\n                    // Reorder so we get e.g. 0, 4, 8, ..., 1, 5, 9, ..., 2, 6, 10, ..., 3, 7, 11, ...\n                    val pixelIndex = actualPixelIndex(pixelIndexX)\n                    identifyPixel(pixelIndex, maxPixelForTheseBrains)\n\n//                    pauseForUserInteraction()\n                    waitUntilUnpaused()\n                    allPixelsOff()\n                }\n                logger.info { \"done identifying pixels...\" }\n\n                logger.info { \"done identifying things... $isRunning\" }\n                mapperUi.showMessage(\"++LEVEL UNLOCKED++\")\n\n                delay(1000L)\n            } catch (e: TimeoutException) {\n                mapperUi.showMessage(\"Timed out: ${e.message}\")\n                logger.error(\"Timed out\", e)\n            }\n\n            logger.info { \"Here's what we learned!\" }\n\n            val surfaces = mutableListOf<MappingSession.SurfaceData>()\n            brainsToMap.forEach { (address, brainToMap) ->\n                logger.info { \"Brain ID: ${brainToMap.brainId} at ${address}:\" }\n                logger.info { \"  Surface: ${brainToMap.guessedModelSurface}\" }\n                logger.debug { \"  Pixels:\" }\n\n                val visibleSurface = brainToMap.guessedVisibleSurface\n                if (visibleSurface != null) {\n                    visibleSurface.showPixels()\n\n                    brainToMap.pixelMapData.forEach { (pixelIndex, mapData) ->\n                        val changeRegion = mapData.pixelChangeRegion\n                        val position = visibleSurface.translatePixelToPanelSpace(\n                            changeRegion.centerX.toFloat(),\n                            changeRegion.centerY.toFloat()\n                        )\n                        logger.debug { \"    $pixelIndex -> ${position?.x},${position?.y}\" }\n                    }\n\n                    val pixels = visibleSurface.pixelsInModelSpace.mapIndexed { index, vector3F ->\n                        val pixelMapData = brainToMap.pixelMapData[index]\n                        val pixelChangeRegion = pixelMapData?.pixelChangeRegion\n                        val screenPosition = pixelChangeRegion?.let {\n                            visibleSurface.translatePixelToPanelSpace(it.centerX.toFloat(), it.centerY.toFloat())\n                        }\n                        MappingSession.SurfaceData.PixelData(\n                            vector3F,\n                            screenPosition,\n                            pixelMapData?.deltaImageName\n                        )\n                    }\n\n                    val surfaceData = MappingSession.SurfaceData(\n                        brainToMap.brainId,\n                        visibleSurface.modelSurface.name,\n                        pixels,\n                        brainToMap.deltaImageName,\n                        screenAreaInSqPixels = null,\n                        screenAngle = null\n                    )\n                    surfaces.add(surfaceData)\n                    brainToMap.surfaceData = surfaceData\n                    val mappedPixels: List<Vector2F> = surfaceData.pixels\n                        .map { it?.screenPosition }\n                        .filterNotNull()\n                    brainToMap.screenMin =\n                        Vector2F(mappedPixels.map { it.x }.min()!!, mappedPixels.map { it.y }.min()!!)\n                    brainToMap.screenMax =\n                        Vector2F(mappedPixels.map { it.x }.max()!!, mappedPixels.map { it.y }.max()!!)\n                }\n            }\n\n            // Show mapping diagnostic test pattern!\n//            showTestPattern()\n\n            // Save data.\n            val mappingSession =\n                MappingSession(sessionStartTime.unixMillis, surfaces, cameraOrientation.cameraMatrix, baseImageName)\n            webSocketClient.saveSession(mappingSession)\n\n            // We're done!\n\n            isRunning = false\n            mapperUi.unlockUi()\n\n            retry { udpSocket.broadcastUdp(Ports.PINKY, MapperHelloMessage(isRunning)) }\n        }\n\n        private suspend fun showTestPattern() {\n            brainsToMap.forEach { (_, brainToMap) ->\n                isPaused = true\n\n                val screenMax = brainToMap.screenMax!!\n                val screenMin = brainToMap.screenMin!!\n                val range = abs(screenMax.x - screenMin.x)\n                val pixels = brainToMap.surfaceData?.pixels!!\n                val buffer = brainToMap.pixelShaderBuffer\n                val unmappedPixelCount = pixels.count { it == null }\n                mapperUi.showMessage(brainToMap.guessedModelSurface?.name ?: \"???\")\n                mapperUi.showMessage2(\"$unmappedPixelCount of ${brainToMap.expectedPixelCount} pixels unmapped\")\n\n                suspend fun drawPixels(isLit: (screenPosition: Vector2F) -> Boolean) {\n                    buffer.indices.forEach { i ->\n                        if (i < pixels.size) {\n                            val screenPosition = pixels[i]?.screenPosition\n                            buffer[i] = if (screenPosition != null && isLit(screenPosition)) 1 else 0\n                        }\n                    }\n                    brainToMap.shade { BrainShaderMessage(buffer.shader, buffer) }\n                    delay(30)\n                }\n\n                while (isPaused) {\n                    buffer.palette[1] = Color.WHITE\n\n                    // scan up Y\n                    for (y in screenMin.y.toInt()..screenMax.y.toInt() step (range / 16f).toInt()) {\n                        drawPixels { (_, screenY) -> abs(screenY - y) < range / 10f }\n                    }\n                    // scan down Y\n                    for (y in screenMax.y.toInt()..screenMin.y.toInt() step (range / 16f).toInt()) {\n                        drawPixels { (_, screenY) -> abs(screenY - y) < range / 10f }\n                    }\n\n                    // scan up X\n                    for (x in screenMin.x.toInt()..screenMax.x.toInt() step (range / 16f).toInt()) {\n                        drawPixels { (screenX, _) -> abs(screenX - x) < range / 10f }\n                    }\n                    // scan down X\n                    for (x in screenMax.x.toInt()..screenMin.x.toInt() step (range / 16f).toInt()) {\n                        drawPixels { (screenX, _) -> abs(screenX - x) < range / 10f }\n                    }\n\n                    delay(500)\n\n                    // show unmapped pixels\n                    buffer.palette[1] = Color.RED\n                    buffer.indices.forEach { i ->\n                        val screenPosition = pixels[i]?.screenPosition\n                        buffer[i] = if (screenPosition == null) 1 else 0\n                    }\n                    brainToMap.shade { BrainShaderMessage(buffer.shader, buffer) }\n                    delay(2000)\n\n                    buffer.palette[1] = Color.WHITE\n                }\n            }\n        }\n\n        private suspend fun identifyPixel(pixelIndex: Int, maxPixelForTheseBrains: Int) {\n            mapperUi.showMessage(\"MAPPING PIXEL $pixelIndex / $maxPixelForTheseBrains\u2026\")\n\n            if (pixelIndex % 128 == 0) logger.debug { \"pixel $pixelIndex... isRunning is $isRunning\" }\n            turnOnPixel(pixelIndex)\n\n            slowCamDelay()\n            val pixelOnBitmap = getBrightImageBitmap(2)\n\n            // turn off pixel now so it doesn't leak into next frame...\n            resetToBase()\n            sendToAllReliably(brainsWithPixel(pixelIndex)) { it.pixelShaderBuffer }\n            // we won't block here yet...\n\n            ImageProcessing.diff(pixelOnBitmap, baseBitmap!!, deltaBitmap)\n            mapperUi.showDiffImage(deltaBitmap)\n            val pixelOnImageName = \"not-really-an-image.png\"\n//                mapperClient.saveImage(sessionStartTime, \"pixel-$pixelIndex\", deltaBitmap)\n\n            brainsToMap.values.forEach { brainToMap ->\n                identifyBrainPixel(pixelIndex, brainToMap, pixelOnBitmap, deltaBitmap, pixelOnImageName)\n\n                delay(1)\n                //                    pauseForUserInteraction()\n                waitUntilUnpaused()\n            }\n\n            waitForDelivery() // ... of resetting to black above.\n        }\n\n        suspend fun identifyBrain(index: Int, brainToMap: BrainToMap, retryCount: Int = 0) {\n            mapperUi.showMessage(\"MAPPING SURFACE $index / ${brainsToMap.size} (${brainToMap.brainId})\u2026\")\n\n            deliverer.send(brainToMap, solidColorBuffer(activeColor))\n            deliverer.await()\n            slowCamDelay()\n\n            val surfaceOnBitmap = getBrightImageBitmap(3)\n            val surfaceAnalysis = ImageProcessing.diff(surfaceOnBitmap, baseBitmap!!, deltaBitmap)\n            val surfaceChangeRegion = surfaceAnalysis.detectChangeRegion(.25f)\n            logger.debug {\n                \"surfaceChangeRegion(${brainToMap.brainId}) =\" +\n                        \" $surfaceChangeRegion ${surfaceChangeRegion.width}x${surfaceChangeRegion.height}\"\n            }\n\n            mapperUi.showDiffImage(deltaBitmap, surfaceChangeRegion)\n\n            brainToMap.changeRegion = surfaceChangeRegion\n\n            val thresholdValue = surfaceAnalysis.thresholdValueFor(.25f)\n            //                val pxAboveThreshold = surfaceAnalysis.hist.sumValues(thresholdValue..255)\n            val sampleLocations = mutableListOf<Pair<Int, Int>>()\n            ImageProcessing.pixels(surfaceOnBitmap, surfaceChangeRegion) { x, y, value ->\n                if (value >= thresholdValue && Random.nextFloat() < .05f) {\n                    sampleLocations.add(x to y)\n                }\n            }\n\n            if (sampleLocations.isEmpty()) {\n                logger.warn { \"Failed to match anything up with ${brainToMap.brainId}, bailing.\" }\n                return\n            }\n\n            val surfaceBallot = Ballot<MapperUi.VisibleSurface>()\n            var tries = 1000\n            while (surfaceBallot.totalVotes < 10 && tries-- > 0) {\n                val (x, y) = sampleLocations.random()!!\n                val visibleSurface = mapperUi.intersectingSurface(x, y, visibleSurfaces)\n                val surface = visibleSurface?.modelSurface\n                surface?.let {\n                    surfaceBallot.cast(surface.name, visibleSurface)\n                }\n            }\n\n            if (tries == 0 || surfaceBallot.noVotes()) {\n                logger.warn {\n                    \"Failed to cast sufficient votes (${surfaceBallot.totalVotes}) after 1000 tries\" +\n                        \" on ${brainToMap.brainId}, bailing.\"\n                }\n                return\n            }\n\n            //                val orderedPanels = visibleSurfaces.map { visiblePanel ->\n            //                    visiblePanel to visiblePanel.boxOnScreen.distanceTo(surfaceChangeRegion)\n            //                }.sortedBy { it.second }\n            //\n            //                mapperUi.showCandidates(orderedPanels)\n            //\n            //                val firstGuess = orderedPanels.first().first\n            val firstGuess = surfaceBallot.winner()\n            val firstGuessSurface = firstGuess.modelSurface\n\n            mapperUi.showMessage(\"$index / ${brainsToMap.size}: ${brainToMap.brainId} \u2014\u00a0surface is ${firstGuessSurface.name}?\")\n            mapperUi.showMessage2(\"Candidate panels: ${surfaceBallot.summarize()}\")\n\n            logger.info { \"Guessed panel ${firstGuessSurface.name} for ${brainToMap.brainId}\" }\n            brainToMap.guessedModelSurface = firstGuessSurface\n            brainToMap.guessedVisibleSurface = firstGuess\n            brainToMap.expectedPixelCount = firstGuessSurface.expectedPixelCount\n            brainToMap.panelDeltaBitmap = deltaBitmap.clone()\n            brainToMap.deltaImageName =\n                webSocketClient.saveImage(sessionStartTime, \"brain-${brainToMap.brainId}-$retryCount\", deltaBitmap)\n        }\n\n        private fun identifyBrainPixel(\n            pixelIndex: Int,\n            brainToMap: BrainToMap,\n            pixelOnBitmap: Bitmap,\n            deltaBitmap: Bitmap,\n            pixelOnImageName: String\n        ) {\n            mapperUi.showMessage(\"MAPPING PIXEL $pixelIndex / $maxPixelsPerBrain (${brainToMap.brainId})\u2026\")\n            val surfaceChangeRegion = brainToMap.changeRegion\n            val visibleSurface = brainToMap.guessedVisibleSurface\n\n            if (surfaceChangeRegion != null && surfaceChangeRegion.sqPix() > 0 && visibleSurface != null) {\n                mapperUi.showAfter(brainToMap.panelDeltaBitmap!!)\n\n                val analysis = ImageProcessing.diff(\n                    pixelOnBitmap,\n                    baseBitmap!!,\n                    deltaBitmap,\n                    brainToMap.panelDeltaBitmap!!,\n                    surfaceChangeRegion\n                )\n                val pixelChangeRegion = analysis.detectChangeRegion(.5f)\n                logger.debug {\n                    \"pixelChangeRegion($pixelIndex,${brainToMap.guessedModelSurface?.name} =\" +\n                            \" $pixelChangeRegion ${pixelChangeRegion.width}x${pixelChangeRegion.height}\"\n                }\n\n                mapperUi.showDiffImage(deltaBitmap, pixelChangeRegion)\n                mapperUi.showBefore(pixelOnBitmap)\n                mapperUi.showAfter(brainToMap.panelDeltaBitmap!!)\n\n                if (analysis.hasBrightSpots() && !pixelChangeRegion.isEmpty()) {\n                    val center = Vector3F(\n                        (pixelChangeRegion.centerX - surfaceChangeRegion.x0) / surfaceChangeRegion.width.toFloat(),\n                        (pixelChangeRegion.centerY - surfaceChangeRegion.y0) / surfaceChangeRegion.height.toFloat(),\n                        0f\n                    )\n\n                    visibleSurface.addPixel(\n                        pixelIndex,\n                        pixelChangeRegion.centerX.toFloat(),\n                        pixelChangeRegion.centerY.toFloat()\n                    )\n                    brainToMap.pixelMapData[pixelIndex] = PixelMapData(pixelChangeRegion, pixelOnImageName)\n                    logger.debug { \"$pixelIndex/${brainToMap.brainId}: center = $center\" }\n                } else {\n                    mapperUi.showMessage2(\"looks like no pixel $pixelIndex for ${brainToMap.brainId}\u2026\")\n                }\n            }\n        }\n    }\n\n    private suspend fun slowCamDelay() {\n        getImage()\n        getImage()\n//        getImage()\n    }\n\n    private suspend fun getBrightImageBitmap(samples: Int): Bitmap {\n        val bitmap = getImage().toBitmap()\n        for (i in 1 until samples) {\n            bitmap.lighten(getImage().toBitmap())\n        }\n        return bitmap\n    }\n\n    private fun pauseForUserInteraction(message: String = \"PRESS PLAY WHEN READY\") {\n        isPaused = true\n        mapperUi.pauseForUserInteraction()\n        mapperUi.showMessage2(message)\n    }\n\n    private suspend fun waitUntilUnpaused() {\n        while (isPaused) delay(50L)\n        mapperUi.showMessage2(\"\")\n    }\n\n    private suspend fun sendToAllReliably(\n        brains: Collection<BrainToMap>,\n        fn: (BrainToMap) -> Shader.Buffer\n    ) {\n        sendToAll(brains, fn)\n        waitForDelivery()\n    }\n\n    private fun sendToAll(\n        brains: Collection<BrainToMap>,\n        fn: (BrainToMap) -> Shader.Buffer\n    ) {\n        brains.forEach {\n            deliverer.send(it, fn(it))\n        }\n    }\n\n    private suspend fun waitForDelivery() {\n        deliverer.await()\n    }\n\n    private suspend fun retry(fn: suspend () -> Unit) {\n        fn()\n        delay(10)\n        fn()\n    }\n\n    // keep Pinky from restarting a show up while Mapper is running...\n    private fun suppressShows() {\n        suppressShowsJob = launch(CoroutineName(\"Suppress Pinky\")) {\n            while (isRunning) {\n                delay(10000L)\n                udpSocket.broadcastUdp(Ports.PINKY, MapperHelloMessage(isRunning))\n            }\n        }\n    }\n\n    private fun solidColor(color: Color): BrainShaderMessage {\n        val buf = solidColorBuffer(color)\n        return BrainShaderMessage(buf.shader, buf)\n    }\n\n    private fun solidColorBuffer(color: Color): Shader.Buffer {\n        val solidShader = SolidShader()\n        val buffer = solidShader.createBuffer(object : Surface {\n            override val pixelCount = SparkleMotion.MAX_PIXEL_COUNT\n\n            override fun describe(): String = \"Mapper surface\"\n        }).apply { this.color = color }\n        return buffer\n    }\n\n    private val deliverer = ReliableShaderMessageDeliverer()\n\n    inner class ReliableShaderMessageDeliverer {\n        val outstanding = mutableMapOf<List<Byte>, DeliveryAttempt>()\n        val pongs = Channel<PingMessage>()\n\n        fun send(brainToMap: BrainToMap, buffer: Shader.Buffer) {\n            val deliveryAttempt = DeliveryAttempt(brainToMap, buffer)\n//            logger.debug { \"attempting reliable delivery with key ${deliveryAttempt.key.stringify()}\" }\n            outstanding[deliveryAttempt.key] = deliveryAttempt\n            deliveryAttempt.attemptDelivery()\n        }\n\n        suspend fun await(retryAfterMillis: Double = 200.0, failAfterMillis: Double = 10000.0) {\n            logger.debug { \"Waiting pongs from ${outstanding.values.map { it.brainToMap.brainId }}...\" }\n\n            outstanding.values.forEach {\n                it.retryAt = it.sentAt + retryAfterMillis\n                it.failAt = it.sentAt + failAfterMillis\n            }\n\n            while (outstanding.isNotEmpty()) {\n                val waitingFor =\n                    outstanding.values.map { it.brainToMap.guessedModelSurface?.name ?: it.brainToMap.brainId }\n                        .sorted()\n                mapperUi.showMessage2(\"Waiting for PONG from ${waitingFor.joinToString(\",\")}\")\n//                logger.debug { \"pongs outstanding: ${outstanding.keys.map { it.stringify() }}\" }\n\n                var sleepUntil = Double.MAX_VALUE\n\n                val nowMs = getTimeMillis().toDouble()\n\n                outstanding.values.removeAll {\n                    if (it.failAt < nowMs) {\n                        logger.debug {\n                            \"Timed out waiting after ${nowMs - it.sentAt}ms for ${it.brainToMap.brainId}\" +\n                                \" pong ${it.key.stringify()}\"\n                        }\n                        it.failed()\n                        true\n                    } else {\n                        if (sleepUntil > it.failAt) sleepUntil = it.failAt\n\n                        if (it.retryAt < nowMs) {\n                            logger.warn {\n                                \"Haven't heard from ${it.brainToMap.brainId} after ${nowMs - it.sentAt}ms,\" +\n                                        \" retrying (attempt ${++it.retryCount})...\"\n                            }\n                            it.attemptDelivery()\n                            it.retryAt = nowMs + retryAfterMillis\n                        }\n                        if (sleepUntil > it.retryAt) sleepUntil = it.retryAt\n                        false\n                    }\n                }\n\n                val timeoutMs = sleepUntil - nowMs\n//                logger.debug { \"Before pongs.receive() withTimeout(${timeoutMs}ms)\" }\n                val pong = withTimeoutOrNull(timeoutMs.toLong()) {\n                    pongs.receive()\n                }\n\n                if (pong != null) {\n                    val pongTag = pong.data.toList()\n//                    logger.debug { \"Received pong(${pongTag.stringify()})\" }\n\n                    val deliveryAttempt = outstanding.remove(pongTag)\n                    if (deliveryAttempt != null) {\n                        deliveryAttempt.succeeded()\n                    } else {\n                        logger.warn { \"huh? no such pong tag ${pongTag.stringify()}!\" }\n                    }\n                }\n\n                mapperUi.showMessage2(\"\")\n            }\n        }\n\n        fun gotPong(pingMessage: PingMessage) {\n            launch {\n                pongs.send(pingMessage)\n            }\n        }\n    }\n\n    class TimeoutException(message: String) : Exception(message)\n\n    inner class DeliveryAttempt(val brainToMap: BrainToMap, val buffer: Shader.Buffer) {\n        private val tag = Random.nextBytes(8)\n        val key get() = tag.toList()\n        val sentAt = getTimeMillis().toDouble()\n        var retryAt = 0.0\n        var failAt = 0.0\n        var retryCount = 0\n\n        fun attemptDelivery() {\n            udpSocket.sendUdp(brainToMap.address, brainToMap.port, BrainShaderMessage(buffer.shader, buffer, tag))\n        }\n\n        fun succeeded() {\n            logger.debug { \"${brainToMap.brainId} shader message pong after ${getTimeMillis() - sentAt}ms\" }\n        }\n\n        fun failed() {\n            logger.error { \"${brainToMap.brainId} shader message pong not received after ${getTimeMillis() - sentAt}ms\" }\n        }\n    }\n\n    override fun receive(fromAddress: Network.Address, fromPort: Int, bytes: ByteArray) {\n//        logger.debug { \"Mapper received message from $fromAddress:$fromPort ${bytes[0]}\" }\n        val message = parse(bytes)\n        when (message) {\n            is BrainHelloMessage -> {\n                logger.debug { \"Heard from Brain ${message.brainId} surface=${message.surfaceName ?: \"unknown\"}\" }\n                val brainToMap = brainsToMap.getOrPut(fromAddress) { BrainToMap(fromAddress, message.brainId) }\n                mapperUi.showMessage(\"${brainsToMap.size} SURFACES DISCOVERED!\")\n                brainToMap.shade { solidColor(Color.GREEN) }\n            }\n\n            is PingMessage -> {\n                if (message.isPong) {\n                    deliverer.gotPong(message)\n                }\n            }\n        }\n    }\n\n    private fun haveImage(image: Image) {\n//        println(\"image: $image\")\n        mapperUi.showCamImage(image)\n\n        newIncomingImage = image\n    }\n\n    /**\n     * Get an image from the camera that was [we hope was] captured after the moment the method was called.\n     */\n    private suspend fun getImage(): Image {\n        newIncomingImage = null\n\n        while (newIncomingImage == null) {\n            delay(2L)\n        }\n\n        val image = newIncomingImage!!\n        newIncomingImage = null\n        return image\n    }\n\n    private suspend fun getImage(tries: Int = 5, test: (Image) -> Boolean): Image {\n        var image = getImage()\n        var remainingTries = tries - 1\n        while (!test(image) && remainingTries-- > 0) {\n            image = getImage()\n        }\n        return image\n    }\n\n    inner class BrainToMap(val address: Network.Address, val brainId: String) {\n        val port get() = Ports.BRAIN\n\n        var expectedPixelCount: Int? = null\n        val expectedPixelCountOrDefault: Int\n            get() = expectedPixelCount ?: SparkleMotion.DEFAULT_PIXEL_COUNT\n\n        var changeRegion: MediaDevices.Region? = null\n        var guessedModelSurface: Model.Surface? = null\n        var guessedVisibleSurface: MapperUi.VisibleSurface? = null\n        var panelDeltaBitmap: Bitmap? = null\n        var deltaImageName: String? = null\n        val pixelMapData: MutableMap<Int, PixelMapData> = mutableMapOf()\n        var surfaceData: MappingSession.SurfaceData? = null\n        var screenMin: Vector2F? = null\n        var screenMax: Vector2F? = null\n\n        val pixelShader = PixelShader(PixelShader.Encoding.INDEXED_2)\n        val pixelShaderBuffer = pixelShader.createBuffer(object : Surface {\n            override val pixelCount = SparkleMotion.MAX_PIXEL_COUNT\n\n            override fun describe(): String = \"Mapper surface\"\n        }).apply {\n            palette[0] = Color.BLACK\n            palette[1] = Color.WHITE\n            setAll(0)\n        }\n\n        fun shade(shaderMessage: () -> BrainShaderMessage) {\n            udpSocket.sendUdp(address, Ports.BRAIN, shaderMessage())\n        }\n    }\n\n    class PixelMapData(val pixelChangeRegion: MediaDevices.Region, val deltaImageName: String)\n\n    private class Ballot<T> {\n        private val box = hashMapOf<String, Vote<T>>()\n        var totalVotes: Int = 0\n            private set\n\n        fun cast(key: String, value: T) {\n            box.getOrPut(key) { Vote(value) }.votes++\n            totalVotes++\n        }\n\n        fun noVotes(): Boolean = box.isEmpty()\n\n        fun winner(): T {\n            return box.values.sortedByDescending { it.votes }.first().item\n        }\n\n        fun summarize(): String {\n            return box.entries\n                .sortedByDescending { (_, v) -> v.votes }\n                .map { (k, v) -> \"$k=${v.votes}\" }\n                .joinToString(\", \")\n        }\n\n        private class Vote<T>(val item: T) {\n            var votes = 0\n        }\n    }\n\n    companion object {\n        val logger = Logger(\"Mapper\")\n    }\n\n    fun List<Byte>.stringify(): String {\n        return map { (it.toInt() and 0xff).toString(16).padStart(2, '0') }.joinToString(\"\")\n    }\n}\n\ninterface MapperUi {\n    fun listen(listener: Listener)\n\n    fun addWireframe(model: Model<*>)\n    fun showCamImage(image: Image, changeRegion: MediaDevices.Region? = null)\n    fun showDiffImage(deltaBitmap: Bitmap, changeRegion: MediaDevices.Region? = null)\n    fun showMessage(message: String)\n    fun showMessage2(message: String)\n    fun showBefore(bitmap: Bitmap)\n    fun showAfter(bitmap: Bitmap)\n    fun setRedo(fn: (suspend () -> Unit)?)\n    fun lockUi(): CameraOrientation\n    fun unlockUi()\n    fun getVisibleSurfaces(): List<VisibleSurface>\n    fun showCandidates(orderedPanels: List<Pair<VisibleSurface, Float>>)\n    fun intersectingSurface(x: Int, y: Int, visibleSurfaces: List<VisibleSurface>): VisibleSurface?\n    fun showStats(total: Int, mapped: Int, visible: Int)\n    fun close()\n    fun addExistingSession(name: String)\n    fun pauseForUserInteraction()\n\n    interface Listener {\n        fun onStart()\n        fun onPause()\n        fun onStop()\n        fun onClose()\n    }\n\n    interface VisibleSurface {\n        val modelSurface: Model.Surface\n        val boxOnScreen: MediaDevices.Region\n        val pixelsInModelSpace: List<Vector3F?>\n        fun translatePixelToPanelSpace(screenX: Float, screenY: Float): Vector2F?\n        fun addPixel(pixelIndex: Int, x: Float, y: Float)\n        fun showPixels()\n        fun hidePixels()\n    }\n\n    interface CameraOrientation {\n        val cameraMatrix: Matrix4\n        val aspect: Double\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual interface Comparator<T> {\n    @JsName(\"compare\")\n    actual fun compare(a: T, b: T): Int\n}\n\npublic actual inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\n@UseExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n\n/**\n * Returns `true` if the contents of this string is equal to the word \"true\", ignoring case, and `false` otherwise.\n */\npublic actual fun String.toBoolean(): Boolean = toLowerCase() == \"true\"\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toByte(): Byte = toByteOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toByte(radix: Int): Byte = toByteOrNull(radix) ?: numberFormatError(this)\n\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toShort(): Short = toShortOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toShort(radix: Int): Short = toShortOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toInt(): Int = toIntOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toInt(radix: Int): Int = toIntOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toLong(): Long = toLongOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toLong(radix: Int): Long = toLongOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Double] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toDouble(): Double = (+(this.asDynamic())).unsafeCast<Double>().also {\n    if (it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n        numberFormatError(this)\n}\n\n/**\n * Parses the string as a [Float] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloat(): Float = toDouble().unsafeCast<Float>()\n\n/**\n * Parses the string as a [Double] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\npublic actual fun String.toDoubleOrNull(): Double? = (+(this.asDynamic())).unsafeCast<Double>().takeIf {\n    !(it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n}\n\n/**\n * Parses the string as a [Float] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloatOrNull(): Float? = toDoubleOrNull().unsafeCast<Float?>()\n\n/**\n * Returns a string representation of this [Byte] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Byte.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Short] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Short.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Int] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Int.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))\n\nprivate fun String.isNaN(): Boolean = when (this.toLowerCase()) {\n    \"nan\", \"+nan\", \"-nan\" -> true\n    else -> false\n}\n\n/**\n * Checks whether the given [radix] is valid radix for string to number and number to string conversion.\n */\n@PublishedApi\ninternal actual fun checkRadix(radix: Int): Int {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"radix $radix was not in valid range 2..36\")\n    }\n    return radix\n}\n\ninternal actual fun digitOf(char: Char, radix: Int): Int = when {\n    char >= '0' && char <= '9' -> char - '0'\n    char >= 'A' && char <= 'Z' -> char - 'A' + 10\n    char >= 'a' && char <= 'z' -> char - 'a' + 10\n    else -> -1\n}.let { if (it >= radix) -1 else it }\n","package baaahs.glsl\n\nimport baaahs.*\nimport baaahs.glsl.GlslRenderer.GlConst.GL_RGBA8\nimport com.danielgergely.kgl.*\nimport kotlin.math.max\nimport kotlin.math.min\n\nopen class GlslRenderer(\n    val gl: Kgl,\n    private val contextSwitcher: ContextSwitcher,\n    private val program: Program,\n    private val uvTranslator: UvTranslator\n) {\n    private val surfacesToAdd: MutableList<GlslSurface> = mutableListOf()\n    private val fbMaxPixWidth = 1024\n    var pixelCount: Int = 0\n    var nextPixelOffset: Int = 0\n    var nextRectOffset: Int = 0\n\n    private val glslSurfaces: MutableList<GlslSurface> = mutableListOf()\n\n    private val uvCoordTextureId = program.obtainTextureId()\n    private val rendererPlugins = program.plugins.mapNotNull { it.forRender() }\n\n    var arrangement: Arrangement\n\n    private val uvCoordsUniform: Uniform = gl { Uniform.find(program, \"sm_uvCoords\") ?: throw Exception(\"no sm_uvCoords uniform!\")}\n    private val resolutionUniform: Uniform? = gl { Uniform.find(program, \"resolution\") }\n    private val timeUniform: Uniform? = gl { Uniform.find(program, \"time\") }\n\n    val stats = Stats()\n\n    init {\n        gl { gl.clearColor(0f, .5f, 0f, 1f) }\n\n        arrangement = createArrangement(0, FloatArray(0), glslSurfaces)\n    }\n\n    fun addSurface(surface: Surface): GlslSurface? {\n        val surfacePixels = SurfacePixels(surface, nextPixelOffset)\n        val rects = mapSurfaceToRects(nextPixelOffset, fbMaxPixWidth, surface)\n        val glslSurface = GlslSurface(surfacePixels, Uniforms(), nextRectOffset, rects, uvTranslator)\n        nextPixelOffset += surface.pixelCount\n        nextRectOffset += glslSurface.rects.size\n\n        surfacesToAdd.add(glslSurface)\n        return glslSurface\n    }\n\n    inner class SurfacePixels(\n        surface: Surface, pixel0Index: Int\n    ) : baaahs.glsl.SurfacePixels(surface, pixel0Index) {\n        override fun get(i: Int): Color = arrangement.getPixel(pixel0Index + i)\n    }\n\n    private fun createArrangement(pixelCount: Int, uvCoords: FloatArray, surfaceCount: List<GlslSurface>): Arrangement =\n        Arrangement(pixelCount, uvCoords, surfaceCount.toList())\n\n    fun draw() {\n        withGlContext {\n            program.bind()\n            stats.addSurfacesMs += timeSync { incorporateNewSurfaces() }\n            stats.bindFbMs += timeSync { arrangement.bindFramebuffer() }\n            stats.renderMs += timeSync { render() }\n            stats.readPxMs += timeSync { arrangement.copyToPixelBuffer() }\n        }\n\n        stats.frameCount++\n    }\n\n    private fun render() {\n        val thisTime = (getTimeMillis() and 0x7ffffff).toFloat() / 1000.0f\n\n        resolutionUniform?.set(1f, 1f)\n        timeUniform?.set(thisTime)\n\n        arrangement.bindUvCoordTexture(uvCoordsUniform)\n\n        rendererPlugins.forEach { it.before() }\n\n        gl.viewport(0, 0, arrangement.pixWidth, arrangement.pixHeight)\n        gl.clear(GL_COLOR_BUFFER_BIT or GL_DEPTH_BUFFER_BIT)\n\n        arrangement.render()\n\n        rendererPlugins.forEach { it.after() }\n\n        gl.finish()\n\n        val programLog = program.getInfoLog() ?: \"\"\n        if (programLog.isNotEmpty()) println(\"ProgramInfoLog: $programLog\")\n    }\n\n    protected fun incorporateNewSurfaces() {\n        if (surfacesToAdd.isNotEmpty()) {\n            val oldUvCoords = arrangement.uvCoords\n            val newPixelCount = nextPixelOffset\n\n            arrangement.release()\n\n            val newUvCoords = FloatArray(newPixelCount.bufSize * 2)\n            oldUvCoords.copyInto(newUvCoords)\n\n            surfacesToAdd.forEach {\n                val surface = it.pixels.surface\n                val pixelLocations = LinearSurfacePixelStrategy.forSurface(surface)\n                val uvTranslator = it.uvTranslator.forPixels(pixelLocations)\n\n                var outOfBounds = 0\n                var outOfBoundsU = 0\n                var outOfBoundsV = 0\n                for (i in 0 until uvTranslator.pixelCount) {\n                    val uvOffset = (it.pixels.pixel0Index + i) * 2\n                    val (u, v) = uvTranslator.getUV(i)\n                    newUvCoords[uvOffset] = u     // u\n                    newUvCoords[uvOffset + 1] = v // v\n\n                    val uOut = u < 0f || u > 1f\n                    val vOut = v < 0f || v > 1f\n                    if (uOut || vOut) outOfBounds++\n                    if (uOut) outOfBoundsU++\n                    if (vOut) outOfBoundsV++\n                }\n                if (outOfBoundsU > 0 || outOfBoundsV > 0) {\n                    logger.warn {\n                        \"Surface ${surface.describe()} has $outOfBounds points (of ${uvTranslator.pixelCount})\" +\n                                \" outside the model (u=$outOfBoundsU v=$outOfBoundsV)\"\n                    }\n                }\n            }\n\n            glslSurfaces.addAll(surfacesToAdd)\n            surfacesToAdd.clear()\n\n            arrangement = createArrangement(newPixelCount, newUvCoords, glslSurfaces)\n            arrangement.bindUvCoordTexture(uvCoordsUniform)\n\n            pixelCount = newPixelCount\n            println(\"Now managing $pixelCount pixels.\")\n        }\n    }\n\n    fun release() {\n        rendererPlugins.forEach { it.release() }\n        arrangement.release()\n    }\n\n    companion object {\n        private val logger = Logger(\"GlslRenderer\")\n\n        /** Resulting Rect is in pixel coordinates starting at (0,0) with Y increasing. */\n        internal fun mapSurfaceToRects(nextPix: Int, pixWidth: Int, surface: Surface): List<Quad.Rect> {\n            fun makeQuad(offsetPix: Int, widthPix: Int): Quad.Rect {\n                val xStartPixel = offsetPix % pixWidth\n                val yStartPixel = offsetPix / pixWidth\n                val xEndPixel = xStartPixel + widthPix\n                val yEndPixel = yStartPixel + 1\n                return Quad.Rect(yStartPixel.toFloat(), xStartPixel.toFloat(), yEndPixel.toFloat(), xEndPixel.toFloat())\n            }\n\n            var nextPixelOffset = nextPix\n            var pixelsLeft = surface.pixelCount\n            val rects = mutableListOf<Quad.Rect>()\n            while (pixelsLeft > 0) {\n                val rowPixelOffset = nextPixelOffset % pixWidth\n                val rowPixelsLeft = pixWidth - rowPixelOffset\n                val rowPixelsTaken = min(pixelsLeft, rowPixelsLeft)\n                rects.add(makeQuad(nextPixelOffset, rowPixelsTaken))\n\n                nextPixelOffset += rowPixelsTaken\n                pixelsLeft -= rowPixelsTaken\n            }\n            return rects\n        }\n    }\n\n    inner class Arrangement(val pixelCount: Int, val uvCoords: FloatArray, val surfaces: List<GlslSurface>) {\n        val pixWidth = pixelCount.bufWidth\n        val pixHeight = pixelCount.bufHeight\n\n        private val uniformSetters: List<UniformSetter> =\n            program.params.map { param -> UniformSetter(program, param) }\n\n        private val uvCoordTexture = gl { gl.createTexture() }\n        private val frameBuffer = gl { gl.createFramebuffer() }\n        private val renderBuffer = gl { gl.createRenderbuffer() }\n        private val pixelBuffer = ByteBuffer(pixelCount.bufSize * 4)\n        private val uvCoordsFloatBuffer = FloatBuffer(uvCoords)\n        private val quad: Quad = gl { Quad(gl, program, surfaces.flatMap {\n            it.rects.map { rect ->\n                // Remap from pixel coordinates to normalized device coordinates.\n               Quad.Rect(\n                    -(rect.top / pixHeight * 2 - 1),\n                    rect.left / pixWidth * 2 - 1,\n                    -(rect.bottom / pixHeight * 2 - 1),\n                    rect.right / pixWidth * 2 - 1\n                )\n            }\n        }) }\n\n        fun bindFramebuffer() {\n            gl.checkForGlError()\n            gl { gl.bindFramebuffer(GL_FRAMEBUFFER, frameBuffer) }\n\n            gl { gl.bindRenderbuffer(GL_RENDERBUFFER, renderBuffer) }\n//            logger.debug { \"pixel count: $pixelCount ($pixWidth x $pixHeight = ${pixelCount.bufSize})\" }\n            gl { gl.renderbufferStorage(GL_RENDERBUFFER, GL_RGBA8, pixWidth, pixHeight) }\n            gl { gl.framebufferRenderbuffer(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_RENDERBUFFER, renderBuffer) }\n\n            val status = gl { gl.checkFramebufferStatus(GL_FRAMEBUFFER) }\n            if (status != GL_FRAMEBUFFER_COMPLETE) {\n                println(RuntimeException(\"FrameBuffer huh? $status\").message)\n            }\n        }\n\n        fun bindUvCoordTexture(uvCoordsLocation: Uniform) {\n            gl { gl.activeTexture(GL_TEXTURE0 + uvCoordTextureId) }\n            gl { gl.bindTexture(GL_TEXTURE_2D, uvCoordTexture) }\n            gl { gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST) }\n            gl { gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST) }\n            gl {\n                gl.texImage2D(\n                    GL_TEXTURE_2D, 0,\n                    GL_R32F, pixWidth * 2, pixHeight, 0,\n                    GL_RED,\n                    GL_FLOAT, uvCoordsFloatBuffer\n                )\n            }\n            uvCoordsLocation.set(uvCoordTextureId)\n        }\n\n        fun getPixel(pixelIndex: Int): Color {\n            val offset = pixelIndex * 4\n            return Color(\n                red = pixelBuffer[offset],\n                green = pixelBuffer[offset + 1],\n                blue = pixelBuffer[offset + 2],\n                alpha = pixelBuffer[offset + 3]\n            )\n        }\n\n        fun copyToPixelBuffer() {\n            gl.readPixels(0, 0, pixWidth, pixHeight, GL_RGBA, GL_UNSIGNED_BYTE, pixelBuffer)\n        }\n\n        fun release() {\n            println(\"Release $this with $pixelCount pixels and ${uvCoords.size} uvs\")\n\n            quad.release()\n\n            gl { gl.bindRenderbuffer(GL_RENDERBUFFER, null) }\n            gl { gl.bindFramebuffer(GL_FRAMEBUFFER, null) }\n            gl { gl.bindTexture(GL_TEXTURE_2D, null) }\n\n            gl { gl.deleteFramebuffer(frameBuffer) }\n            gl { gl.deleteRenderbuffer(renderBuffer) }\n            gl { gl.deleteTexture(uvCoordTexture) }\n        }\n\n        fun render() {\n            quad.prepareToRender {\n                surfaces.forEach { surface ->\n                    updateUniformsForSurface(surface)\n\n                    surface.rects.indices.forEach { i ->\n                        quad.renderRect(surface.rect0Index + i)\n                    }\n                }\n            }\n        }\n\n        private fun updateUniformsForSurface(surface: GlslSurface) {\n            program.params.forEachIndexed { paramIndex, param ->\n                val value = surface.uniforms.values?.get(paramIndex)\n                value?.let {\n                    uniformSetters[paramIndex].set(value)\n                }\n            }\n        }\n    }\n\n    val Int.bufWidth: Int get() = max(1, min(this, fbMaxPixWidth))\n    val Int.bufHeight: Int get() = this / fbMaxPixWidth + 1\n    val Int.bufSize: Int get() = bufWidth * bufHeight\n\n    inner class Uniforms {\n        var values: Array<Any?>? = null\n\n        fun updateFrom(values: Array<Any?>) {\n            this.values = values\n        }\n    }\n\n    inline fun <T> gl(fn: () -> T): T {\n        val result = fn.invoke()\n        gl.checkForGlError()\n        return result\n    }\n\n    private fun <T> withGlContext(fn: () -> T): T {\n        return contextSwitcher.inContext { fn() }\n    }\n\n    interface ContextSwitcher {\n        fun <T> inContext(fn: () -> T): T\n    }\n\n    class Stats {\n        var addSurfacesMs = 0; internal set\n        var bindFbMs = 0; internal set\n        var renderMs = 0; internal set\n        var readPxMs = 0; internal set\n        var frameCount = 0; internal set\n\n        fun dump() {\n            println(\n                \"Render of $frameCount frames took: \" +\n                        \"addSurface=${addSurfacesMs}ms \" +\n                        \"bindFbMs=${bindFbMs}ms \" +\n                        \"renderMs=${renderMs}ms \" +\n                        \"readPxMs=${readPxMs}ms \" +\n                        \"$this\"\n            )\n        }\n\n        fun reset() {\n            addSurfacesMs = 0\n            bindFbMs = 0\n            renderMs = 0\n            readPxMs = 0\n            frameCount = 0\n        }\n    }\n\n    object GlConst {\n        val GL_RGBA8 = 0x8058\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    this.asDynamic().fill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n","package baaahs.io\n\nimport kotlin.math.min\n\nclass ByteArrayReader(val bytes: ByteArray, offset: Int = 0) {\n    var offset = offset\n        set(value) {\n            if (value > bytes.size) {\n                throw IllegalStateException(\"array index out of bounds\")\n            }\n            field = value\n        }\n\n    fun readBoolean(): Boolean = bytes[offset++].toInt() != 0\n\n    fun readByte(): Byte = bytes[offset++]\n\n    fun readShort(): Short =\n        (bytes[offset++].toInt() and 0xff shl 8)\n            .or(bytes[offset++].toInt() and 0xff).toShort()\n\n    fun readChar(): Char = readShort().toChar()\n\n    fun readInt(): Int =\n        (bytes[offset++].toInt() and 0xff shl 24)\n            .or(bytes[offset++].toInt() and 0xff shl 16)\n            .or(bytes[offset++].toInt() and 0xff shl 8)\n            .or(bytes[offset++].toInt() and 0xff)\n\n    fun readLong(): Long =\n        (readInt().toLong() and 0xffffffff shl 32)\n            .or(readInt().toLong() and 0xffffffff)\n\n    fun readFloat(): Float = Float.fromBits(readInt())\n\n    fun readString(): String = readBytes().decodeToString()\n\n    fun readNullableString(): String? = if (readBoolean()) readString() else null\n\n    fun readBytes(): ByteArray {\n        val count = readInt()\n        return readNBytes(count)\n    }\n\n    fun readNBytes(count: Int): ByteArray {\n        val bytes = bytes.copyOfRange(offset, offset + count)\n        offset += count\n        return bytes\n    }\n\n    fun readNBytes(dest: ByteArray): ByteArray {\n        val bytes = bytes.copyInto(dest,\n            destinationOffset = 0, startIndex = offset, endIndex = offset + dest.size)\n        offset += dest.size\n        return bytes\n    }\n\n    /**\n     * Reads up to as many bytes as are present in `buffer`, or as many bytes are available in the incoming byte array,\n     * and returns the number of bytes actually read. Any unread incoming bytes are skipped.\n     */\n    fun readBytes(buffer: ByteArray): Int {\n        val count = readInt()\n        val toCopy = min(buffer.size, count)\n        bytes.copyInto(buffer, 0, offset, offset + toCopy)\n        offset += count\n        return toCopy\n    }\n\n    fun hasMoreBytes(): Boolean = offset < bytes.size\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive), 0 by default.\n * @param toIndex the end of the range (exclusive), size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Array<out T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.scanReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.scanReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.scanReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.scanReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.scanReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.scanReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.scanReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.scanReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,"package baaahs.shows\n\nimport baaahs.*\nimport baaahs.gadgets.PalettePicker\nimport baaahs.gadgets.Slider\nimport baaahs.shaders.CompositingMode\nimport baaahs.shaders.CompositorShader\nimport baaahs.shaders.SolidShader\nimport baaahs.shaders.SparkleShader\n\nobject PanelTweenShow : Show(\"PanelTweenShow\") {\n    override fun createRenderer(model: Model<*>, showRunner: ShowRunner): Renderer {\n        val initialColors = listOf(\n            Color.from(\"#FF8A47\"),\n            Color.from(\"#FC6170\"),\n            Color.from(\"#8CEEEE\"),\n            Color.from(\"#26BFBF\"),\n            Color.from(\"#FFD747\")\n        )\n\n        return object : Renderer {\n            val palettePicker = showRunner.getGadget(\"palette\", PalettePicker(\"Palette\", initialColors))\n            val slider = showRunner.getGadget(\"sparkliness\", Slider(\"Sparkliness\", .01f, 0f, 1f, 0.01f ))\n\n            val solidShader = SolidShader()\n            val sparkleShader = SparkleShader()\n\n            val shaderBuffers = showRunner.allSurfaces.map { surface ->\n                val solidShaderBuffer = showRunner.getShaderBuffer(surface, solidShader)\n                val sparkleShaderBuffer = showRunner.getShaderBuffer(surface, sparkleShader)\n                val compositorShaderBuffer = showRunner.getCompositorBuffer(\n                    surface, solidShaderBuffer, sparkleShaderBuffer, CompositingMode.ADD, 1f\n                )\n\n                Shaders(solidShaderBuffer, sparkleShaderBuffer, compositorShaderBuffer)\n            }\n            val fadeTimeMs = 500\n\n            override fun nextFrame() {\n                val now = getTimeMillis().and(0xfffffff).toInt()\n                val colors = palettePicker.colors\n                shaderBuffers.forEachIndexed() { number, bufs ->\n                    val colorIndex = (now / fadeTimeMs + number) % colors.size\n                    val startColor = colors[colorIndex]\n                    val endColor = colors[(colorIndex + 1) % colors.size]\n                    val tweenedColor = startColor.fade(endColor, (now % fadeTimeMs) / fadeTimeMs.toFloat())\n\n                    bufs.apply {\n                        solidShader.color = tweenedColor\n\n                        sparkleShader.color = Color.WHITE\n                        sparkleShader.sparkliness = slider.value / 3\n                    }\n                }\n            }\n        }\n    }\n\n    class Shaders(\n        val solidShader: SolidShader.Buffer,\n        val sparkleShader: SparkleShader.Buffer,\n        val compositorShader: CompositorShader.Buffer\n    )\n}\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n/**\r\n * Anchor\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.a(href : String? = null, target : String? = null, classes : String? = null, crossinline block : A.() -> Unit = {}) : T = A(attributesMapOf(\"href\", href,\"target\", target,\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Abbreviated form (e.g., WWW, HTTP,etc.)\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.abbr(classes : String? = null, crossinline block : ABBR.() -> Unit = {}) : T = ABBR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Information on author\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.address(classes : String? = null, crossinline block : ADDRESS.() -> Unit = {}) : T = ADDRESS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Client-side image map area\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, crossinline block : AREA.() -> Unit = {}) : T = AREA(attributesMapOf(\"Shape\", shape?.enumEncode(),\"alt\", alt,\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Self-contained syndicatable or reusable composition\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.article(classes : String? = null, crossinline block : ARTICLE.() -> Unit = {}) : T = ARTICLE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Sidebar for tangentially related content\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.aside(classes : String? = null, crossinline block : ASIDE.() -> Unit = {}) : T = ASIDE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Audio player\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.audio(classes : String? = null, crossinline block : AUDIO.() -> Unit = {}) : T = AUDIO(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Bold text style\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.b(classes : String? = null, crossinline block : B.() -> Unit = {}) : T = B(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Document base URI\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.base(classes : String? = null, crossinline block : BASE.() -> Unit = {}) : T = BASE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Text directionality isolation\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.bdi(classes : String? = null, crossinline block : BDI.() -> Unit = {}) : T = BDI(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * I18N BiDi over-ride\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.bdo(classes : String? = null, crossinline block : BDO.() -> Unit = {}) : T = BDO(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Long quotation\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.blockQuote(classes : String? = null, crossinline block : BLOCKQUOTE.() -> Unit = {}) : T = BLOCKQUOTE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Document body\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.body(classes : String? = null, crossinline block : BODY.() -> Unit = {}) : T = BODY(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Forced line break\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.br(classes : String? = null, crossinline block : BR.() -> Unit = {}) : T = BR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Push button\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON.() -> Unit = {}) : T = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"type\", type?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Scriptable bitmap canvas\r\n */\r\n@HtmlTagMarker\r\nfun <T, C : TagConsumer<T>> C.canvas(classes : String? = null, content : String = \"\") : T = CANVAS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content})\r\n/**\r\n * Scriptable bitmap canvas\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.canvas(classes : String? = null, crossinline block : CANVAS.() -> Unit = {}) : T = CANVAS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Table caption\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.caption(classes : String? = null, crossinline block : CAPTION.() -> Unit = {}) : T = CAPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Citation\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.cite(classes : String? = null, crossinline block : CITE.() -> Unit = {}) : T = CITE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Computer code fragment\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.code(classes : String? = null, crossinline block : CODE.() -> Unit = {}) : T = CODE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Table column\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.col(classes : String? = null, crossinline block : COL.() -> Unit = {}) : T = COL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Table column group\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.colGroup(classes : String? = null, crossinline block : COLGROUP.() -> Unit = {}) : T = COLGROUP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.command(type : CommandType? = null, classes : String? = null, crossinline block : COMMAND.() -> Unit = {}) : T = COMMAND(attributesMapOf(\"type\", type?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Container for options for \r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.dataList(classes : String? = null, crossinline block : DATALIST.() -> Unit = {}) : T = DATALIST(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Definition description\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.dd(classes : String? = null, crossinline block : DD.() -> Unit = {}) : T = DD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Deleted text\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.del(classes : String? = null, crossinline block : DEL.() -> Unit = {}) : T = DEL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Disclosure control for hiding details\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.details(classes : String? = null, crossinline block : DETAILS.() -> Unit = {}) : T = DETAILS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Instance definition\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.dfn(classes : String? = null, crossinline block : DFN.() -> Unit = {}) : T = DFN(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Dialog box or window\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.dialog(classes : String? = null, crossinline block : DIALOG.() -> Unit = {}) : T = DIALOG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Generic language/style container\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.div(classes : String? = null, crossinline block : DIV.() -> Unit = {}) : T = DIV(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Definition list\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.dl(classes : String? = null, crossinline block : DL.() -> Unit = {}) : T = DL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Definition term\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.dt(classes : String? = null, crossinline block : DT.() -> Unit = {}) : T = DT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Emphasis\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.em(classes : String? = null, crossinline block : EM.() -> Unit = {}) : T = EM(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Plugin\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.embed(classes : String? = null, crossinline block : EMBED.() -> Unit = {}) : T = EMBED(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Form control group\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.fieldSet(classes : String? = null, crossinline block : FIELDSET.() -> Unit = {}) : T = FIELDSET(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Caption for \r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.figcaption(classes : String? = null, crossinline block : FIGCAPTION.() -> Unit = {}) : T = FIGCAPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Figure with optional caption\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.figure(classes : String? = null, crossinline block : FIGURE.() -> Unit = {}) : T = FIGURE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Footer for a page or section\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.footer(classes : String? = null, crossinline block : FOOTER.() -> Unit = {}) : T = FOOTER(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Interactive form\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.form(action : String? = null, encType : FormEncType? = null, method : FormMethod? = null, classes : String? = null, crossinline block : FORM.() -> Unit = {}) : T = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", method?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.h1(classes : String? = null, crossinline block : H1.() -> Unit = {}) : T = H1(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.h2(classes : String? = null, crossinline block : H2.() -> Unit = {}) : T = H2(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.h3(classes : String? = null, crossinline block : H3.() -> Unit = {}) : T = H3(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.h4(classes : String? = null, crossinline block : H4.() -> Unit = {}) : T = H4(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.h5(classes : String? = null, crossinline block : H5.() -> Unit = {}) : T = H5(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.h6(classes : String? = null, crossinline block : H6.() -> Unit = {}) : T = H6(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\r\n@Suppress(\"DEPRECATION\")\r\n/**\r\n * Document head\r\n */\r\n@HtmlTagMarker\r\nfun <T, C : TagConsumer<T>> C.head(content : String = \"\") : T = HEAD(emptyMap, this).visitAndFinalize(this, {+content})\r\n/**\r\n * Document head\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.head(crossinline block : HEAD.() -> Unit = {}) : T = HEAD(emptyMap, this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Introductory or navigational aids for a page or section\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.header(classes : String? = null, crossinline block : HEADER.() -> Unit = {}) : T = HEADER(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.hGroup(classes : String? = null, crossinline block : HGROUP.() -> Unit = {}) : T = HGROUP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Horizontal rule\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.hr(classes : String? = null, crossinline block : HR.() -> Unit = {}) : T = HR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\r\n@Suppress(\"DEPRECATION\")\r\n/**\r\n * Document root element\r\n */\r\n@HtmlTagMarker\r\nfun <T, C : TagConsumer<T>> C.html(content : String = \"\", namespace : String? = null) : T = HTML(emptyMap, this, namespace).visitAndFinalize(this, {+content})\r\n/**\r\n * Document root element\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.html(namespace : String? = null, crossinline block : HTML.() -> Unit = {}) : T = HTML(emptyMap, this, namespace).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Italic text style\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.i(classes : String? = null, crossinline block : I.() -> Unit = {}) : T = I(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Inline subwindow\r\n */\r\n@HtmlTagMarker\r\nfun <T, C : TagConsumer<T>> C.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = \"\") : T = IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, {+content})\r\n/**\r\n * Inline subwindow\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.iframe(sandbox : IframeSandbox? = null, classes : String? = null, crossinline block : IFRAME.() -> Unit = {}) : T = IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Embedded image\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.img(alt : String? = null, src : String? = null, classes : String? = null, crossinline block : IMG.() -> Unit = {}) : T = IMG(attributesMapOf(\"alt\", alt,\"src\", src,\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Form control\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : T = INPUT(attributesMapOf(\"type\", type?.enumEncode(),\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Inserted text\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.ins(classes : String? = null, crossinline block : INS.() -> Unit = {}) : T = INS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Text to be entered by the user\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.kbd(classes : String? = null, crossinline block : KBD.() -> Unit = {}) : T = KBD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Cryptographic key-pair generator form control\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, crossinline block : KEYGEN.() -> Unit = {}) : T = KEYGEN(attributesMapOf(\"keytype\", keyType?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Form field label text\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.label(classes : String? = null, crossinline block : LABEL.() -> Unit = {}) : T = LABEL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Fieldset legend\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.legend(classes : String? = null, crossinline block : LEGEND.() -> Unit = {}) : T = LEGEND(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * List item\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.li(classes : String? = null, crossinline block : LI.() -> Unit = {}) : T = LI(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * A media-independent link\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.link(href : String? = null, rel : String? = null, type : String? = null, crossinline block : LINK.() -> Unit = {}) : T = LINK(attributesMapOf(\"href\", href,\"rel\", rel,\"type\", type), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Container for the dominant contents of another element\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.main(classes : String? = null, crossinline block : MAIN.() -> Unit = {}) : T = MAIN(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Client-side image map\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.map(name : String? = null, classes : String? = null, crossinline block : MAP.() -> Unit = {}) : T = MAP(attributesMapOf(\"name\", name,\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Highlight\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.mark(classes : String? = null, crossinline block : MARK.() -> Unit = {}) : T = MARK(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.math(classes : String? = null, crossinline block : MATH.() -> Unit = {}) : T = MATH(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@HtmlTagMarker\r\nfun <T, C : TagConsumer<T>> C.mathml(classes : String? = null, content : String = \"\") : T = MATHML(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content})\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.mathml(classes : String? = null, crossinline block : MATHML.() -> Unit = {}) : T = MATHML(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Generic metainformation\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.meta(name : String? = null, content : String? = null, charset : String? = null, crossinline block : META.() -> Unit = {}) : T = META(attributesMapOf(\"name\", name,\"content\", content,\"charset\", charset), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Gauge\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.meter(classes : String? = null, crossinline block : METER.() -> Unit = {}) : T = METER(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Section with navigational links\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.nav(classes : String? = null, crossinline block : NAV.() -> Unit = {}) : T = NAV(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Generic metainformation\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.noScript(classes : String? = null, crossinline block : NOSCRIPT.() -> Unit = {}) : T = NOSCRIPT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Generic embedded object\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.htmlObject(classes : String? = null, crossinline block : OBJECT.() -> Unit = {}) : T = OBJECT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Ordered list\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.ol(classes : String? = null, crossinline block : OL.() -> Unit = {}) : T = OL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Option group\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.optGroup(label : String? = null, classes : String? = null, crossinline block : OPTGROUP.() -> Unit = {}) : T = OPTGROUP(attributesMapOf(\"label\", label,\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Selectable choice\r\n */\r\n@HtmlTagMarker\r\nfun <T, C : TagConsumer<T>> C.option(classes : String? = null, content : String = \"\") : T = OPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content})\r\n/**\r\n * Selectable choice\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.option(classes : String? = null, crossinline block : OPTION.() -> Unit = {}) : T = OPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Calculated output value\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.output(classes : String? = null, crossinline block : OUTPUT.() -> Unit = {}) : T = OUTPUT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Paragraph\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.p(classes : String? = null, crossinline block : P.() -> Unit = {}) : T = P(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Named property value\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.param(name : String? = null, value : String? = null, crossinline block : PARAM.() -> Unit = {}) : T = PARAM(attributesMapOf(\"name\", name,\"value\", value), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Preformatted text\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.pre(classes : String? = null, crossinline block : PRE.() -> Unit = {}) : T = PRE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Progress bar\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.progress(classes : String? = null, crossinline block : PROGRESS.() -> Unit = {}) : T = PROGRESS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Short inline quotation\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.q(classes : String? = null, crossinline block : Q.() -> Unit = {}) : T = Q(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Parenthesis for ruby annotation text\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.rp(classes : String? = null, crossinline block : RP.() -> Unit = {}) : T = RP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Ruby annotation text\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.rt(classes : String? = null, crossinline block : RT.() -> Unit = {}) : T = RT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Ruby annotation(s)\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.ruby(classes : String? = null, crossinline block : RUBY.() -> Unit = {}) : T = RUBY(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Strike-through text style\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.samp(classes : String? = null, crossinline block : SAMP.() -> Unit = {}) : T = SAMP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\r\n@Suppress(\"DEPRECATION\")\r\n/**\r\n * Script statements\r\n */\r\n@HtmlTagMarker\r\nfun <T, C : TagConsumer<T>> C.script(type : String? = null, src : String? = null, content : String = \"\") : T = SCRIPT(attributesMapOf(\"type\", type,\"src\", src), this).visitAndFinalize(this, {+content})\r\n/**\r\n * Script statements\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.script(type : String? = null, src : String? = null, crossinline block : SCRIPT.() -> Unit = {}) : T = SCRIPT(attributesMapOf(\"type\", type,\"src\", src), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Generic document or application section\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.section(classes : String? = null, crossinline block : SECTION.() -> Unit = {}) : T = SECTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Option selector\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.select(classes : String? = null, crossinline block : SELECT.() -> Unit = {}) : T = SELECT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Small text style\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.small(classes : String? = null, crossinline block : SMALL.() -> Unit = {}) : T = SMALL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Media source for \r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.source(classes : String? = null, crossinline block : SOURCE.() -> Unit = {}) : T = SOURCE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Generic language/style container\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.span(classes : String? = null, crossinline block : SPAN.() -> Unit = {}) : T = SPAN(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Strong emphasis\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.strong(classes : String? = null, crossinline block : STRONG.() -> Unit = {}) : T = STRONG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\r\n@Suppress(\"DEPRECATION\")\r\n/**\r\n * Style info\r\n */\r\n@HtmlTagMarker\r\nfun <T, C : TagConsumer<T>> C.style(type : String? = null, content : String = \"\") : T = STYLE(attributesMapOf(\"type\", type), this).visitAndFinalize(this, {+content})\r\n/**\r\n * Style info\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.style(type : String? = null, crossinline block : STYLE.() -> Unit = {}) : T = STYLE(attributesMapOf(\"type\", type), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Subscript\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.sub(classes : String? = null, crossinline block : SUB.() -> Unit = {}) : T = SUB(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Superscript\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.sup(classes : String? = null, crossinline block : SUP.() -> Unit = {}) : T = SUP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@HtmlTagMarker\r\nfun <T, C : TagConsumer<T>> C.svg(classes : String? = null, content : String = \"\") : T = SVG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content})\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.svg(classes : String? = null, crossinline block : SVG.() -> Unit = {}) : T = SVG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * \r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.table(classes : String? = null, crossinline block : TABLE.() -> Unit = {}) : T = TABLE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Table body\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.tbody(classes : String? = null, crossinline block : TBODY.() -> Unit = {}) : T = TBODY(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Table data cell\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.td(classes : String? = null, crossinline block : TD.() -> Unit = {}) : T = TD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Multi-line text field\r\n */\r\n@HtmlTagMarker\r\nfun <T, C : TagConsumer<T>> C.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = \"\") : T = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", wrap?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, {+content})\r\n/**\r\n * Multi-line text field\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, crossinline block : TEXTAREA.() -> Unit = {}) : T = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", wrap?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Table footer\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.tfoot(classes : String? = null, crossinline block : TFOOT.() -> Unit = {}) : T = TFOOT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Table header cell\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.th(scope : ThScope? = null, classes : String? = null, crossinline block : TH.() -> Unit = {}) : T = TH(attributesMapOf(\"scope\", scope?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Table header\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.thead(classes : String? = null, crossinline block : THEAD.() -> Unit = {}) : T = THEAD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Machine-readable equivalent of date- or time-related data\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.time(classes : String? = null, crossinline block : TIME.() -> Unit = {}) : T = TIME(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Document title\r\n */\r\n@HtmlTagMarker\r\nfun <T, C : TagConsumer<T>> C.title(content : String = \"\") : T = TITLE(emptyMap, this).visitAndFinalize(this, {+content})\r\n/**\r\n * Document title\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.title(crossinline block : TITLE.() -> Unit = {}) : T = TITLE(emptyMap, this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Table row\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : T = TR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Unordered list\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.ul(classes : String? = null, crossinline block : UL.() -> Unit = {}) : T = UL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Unordered list\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.htmlVar(classes : String? = null, crossinline block : VAR.() -> Unit = {}) : T = VAR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Video player\r\n */\r\n@HtmlTagMarker\r\ninline fun <T, C : TagConsumer<T>> C.video(classes : String? = null, crossinline block : VIDEO.() -> Unit = {}) : T = VIDEO(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n","package kotlinx.html\r\n\r\nimport org.w3c.dom.events.*\r\n\r\ninterface TagConsumer<out R> {\r\n    fun onTagStart(tag: Tag)\r\n    fun onTagAttributeChange(tag: Tag, attribute: String, value: String?)\r\n    fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit)\r\n    fun onTagEnd(tag: Tag)\r\n    fun onTagContent(content: CharSequence)\r\n    fun onTagContentEntity(entity: Entities)\r\n    fun onTagContentUnsafe(block: Unsafe.() -> Unit)\r\n    fun onTagComment(content: CharSequence)\r\n    fun onTagError(tag: Tag, exception: Throwable): Unit = throw exception\r\n    fun finalize(): R\r\n}\r\n\r\n@HtmlTagMarker\r\ninterface Tag {\r\n    val tagName: String\r\n    val consumer: TagConsumer<*>\r\n    val namespace: String?\r\n\r\n    val attributes: MutableMap<String, String>\r\n    val attributesEntries: Collection<Map.Entry<String, String>>\r\n\r\n    val inlineTag: Boolean\r\n    val emptyTag: Boolean\r\n\r\n    operator fun Entities.unaryPlus(): Unit {\r\n        entity(this)\r\n    }\r\n\r\n    operator fun String.unaryPlus(): Unit {\r\n        text(this)\r\n    }\r\n\r\n    fun text(s: String) {\r\n        consumer.onTagContent(s)\r\n    }\r\n\r\n    fun text(n: Number) {\r\n        text(n.toString())\r\n    }\r\n\r\n    fun entity(e: Entities) {\r\n        consumer.onTagContentEntity(e)\r\n    }\r\n\r\n    fun comment(s: String) {\r\n        consumer.onTagComment(s)\r\n    }\r\n}\r\n\r\n@HtmlTagMarker\r\ninterface Unsafe {\r\n    operator fun String.unaryPlus()\r\n    operator fun Entities.unaryPlus() = +text\r\n\r\n    fun raw(s: String) {\r\n        +s\r\n    }\r\n\r\n    fun raw(entity: Entities) {\r\n        +entity\r\n    }\r\n\r\n    fun raw(n: Number) {\r\n        +n.toString()\r\n    }\r\n}\r\n\r\ninterface AttributeEnum {\r\n    val realValue: String\r\n}\r\n\r\ninline fun <T : Tag> T.visit(crossinline block: T.() -> Unit) = visitTag { block() }\r\n\r\ninline fun <T : Tag, R> T.visitAndFinalize(consumer: TagConsumer<R>, crossinline block: T.() -> Unit): R\r\n        = visitTagAndFinalize(consumer) { block() }\r\n\r\nfun attributesMapOf() = emptyMap\r\nfun attributesMapOf(key: String, value: String?): Map<String, String> = when (value) {\r\n    null -> emptyMap\r\n    else -> singletonMapOf(key, value)\r\n}\r\n\r\nfun attributesMapOf(vararg pairs: String?): Map<String, String> {\r\n    var result: MutableMap<String, String>? = null\r\n\r\n    for (i in 0..pairs.size - 1 step 2) {\r\n        val k = pairs[i]\r\n        val v = pairs[i + 1]\r\n        if (k != null && v != null) {\r\n            if (result == null) {\r\n                result = linkedMapOf()\r\n            }\r\n            result.put(k, v)\r\n        }\r\n    }\r\n\r\n    return result ?: emptyMap\r\n}\r\n\r\nfun singletonMapOf(key: String, value: String): Map<String, String> = SingletonStringMap(key, value)\r\n\r\nfun HTMLTag.unsafe(block: Unsafe.() -> Unit): Unit = consumer.onTagContentUnsafe(block)\r\n\r\nval emptyMap: Map<String, String> = emptyMap()\r\n\r\nclass DefaultUnsafe : Unsafe {\r\n    private val sb = StringBuilder()\r\n\r\n    override fun String.unaryPlus() {\r\n        sb.append(this)\r\n    }\r\n\r\n    override fun toString(): String = sb.toString()\r\n}\r\n\r\n@DslMarker\r\nannotation class HtmlTagMarker\r\n\r\ntypealias HtmlContent = FlowOrPhrasingContent\r\n\r\nprivate data class SingletonStringMap(override val key: String, override val value: String) : Map<String, String>, Map.Entry<String, String> {\r\n    override val entries: Set<Map.Entry<String, String>>\r\n        get() = setOf(this)\r\n\r\n    override val keys: Set<String>\r\n        get() = setOf(key)\r\n\r\n    override val size: Int\r\n        get() = 1\r\n\r\n    override val values: Collection<String>\r\n        get() = listOf(value)\r\n\r\n    override fun containsKey(key: String) = key == this.key\r\n    override fun containsValue(value: String) = value == this.value\r\n    override fun get(key: String): String? = if (key == this.key) value else null\r\n    override fun isEmpty() = false\r\n}\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n@Suppress(\"unused\")\r\nopen class TABLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"table\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\r\n    var summary : String\r\n        get()  = attributeStringString.get(this, \"summary\")\r\n        set(newValue) {attributeStringString.set(this, \"summary\", newValue)}\r\n\r\n\r\n}\r\n/**\r\n * Table caption\r\n */\r\n@HtmlTagMarker\r\ninline fun TABLE.caption(classes : String? = null, crossinline block : CAPTION.() -> Unit = {}) : Unit = CAPTION(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Table column group\r\n */\r\n@HtmlTagMarker\r\ninline fun TABLE.colGroup(classes : String? = null, crossinline block : COLGROUP.() -> Unit = {}) : Unit = COLGROUP(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Table header\r\n */\r\n@HtmlTagMarker\r\ninline fun TABLE.thead(classes : String? = null, crossinline block : THEAD.() -> Unit = {}) : Unit = THEAD(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Table footer\r\n */\r\n@HtmlTagMarker\r\ninline fun TABLE.tfoot(classes : String? = null, crossinline block : TFOOT.() -> Unit = {}) : Unit = TFOOT(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Table body\r\n */\r\n@HtmlTagMarker\r\ninline fun TABLE.tbody(classes : String? = null, crossinline block : TBODY.() -> Unit = {}) : Unit = TBODY(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Table row\r\n */\r\n@HtmlTagMarker\r\ninline fun TABLE.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class TBODY(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"tbody\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\r\n\r\n}\r\n/**\r\n * Table row\r\n */\r\n@HtmlTagMarker\r\ninline fun TBODY.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class TD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"td\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\r\n    var headers : String\r\n        get()  = attributeStringString.get(this, \"headers\")\r\n        set(newValue) {attributeStringString.set(this, \"headers\", newValue)}\r\n\r\n    var rowSpan : String\r\n        get()  = attributeStringString.get(this, \"rowspan\")\r\n        set(newValue) {attributeStringString.set(this, \"rowspan\", newValue)}\r\n\r\n    var colSpan : String\r\n        get()  = attributeStringString.get(this, \"colspan\")\r\n        set(newValue) {attributeStringString.set(this, \"colspan\", newValue)}\r\n\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class TEXTAREA(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"textarea\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\r\n    var autoFocus : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"autofocus\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"autofocus\", newValue)}\r\n\r\n    var disabled : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\r\n\r\n    var form : String\r\n        get()  = attributeStringString.get(this, \"form\")\r\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\r\n\r\n    var maxLength : String\r\n        get()  = attributeStringString.get(this, \"maxlength\")\r\n        set(newValue) {attributeStringString.set(this, \"maxlength\", newValue)}\r\n\r\n    var minLength : String\r\n        get()  = attributeStringString.get(this, \"minlength\")\r\n        set(newValue) {attributeStringString.set(this, \"minlength\", newValue)}\r\n\r\n    var name : String\r\n        get()  = attributeStringString.get(this, \"name\")\r\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\r\n\r\n    var placeholder : String\r\n        get()  = attributeStringString.get(this, \"placeholder\")\r\n        set(newValue) {attributeStringString.set(this, \"placeholder\", newValue)}\r\n\r\n    var readonly : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"readonly\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"readonly\", newValue)}\r\n\r\n    var required : Boolean\r\n        get()  = attributeBooleanTicker.get(this, \"required\")\r\n        set(newValue) {attributeBooleanTicker.set(this, \"required\", newValue)}\r\n\r\n    var rows : String\r\n        get()  = attributeStringString.get(this, \"rows\")\r\n        set(newValue) {attributeStringString.set(this, \"rows\", newValue)}\r\n\r\n    var cols : String\r\n        get()  = attributeStringString.get(this, \"cols\")\r\n        set(newValue) {attributeStringString.set(this, \"cols\", newValue)}\r\n\r\n    var wrap : TextAreaWrap\r\n        get()  = attributeTextAreaWrapEnumTextAreaWrapValues.get(this, \"wrap\")\r\n        set(newValue) {attributeTextAreaWrapEnumTextAreaWrapValues.set(this, \"wrap\", newValue)}\r\n\r\n\r\n}\r\nval TEXTAREA.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval TEXTAREA.asInteractiveContent : InteractiveContent\r\n    get()  = this\r\n\r\nval TEXTAREA.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class TFOOT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"tfoot\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\r\n\r\n}\r\n/**\r\n * Table row\r\n */\r\n@HtmlTagMarker\r\ninline fun TFOOT.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class TH(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"th\", consumer, initialAttributes, null, false, false), HtmlInlineTag {\r\n    var headers : String\r\n        get()  = attributeStringString.get(this, \"headers\")\r\n        set(newValue) {attributeStringString.set(this, \"headers\", newValue)}\r\n\r\n    var rowSpan : String\r\n        get()  = attributeStringString.get(this, \"rowspan\")\r\n        set(newValue) {attributeStringString.set(this, \"rowspan\", newValue)}\r\n\r\n    var colSpan : String\r\n        get()  = attributeStringString.get(this, \"colspan\")\r\n        set(newValue) {attributeStringString.set(this, \"colspan\", newValue)}\r\n\r\n    var scope : ThScope\r\n        get()  = attributeThScopeEnumThScopeValues.get(this, \"scope\")\r\n        set(newValue) {attributeThScopeEnumThScopeValues.set(this, \"scope\", newValue)}\r\n\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class THEAD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"thead\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\r\n\r\n}\r\n/**\r\n * Table row\r\n */\r\n@HtmlTagMarker\r\ninline fun THEAD.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class TIME(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"time\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\r\n    var dateTime : String\r\n        get()  = attributeStringString.get(this, \"datetime\")\r\n        set(newValue) {attributeStringString.set(this, \"datetime\", newValue)}\r\n\r\n\r\n}\r\nval TIME.asFlowContent : FlowContent\r\n    get()  = this\r\n\r\nval TIME.asPhrasingContent : PhrasingContent\r\n    get()  = this\r\n\r\n\r\n@Suppress(\"unused\")\r\nopen class TITLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"title\", consumer, initialAttributes, null, false, false), HtmlHeadTag {\r\n\r\n}\r\n\r\n@Suppress(\"unused\")\r\nopen class TR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"tr\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\r\n\r\n}\r\n/**\r\n * Table header cell\r\n */\r\n@HtmlTagMarker\r\ninline fun TR.th(scope : ThScope? = null, classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", scope?.enumEncode(),\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun TR.colTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.col.realValue,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun TR.colGroupTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.colGroup.realValue,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun TR.rowTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.row.realValue,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun TR.rowGroupTh(classes : String? = null, crossinline block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.rowGroup.realValue,\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Table data cell\r\n */\r\n@HtmlTagMarker\r\ninline fun TR.td(classes : String? = null, crossinline block : TD.() -> Unit = {}) : Unit = TD(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n","package kotlinx.html.js\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\nimport org.w3c.dom.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\n/**\r\n * Anchor\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.a(href : String? = null, target : String? = null, classes : String? = null, crossinline block : A.() -> Unit = {}) : HTMLAnchorElement = A(attributesMapOf(\"href\", href,\"target\", target,\"class\", classes), this).visitAndFinalize(this, block) as HTMLAnchorElement\r\n\r\n/**\r\n * Abbreviated form (e.g., WWW, HTTP,etc.)\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.abbr(classes : String? = null, crossinline block : ABBR.() -> Unit = {}) : HTMLElement = ABBR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Information on author\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.address(classes : String? = null, crossinline block : ADDRESS.() -> Unit = {}) : HTMLElement = ADDRESS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Client-side image map area\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, crossinline block : AREA.() -> Unit = {}) : HTMLAreaElement = AREA(attributesMapOf(\"Shape\", shape?.enumEncode(),\"alt\", alt,\"class\", classes), this).visitAndFinalize(this, block) as HTMLAreaElement\r\n\r\n/**\r\n * Self-contained syndicatable or reusable composition\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.article(classes : String? = null, crossinline block : ARTICLE.() -> Unit = {}) : HTMLElement = ARTICLE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Sidebar for tangentially related content\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.aside(classes : String? = null, crossinline block : ASIDE.() -> Unit = {}) : HTMLElement = ASIDE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Audio player\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.audio(classes : String? = null, crossinline block : AUDIO.() -> Unit = {}) : HTMLAudioElement = AUDIO(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLAudioElement\r\n\r\n/**\r\n * Bold text style\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.b(classes : String? = null, crossinline block : B.() -> Unit = {}) : HTMLElement = B(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Document base URI\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.base(classes : String? = null, crossinline block : BASE.() -> Unit = {}) : HTMLBaseElement = BASE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLBaseElement\r\n\r\n/**\r\n * Text directionality isolation\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.bdi(classes : String? = null, crossinline block : BDI.() -> Unit = {}) : HTMLElement = BDI(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * I18N BiDi over-ride\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.bdo(classes : String? = null, crossinline block : BDO.() -> Unit = {}) : HTMLElement = BDO(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Long quotation\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.blockQuote(classes : String? = null, crossinline block : BLOCKQUOTE.() -> Unit = {}) : HTMLElement = BLOCKQUOTE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Document body\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.body(classes : String? = null, crossinline block : BODY.() -> Unit = {}) : HTMLBodyElement = BODY(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLBodyElement\r\n\r\n/**\r\n * Forced line break\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.br(classes : String? = null, crossinline block : BR.() -> Unit = {}) : HTMLBRElement = BR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLBRElement\r\n\r\n/**\r\n * Push button\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON.() -> Unit = {}) : HTMLButtonElement = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"type\", type?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block) as HTMLButtonElement\r\n\r\n/**\r\n * Scriptable bitmap canvas\r\n */\r\n@HtmlTagMarker\r\npublic fun TagConsumer<HTMLElement>.canvas(classes : String? = null, content : String = \"\") : HTMLCanvasElement = CANVAS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content}) as HTMLCanvasElement\r\n/**\r\n * Scriptable bitmap canvas\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.canvas(classes : String? = null, crossinline block : CANVAS.() -> Unit = {}) : HTMLCanvasElement = CANVAS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLCanvasElement\r\n\r\n/**\r\n * Table caption\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.caption(classes : String? = null, crossinline block : CAPTION.() -> Unit = {}) : HTMLElement = CAPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Citation\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.cite(classes : String? = null, crossinline block : CITE.() -> Unit = {}) : HTMLElement = CITE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Computer code fragment\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.code(classes : String? = null, crossinline block : CODE.() -> Unit = {}) : HTMLElement = CODE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Table column\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.col(classes : String? = null, crossinline block : COL.() -> Unit = {}) : HTMLTableColElement = COL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableColElement\r\n\r\n/**\r\n * Table column group\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.colGroup(classes : String? = null, crossinline block : COLGROUP.() -> Unit = {}) : HTMLTableColElement = COLGROUP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableColElement\r\n\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.command(type : CommandType? = null, classes : String? = null, crossinline block : COMMAND.() -> Unit = {}) : HTMLElement = COMMAND(attributesMapOf(\"type\", type?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Container for options for \r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.dataList(classes : String? = null, crossinline block : DATALIST.() -> Unit = {}) : HTMLDataListElement = DATALIST(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLDataListElement\r\n\r\n/**\r\n * Definition description\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.dd(classes : String? = null, crossinline block : DD.() -> Unit = {}) : HTMLElement = DD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Deleted text\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.del(classes : String? = null, crossinline block : DEL.() -> Unit = {}) : HTMLElement = DEL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Disclosure control for hiding details\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.details(classes : String? = null, crossinline block : DETAILS.() -> Unit = {}) : HTMLDetailsElement = DETAILS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLDetailsElement\r\n\r\n/**\r\n * Instance definition\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.dfn(classes : String? = null, crossinline block : DFN.() -> Unit = {}) : HTMLElement = DFN(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Dialog box or window\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.dialog(classes : String? = null, crossinline block : DIALOG.() -> Unit = {}) : HTMLDialogElement = DIALOG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLDialogElement\r\n\r\n/**\r\n * Generic language/style container\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.div(classes : String? = null, crossinline block : DIV.() -> Unit = {}) : HTMLDivElement = DIV(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLDivElement\r\n\r\n/**\r\n * Definition list\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.dl(classes : String? = null, crossinline block : DL.() -> Unit = {}) : HTMLElement = DL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Definition term\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.dt(classes : String? = null, crossinline block : DT.() -> Unit = {}) : HTMLElement = DT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Emphasis\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.em(classes : String? = null, crossinline block : EM.() -> Unit = {}) : HTMLElement = EM(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Plugin\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.embed(classes : String? = null, crossinline block : EMBED.() -> Unit = {}) : HTMLEmbedElement = EMBED(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLEmbedElement\r\n\r\n/**\r\n * Form control group\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.fieldSet(classes : String? = null, crossinline block : FIELDSET.() -> Unit = {}) : HTMLFieldSetElement = FIELDSET(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLFieldSetElement\r\n\r\n/**\r\n * Caption for \r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.figcaption(classes : String? = null, crossinline block : FIGCAPTION.() -> Unit = {}) : HTMLElement = FIGCAPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Figure with optional caption\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.figure(classes : String? = null, crossinline block : FIGURE.() -> Unit = {}) : HTMLElement = FIGURE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Footer for a page or section\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.footer(classes : String? = null, crossinline block : FOOTER.() -> Unit = {}) : HTMLElement = FOOTER(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Interactive form\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.form(action : String? = null, encType : FormEncType? = null, method : FormMethod? = null, classes : String? = null, crossinline block : FORM.() -> Unit = {}) : HTMLFormElement = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", method?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block) as HTMLFormElement\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.h1(classes : String? = null, crossinline block : H1.() -> Unit = {}) : HTMLHeadingElement = H1(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLHeadingElement\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.h2(classes : String? = null, crossinline block : H2.() -> Unit = {}) : HTMLHeadingElement = H2(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLHeadingElement\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.h3(classes : String? = null, crossinline block : H3.() -> Unit = {}) : HTMLHeadingElement = H3(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLHeadingElement\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.h4(classes : String? = null, crossinline block : H4.() -> Unit = {}) : HTMLHeadingElement = H4(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLHeadingElement\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.h5(classes : String? = null, crossinline block : H5.() -> Unit = {}) : HTMLHeadingElement = H5(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLHeadingElement\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.h6(classes : String? = null, crossinline block : H6.() -> Unit = {}) : HTMLHeadingElement = H6(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLHeadingElement\r\n\r\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\r\n@Suppress(\"DEPRECATION\")\r\n/**\r\n * Document head\r\n */\r\n@HtmlTagMarker\r\npublic fun TagConsumer<HTMLElement>.head(content : String = \"\") : HTMLHeadElement = HEAD(emptyMap, this).visitAndFinalize(this, {+content}) as HTMLHeadElement\r\n/**\r\n * Document head\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.head(crossinline block : HEAD.() -> Unit = {}) : HTMLHeadElement = HEAD(emptyMap, this).visitAndFinalize(this, block) as HTMLHeadElement\r\n\r\n/**\r\n * Introductory or navigational aids for a page or section\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.header(classes : String? = null, crossinline block : HEADER.() -> Unit = {}) : HTMLElement = HEADER(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.hGroup(classes : String? = null, crossinline block : HGROUP.() -> Unit = {}) : HTMLElement = HGROUP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Horizontal rule\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.hr(classes : String? = null, crossinline block : HR.() -> Unit = {}) : HTMLHRElement = HR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLHRElement\r\n\r\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\r\n@Suppress(\"DEPRECATION\")\r\n/**\r\n * Document root element\r\n */\r\n@HtmlTagMarker\r\npublic fun TagConsumer<HTMLElement>.html(content : String = \"\", namespace : String? = null) : HTMLHtmlElement = HTML(emptyMap, this, namespace).visitAndFinalize(this, {+content}) as HTMLHtmlElement\r\n/**\r\n * Document root element\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.html(namespace : String? = null, crossinline block : HTML.() -> Unit = {}) : HTMLHtmlElement = HTML(emptyMap, this, namespace).visitAndFinalize(this, block) as HTMLHtmlElement\r\n\r\n/**\r\n * Italic text style\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.i(classes : String? = null, crossinline block : I.() -> Unit = {}) : HTMLElement = I(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Inline subwindow\r\n */\r\n@HtmlTagMarker\r\npublic fun TagConsumer<HTMLElement>.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = \"\") : HTMLElement = IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, {+content})\r\n/**\r\n * Inline subwindow\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.iframe(sandbox : IframeSandbox? = null, classes : String? = null, crossinline block : IFRAME.() -> Unit = {}) : HTMLElement = IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Embedded image\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.img(alt : String? = null, src : String? = null, classes : String? = null, crossinline block : IMG.() -> Unit = {}) : HTMLImageElement = IMG(attributesMapOf(\"alt\", alt,\"src\", src,\"class\", classes), this).visitAndFinalize(this, block) as HTMLImageElement\r\n\r\n/**\r\n * Form control\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : HTMLInputElement = INPUT(attributesMapOf(\"type\", type?.enumEncode(),\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), this).visitAndFinalize(this, block) as HTMLInputElement\r\n\r\n/**\r\n * Inserted text\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.ins(classes : String? = null, crossinline block : INS.() -> Unit = {}) : HTMLElement = INS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Text to be entered by the user\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.kbd(classes : String? = null, crossinline block : KBD.() -> Unit = {}) : HTMLElement = KBD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Cryptographic key-pair generator form control\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, crossinline block : KEYGEN.() -> Unit = {}) : HTMLElement = KEYGEN(attributesMapOf(\"keytype\", keyType?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Form field label text\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.label(classes : String? = null, crossinline block : LABEL.() -> Unit = {}) : HTMLLabelElement = LABEL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLLabelElement\r\n\r\n/**\r\n * Fieldset legend\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.legend(classes : String? = null, crossinline block : LEGEND.() -> Unit = {}) : HTMLLegendElement = LEGEND(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLLegendElement\r\n\r\n/**\r\n * List item\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.li(classes : String? = null, crossinline block : LI.() -> Unit = {}) : HTMLLIElement = LI(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLLIElement\r\n\r\n/**\r\n * A media-independent link\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.link(href : String? = null, rel : String? = null, type : String? = null, crossinline block : LINK.() -> Unit = {}) : HTMLLinkElement = LINK(attributesMapOf(\"href\", href,\"rel\", rel,\"type\", type), this).visitAndFinalize(this, block) as HTMLLinkElement\r\n\r\n/**\r\n * Container for the dominant contents of another element\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.main(classes : String? = null, crossinline block : MAIN.() -> Unit = {}) : HTMLElement = MAIN(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Client-side image map\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.map(name : String? = null, classes : String? = null, crossinline block : MAP.() -> Unit = {}) : HTMLMapElement = MAP(attributesMapOf(\"name\", name,\"class\", classes), this).visitAndFinalize(this, block) as HTMLMapElement\r\n\r\n/**\r\n * Highlight\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.mark(classes : String? = null, crossinline block : MARK.() -> Unit = {}) : HTMLElement = MARK(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.math(classes : String? = null, crossinline block : MATH.() -> Unit = {}) : HTMLElement = MATH(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@HtmlTagMarker\r\npublic fun TagConsumer<HTMLElement>.mathml(classes : String? = null, content : String = \"\") : HTMLElement = MATHML(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content})\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.mathml(classes : String? = null, crossinline block : MATHML.() -> Unit = {}) : HTMLElement = MATHML(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Generic metainformation\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.meta(name : String? = null, content : String? = null, charset : String? = null, crossinline block : META.() -> Unit = {}) : HTMLMetaElement = META(attributesMapOf(\"name\", name,\"content\", content,\"charset\", charset), this).visitAndFinalize(this, block) as HTMLMetaElement\r\n\r\n/**\r\n * Gauge\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.meter(classes : String? = null, crossinline block : METER.() -> Unit = {}) : HTMLMeterElement = METER(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLMeterElement\r\n\r\n/**\r\n * Section with navigational links\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.nav(classes : String? = null, crossinline block : NAV.() -> Unit = {}) : HTMLElement = NAV(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Generic metainformation\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.noScript(classes : String? = null, crossinline block : NOSCRIPT.() -> Unit = {}) : HTMLElement = NOSCRIPT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Generic embedded object\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.htmlObject(classes : String? = null, crossinline block : OBJECT.() -> Unit = {}) : HTMLElement = OBJECT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Ordered list\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.ol(classes : String? = null, crossinline block : OL.() -> Unit = {}) : HTMLElement = OL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Option group\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.optGroup(label : String? = null, classes : String? = null, crossinline block : OPTGROUP.() -> Unit = {}) : HTMLOptGroupElement = OPTGROUP(attributesMapOf(\"label\", label,\"class\", classes), this).visitAndFinalize(this, block) as HTMLOptGroupElement\r\n\r\n/**\r\n * Selectable choice\r\n */\r\n@HtmlTagMarker\r\npublic fun TagConsumer<HTMLElement>.option(classes : String? = null, content : String = \"\") : HTMLOptionElement = OPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content}) as HTMLOptionElement\r\n/**\r\n * Selectable choice\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.option(classes : String? = null, crossinline block : OPTION.() -> Unit = {}) : HTMLOptionElement = OPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLOptionElement\r\n\r\n/**\r\n * Calculated output value\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.output(classes : String? = null, crossinline block : OUTPUT.() -> Unit = {}) : HTMLOutputElement = OUTPUT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLOutputElement\r\n\r\n/**\r\n * Paragraph\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.p(classes : String? = null, crossinline block : P.() -> Unit = {}) : HTMLParagraphElement = P(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLParagraphElement\r\n\r\n/**\r\n * Named property value\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.param(name : String? = null, value : String? = null, crossinline block : PARAM.() -> Unit = {}) : HTMLParamElement = PARAM(attributesMapOf(\"name\", name,\"value\", value), this).visitAndFinalize(this, block) as HTMLParamElement\r\n\r\n/**\r\n * Preformatted text\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.pre(classes : String? = null, crossinline block : PRE.() -> Unit = {}) : HTMLPreElement = PRE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLPreElement\r\n\r\n/**\r\n * Progress bar\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.progress(classes : String? = null, crossinline block : PROGRESS.() -> Unit = {}) : HTMLProgressElement = PROGRESS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLProgressElement\r\n\r\n/**\r\n * Short inline quotation\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.q(classes : String? = null, crossinline block : Q.() -> Unit = {}) : HTMLElement = Q(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Parenthesis for ruby annotation text\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.rp(classes : String? = null, crossinline block : RP.() -> Unit = {}) : HTMLElement = RP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Ruby annotation text\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.rt(classes : String? = null, crossinline block : RT.() -> Unit = {}) : HTMLElement = RT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Ruby annotation(s)\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.ruby(classes : String? = null, crossinline block : RUBY.() -> Unit = {}) : HTMLElement = RUBY(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Strike-through text style\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.samp(classes : String? = null, crossinline block : SAMP.() -> Unit = {}) : HTMLElement = SAMP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\r\n@Suppress(\"DEPRECATION\")\r\n/**\r\n * Script statements\r\n */\r\n@HtmlTagMarker\r\npublic fun TagConsumer<HTMLElement>.script(type : String? = null, src : String? = null, content : String = \"\") : HTMLScriptElement = SCRIPT(attributesMapOf(\"type\", type,\"src\", src), this).visitAndFinalize(this, {+content}) as HTMLScriptElement\r\n/**\r\n * Script statements\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.script(type : String? = null, src : String? = null, crossinline block : SCRIPT.() -> Unit = {}) : HTMLScriptElement = SCRIPT(attributesMapOf(\"type\", type,\"src\", src), this).visitAndFinalize(this, block) as HTMLScriptElement\r\n\r\n/**\r\n * Generic document or application section\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.section(classes : String? = null, crossinline block : SECTION.() -> Unit = {}) : HTMLElement = SECTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Option selector\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.select(classes : String? = null, crossinline block : SELECT.() -> Unit = {}) : HTMLSelectElement = SELECT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLSelectElement\r\n\r\n/**\r\n * Small text style\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.small(classes : String? = null, crossinline block : SMALL.() -> Unit = {}) : HTMLElement = SMALL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Media source for \r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.source(classes : String? = null, crossinline block : SOURCE.() -> Unit = {}) : HTMLSourceElement = SOURCE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLSourceElement\r\n\r\n/**\r\n * Generic language/style container\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.span(classes : String? = null, crossinline block : SPAN.() -> Unit = {}) : HTMLSpanElement = SPAN(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLSpanElement\r\n\r\n/**\r\n * Strong emphasis\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.strong(classes : String? = null, crossinline block : STRONG.() -> Unit = {}) : HTMLElement = STRONG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\r\n@Suppress(\"DEPRECATION\")\r\n/**\r\n * Style info\r\n */\r\n@HtmlTagMarker\r\npublic fun TagConsumer<HTMLElement>.style(type : String? = null, content : String = \"\") : HTMLStyleElement = STYLE(attributesMapOf(\"type\", type), this).visitAndFinalize(this, {+content}) as HTMLStyleElement\r\n/**\r\n * Style info\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.style(type : String? = null, crossinline block : STYLE.() -> Unit = {}) : HTMLStyleElement = STYLE(attributesMapOf(\"type\", type), this).visitAndFinalize(this, block) as HTMLStyleElement\r\n\r\n/**\r\n * Subscript\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.sub(classes : String? = null, crossinline block : SUB.() -> Unit = {}) : HTMLElement = SUB(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Superscript\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.sup(classes : String? = null, crossinline block : SUP.() -> Unit = {}) : HTMLElement = SUP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n@HtmlTagMarker\r\npublic fun TagConsumer<HTMLElement>.svg(classes : String? = null, content : String = \"\") : HTMLElement = SVG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content})\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.svg(classes : String? = null, crossinline block : SVG.() -> Unit = {}) : HTMLElement = SVG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * \r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.table(classes : String? = null, crossinline block : TABLE.() -> Unit = {}) : HTMLTableElement = TABLE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableElement\r\n\r\n/**\r\n * Table body\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.tbody(classes : String? = null, crossinline block : TBODY.() -> Unit = {}) : HTMLTableSectionElement = TBODY(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableSectionElement\r\n\r\n/**\r\n * Table data cell\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.td(classes : String? = null, crossinline block : TD.() -> Unit = {}) : HTMLTableCellElement = TD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableCellElement\r\n\r\n/**\r\n * Multi-line text field\r\n */\r\n@HtmlTagMarker\r\npublic fun TagConsumer<HTMLElement>.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = \"\") : HTMLTextAreaElement = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", wrap?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, {+content}) as HTMLTextAreaElement\r\n/**\r\n * Multi-line text field\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, crossinline block : TEXTAREA.() -> Unit = {}) : HTMLTextAreaElement = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", wrap?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block) as HTMLTextAreaElement\r\n\r\n/**\r\n * Table footer\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.tfoot(classes : String? = null, crossinline block : TFOOT.() -> Unit = {}) : HTMLTableSectionElement = TFOOT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableSectionElement\r\n\r\n/**\r\n * Table header cell\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.th(scope : ThScope? = null, classes : String? = null, crossinline block : TH.() -> Unit = {}) : HTMLTableCellElement = TH(attributesMapOf(\"scope\", scope?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableCellElement\r\n\r\n/**\r\n * Table header\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.thead(classes : String? = null, crossinline block : THEAD.() -> Unit = {}) : HTMLTableSectionElement = THEAD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableSectionElement\r\n\r\n/**\r\n * Machine-readable equivalent of date- or time-related data\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.time(classes : String? = null, crossinline block : TIME.() -> Unit = {}) : HTMLTimeElement = TIME(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTimeElement\r\n\r\n/**\r\n * Document title\r\n */\r\n@HtmlTagMarker\r\npublic fun TagConsumer<HTMLElement>.title(content : String = \"\") : HTMLTitleElement = TITLE(emptyMap, this).visitAndFinalize(this, {+content}) as HTMLTitleElement\r\n/**\r\n * Document title\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.title(crossinline block : TITLE.() -> Unit = {}) : HTMLTitleElement = TITLE(emptyMap, this).visitAndFinalize(this, block) as HTMLTitleElement\r\n\r\n/**\r\n * Table row\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.tr(classes : String? = null, crossinline block : TR.() -> Unit = {}) : HTMLTableRowElement = TR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableRowElement\r\n\r\n/**\r\n * Unordered list\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.ul(classes : String? = null, crossinline block : UL.() -> Unit = {}) : HTMLElement = UL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Unordered list\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.htmlVar(classes : String? = null, crossinline block : VAR.() -> Unit = {}) : HTMLElement = VAR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\r\n\r\n/**\r\n * Video player\r\n */\r\n@HtmlTagMarker\r\npublic inline fun TagConsumer<HTMLElement>.video(classes : String? = null, crossinline block : VIDEO.() -> Unit = {}) : HTMLVideoElement = VIDEO(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLVideoElement\r\n\r\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\ninterface FlowOrHeadingContent : Tag {\r\n}\r\n\r\ninterface FlowOrMetaDataContent : FlowOrPhrasingOrMetaDataContent, Tag {\r\n}\r\n\r\ninterface FlowOrInteractiveContent : FlowOrInteractiveOrPhrasingContent, Tag {\r\n}\r\n\r\ninterface FlowOrPhrasingContent : FlowOrInteractiveOrPhrasingContent, FlowOrPhrasingOrMetaDataContent, Tag {\r\n}\r\n\r\ninterface FlowOrPhrasingOrMetaDataContent : Tag {\r\n}\r\n\r\ninterface SectioningOrFlowContent : Tag {\r\n}\r\n\r\ninterface FlowOrInteractiveOrPhrasingContent : Tag {\r\n}\r\n\r\n\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrHeadingContent.h1(classes : String? = null, crossinline block : H1.() -> Unit = {}) : Unit = H1(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrHeadingContent.h2(classes : String? = null, crossinline block : H2.() -> Unit = {}) : Unit = H2(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrHeadingContent.h3(classes : String? = null, crossinline block : H3.() -> Unit = {}) : Unit = H3(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrHeadingContent.h4(classes : String? = null, crossinline block : H4.() -> Unit = {}) : Unit = H4(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrHeadingContent.h5(classes : String? = null, crossinline block : H5.() -> Unit = {}) : Unit = H5(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Heading\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrHeadingContent.h6(classes : String? = null, crossinline block : H6.() -> Unit = {}) : Unit = H6(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n@HtmlTagMarker\r\ninline fun FlowOrHeadingContent.hGroup(classes : String? = null, crossinline block : HGROUP.() -> Unit = {}) : Unit = HGROUP(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n/**\r\n * Style info\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrMetaDataContent.style(type : String? = null, crossinline block : STYLE.() -> Unit = {}) : Unit = STYLE(attributesMapOf(\"type\", type), consumer).visit(block)\r\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\r\n@Suppress(\"DEPRECATION\")\r\n/**\r\n * Style info\r\n */\r\n@HtmlTagMarker\r\nfun FlowOrMetaDataContent.style(type : String? = null, content : String = \"\") : Unit = STYLE(attributesMapOf(\"type\", type), consumer).visit({+content})\r\n\r\n\r\n/**\r\n * Disclosure control for hiding details\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveContent.details(classes : String? = null, crossinline block : DETAILS.() -> Unit = {}) : Unit = DETAILS(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n/**\r\n * Abbreviated form (e.g., WWW, HTTP,etc.)\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.abbr(classes : String? = null, crossinline block : ABBR.() -> Unit = {}) : Unit = ABBR(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Client-side image map area\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, crossinline block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", shape?.enumEncode(),\"alt\", alt,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.rectArea(alt : String? = null, classes : String? = null, crossinline block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", AreaShape.rect.realValue,\"alt\", alt,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.circleArea(alt : String? = null, classes : String? = null, crossinline block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", AreaShape.circle.realValue,\"alt\", alt,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.polyArea(alt : String? = null, classes : String? = null, crossinline block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", AreaShape.poly.realValue,\"alt\", alt,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.defaultArea(alt : String? = null, classes : String? = null, crossinline block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", AreaShape.default.realValue,\"alt\", alt,\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Bold text style\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.b(classes : String? = null, crossinline block : B.() -> Unit = {}) : Unit = B(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Text directionality isolation\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.bdi(classes : String? = null, crossinline block : BDI.() -> Unit = {}) : Unit = BDI(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * I18N BiDi over-ride\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.bdo(classes : String? = null, crossinline block : BDO.() -> Unit = {}) : Unit = BDO(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Forced line break\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.br(classes : String? = null, crossinline block : BR.() -> Unit = {}) : Unit = BR(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Scriptable bitmap canvas\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.canvas(classes : String? = null, crossinline block : CANVAS.() -> Unit = {}) : Unit = CANVAS(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n/**\r\n * Scriptable bitmap canvas\r\n */\r\n@HtmlTagMarker\r\nfun FlowOrPhrasingContent.canvas(classes : String? = null, content : String = \"\") : Unit = CANVAS(attributesMapOf(\"class\", classes), consumer).visit({+content})\r\n\r\n/**\r\n * Citation\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.cite(classes : String? = null, crossinline block : CITE.() -> Unit = {}) : Unit = CITE(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Computer code fragment\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.code(classes : String? = null, crossinline block : CODE.() -> Unit = {}) : Unit = CODE(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Container for options for \r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.dataList(classes : String? = null, crossinline block : DATALIST.() -> Unit = {}) : Unit = DATALIST(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Deleted text\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.del(classes : String? = null, crossinline block : DEL.() -> Unit = {}) : Unit = DEL(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Instance definition\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.dfn(classes : String? = null, crossinline block : DFN.() -> Unit = {}) : Unit = DFN(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Emphasis\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.em(classes : String? = null, crossinline block : EM.() -> Unit = {}) : Unit = EM(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Italic text style\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.i(classes : String? = null, crossinline block : I.() -> Unit = {}) : Unit = I(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Inserted text\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.ins(classes : String? = null, crossinline block : INS.() -> Unit = {}) : Unit = INS(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Text to be entered by the user\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.kbd(classes : String? = null, crossinline block : KBD.() -> Unit = {}) : Unit = KBD(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Client-side image map\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.map(name : String? = null, classes : String? = null, crossinline block : MAP.() -> Unit = {}) : Unit = MAP(attributesMapOf(\"name\", name,\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Highlight\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.mark(classes : String? = null, crossinline block : MARK.() -> Unit = {}) : Unit = MARK(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.math(classes : String? = null, crossinline block : MATH.() -> Unit = {}) : Unit = MATH(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Gauge\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.meter(classes : String? = null, crossinline block : METER.() -> Unit = {}) : Unit = METER(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Calculated output value\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.output(classes : String? = null, crossinline block : OUTPUT.() -> Unit = {}) : Unit = OUTPUT(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Progress bar\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.progress(classes : String? = null, crossinline block : PROGRESS.() -> Unit = {}) : Unit = PROGRESS(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Short inline quotation\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.q(classes : String? = null, crossinline block : Q.() -> Unit = {}) : Unit = Q(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Ruby annotation(s)\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.ruby(classes : String? = null, crossinline block : RUBY.() -> Unit = {}) : Unit = RUBY(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Strike-through text style\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.samp(classes : String? = null, crossinline block : SAMP.() -> Unit = {}) : Unit = SAMP(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Small text style\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.small(classes : String? = null, crossinline block : SMALL.() -> Unit = {}) : Unit = SMALL(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Generic language/style container\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.span(classes : String? = null, crossinline block : SPAN.() -> Unit = {}) : Unit = SPAN(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Strong emphasis\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.strong(classes : String? = null, crossinline block : STRONG.() -> Unit = {}) : Unit = STRONG(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Subscript\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.sub(classes : String? = null, crossinline block : SUB.() -> Unit = {}) : Unit = SUB(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Superscript\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.sup(classes : String? = null, crossinline block : SUP.() -> Unit = {}) : Unit = SUP(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.svg(classes : String? = null, crossinline block : SVG.() -> Unit = {}) : Unit = SVG(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\nfun FlowOrPhrasingContent.svg(classes : String? = null, content : String = \"\") : Unit = SVG(attributesMapOf(\"class\", classes), consumer).visit({+content})\r\n\r\n/**\r\n * Machine-readable equivalent of date- or time-related data\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.time(classes : String? = null, crossinline block : TIME.() -> Unit = {}) : Unit = TIME(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Unordered list\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingContent.htmlVar(classes : String? = null, crossinline block : VAR.() -> Unit = {}) : Unit = VAR(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingOrMetaDataContent.command(type : CommandType? = null, classes : String? = null, crossinline block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf(\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingOrMetaDataContent.commandCommand(classes : String? = null, crossinline block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf(\"type\", CommandType.command.realValue,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingOrMetaDataContent.checkBoxCommand(classes : String? = null, crossinline block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf(\"type\", CommandType.checkBox.realValue,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingOrMetaDataContent.radioCommand(classes : String? = null, crossinline block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf(\"type\", CommandType.radio.realValue,\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * A media-independent link\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingOrMetaDataContent.link(href : String? = null, rel : String? = null, type : String? = null, crossinline block : LINK.() -> Unit = {}) : Unit = LINK(attributesMapOf(\"href\", href,\"rel\", rel,\"type\", type), consumer).visit(block)\r\n\r\n/**\r\n * Generic metainformation\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingOrMetaDataContent.meta(name : String? = null, content : String? = null, charset : String? = null, crossinline block : META.() -> Unit = {}) : Unit = META(attributesMapOf(\"name\", name,\"content\", content,\"charset\", charset), consumer).visit(block)\r\n\r\n/**\r\n * Generic metainformation\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingOrMetaDataContent.noScript(classes : String? = null, crossinline block : NOSCRIPT.() -> Unit = {}) : Unit = NOSCRIPT(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Script statements\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrPhrasingOrMetaDataContent.script(type : String? = null, src : String? = null, crossinline block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf(\"type\", type,\"src\", src), consumer).visit(block)\r\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\r\n@Suppress(\"DEPRECATION\")\r\n/**\r\n * Script statements\r\n */\r\n@HtmlTagMarker\r\nfun FlowOrPhrasingOrMetaDataContent.script(type : String? = null, src : String? = null, content : String = \"\") : Unit = SCRIPT(attributesMapOf(\"type\", type,\"src\", src), consumer).visit({+content})\r\n\r\n\r\n/**\r\n * Self-contained syndicatable or reusable composition\r\n */\r\n@HtmlTagMarker\r\ninline fun SectioningOrFlowContent.article(classes : String? = null, crossinline block : ARTICLE.() -> Unit = {}) : Unit = ARTICLE(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Sidebar for tangentially related content\r\n */\r\n@HtmlTagMarker\r\ninline fun SectioningOrFlowContent.aside(classes : String? = null, crossinline block : ASIDE.() -> Unit = {}) : Unit = ASIDE(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Container for the dominant contents of another element\r\n */\r\n@HtmlTagMarker\r\ninline fun SectioningOrFlowContent.main(classes : String? = null, crossinline block : MAIN.() -> Unit = {}) : Unit = MAIN(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Section with navigational links\r\n */\r\n@HtmlTagMarker\r\ninline fun SectioningOrFlowContent.nav(classes : String? = null, crossinline block : NAV.() -> Unit = {}) : Unit = NAV(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Generic document or application section\r\n */\r\n@HtmlTagMarker\r\ninline fun SectioningOrFlowContent.section(classes : String? = null, crossinline block : SECTION.() -> Unit = {}) : Unit = SECTION(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n/**\r\n * Anchor\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.a(href : String? = null, target : String? = null, classes : String? = null, crossinline block : A.() -> Unit = {}) : Unit = A(attributesMapOf(\"href\", href,\"target\", target,\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Audio player\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.audio(classes : String? = null, crossinline block : AUDIO.() -> Unit = {}) : Unit = AUDIO(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Push button\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.getButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.get.realValue,\"name\", name,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.postButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.post.realValue,\"name\", name,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\r\n@Suppress(\"DEPRECATION\")\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.putButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.put.realValue,\"name\", name,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\r\n@Suppress(\"DEPRECATION\")\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.deleteButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.delete.realValue,\"name\", name,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\r\n@Suppress(\"DEPRECATION\")\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.patchButton(formEncType : ButtonFormEncType? = null, name : String? = null, type : ButtonType? = null, classes : String? = null, crossinline block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.patch.realValue,\"name\", name,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Plugin\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.embed(classes : String? = null, crossinline block : EMBED.() -> Unit = {}) : Unit = EMBED(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Inline subwindow\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, crossinline block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(),\"class\", classes), consumer).visit(block)\r\n/**\r\n * Inline subwindow\r\n */\r\n@HtmlTagMarker\r\nfun FlowOrInteractiveOrPhrasingContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = \"\") : Unit = IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(),\"class\", classes), consumer).visit({+content})\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.allowSameOriginIframe(classes : String? = null, crossinline block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowSameOrigin.realValue,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.allowFormSIframe(classes : String? = null, crossinline block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowFormS.realValue,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.allowScriptsIframe(classes : String? = null, crossinline block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowScripts.realValue,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\nfun FlowOrInteractiveOrPhrasingContent.allowSameOriginIframe(classes : String? = null, content : String = \"\") : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowSameOrigin.realValue,\"class\", classes), consumer).visit({+content})\r\n@HtmlTagMarker\r\nfun FlowOrInteractiveOrPhrasingContent.allowFormSIframe(classes : String? = null, content : String = \"\") : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowFormS.realValue,\"class\", classes), consumer).visit({+content})\r\n@HtmlTagMarker\r\nfun FlowOrInteractiveOrPhrasingContent.allowScriptsIframe(classes : String? = null, content : String = \"\") : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowScripts.realValue,\"class\", classes), consumer).visit({+content})\r\n\r\n/**\r\n * Embedded image\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.img(alt : String? = null, src : String? = null, classes : String? = null, crossinline block : IMG.() -> Unit = {}) : Unit = IMG(attributesMapOf(\"alt\", alt,\"src\", src,\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Form control\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", type?.enumEncode(),\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.buttonInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.button.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.checkBoxInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.checkBox.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.colorInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.color.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.dateInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.date.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.dateTimeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.dateTime.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.dateTimeLocalInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.dateTimeLocal.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.emailInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.email.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.fileInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.file.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.hiddenInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.hidden.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.imageInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.image.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.monthInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.month.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.numberInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.number.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.passwordInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.password.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.radioInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.radio.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.rangeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.range.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.resetInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.reset.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.searchInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.search.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.submitInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.submit.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.textInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.text.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.telInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.tel.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.timeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.time.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.urlInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.url.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.weekInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, crossinline block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.week.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Cryptographic key-pair generator form control\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, crossinline block : KEYGEN.() -> Unit = {}) : Unit = KEYGEN(attributesMapOf(\"keytype\", keyType?.enumEncode(),\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.rsaKeyGen(classes : String? = null, crossinline block : KEYGEN.() -> Unit = {}) : Unit = KEYGEN(attributesMapOf(\"keytype\", KeyGenKeyType.rsa.realValue,\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Form field label text\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.label(classes : String? = null, crossinline block : LABEL.() -> Unit = {}) : Unit = LABEL(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Generic embedded object\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.htmlObject(classes : String? = null, crossinline block : OBJECT.() -> Unit = {}) : Unit = OBJECT(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Option selector\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.select(classes : String? = null, crossinline block : SELECT.() -> Unit = {}) : Unit = SELECT(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Multi-line text field\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, crossinline block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", wrap?.enumEncode(),\"class\", classes), consumer).visit(block)\r\n/**\r\n * Multi-line text field\r\n */\r\n@HtmlTagMarker\r\nfun FlowOrInteractiveOrPhrasingContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = \"\") : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", wrap?.enumEncode(),\"class\", classes), consumer).visit({+content})\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, crossinline block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", TextAreaWrap.hard.realValue,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, crossinline block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", TextAreaWrap.soft.realValue,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\nfun FlowOrInteractiveOrPhrasingContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = \"\") : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", TextAreaWrap.hard.realValue,\"class\", classes), consumer).visit({+content})\r\n@HtmlTagMarker\r\nfun FlowOrInteractiveOrPhrasingContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = \"\") : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", TextAreaWrap.soft.realValue,\"class\", classes), consumer).visit({+content})\r\n\r\n/**\r\n * Video player\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowOrInteractiveOrPhrasingContent.video(classes : String? = null, crossinline block : VIDEO.() -> Unit = {}) : Unit = VIDEO(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n\r\n","package baaahs\n\nimport baaahs.geom.Vector3F\nimport baaahs.glsl.GlslBase\nimport baaahs.proto.Ports\nimport baaahs.shaders.SoundAnalysisPlugin\nimport baaahs.shows.AllShows\nimport baaahs.sim.*\nimport baaahs.visualizer.SwirlyPixelArranger\nimport baaahs.visualizer.Visualizer\nimport baaahs.visualizer.VizSurface\nimport decodeQueryParams\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\nimport org.w3c.dom.HTMLDivElement\nimport org.w3c.dom.HTMLInputElement\nimport kotlin.browser.document\nimport kotlin.browser.window\nimport kotlin.js.Date\n\n@JsName(\"SheepSimulator\")\nclass SheepSimulator {\n    private val queryParams = decodeQueryParams(document.location!!)\n    private val display = JsDisplay()\n    private val network = FakeNetwork(display = display.forNetwork())\n    private val dmxUniverse = FakeDmxUniverse()\n    private val model = selectModel()\n    val visualizer = Visualizer(\n        model,\n        display.forVisualizer(),\n        document.getElementById(\"sheepView\")!! as HTMLDivElement,\n        document.getElementById(\"selectionInfo\")!! as HTMLDivElement\n    )\n    private val fs = FakeFs()\n    private val bridgeClient: BridgeClient = BridgeClient(\"${window.location.hostname}:${Ports.SIMULATOR_BRIDGE_TCP}\")\n    private val pinkyDisplay = display.forPinky()\n    init {\n        GlslBase.plugins.add(SoundAnalysisPlugin(bridgeClient.soundAnalyzer))\n    }\n    public val shows = AllShows.allShows\n    private val pinky = Pinky(\n        model, shows, network, dmxUniverse, bridgeClient.beatSource, JsClock(), fs,\n        PermissiveFirmwareDaddy(), pinkyDisplay, bridgeClient.soundAnalyzer,\n        prerenderPixels = true\n    )\n\n    private fun selectModel(): Model<*> =\n        Pluggables.loadModel(queryParams[\"model\"] ?: Pluggables.defaultModel)\n\n    fun getPubSub(): PubSub.Client =\n        PubSub.Client(network.link(), pinky.address, Ports.PINKY_UI_TCP).apply {\n            install(gadgetModule)\n        }\n\n    fun start() = doRunBlocking {\n        pinkyScope.launch { pinky.run() }\n\n        val launcher = Launcher(document.getElementById(\"launcher\")!!)\n        launcher.add(\"Web UI\") {\n            WebUi(network, pinky.address)\n        }.also { delay(1000); it.click() }\n\n        launcher.add(\"Mapper\") {\n            val mapperUi = JsMapperUi(visualizer)\n            val mediaDevices = FakeMediaDevices(visualizer)\n            val mapper = Mapper(network, model, mapperUi, mediaDevices, pinky.address)\n            mapperScope.launch { mapper.start() }\n\n            mapperUi\n        }\n\n        launcher.add(\"Admin UI\") {\n            AdminUi(network, pinky.address)\n        }\n\n        val pixelDensity = queryParams.getOrElse(\"pixelDensity\") { \"0.2\" }.toFloat()\n        val pixelSpacing = queryParams.getOrElse(\"pixelSpacing\") { \"3\" }.toFloat()\n        val pixelArranger = SwirlyPixelArranger(pixelDensity, pixelSpacing)\n        var totalPixels = 0\n\n        model.allSurfaces.sortedBy(Model.Surface::name).forEachIndexed { index, surface ->\n            //            if (panel.name != \"17L\") return@forEachIndexed\n\n            val vizPanel = visualizer.addSurface(surface)\n            val pixelPositions = pixelArranger.arrangePixels(vizPanel)\n            vizPanel.vizPixels = VizSurface.VizPixels(vizPanel, pixelPositions)\n\n            totalPixels += pixelPositions.size\n            document.getElementById(\"visualizerPixelCount\").asDynamic().innerText = totalPixels.toString()\n\n            // This part is cheating... TODO: don't cheat!\n            val pixelLocations = vizPanel.getPixelLocationsInModelSpace()!!.map {\n                Vector3F(it.x.toFloat(), it.y.toFloat(), it.z.toFloat())\n            }\n            pinky.providePixelMapping_CHEAT(surface, pixelLocations)\n\n            val brain = Brain(\"brain//$index\", network, display.forBrain(), vizPanel.vizPixels ?: NullPixels)\n            pinky.providePanelMapping_CHEAT(BrainId(brain.id), surface)\n            brainScope.launch { randomDelay(1000); brain.run() }\n        }\n\n        model.movingHeads.forEach { movingHead ->\n            visualizer.addMovingHead(movingHead, dmxUniverse)\n        }\n\n        val showName = queryParams.get(\"show\")\n        showName?.let {\n            val show = shows.find { it.name == showName }\n            show?.let {\n                pinky.switchToShow(show)\n                pinkyDisplay.selectedShow = show\n            }\n        }\n\n//        val users = storage.users.transaction { store -> store.getAll() }\n//        println(\"users = ${users}\")\n\n        doRunBlocking {\n            delay(200000L)\n        }\n    }\n\n    object NullPixels : Pixels {\n        override val size = 0\n\n        override fun get(i: Int): Color = Color.BLACK\n        override fun set(i: Int, color: Color) {}\n        override fun set(colors: Array<Color>) {}\n    }\n\n    private val pinkyScope = CoroutineScope(Dispatchers.Main)\n    private val brainScope = CoroutineScope(Dispatchers.Main)\n    private val mapperScope = CoroutineScope(Dispatchers.Main)\n}\n\nclass JsClock : Clock {\n    override fun now(): Time = Date.now() / 1000.0\n}\n","package react.dom\n\nimport kotlinx.html.*\nimport kotlinx.html.attributes.*\nimport react.*\n\ninline fun <T : Tag> RBuilder.tag(block: RDOMBuilder<T>.() -> Unit, noinline factory: (TagConsumer<Unit>) -> T): ReactElement =\n    child(RDOMBuilder(factory).apply {\n        block()\n    }.create())\n\ninline fun RBuilder.a(href: String? = null, target: String? = null, classes: String? = null, block: RDOMBuilder<A>.() -> Unit): ReactElement = tag(block) { A(attributesMapOf(\"href\", href, \"target\", target, \"class\", classes), it) }\n\ninline fun RBuilder.abbr(classes: String? = null, block: RDOMBuilder<ABBR>.() -> Unit): ReactElement = tag(block) { ABBR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.address(classes: String? = null, block: RDOMBuilder<ADDRESS>.() -> Unit): ReactElement = tag(block) { ADDRESS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.area(shape: AreaShape? = null, alt: String? = null, classes: String? = null, block: RDOMBuilder<AREA>.() -> Unit): ReactElement = tag(block) { AREA(attributesMapOf(\"Shape\", shape?.enumEncode(), \"alt\", alt, \"class\", classes), it) }\n\ninline fun RBuilder.article(classes: String? = null, block: RDOMBuilder<ARTICLE>.() -> Unit): ReactElement = tag(block) { ARTICLE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.aside(classes: String? = null, block: RDOMBuilder<ASIDE>.() -> Unit): ReactElement = tag(block) { ASIDE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.audio(classes: String? = null, block: RDOMBuilder<AUDIO>.() -> Unit): ReactElement = tag(block) { AUDIO(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.b(classes: String? = null, block: RDOMBuilder<B>.() -> Unit): ReactElement = tag(block) { B(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.base(classes: String? = null, block: RDOMBuilder<BASE>.() -> Unit): ReactElement = tag(block) { BASE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.bdi(classes: String? = null, block: RDOMBuilder<BDI>.() -> Unit): ReactElement = tag(block) { BDI(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.bdo(classes: String? = null, block: RDOMBuilder<BDO>.() -> Unit): ReactElement = tag(block) { BDO(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.blockQuote(classes: String? = null, block: RDOMBuilder<BLOCKQUOTE>.() -> Unit): ReactElement = tag(block) { BLOCKQUOTE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.body(classes: String? = null, block: RDOMBuilder<BODY>.() -> Unit): ReactElement = tag(block) { BODY(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.br(classes: String? = null, block: RDOMBuilder<BR>.() -> Unit): ReactElement = tag(block) { BR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.button(formEncType: ButtonFormEncType? = null, formMethod: ButtonFormMethod? = null, type: ButtonType? = null, classes: String? = null, block: RDOMBuilder<BUTTON>.() -> Unit): ReactElement = tag(block) { BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(), \"formmethod\", formMethod?.enumEncode(), \"type\", type?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.canvas(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { CANVAS(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.canvas(classes: String? = null, block: RDOMBuilder<CANVAS>.() -> Unit): ReactElement = tag(block) { CANVAS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.caption(classes: String? = null, block: RDOMBuilder<CAPTION>.() -> Unit): ReactElement = tag(block) { CAPTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.cite(classes: String? = null, block: RDOMBuilder<CITE>.() -> Unit): ReactElement = tag(block) { CITE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.code(classes: String? = null, block: RDOMBuilder<CODE>.() -> Unit): ReactElement = tag(block) { CODE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.col(classes: String? = null, block: RDOMBuilder<COL>.() -> Unit): ReactElement = tag(block) { COL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.colGroup(classes: String? = null, block: RDOMBuilder<COLGROUP>.() -> Unit): ReactElement = tag(block) { COLGROUP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.command(type: CommandType? = null, classes: String? = null, block: RDOMBuilder<COMMAND>.() -> Unit): ReactElement = tag(block) { COMMAND(attributesMapOf(\"type\", type?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.dataList(classes: String? = null, block: RDOMBuilder<DATALIST>.() -> Unit): ReactElement = tag(block) { DATALIST(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dd(classes: String? = null, block: RDOMBuilder<DD>.() -> Unit): ReactElement = tag(block) { DD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.del(classes: String? = null, block: RDOMBuilder<DEL>.() -> Unit): ReactElement = tag(block) { DEL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.details(classes: String? = null, block: RDOMBuilder<DETAILS>.() -> Unit): ReactElement = tag(block) { DETAILS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dfn(classes: String? = null, block: RDOMBuilder<DFN>.() -> Unit): ReactElement = tag(block) { DFN(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dialog(classes: String? = null, block: RDOMBuilder<DIALOG>.() -> Unit): ReactElement = tag(block) { DIALOG(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.div(classes: String? = null, block: RDOMBuilder<DIV>.() -> Unit): ReactElement = tag(block) { DIV(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dl(classes: String? = null, block: RDOMBuilder<DL>.() -> Unit): ReactElement = tag(block) { DL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.dt(classes: String? = null, block: RDOMBuilder<DT>.() -> Unit): ReactElement = tag(block) { DT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.em(classes: String? = null, block: RDOMBuilder<EM>.() -> Unit): ReactElement = tag(block) { EM(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.embed(classes: String? = null, block: RDOMBuilder<EMBED>.() -> Unit): ReactElement = tag(block) { EMBED(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.fieldSet(classes: String? = null, block: RDOMBuilder<FIELDSET>.() -> Unit): ReactElement = tag(block) { FIELDSET(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.figcaption(classes: String? = null, block: RDOMBuilder<FIGCAPTION>.() -> Unit): ReactElement = tag(block) { FIGCAPTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.figure(classes: String? = null, block: RDOMBuilder<FIGURE>.() -> Unit): ReactElement = tag(block) { FIGURE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.footer(classes: String? = null, block: RDOMBuilder<FOOTER>.() -> Unit): ReactElement = tag(block) { FOOTER(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.form(action: String? = null, encType: FormEncType? = null, method: FormMethod? = null, classes: String? = null, block: RDOMBuilder<FORM>.() -> Unit): ReactElement = tag(block) { FORM(attributesMapOf(\"action\", action, \"enctype\", encType?.enumEncode(), \"method\", method?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.h1(classes: String? = null, block: RDOMBuilder<H1>.() -> Unit): ReactElement = tag(block) { H1(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h2(classes: String? = null, block: RDOMBuilder<H2>.() -> Unit): ReactElement = tag(block) { H2(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h3(classes: String? = null, block: RDOMBuilder<H3>.() -> Unit): ReactElement = tag(block) { H3(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h4(classes: String? = null, block: RDOMBuilder<H4>.() -> Unit): ReactElement = tag(block) { H4(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h5(classes: String? = null, block: RDOMBuilder<H5>.() -> Unit): ReactElement = tag(block) { H5(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.h6(classes: String? = null, block: RDOMBuilder<H6>.() -> Unit): ReactElement = tag(block) { H6(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.head(block: RDOMBuilder<HEAD>.() -> Unit): ReactElement = tag(block) { HEAD(emptyMap, it) }\n\ninline fun RBuilder.header(classes: String? = null, block: RDOMBuilder<HEADER>.() -> Unit): ReactElement = tag(block) { HEADER(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.hGroup(classes: String? = null, block: RDOMBuilder<HGROUP>.() -> Unit): ReactElement = tag(block) { HGROUP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.hr(classes: String? = null, block: RDOMBuilder<HR>.() -> Unit): ReactElement = tag(block) { HR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.html(block: RDOMBuilder<HTML>.() -> Unit): ReactElement = tag(block) { HTML(emptyMap, it) }\n\ninline fun RBuilder.i(classes: String? = null, block: RDOMBuilder<I>.() -> Unit): ReactElement = tag(block) { I(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.iframe(sandbox: IframeSandbox? = null, classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(), \"class\", classes), it) }\ninline fun RBuilder.iframe(sandbox: IframeSandbox? = null, classes: String? = null, block: RDOMBuilder<IFRAME>.() -> Unit): ReactElement = tag(block) { IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.img(alt: String? = null, src: String? = null, classes: String? = null, block: RDOMBuilder<IMG>.() -> Unit): ReactElement = tag(block) { IMG(attributesMapOf(\"alt\", alt, \"src\", src, \"class\", classes), it) }\n\ninline fun RBuilder.input(type: InputType? = null, formEncType: InputFormEncType? = null, formMethod: InputFormMethod? = null, name: String? = null, classes: String? = null, block: RDOMBuilder<INPUT>.() -> Unit): ReactElement = tag(block) { INPUT(attributesMapOf(\"type\", type?.enumEncode(), \"formenctype\", formEncType?.enumEncode(), \"formmethod\", formMethod?.enumEncode(), \"name\", name, \"class\", classes), it) }\n\ninline fun RBuilder.ins(classes: String? = null, block: RDOMBuilder<INS>.() -> Unit): ReactElement = tag(block) { INS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.kbd(classes: String? = null, block: RDOMBuilder<KBD>.() -> Unit): ReactElement = tag(block) { KBD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.keyGen(keyType: KeyGenKeyType? = null, classes: String? = null, block: RDOMBuilder<KEYGEN>.() -> Unit): ReactElement = tag(block) { KEYGEN(attributesMapOf(\"keytype\", keyType?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.label(classes: String? = null, block: RDOMBuilder<LABEL>.() -> Unit): ReactElement = tag(block) { LABEL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.legend(classes: String? = null, block: RDOMBuilder<LEGEND>.() -> Unit): ReactElement = tag(block) { LEGEND(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.li(classes: String? = null, block: RDOMBuilder<LI>.() -> Unit): ReactElement = tag(block) { LI(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.link(href: String? = null, rel: String? = null, type: String? = null, block: RDOMBuilder<LINK>.() -> Unit): ReactElement = tag(block) { LINK(attributesMapOf(\"href\", href, \"rel\", rel, \"type\", type), it) }\n\ninline fun RBuilder.map(name: String? = null, classes: String? = null, block: RDOMBuilder<MAP>.() -> Unit): ReactElement = tag(block) { MAP(attributesMapOf(\"name\", name, \"class\", classes), it) }\n\ninline fun RBuilder.mark(classes: String? = null, block: RDOMBuilder<MARK>.() -> Unit): ReactElement = tag(block) { MARK(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.math(classes: String? = null, block: RDOMBuilder<MATH>.() -> Unit): ReactElement = tag(block) { MATH(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.mathml(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { MATHML(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.mathml(classes: String? = null, block: RDOMBuilder<MATHML>.() -> Unit): ReactElement = tag(block) { MATHML(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.meta(name: String? = null, content: String? = null, block: RDOMBuilder<META>.() -> Unit): ReactElement = tag(block) { META(attributesMapOf(\"name\", name, \"content\", content), it) }\n\ninline fun RBuilder.meter(classes: String? = null, block: RDOMBuilder<METER>.() -> Unit): ReactElement = tag(block) { METER(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.nav(classes: String? = null, block: RDOMBuilder<NAV>.() -> Unit): ReactElement = tag(block) { NAV(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.noScript(classes: String? = null, block: RDOMBuilder<NOSCRIPT>.() -> Unit): ReactElement = tag(block) { NOSCRIPT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.object_(classes: String? = null, block: RDOMBuilder<OBJECT>.() -> Unit): ReactElement = tag(block) { OBJECT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.ol(classes: String? = null, block: RDOMBuilder<OL>.() -> Unit): ReactElement = tag(block) { OL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.optGroup(label: String? = null, classes: String? = null, block: RDOMBuilder<OPTGROUP>.() -> Unit): ReactElement = tag(block) { OPTGROUP(attributesMapOf(\"label\", label, \"class\", classes), it) }\n\ninline fun RBuilder.option(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { OPTION(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.option(classes: String? = null, block: RDOMBuilder<OPTION>.() -> Unit): ReactElement = tag(block) { OPTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.output(classes: String? = null, block: RDOMBuilder<OUTPUT>.() -> Unit): ReactElement = tag(block) { OUTPUT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.p(classes: String? = null, block: RDOMBuilder<P>.() -> Unit): ReactElement = tag(block) { P(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.param(name: String? = null, value: String? = null, block: RDOMBuilder<PARAM>.() -> Unit): ReactElement = tag(block) { PARAM(attributesMapOf(\"name\", name, \"value\", value), it) }\n\ninline fun RBuilder.pre(classes: String? = null, block: RDOMBuilder<PRE>.() -> Unit): ReactElement = tag(block) { PRE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.progress(classes: String? = null, block: RDOMBuilder<PROGRESS>.() -> Unit): ReactElement = tag(block) { PROGRESS(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.q(classes: String? = null, block: RDOMBuilder<Q>.() -> Unit): ReactElement = tag(block) { Q(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.rp(classes: String? = null, block: RDOMBuilder<RP>.() -> Unit): ReactElement = tag(block) { RP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.rt(classes: String? = null, block: RDOMBuilder<RT>.() -> Unit): ReactElement = tag(block) { RT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.ruby(classes: String? = null, block: RDOMBuilder<RUBY>.() -> Unit): ReactElement = tag(block) { RUBY(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.samp(classes: String? = null, block: RDOMBuilder<SAMP>.() -> Unit): ReactElement = tag(block) { SAMP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.script(type: String? = null, src: String? = null, block: RDOMBuilder<SCRIPT>.() -> Unit): ReactElement = tag(block) { SCRIPT(attributesMapOf(\"type\", type, \"src\", src), it) }\n\ninline fun RBuilder.section(classes: String? = null, block: RDOMBuilder<SECTION>.() -> Unit): ReactElement = tag(block) { SECTION(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.select(classes: String? = null, block: RDOMBuilder<SELECT>.() -> Unit): ReactElement = tag(block) { SELECT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.small(classes: String? = null, block: RDOMBuilder<SMALL>.() -> Unit): ReactElement = tag(block) { SMALL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.source(classes: String? = null, block: RDOMBuilder<SOURCE>.() -> Unit): ReactElement = tag(block) { SOURCE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.span(classes: String? = null, block: RDOMBuilder<SPAN>.() -> Unit): ReactElement = tag(block) { SPAN(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.strong(classes: String? = null, block: RDOMBuilder<STRONG>.() -> Unit): ReactElement = tag(block) { STRONG(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.style(type: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { STYLE(attributesMapOf(\"type\", type), it) }\ninline fun RBuilder.style(type: String? = null, block: RDOMBuilder<STYLE>.() -> Unit): ReactElement = tag(block) { STYLE(attributesMapOf(\"type\", type), it) }\n\ninline fun RBuilder.sub(classes: String? = null, block: RDOMBuilder<SUB>.() -> Unit): ReactElement = tag(block) { SUB(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.sup(classes: String? = null, block: RDOMBuilder<SUP>.() -> Unit): ReactElement = tag(block) { SUP(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.svg(classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { SVG(attributesMapOf(\"class\", classes), it) }\ninline fun RBuilder.svg(classes: String? = null, block: RDOMBuilder<SVG>.() -> Unit): ReactElement = tag(block) { SVG(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.table(classes: String? = null, block: RDOMBuilder<TABLE>.() -> Unit): ReactElement = tag(block) { TABLE(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.tbody(classes: String? = null, block: RDOMBuilder<TBODY>.() -> Unit): ReactElement = tag(block) { TBODY(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.td(classes: String? = null, block: RDOMBuilder<TD>.() -> Unit): ReactElement = tag(block) { TD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.textArea(rows: String? = null, cols: String? = null, wrap: TextAreaWrap? = null, classes: String? = null, content: String = \"\"): ReactElement = tag({ +content }) { TEXTAREA(attributesMapOf(\"rows\", rows, \"cols\", cols, \"wrap\", wrap?.enumEncode(), \"class\", classes), it) }\ninline fun RBuilder.textArea(rows: String? = null, cols: String? = null, wrap: TextAreaWrap? = null, classes: String? = null, block: RDOMBuilder<TEXTAREA>.() -> Unit): ReactElement = tag(block) { TEXTAREA(attributesMapOf(\"rows\", rows, \"cols\", cols, \"wrap\", wrap?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.tfoot(classes: String? = null, block: RDOMBuilder<TFOOT>.() -> Unit): ReactElement = tag(block) { TFOOT(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.th(scope: ThScope? = null, classes: String? = null, block: RDOMBuilder<TH>.() -> Unit): ReactElement = tag(block) { TH(attributesMapOf(\"scope\", scope?.enumEncode(), \"class\", classes), it) }\n\ninline fun RBuilder.thead(classes: String? = null, block: RDOMBuilder<THEAD>.() -> Unit): ReactElement = tag(block) { THEAD(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.time(classes: String? = null, block: RDOMBuilder<TIME>.() -> Unit): ReactElement = tag(block) { TIME(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.title(content: String = \"\"): ReactElement = tag({ +content }) { TITLE(emptyMap, it) }\ninline fun RBuilder.title(block: RDOMBuilder<TITLE>.() -> Unit): ReactElement = tag(block) { TITLE(emptyMap, it) }\n\ninline fun RBuilder.tr(classes: String? = null, block: RDOMBuilder<TR>.() -> Unit): ReactElement = tag(block) { TR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.ul(classes: String? = null, block: RDOMBuilder<UL>.() -> Unit): ReactElement = tag(block) { UL(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.var_(classes: String? = null, block: RDOMBuilder<VAR>.() -> Unit): ReactElement = tag(block) { VAR(attributesMapOf(\"class\", classes), it) }\n\ninline fun RBuilder.video(classes: String? = null, block: RDOMBuilder<VIDEO>.() -> Unit): ReactElement = tag(block) { VIDEO(attributesMapOf(\"class\", classes), it) }\n","package baaahs\n\nimport kotlinx.serialization.Serializable\nimport kotlin.math.PI\nimport kotlin.math.max\nimport kotlin.math.min\nimport kotlin.math.sin\n\n@Serializable\ndata class BeatData(\n    /** Some moment in history when we saw a beat 1. */\n    val measureStartTime: Time,\n\n    val beatIntervalMs: Int,\n\n    val beatsPerMeasure: Int = 4,\n\n    val confidence: Float = 1f\n) {\n    private val beatIntervalSec: Double get() = beatIntervalMs / 1000.0\n\n    val bpm: Float\n        get() {\n            if (beatIntervalMs == 0) return 0.0.toFloat()\n            return (60_000 / beatIntervalMs).toFloat()\n        }\n\n    fun beatWithinMeasure(clock: Clock): Float {\n        if (beatIntervalMs == 0) return -1f\n        val elapsedSinceStartOfMeasure = clock.now() - measureStartTime\n        return ((elapsedSinceStartOfMeasure / beatIntervalSec).toFloat()) % beatsPerMeasure\n    }\n\n    fun timeSinceMeasure(clock: Clock): Float {\n        if (beatIntervalMs == 0) return -1f\n        val elapsedSinceStartOfMeasure = clock.now() - measureStartTime\n        return (elapsedSinceStartOfMeasure / beatIntervalSec).toFloat()\n    }\n\n    /**\n     * Returns 1.0 if we're on a beat, 0.0 when we're furthest from the last beat,\n     * and anywhere in between otherwise.\n     */\n    fun fractionTillNextBeat(clock: Clock): Float {\n        return if (beatIntervalMs == 0) -1f else return clamp(sineWithEarlyAttack(clock)) * confidence\n    }\n\n    // TODO: make these into pluggable strategies that can be selected by shows.\n    private fun sineWithEarlyAttack(clock: Clock): Float {\n        return (((sin(beatWithinMeasure(clock) % 1f - .87) * 2 * PI) * 1.25 + 1) / 2.0).toFloat()\n    }\n\n    private fun sawtooth(clock: Clock): Float {\n        return 1 - beatWithinMeasure(clock) % 1.0f\n    }\n\n    /** Returns 1.0 if we're on the start of the measure, 0.0 when we're furthest from the start of the measure,\n     * and anywhere in between otherwise. */\n    fun fractionTillNextMeasure(clock: Clock): Float =\n        if (beatIntervalMs == 0) -1f else 1 - timeSinceMeasure(clock)\n\n    private fun clamp(f: Float): Float = min(1f, max(f, 0f))\n}\n\n\ninterface BeatSource {\n    fun getBeatData(): BeatData\n\n    object None : BeatSource {\n        val none = BeatData(0.0, 0, 4, 0f)\n\n        override fun getBeatData(): BeatData = none\n    }\n}\n\ntypealias Time = Double\n\ninterface Clock {\n    fun now(): Time\n}\n","package baaahs\n\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlinx.serialization.*\nimport kotlinx.serialization.PrimitiveKind.INT\nimport kotlin.js.JsName\nimport kotlin.math.max\nimport kotlin.math.min\nimport kotlin.math.sqrt\nimport kotlin.random.Random\n\n/**\n * Canonical representation of a color.\n */\n@Serializable\ndata class Color(val argb: Int) {\n    /** Values are bounded at `0f..1f`. */\n    constructor(red: Float, green: Float, blue: Float, alpha: Float = 1f) : this(asArgb(red, green, blue, alpha))\n\n    /** Values are bounded at `0..255`. */\n    constructor(red: Int, green: Int, blue: Int, alpha: Int = 255) : this(asArgb(red, green, blue, alpha))\n\n    /** Values are bounded at `0..255` (but really `-128..127` because signed). */\n    // TODO: use UByte.\n    constructor(red: Byte, green: Byte, blue: Byte, alpha: Byte = 255.toByte()) : this(asArgb(red, green, blue, alpha))\n\n    fun serialize(writer: ByteArrayWriter) = writer.writeInt(argb)\n\n    fun serializeWithoutAlpha(writer: ByteArrayWriter) {\n        writer.writeByte(redB)\n        writer.writeByte(greenB)\n        writer.writeByte(blueB)\n    }\n\n    @Transient\n    val alphaB: Byte\n        get() = alphaI(argb).toByte()\n    @Transient\n    val redB: Byte\n        get() = redI(argb).toByte()\n    @Transient\n    val greenB: Byte\n        get() = greenI(argb).toByte()\n    @Transient\n    val blueB: Byte\n        get() = blueI(argb).toByte()\n\n    @Transient\n    val alphaI: Int\n        get() = alphaI(argb)\n    @Transient\n    val redI: Int\n        get() = redI(argb)\n    @Transient\n    val greenI: Int\n        get() = greenI(argb)\n    @Transient\n    val blueI: Int\n        get() = blueI(argb)\n\n    @Transient\n    val alphaF: Float\n        get() = alphaI.toFloat() / 255\n    @Transient\n    val redF: Float\n        get() = redI.toFloat() / 255\n    @Transient\n    val greenF: Float\n        get() = greenI.toFloat() / 255\n    @Transient\n    val blueF: Float\n        get() = blueI.toFloat() / 255\n\n    fun alphaI(value: Int) = value shr 24 and 0xff\n    fun redI(value: Int) = value shr 16 and 0xff\n    fun greenI(value: Int) = value shr 8 and 0xff\n    fun blueI(value: Int) = value and 0xff\n\n    val rgb: Int get() = argb and 0xffffff\n    fun toInt(): Int = argb\n\n    @JsName(\"toHexString\")\n    fun toHexString() =\n        \"#\" + maybe(alphaI) + redI.toHexString() + greenI.toHexString() + blueI.toHexString()\n\n    private fun maybe(alphaI: Int): String = if (alphaI == 255) \"\" else alphaI.toHexString()\n\n    fun Int.toHexString(): String {\n        if (this < 0) {\n            throw Exception(\"can't toHexString() negative ints\")\n        }\n\n        if (this < 16) {\n            return \"0\" + toString(16)\n        } else {\n            return toString(16)\n        }\n    }\n\n    /** Super-naive approximation of desaturation. */\n    fun withSaturation(saturation: Float): Color {\n        val desaturation = 1 - saturation\n        return Color(\n            redF + (1 - redF) * desaturation,\n            greenF + (1 - greenF) * desaturation,\n            blueF + (1 - blueF) * desaturation,\n            alphaF\n        )\n    }\n\n    fun withBrightness(brightness: Float): Color {\n        return Color(\n            redF * brightness,\n            greenF * brightness,\n            blueF * brightness,\n            alphaF\n        )\n    }\n\n    fun distanceTo(other: Color): Float {\n        val dist = square(other.redF - redF) + square(other.greenF - greenF) + square(other.blueF - blueF)\n        return sqrt(dist / 3)\n    }\n\n    private fun square(f: Float) = f * f\n\n    fun plus(other: Color): Color =\n        Color(redI + other.redI, greenI + other.greenI, blueI + other.blueI, alphaI)\n\n    fun fade(other: Color, amount: Float = 0.5f): Color {\n        val amountThis = 1 - amount\n\n        return Color(\n            redF * amountThis + other.redF * amount,\n            greenF * amountThis + other.greenF * amount,\n            blueF * amountThis + other.blueF * amount,\n            alphaF * amountThis + other.alphaF * amount\n        )\n    }\n\n    fun opaque(): Color = Color(argb or 0xff000000.toInt())\n\n    override fun toString(): String {\n        return \"Color(${toHexString()})\"\n    }\n\n    @Serializer(forClass = Color::class)\n    companion object : KSerializer<Color> {\n        val BLACK = Color(0, 0, 0)\n        val WHITE = Color(255, 255, 255)\n        val RED = Color(255, 0, 0)\n        val ORANGE = Color(255, 127, 0)\n        val YELLOW = Color(255, 255, 0)\n        val GREEN = Color(0, 255, 0)\n        val CYAN = Color(0, 255, 255)\n        val BLUE = Color(0, 0, 255)\n        val MAGENTA = Color(255, 0, 255)\n        val PURPLE = Color(200, 0, 212)\n        val TRANSPARENT = Color(0, 0, 0, 0)\n\n        fun random() = Color(\n            Random.nextInt() and 0xff,\n            Random.nextInt() and 0xff,\n            Random.nextInt() and 0xff\n        )\n\n        fun parse(reader: ByteArrayReader) = Color(reader.readInt())\n\n        fun parseWithoutAlpha(reader: ByteArrayReader) =\n            Color(reader.readByte(), reader.readByte(), reader.readByte())\n\n        @JsName(\"fromInt\")\n        fun from(i: Int) = Color(i)\n\n        @JsName(\"fromInts\")\n        fun from(r: Int, g: Int, b: Int) = Color(r, g, b)\n\n        @JsName(\"fromString\")\n        fun from(hex: String): Color {\n            var hexDigits = hex.trimStart('#')\n            val alpha = if (hexDigits.length == 8) {\n                hexDigits.substring(0, 2).toInt(16).also { hexDigits = hexDigits.substring(2) }\n            } else {\n                0xff\n            }\n\n            if (hexDigits.length == 6) {\n                // huh? that's not an Int already? I'm supposed to do twos-complement math and negate? blech Kotlin.\n                return Color(alpha shl 24 or hexDigits.toInt(16))\n            }\n            throw IllegalArgumentException(\"unknown color \\\"$hex\\\"\")\n        }\n\n        private fun asArgb(red: Float, green: Float, blue: Float, alpha: Float = 1f): Int {\n            val asArgb = asArgb(asInt(red), asInt(green), asInt(blue), asInt(alpha))\n            return asArgb\n        }\n\n        private fun asArgb(red: Int, green: Int, blue: Int, alpha: Int = 255): Int {\n            return ((bounded(alpha) shl 24)\n                    or (bounded(red) shl 16)\n                    or (bounded(green) shl 8)\n                    or (bounded(blue)))\n        }\n\n        private fun asArgb(red: Byte, green: Byte, blue: Byte, alpha: Byte = 255.toByte()): Int {\n            return ((bounded(alpha) shl 24)\n                    or (bounded(red) shl 16)\n                    or (bounded(green) shl 8)\n                    or (bounded(blue)))\n        }\n\n        private fun bounded(f: Float): Float = max(0f, min(1f, f))\n        private fun bounded(i: Int): Int = max(0, min(255, i))\n        private fun bounded(b: Byte): Int = b.toInt() and 0xff\n        private fun asInt(f: Float): Int = (bounded(f) * 255).toInt()\n\n        override val descriptor: SerialDescriptor = PrimitiveDescriptor(\"Color\", INT)\n        override fun serialize(encoder: Encoder, obj: Color) = encoder.encodeInt(obj.argb)\n        override fun deserialize(decoder: Decoder): Color = Color(decoder.decodeInt())\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","package baaahs\n\npublic class Config {\n    companion object {\n        val DMX_DEVICES: Map<String, Int> = mapOf(\n            Pair(\"leftEye\", 1),\n            Pair(\"rightEye\", 17)\n        )\n    }\n\n\n    class MovingHeadConfig(val deviceType: Dmx.DeviceType, val baseChannel: Int)\n}\n","package baaahs\n\nimport baaahs.net.Network\n\ninterface Display {\n    fun forNetwork(): NetworkDisplay\n    fun forPinky(): PinkyDisplay\n    fun forBrain(): BrainDisplay\n    fun forVisualizer(): VisualizerDisplay\n}\n\ninterface NetworkDisplay {\n    var packetLossRate: Float\n    fun receivedPacket()\n    fun droppedPacket()\n}\n\ninterface PinkyDisplay {\n    fun listShows(shows: List<Show>)\n\n    var brainCount: Int\n    var beat: Int\n    var bpm: Float\n    var beatConfidence: Float\n    var onShowChange: (() -> Unit)\n    var selectedShow: Show?\n    var showFrameMs: Int\n    var stats: Pinky.NetworkStats?\n}\n\nopen class StubPinkyDisplay : PinkyDisplay {\n    override fun listShows(shows: List<Show>) {\n    }\n\n    override var brainCount = 0\n    override var beat = 0\n    override var bpm = 0.0f\n    override var beatConfidence = 0.0f\n    override var onShowChange: () -> Unit = { }\n    override var selectedShow: Show? = null\n    override var showFrameMs: Int = 0\n    override var stats: Pinky.NetworkStats? = null\n}\n\ninterface BrainDisplay {\n    var id: String?\n    var surface: Surface?\n    var onReset: suspend () -> Unit\n    fun haveLink(link: Network.Link)\n}\n\ninterface VisualizerDisplay {\n    var renderMs: Int\n}","package baaahs\n\ninterface Dmx {\n    abstract class Universe {\n        abstract fun writer(baseChannel: Int, channelCount: Int): Buffer\n        abstract fun sendFrame()\n        abstract fun allOff()\n    }\n\n    class Buffer(private val channels: ByteArray, val baseChannel: Int, val channelCount: Int) {\n        operator fun get(channel: Channel): Byte = get(channel.offset)\n\n        operator fun get(index: Int): Byte {\n            boundsCheck(index)\n            return channels[baseChannel + index]\n        }\n\n        operator fun set(channel: Channel, value: Byte) = set(channel.offset, value)\n\n        operator fun set(index: Int, value: Byte) {\n            boundsCheck(index)\n            channels[baseChannel + index] = value\n        }\n\n        private fun boundsCheck(index: Int) {\n            if (index < 0 || index >= channelCount) {\n                throw Exception(\"index out of bounds: $index >= ${channelCount}\")\n            }\n        }\n    }\n\n    interface Channel {\n        val offset: Int\n    }\n\n    open class DeviceType(val channelCount: Int)\n}\n","package baaahs\n\ninterface FirmwareDaddy {\n    fun doesntLikeThisVersion(firmwareVersion: String?): Boolean\n\n    val urlForPreferredVersion: String\n}\n\nclass PermissiveFirmwareDaddy : FirmwareDaddy {\n    override fun doesntLikeThisVersion(firmwareVersion: String?): Boolean {\n        // False indicates this permissive daddy likes all firmwares\n        return false;\n    }\n\n    override val urlForPreferredVersion: String\n        get() = \"\"\n}\n\nclass StrictFirmwareDaddy(private val version: String, private val url: String) : FirmwareDaddy {\n    override fun doesntLikeThisVersion(firmwareVersion: String?): Boolean {\n        return version == firmwareVersion;\n    }\n\n    override val urlForPreferredVersion: String\n        get() = url\n}\n","package baaahs\n\nimport baaahs.gadgets.ColorPicker\nimport baaahs.gadgets.PalettePicker\nimport baaahs.gadgets.Slider\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.Polymorphic\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.Transient\nimport kotlinx.serialization.builtins.ArraySerializer\nimport kotlinx.serialization.builtins.MapSerializer\nimport kotlinx.serialization.builtins.serializer\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\nimport kotlinx.serialization.json.JsonElement\nimport kotlinx.serialization.modules.SerializersModule\nimport kotlin.collections.set\nimport kotlin.js.JsName\nimport kotlin.properties.ReadWriteProperty\nimport kotlin.reflect.KClass\nimport kotlin.reflect.KProperty\n\n/**\n * Base class for user input gadgets.\n *\n * Gadgets may be requested by a [Show]:\n *\n * ```kotlin\n * val sparklinessSlider = showRunner.getGadget(Slider(\"Sparkliness\"))\n *\n * fun nextFrame() {\n *   println(\"Sparkliness is ${sparklinessSlider.value}.\")\n * }\n * ```\n *\n * Mutable values in a gadget should be declared like this:\n *\n * ```kotlin\n *     var value: Float by updatable(\"value\", initialValue, Float.serializer())\n * ```\n *\n * Mutable values _should not_ be included in tests for equality.\n */\nopen class Gadget {\n    @Transient\n    private val listeners = mutableSetOf<GadgetListener>()\n\n    @JsName(\"listen\")\n    fun listen(gadgetListener: GadgetListener) {\n        if (!listeners.add(gadgetListener)) throw IllegalStateException(\"$gadgetListener already listening to $this\")\n    }\n\n    @JsName(\"unlisten\")\n    fun unlisten(gadgetListener: GadgetListener) {\n        if (!listeners.remove(gadgetListener)) throw IllegalStateException(\"$gadgetListener isn't listening to $this\")\n    }\n\n    fun changed() = listeners.forEach { it.invoke(this) }\n\n    fun withoutTriggering(gadgetListener: GadgetListener, fn: () -> Unit) {\n        unlisten(gadgetListener)\n        try {\n            fn()\n        } finally {\n            listen(gadgetListener)\n        }\n    }\n\n    protected fun <T> updatable(name: String, initialValue: T, serializer: KSerializer<T>) =\n        GadgetValueObserver(name, initialValue, serializer, state) { changed() }\n\n    /**\n     * Implementing child classes should change their state a little bit in some valid way, as if a user had done it.\n     */\n    open fun adjustALittleBit() {\n    }\n\n    val state: MutableMap<String, JsonElement> = hashMapOf()\n}\n\ntypealias GadgetListener = (Gadget) -> Unit\n\nclass GadgetValueObserver<T>(\n    val name: String,\n    val initialValue: T,\n    private val serializer: KSerializer<T>,\n    val data: MutableMap<String, JsonElement>,\n    val onChange: () -> Unit\n) : ReadWriteProperty<Gadget, T> {\n    override fun getValue(thisRef: Gadget, property: KProperty<*>): T {\n        val value = data[name]\n        return if (value == null) initialValue else {\n            jsonParser.fromJson(serializer, value)\n        }\n    }\n\n    override fun setValue(thisRef: Gadget, property: KProperty<*>, value: T) {\n        if (getValue(thisRef, property) != value) {\n            data[name] = jsonParser.toJson(serializer, value)\n            onChange()\n        }\n    }\n}\n\n@Serializable()\nclass GadgetData(val name: String, @Polymorphic var gadget: Gadget, val topicName: String)\n\nval GadgetDataSerializer = MapSerializer(String.serializer(), JsonElement.serializer())\n\nclass GadgetDisplay(pubSub: PubSub.Client, onUpdatedGadgets: (Array<GadgetData>) -> Unit) {\n    private var gadgetsChannel: PubSub.Channel<List<GadgetData>>\n    private val activeGadgets = mutableListOf<GadgetData>()\n    private val channels = hashMapOf<String, PubSub.Channel<Map<String, JsonElement>>>()\n\n    init {\n        this.gadgetsChannel = pubSub.subscribe(Topics.activeGadgets) { gadgetDatas ->\n            activeGadgets.clear()\n            channels.forEach { it.value.unsubscribe() }\n            channels.clear()\n\n            gadgetDatas.forEach { gadgetData ->\n                val gadget = gadgetData.gadget\n                val topicName = gadgetData.topicName\n\n                val listener: GadgetListener = {\n                    val observer = channels[topicName]\n                    if (observer == null) {\n                        println(\"Huh, no observer for $topicName; discarding update (know about ${channels.keys})\")\n                    } else {\n                        observer.onChange(it.state)\n                    }\n                }\n                gadget.listen(listener)\n\n                channels[topicName] =\n                    pubSub.subscribe(PubSub.Topic(topicName, GadgetDataSerializer)) { json ->\n                        gadget.apply {\n                            withoutTriggering(listener) {\n                                gadget.state.putAll(json)\n                                gadget.changed()\n                            }\n                        }\n                    }\n\n                activeGadgets.add(gadgetData)\n            }\n\n            onUpdatedGadgets(activeGadgets.toTypedArray())\n        }\n    }\n\n    fun unsubscribe() {\n        gadgetsChannel.unsubscribe()\n    }\n}\n\nval gadgetModule = SerializersModule {\n    polymorphic(Gadget::class) {\n        ColorPicker::class with ColorPicker.serializer()\n        PalettePicker::class with PalettePicker.serializer()\n        Slider::class with Slider.serializer()\n    }\n}\n\nprivate val jsonParser = Json(JsonConfiguration.Stable)\n\nfun <T : Any> KSerializer<T>.array(kKlass: KClass<T>): KSerializer<Array<T>> = ArraySerializer(kKlass, this)\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns a [List] containing all key-value pairs.\n */\npublic fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>> {\n    if (size == 0)\n        return emptyList()\n    val iterator = entries.iterator()\n    if (!iterator.hasNext())\n        return emptyList()\n    val first = iterator.next()\n    if (!iterator.hasNext())\n        return listOf(first.toPair())\n    val result = ArrayList<Pair<K, V>>(size)\n    result.add(first.toPair())\n    do {\n        result.add(iterator.next().toPair())\n    } while (iterator.hasNext())\n    return result\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapToList\n */\npublic inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each entry in the original map.\n */\npublic inline fun <K, V, R : Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each entry in the original map\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each entry of the original map\n * and appends the results to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns `true` if all entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if map has at least one entry.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <K, V> Map<out K, V>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one entry matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of entries in this map.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of entries matching the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int {\n    if (isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Performs the given [action] on each entry.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.maxBy(selector)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.maxWith(comparator)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.minBy(selector)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.\n */\npublic fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.minWith(comparator)\n}\n\n/**\n * Returns `true` if the map has no entries.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <K, V> Map<out K, V>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.none(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each entry and returns the map itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original map returning its entries when being iterated.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.asIterable(): Iterable<Map.Entry<K, V>> {\n    return entries\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.\n */\npublic fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>> {\n    return entries.asSequence()\n}\n\n","package baaahs\n\nimport com.soywiz.klock.DateTime\nimport kotlinx.serialization.json.JsonElement\nimport kotlin.random.Random\n\nclass GadgetManager(private val pubSub: PubSub.Server) {\n    private val activeGadgets = mutableListOf<GadgetData>()\n    private val activeGadgetChannel = pubSub.publish(Topics.activeGadgets, activeGadgets) { }\n\n    private val gadgets = mutableMapOf<String, GadgetInfo>()\n    private val priorRequestedGadgets = mutableListOf<Pair<String, Gadget>>()\n    var lastUserInteraction = DateTime.now()\n\n    fun clear() {\n        gadgets.values.forEach { gadgetChannel -> gadgetChannel.channel.unsubscribe() }\n        gadgets.clear()\n        activeGadgets.clear()\n    }\n\n    fun sync(\n        requestedGadgets: List<Pair<String, Gadget>>,\n        restoreState: Map<String, Map<String, JsonElement>> = emptyMap()\n    ) {\n        // First, update state on new gadgets.\n        requestedGadgets.forEach { (name, gadget) ->\n            restoreState[name]?.let { state -> gadget.state.putAll(state) }\n        }\n\n        if (priorRequestedGadgets == requestedGadgets) {\n            requestedGadgets.zip(priorRequestedGadgets).forEach { (new, old) ->\n                val (name, oldGadget) = old\n                val newGadget = new.second\n\n                val gadgetInfo = gadgets[name]!!\n                gadgetInfo.channel.replaceOnUpdate { updated ->\n                    incomingGadgetChange(newGadget, updated)\n                }\n                gadgetInfo.gadgetData.gadget.unlisten(gadgetInfo.gadgetChannelListener)\n                gadgetInfo.gadgetData.gadget = newGadget\n                newGadget.listen(gadgetInfo.gadgetChannelListener)\n\n                if (oldGadget.state != newGadget.state) {\n                    gadgetInfo.channel.onChange(newGadget.state)\n                }\n            }\n        } else {\n            logger.debug {\n                \"Gadgets don't match!\\n\" +\n                        \"old: ${priorRequestedGadgets}\\n\" +\n                        \"new: ${requestedGadgets}\"\n            }\n            activeGadgets.clear()\n            requestedGadgets.forEach { (name, gadget) ->\n                val topic =\n                    PubSub.Topic(\"/gadgets/$name\", GadgetDataSerializer)\n\n                val channel = pubSub.publish(topic, gadget.state) { updated ->\n                    incomingGadgetChange(gadget, updated)\n                }\n                val gadgetData = GadgetData(name, gadget, topic.name)\n\n                activeGadgets.add(gadgetData)\n                val gadgetChannelListener: (Gadget) -> Unit = { gadget1 ->\n                    channel.onChange(gadget1.state)\n                }\n                gadgets[name] = GadgetInfo(topic, channel, gadgetData, gadgetChannelListener)\n                gadget.listen(gadgetChannelListener)\n            }\n            activeGadgetChannel.onChange(activeGadgets)\n        }\n\n        priorRequestedGadgets.clear()\n        priorRequestedGadgets.addAll(requestedGadgets)\n    }\n\n    private fun incomingGadgetChange(\n        gadget: Gadget,\n        updatedData: Map<String, JsonElement>\n    ) {\n        gadget.state.putAll(updatedData)\n        lastUserInteraction = DateTime.now()\n    }\n\n    fun getGadgetsState(): Map<String, Map<String, JsonElement>> {\n        return activeGadgets.associate { gadgetData ->\n            gadgetData.name to gadgetData.gadget.state\n        }\n    }\n\n    internal fun findGadget(name: String) = gadgets[name]?.gadgetData?.gadget\n    internal fun findGadgetInfo(name: String) = gadgets[name]\n\n    fun adjustSomething() {\n        val priorLastUserInteraction = lastUserInteraction\n        activeGadgets.forEach { gadgetData ->\n            if (Random.nextFloat() < .1) {\n                gadgetData.gadget.adjustALittleBit()\n                gadgetData.gadget.changed()\n            }\n        }\n        lastUserInteraction = priorLastUserInteraction\n    }\n\n    class GadgetInfo(\n        val topic: PubSub.Topic<Map<String, JsonElement>>,\n        val channel: PubSub.Channel<Map<String, JsonElement>>,\n        val gadgetData: GadgetData,\n        val gadgetChannelListener: (Gadget) -> Unit\n    )\n\n    companion object {\n        val logger = Logger(\"GadgetManager\")\n    }\n}","package baaahs\n\nimport baaahs.imaging.Bitmap\nimport baaahs.imaging.Image\nimport kotlin.math.*\n\ninterface MediaDevices {\n    fun getCamera(): Camera\n\n    interface Camera {\n        var onImage: (image: Image) -> Unit\n\n        fun close()\n    }\n\n    data class Region(val x0: Int, val y0: Int, val x1: Int, val y1: Int) {\n        val width = x1 - x0\n        val height = y1 - y0\n\n        val centerX = (x1 - x0) / 2 + x0\n        val centerY = (y1 - y0) / 2 + y0\n\n        val xRange = x0 until x1\n        val yRange = y0 until y1\n\n        fun distanceTo(other: Region): Float {\n            val dX = centerX - other.centerX\n            val dY = centerY - other.centerY\n\n            return sqrt((dX * dX + dY * dY).toDouble()).toFloat()\n        }\n\n        fun intersectionWith(other: Region): Region {\n            val leftX = max(x0, other.x0)\n            val rightX = min(x1, x1)\n            val topY = max(y0, other.y0)\n            val bottomY = min(y1, other.y1)\n\n            return if (leftX < rightX && topY < bottomY) {\n                Region(leftX, topY, rightX, bottomY)\n            } else {\n                EMPTY\n            }\n        }\n\n        fun sqPix(): Float = sqrt((x1 - x0.toDouble()).pow(2) + (y1 - y0.toDouble()).pow(2)).toFloat()\n        fun scaled(fromX: Int, fromY: Int, toX: Int, toY: Int): Region {\n            return Region(\n                (x0.toFloat() / fromX * toX).toInt(),\n                (y0.toFloat() / fromX * toX).toInt(),\n                (x1.toFloat() / fromY * toY).toInt(),\n                (y1.toFloat() / fromY * toY).toInt()\n            )\n        }\n\n        fun isEmpty(): Boolean = width <= 0 || height <= 0\n\n        companion object {\n            val EMPTY = Region(-1, -1, -1, -1)\n\n            fun containing(bitmap: Bitmap) = Region(0, 0, bitmap.width, bitmap.height)\n            fun containing(image: Image) = Region(0, 0, image.width, image.height)\n        }\n    }\n}\n","package baaahs\n\nimport baaahs.dmx.Shenzarpy\nimport baaahs.geom.Vector3F\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class MovingHead(val name: String, val origin: Vector3F/*, val heading: Vector3F*/) {\n    enum class ColorMode {\n        ColorWheel,\n        RGB,\n        RGBW\n    }\n\n    interface Buffer {\n        val buffer: Dmx.Buffer\n        val panChannel: Dmx.Channel\n        val panFineChannel: Dmx.Channel?\n        val tiltChannel: Dmx.Channel\n        val tiltFineChannel: Dmx.Channel?\n        val dimmerChannel: Dmx.Channel\n\n        val supportsFinePositioning: Boolean\n            get() = panFineChannel != null && tiltFineChannel != null\n\n        var pan: Float\n            get() = getFloat(panChannel, panFineChannel)\n            set(value) = setFloat(panChannel, panFineChannel, value)\n\n        var tilt: Float\n            get() = getFloat(tiltChannel, tiltFineChannel)\n            set(value) = setFloat(tiltChannel, tiltFineChannel, value)\n\n        var dimmer: Float\n            get() = getFloat(dimmerChannel)\n            set(value) = setFloat(dimmerChannel, value)\n\n        var color: Color\n        val colorMode: ColorMode\n        val colorWheelColors: List<Shenzarpy.WheelColor>\n\n        fun closestColorFor(color: Color): Byte {\n            var bestMatch = Shenzarpy.WheelColor.WHITE\n            var bestDistance = 1f\n\n            colorWheelColors.forEach { wheelColor ->\n                val distance = wheelColor.color.distanceTo(color)\n                if (distance < bestDistance) {\n                    bestMatch = wheelColor\n                    bestDistance = distance\n                }\n            }\n\n            return bestMatch.ordinal.toByte()\n        }\n\n        private fun getFloat(channel: Dmx.Channel): Float {\n            val byteVal = buffer[channel].toInt() and 0xff\n            return ((byteVal shl 8) + byteVal) / 65535f\n        }\n\n        private fun getFloat(coarseChannel: Dmx.Channel, fineChannel: Dmx.Channel?): Float {\n            if (fineChannel == null) {\n                return getFloat(coarseChannel)\n            }\n\n            val firstByte = buffer[coarseChannel].toInt() and 0xff\n            val secondByte = buffer[fineChannel].toInt() and 0xff\n            val scaled = firstByte * 256 + secondByte\n            return scaled / 65535f\n        }\n\n        private fun setFloat(channel: Dmx.Channel, value: Float) {\n            val scaled = (value * 65535).toInt()\n            buffer[channel] = (scaled shr 8).toByte()\n        }\n\n        private fun setFloat(coarseChannel: Dmx.Channel, fineChannel: Dmx.Channel?, value: Float) {\n            if (fineChannel == null) {\n                return setFloat(coarseChannel, value)\n            }\n\n            val scaled = (value * 65535).toInt()\n            buffer[coarseChannel] = (scaled shr 8).toByte()\n            buffer[fineChannel] = (scaled and 0xff).toByte()\n        }\n    }\n\n    @Serializable\n    data class MovingHeadPosition(\n        val x: Int,\n        val y: Int\n    )\n}","package baaahs\n\nimport baaahs.io.Fs\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\nimport kotlin.js.JsName\n\nclass MovingHeadManager(private val fs: Fs, private val pubSub: PubSub.Server, movingHeads: List<MovingHead>) {\n    private val movingHeadsChannel = pubSub.publish(Topics.movingHeads, movingHeads) { }\n    private val defaultPosition = MovingHead.MovingHeadPosition(127, 127)\n    private val currentPositions = mutableMapOf<MovingHead, MovingHead.MovingHeadPosition>()\n    private val listeners = mutableMapOf<MovingHead, (MovingHead.MovingHeadPosition) -> Unit>()\n\n    private val movingHeadPresets = mutableMapOf<String, MovingHead.MovingHeadPosition>()\n    private val json = Json(JsonConfiguration.Stable)\n\n    private val presetsFileName = \"presets/moving-head-positions.json\"\n\n    init {\n        val presetsJson = fs.loadFile(presetsFileName)\n        if (presetsJson != null) {\n            val map = json.parse(Topics.movingHeadPresets.serializer, presetsJson)\n            movingHeadPresets.putAll(map)\n        }\n    }\n\n    private val movingHeadPresetsChannel =\n        pubSub.publish(\n            Topics.movingHeadPresets, mutableMapOf(\n                \"Disco Balls\" to MovingHead.MovingHeadPosition(123, 200)\n            )\n        ) { map ->\n            fs.createFile(presetsFileName, json.stringify(Topics.movingHeadPresets.serializer, map), true)\n            println(\"Saved $map to disk!\")\n        }\n\n    init {\n        movingHeads.map { movingHead ->\n            val topic = PubSub.Topic(\"movingHead/${movingHead.name}\", MovingHead.MovingHeadPosition.serializer())\n\n            currentPositions[movingHead] = defaultPosition\n            pubSub.publish(topic, defaultPosition) { onUpdate ->\n                currentPositions[movingHead] = onUpdate\n                listeners[movingHead]?.invoke(onUpdate)\n            }\n        }\n    }\n\n    fun listen(movingHead: MovingHead, onUpdate: (MovingHead.MovingHeadPosition) -> Unit) {\n        listeners[movingHead] = onUpdate\n    }\n}\n\nclass MovingHeadDisplay(val pubSub: PubSub.Client, onUpdatedMovingHeads: (Array<Wrapper>) -> Unit) {\n    init {\n        pubSub.subscribe(Topics.movingHeads) { movingHeads ->\n            val wrappers = movingHeads.map { movingHead -> Wrapper(movingHead, pubSub) }\n            onUpdatedMovingHeads(wrappers.toTypedArray())\n        }\n    }\n\n    private val presets = mutableMapOf<String, MovingHead.MovingHeadPosition>()\n    private val presetsListeners = mutableListOf<(String) -> Unit>()\n\n    private val movingHeadPresetsChannel =\n        pubSub.subscribe(Topics.movingHeadPresets) { map ->\n            presets.clear()\n            presets.putAll(map)\n            notifyPresetsListeners()\n        }\n\n    private fun notifyPresetsListeners() {\n        val json = Json.stringify(Topics.movingHeadPresets.serializer, presets)\n        presetsListeners.forEach { it.invoke(json) }\n    }\n\n    @JsName(\"savePreset\")\n    fun savePreset(name: String, position: MovingHead.MovingHeadPosition) {\n        presets[name] = position\n        movingHeadPresetsChannel.onChange(presets)\n        notifyPresetsListeners()\n    }\n\n    @JsName(\"addPresetsListener\")\n    fun addPresetsListener(callback: (String) -> Unit) {\n        presetsListeners.add(callback)\n    }\n\n    @JsName(\"removePresetsListener\")\n    fun removePresetsListener(callback: (String) -> Unit) {\n        presetsListeners.remove(callback)\n    }\n\n    class Wrapper(val movingHead: MovingHead, pubSub: PubSub.Client) {\n        private val topic = PubSub.Topic(\"movingHead/${movingHead.name}\", MovingHead.MovingHeadPosition.serializer())\n        private val listeners = mutableListOf<(MovingHead.MovingHeadPosition) -> Unit>()\n        private val channel: PubSub.Channel<MovingHead.MovingHeadPosition>? =\n            pubSub.subscribe(topic) { onUpdate ->\n                // TODO: the second time a moving head editor opens, this fires before channel has been set;\n                // TODO: onUpdate should be deferred until after subscribe() exits.\n                position = onUpdate\n            }\n\n        @JsName(\"name\")\n        val name: String\n            get() = movingHead.name\n\n        @JsName(\"position\")\n        var position: MovingHead.MovingHeadPosition? = null\n            set(value) {\n                field = value\n                if (value != null) notifyListeners(value)\n            }\n\n        private fun notifyListeners(value: MovingHead.MovingHeadPosition) {\n            // TODO: channel.onChange() is causing circular updates to PubSub server\n            channel?.onChange(value)\n            listeners.forEach { it.invoke(value) }\n        }\n\n        @JsName(\"addListener\")\n        fun addListener(callback: (MovingHead.MovingHeadPosition) -> Unit) {\n            listeners.add(callback)\n        }\n\n        @JsName(\"removeListener\")\n        fun removeListener(callback: (MovingHead.MovingHeadPosition) -> Unit) {\n            listeners.remove(callback)\n        }\n    }\n\n}\n","package baaahs\n\nimport baaahs.api.ws.WebSocketRouter\nimport baaahs.geom.Vector2F\nimport baaahs.geom.Vector3F\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport baaahs.io.Fs\nimport baaahs.mapper.MappingResults\nimport baaahs.mapper.PinkyMapperHandlers\nimport baaahs.mapper.Storage\nimport baaahs.net.FragmentingUdpLink\nimport baaahs.net.Network\nimport baaahs.proto.*\nimport baaahs.shaders.PixelShader\nimport baaahs.shows.SolidColorShow\nimport com.soywiz.klock.DateTime\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\nimport kotlin.math.min\n\nclass Pinky(\n    val model: Model<*>,\n    val shows: List<Show>,\n    val network: Network,\n    val dmxUniverse: Dmx.Universe,\n    val beatSource: BeatSource,\n    val clock: Clock,\n    val fs: Fs,\n    val firmwareDaddy: FirmwareDaddy,\n    val display: PinkyDisplay,\n    soundAnalyzer: SoundAnalyzer,\n    private val prerenderPixels: Boolean = false,\n    private val switchShowAfterIdleSeconds: Int? = 600,\n    private val adjustShowAfterIdleSeconds: Int? = null\n) : Network.UdpListener {\n    private val storage = Storage(fs)\n    private val mappingResults = storage.loadMappingData(model)\n\n    private val link = FragmentingUdpLink(network.link())\n    val httpServer = link.startHttpServer(Ports.PINKY_UI_TCP)\n\n\n    private val beatDisplayer = PinkyBeatDisplayer(beatSource)\n    private var mapperIsRunning = false\n    private var selectedShow = shows.first()\n        set(value) {\n            field = value\n            display.selectedShow = value\n            showRunner.nextShow = selectedShow\n        }\n\n    private val pubSub: PubSub.Server = PubSub.Server(httpServer).apply { install(gadgetModule) }\n    private val gadgetManager = GadgetManager(pubSub)\n    private val movingHeadManager = MovingHeadManager(fs, pubSub, model.movingHeads)\n    private val showRunner =\n        ShowRunner(model, selectedShow, gadgetManager, beatSource, dmxUniverse, movingHeadManager, clock)\n\n    private val selectedShowChannel: PubSub.Channel<String>\n    private var selectedNewShowAt = DateTime.now()\n\n    private val brainToSurfaceMap_CHEAT = mutableMapOf<BrainId, Model.Surface>()\n    private val surfaceToPixelLocationMap_CHEAT = mutableMapOf<Model.Surface, List<Vector3F>>()\n\n    private val brainInfos: MutableMap<BrainId, BrainInfo> = mutableMapOf()\n    private val pendingBrainInfos: MutableMap<BrainId, BrainInfo> = mutableMapOf()\n\n    val address: Network.Address get() = link.myAddress\n    private val networkStats = NetworkStats()\n\n    // This needs to go last-ish, otherwise we start getting network traffic too early.\n    private val udpSocket = link.listenUdp(Ports.PINKY, this)\n\n    private val listeningVisualizers = hashSetOf<ListeningVisualizer>()\n\n    init {\n        httpServer.listenWebSocket(\"/ws/api\") {\n            WebSocketRouter { PinkyMapperHandlers(storage).register(this) }\n        }\n\n        httpServer.listenWebSocket(\"/ws/visualizer\") { ListeningVisualizer() }\n\n        pubSub.publish(Topics.availableShows, shows.map { show -> show.name }) {}\n        selectedShowChannel = pubSub.publish(Topics.selectedShow, shows[0].name) { selectedShow ->\n            this.selectedShow = shows.find { it.name == selectedShow }!!\n        }\n    }\n\n    suspend fun run(): Show.Renderer {\n        GlobalScope.launch { beatDisplayer.run() }\n        GlobalScope.launch {\n            while (true) {\n                if (mapperIsRunning) {\n                    logger.info { \"Mapping ${brainInfos.size} brains...\" }\n                } else {\n                    logger.info { \"Sending to ${brainInfos.size} brains...\" }\n                }\n                delay(10000)\n            }\n        }\n\n        display.listShows(shows)\n        display.selectedShow = selectedShow\n\n        display.onShowChange = { switchToShow(display.selectedShow!!) }\n\n        while (true) {\n            if (mapperIsRunning) {\n                disableDmx()\n                delay(50)\n                continue\n            }\n\n            updateSurfaces()\n\n            networkStats.reset()\n            val elapsedMs = time {\n                try {\n                    drawNextFrame()\n                } catch (e: Exception) {\n                    logger.error(\"Error rendering frame for ${selectedShow.name}\", e)\n                    delay(1000)\n                    switchToShow(SolidColorShow)\n                }\n            }\n            display.showFrameMs = elapsedMs.toInt()\n            display.stats = networkStats\n\n            maybeChangeThingsIfUsersAreIdle()\n\n            delay(30)\n        }\n    }\n\n    private fun maybeChangeThingsIfUsersAreIdle() {\n        val now = DateTime.now()\n        val secondsSinceUserInteraction = now.minus(gadgetManager.lastUserInteraction).seconds\n        if (switchShowAfterIdleSeconds != null\n            && now.minus(selectedNewShowAt).seconds > switchShowAfterIdleSeconds\n            && secondsSinceUserInteraction > switchShowAfterIdleSeconds\n        ) {\n            switchToShow(shows.random()!!)\n            selectedNewShowAt = now\n        }\n\n        if (adjustShowAfterIdleSeconds != null\n            && secondsSinceUserInteraction > adjustShowAfterIdleSeconds\n        ) {\n            gadgetManager.adjustSomething()\n        }\n    }\n\n    fun switchToShow(nextShow: Show) {\n        this.selectedShow = nextShow\n        selectedShowChannel.onChange(nextShow.name)\n    }\n\n    internal fun updateSurfaces() {\n        if (pendingBrainInfos.isNotEmpty()) {\n            val brainSurfacesToRemove = mutableListOf<ShowRunner.SurfaceReceiver>()\n            val brainSurfacesToAdd = mutableListOf<ShowRunner.SurfaceReceiver>()\n\n            pendingBrainInfos.forEach { (brainId, incomingBrainInfo) ->\n                val priorBrainInfo = brainInfos[brainId]\n                if (priorBrainInfo != null) {\n                    brainSurfacesToRemove.add(priorBrainInfo.surfaceReceiver)\n                }\n\n                if (incomingBrainInfo.hadException) {\n                    // Existing Brain has had exceptions so we're forgetting about it.\n                    brainInfos.remove(brainId)\n                } else {\n                    brainSurfacesToAdd.add(incomingBrainInfo.surfaceReceiver)\n                    brainInfos[brainId] = incomingBrainInfo\n                }\n            }\n\n            showRunner.surfacesChanged(brainSurfacesToAdd, brainSurfacesToRemove)\n            listeningVisualizers.forEach { listeningVisualizer ->\n                brainSurfacesToAdd.forEach {\n                    listeningVisualizer.sendPixelData(it.surface)\n                }\n            }\n\n            pendingBrainInfos.clear()\n        }\n\n        display.brainCount = brainInfos.size\n    }\n\n    internal fun drawNextFrame() {\n        aroundNextFrame {\n            showRunner.nextFrame()\n        }\n    }\n\n    private fun disableDmx() {\n        dmxUniverse.allOff()\n    }\n\n    override fun receive(fromAddress: Network.Address, fromPort: Int, bytes: ByteArray) {\n        val message = parse(bytes)\n        when (message) {\n            is BrainHelloMessage -> foundBrain(fromAddress, message)\n            is MapperHelloMessage -> {\n                logger.debug { \"Mapper isRunning=${message.isRunning}\" }\n                mapperIsRunning = message.isRunning\n            }\n            is PingMessage -> if (message.isPong) receivedPong(message, fromAddress)\n        }\n    }\n\n    private fun foundBrain(\n        brainAddress: Network.Address,\n        msg: BrainHelloMessage\n    ) {\n        val brainId = BrainId(msg.brainId)\n        val surfaceName = msg.surfaceName\n\n        logger.info {\n            \"Hello from ${brainId.uuid}\" +\n                    \" (${mappingResults.dataFor(brainId)?.surface?.name ?: \"[unknown]\"})\" +\n                    \" at $brainAddress: $msg\"\n        }\n        if (firmwareDaddy.doesntLikeThisVersion(msg.firmwareVersion)) {\n            // You need the new hotness bro\n            logger.info {\n                \"The firmware daddy doesn't like $brainId\" +\n                        \" (${mappingResults.dataFor(brainId)?.surface?.name ?: \"[unknown]\"})\" +\n                        \" having ${msg.firmwareVersion}\" +\n                        \" so we'll send ${firmwareDaddy.urlForPreferredVersion}\"\n            }\n            val newHotness = UseFirmwareMessage(firmwareDaddy.urlForPreferredVersion)\n            udpSocket.sendUdp(brainAddress, Ports.BRAIN, newHotness)\n        }\n\n\n        // println(\"Heard from brain $brainId at $brainAddress for $surfaceName\")\n        val dataFor = mappingResults.dataFor(brainId)\n            ?: mappingResults.dataFor(msg.surfaceName ?: \"__nope\")\n            ?: findMappingInfo_CHEAT(surfaceName, brainId)\n\n        val surface = dataFor?.let {\n            val pixelLocations = dataFor.pixelLocations?.map { it ?: Vector3F(0f, 0f, 0f) } ?: emptyList()\n            val pixelCount = dataFor.pixelLocations?.size ?: SparkleMotion.MAX_PIXEL_COUNT\n\n            if (msg.surfaceName != dataFor.surface.name) {\n                val mappingMsg = BrainMappingMessage(\n                    brainId, dataFor.surface.name, null, Vector2F(0f, 0f),\n                    Vector2F(0f, 0f), pixelCount, pixelLocations\n                )\n                udpSocket.sendUdp(brainAddress, Ports.BRAIN, mappingMsg)\n            }\n\n            IdentifiedSurface(dataFor.surface, pixelCount, dataFor.pixelLocations)\n        } ?: AnonymousSurface(brainId)\n\n\n        val priorBrainInfo = brainInfos[brainId]\n        if (priorBrainInfo != null) {\n            if (priorBrainInfo.brainId == brainId && priorBrainInfo.surface == surface) {\n                // Duplicate packet?\n//                logger.debug(\n//                    \"Ignore ${priorBrainInfo.brainId} ${priorBrainInfo.surface.describe()} ->\" +\n//                            \" ${surface.describe()} because probably duplicate?\"\n//                )\n                return\n            }\n\n//            logger.debug(\n//                \"Remapping ${priorBrainInfo.brainId} from ${priorBrainInfo.surface.describe()} ->\" +\n//                        \" ${surface.describe()}\"\n//            )\n        }\n\n        val sendFn: (Shader.Buffer) -> Unit = { shaderBuffer ->\n            val message = BrainShaderMessage(shaderBuffer.shader, shaderBuffer).toBytes()\n            try {\n                udpSocket.sendUdp(brainAddress, Ports.BRAIN, message)\n            } catch (e: Exception) {\n                // Couldn't send to Brain? Schedule to remove it.\n                val brainInfo = brainInfos[brainId]!!\n                brainInfo.hadException = true\n                pendingBrainInfos[brainId] = brainInfo\n\n                logger.error(\"Error sending to $brainId, will take offline\", e)\n            }\n\n            networkStats.packetsSent++\n            networkStats.bytesSent += message.size\n        }\n\n        val surfaceReceiver = if (prerenderPixels) {\n            PrerenderingSurfaceReceiver(surface, sendFn)\n        } else {\n            ShowRunner.SurfaceReceiver(surface, sendFn)\n        }\n\n        val brainInfo = BrainInfo(brainAddress, brainId, surface, msg.firmwareVersion, msg.idfVersion, surfaceReceiver)\n//        logger.debug(\"Map ${brainInfo.brainId} to ${brainInfo.surface.describe()}\")\n        pendingBrainInfos[brainId] = brainInfo\n\n        // Decide whether or not to tell this brain it should use a different firmware\n\n    }\n\n    private fun findMappingInfo_CHEAT(surfaceName: String?, brainId: BrainId): MappingResults.Info? {\n        val modelSurface = surfaceName?.let { model.findModelSurface(surfaceName) } ?: brainToSurfaceMap_CHEAT[brainId]\n        return if (modelSurface != null) {\n            MappingResults.Info(modelSurface, surfaceToPixelLocationMap_CHEAT[modelSurface])\n        } else {\n            null\n        }\n    }\n\n    /** If we want a pong back from a [BrainShaderMessage], send this. */\n    private fun generatePongPayload(): ByteArray {\n        return ByteArrayWriter().apply {\n            writeLong(getTimeMillis())\n        }.toBytes()\n    }\n\n    private fun receivedPong(message: PingMessage, fromAddress: Network.Address) {\n        val originalSentAt = ByteArrayReader(message.data).readLong()\n        val elapsedMs = getTimeMillis() - originalSentAt\n        logger.debug { \"Shader pong from $fromAddress took ${elapsedMs}ms\" }\n    }\n\n    fun providePanelMapping_CHEAT(brainId: BrainId, surface: Model.Surface) {\n        brainToSurfaceMap_CHEAT[brainId] = surface\n    }\n\n    fun providePixelMapping_CHEAT(surface: Model.Surface, pixelLocations: List<Vector3F>) {\n        surfaceToPixelLocationMap_CHEAT[surface] = pixelLocations\n    }\n\n    inner class PinkyBeatDisplayer(val beatSource: BeatSource) {\n        suspend fun run() {\n            while (true) {\n                val beatData = beatSource.getBeatData()\n                display.beat = beatData.beatWithinMeasure(clock).toInt()\n                display.bpm = beatData.bpm\n                display.beatConfidence = beatData.confidence\n                delay(10)\n            }\n        }\n    }\n\n    class NetworkStats(var bytesSent: Int = 0, var packetsSent: Int = 0) {\n        internal fun reset() {\n            bytesSent = 0\n            packetsSent = 0\n        }\n    }\n\n    private inner class PrerenderingSurfaceReceiver(surface: Surface, sendFn: (Shader.Buffer) -> Unit) :\n        ShowRunner.SurfaceReceiver(surface, sendFn) {\n        var currentRenderTree: Brain.RenderTree<*>? = null\n        private var currentPoolKey: Any? = null\n        var pixels: PixelsAdapter? = null\n        var currentBuffer: Shader.Buffer? = null\n\n        @Suppress(\"UNCHECKED_CAST\")\n        override fun send(shaderBuffer: Shader.Buffer) {\n            val shader = shaderBuffer.shader as Shader<Shader.Buffer>\n            var renderTree = currentRenderTree\n            if (renderTree == null || renderTree.shader != shader) {\n                val priorPoolKey = currentPoolKey\n                var newPoolKey: Any? = null\n\n                val renderer = shader.createRenderer(surface, object : RenderContext {\n                    override fun <T : PooledRenderer> registerPooled(key: Any, fn: () -> T): T {\n                        newPoolKey = key\n                        return poolingRenderContext.registerPooled(key, fn)\n                    }\n                })\n\n                if (newPoolKey != priorPoolKey) {\n                    if (priorPoolKey != null) {\n                        poolingRenderContext.decrement(priorPoolKey)\n                    }\n                    currentPoolKey = newPoolKey\n                }\n\n                renderTree = Brain.RenderTree(shader, renderer, shaderBuffer)\n                currentRenderTree?.release()\n                currentRenderTree = renderTree\n\n                if (pixels == null) {\n                    val pixelBuffer = PixelShader(PixelShader.Encoding.DIRECT_RGB).createBuffer(surface)\n                    pixels = PixelsAdapter(pixelBuffer)\n                }\n            }\n\n            val renderer = currentRenderTree!!.renderer as Shader.Renderer<Shader.Buffer>\n            renderer.beginFrame(shaderBuffer, pixels!!.size)\n\n            // we need to reorder the draw cycle, so don't do the rest of the render yet!\n            currentBuffer = shaderBuffer\n        }\n\n        @Suppress(\"UNCHECKED_CAST\")\n        fun actuallySend() {\n            val renderTree = currentRenderTree\n            if (renderTree != null) {\n                val renderer = renderTree.renderer as Shader.Renderer<Shader.Buffer>\n                val pixels = pixels!!\n                val currentBuffer = currentBuffer!!\n\n                for (i in pixels.indices) {\n                    pixels[i] = renderer.draw(currentBuffer, i)\n                }\n                this.currentBuffer = null\n\n                renderer.endFrame()\n                pixels.finishedFrame()\n\n                renderTree.draw(pixels)\n\n                super.send(pixels.buffer)\n\n                updateListeningVisualizers(surface, pixels.buffer.colors)\n            }\n        }\n    }\n\n    var poolingRenderContext = PoolingRenderContext()\n    var lastSentAt: Long = 0\n\n    private fun aroundNextFrame(callNextFrame: () -> Unit) {\n        /**\n         * [ShowRunner.SurfaceReceiver.send] is called here; if [prerenderPixels] is true, it won't\n         * actually send; we need to do that ourselves.\n         */\n        callNextFrame()\n\n        if (prerenderPixels) {\n            val preDrawElapsed = timeSync {\n                poolingRenderContext.preDraw()\n            }\n\n            val sendElapsed = timeSync {\n                brainInfos.values.forEach { brainInfo ->\n                    val surfaceReceiver = brainInfo.surfaceReceiver as PrerenderingSurfaceReceiver\n                    surfaceReceiver.actuallySend()\n                }\n            }\n\n//            println(\"preDraw took ${preDrawElapsed}ms, send took ${sendElapsed}ms\")\n        }\n        val now = getTimeMillis()\n        val elapsedMs = now - lastSentAt\n//        println(\"It's been $elapsedMs\")\n        lastSentAt = now\n    }\n\n\n    class PoolingRenderContext : RenderContext {\n        private val pooledRenderers = hashMapOf<Any, Holder<*>>()\n\n        @Suppress(\"UNCHECKED_CAST\")\n        override fun <T : PooledRenderer> registerPooled(key: Any, fn: () -> T): T {\n            val holder = pooledRenderers.getOrPut(key) { Holder(fn()) }\n            holder.count++\n            return holder.pooledRenderer as T\n        }\n\n        fun decrement(key: Any) {\n            val holder = pooledRenderers[key]!!\n            holder.count--\n            if (holder.count == 0) {\n                logger.debug { \"Removing pooled renderer for $key\" }\n                pooledRenderers.remove(key)\n            }\n        }\n\n        fun preDraw() {\n            pooledRenderers.values.forEach { holder ->\n                holder.pooledRenderer.preDraw()\n            }\n        }\n\n        class Holder<T : PooledRenderer>(val pooledRenderer: T, var count: Int = 0)\n    }\n\n    private class PixelsAdapter(internal val buffer: PixelShader.Buffer) : Pixels {\n        override val size: Int = buffer.colors.size\n\n        override fun get(i: Int): Color = buffer.colors[i]\n\n        override fun set(i: Int, color: Color) {\n            buffer.colors[i] = color\n        }\n\n        override fun set(colors: Array<Color>) {\n            for (i in 0 until min(colors.size, size)) {\n                buffer.colors[i] = colors[i]\n            }\n        }\n    }\n\n    inner class ListeningVisualizer : Network.WebSocketListener {\n        lateinit var tcpConnection: Network.TcpConnection\n\n        override fun connected(tcpConnection: Network.TcpConnection) {\n            this.tcpConnection = tcpConnection\n            listeningVisualizers.add(this)\n\n            brainInfos.values.forEach { sendPixelData(it.surface) }\n        }\n\n        override fun receive(tcpConnection: Network.TcpConnection, bytes: ByteArray) {\n            TODO(\"not implemented\")\n        }\n\n        override fun reset(tcpConnection: Network.TcpConnection) {\n            listeningVisualizers.remove(this)\n        }\n\n        fun sendPixelData(surface: Surface) {\n            if (surface is IdentifiedSurface) {\n                val pixelLocations = surface.pixelLocations ?: return\n\n                val out = ByteArrayWriter(surface.name.length + surface.pixelCount * 3 * 4 + 20)\n                out.writeByte(0)\n                out.writeString(surface.name)\n                out.writeInt(surface.pixelCount)\n                pixelLocations.forEach {\n                    (it ?: Vector3F(0f, 0f, 0f)).serialize(out)\n                }\n                tcpConnection.send(out.toBytes())\n            }\n        }\n\n        fun sendFrame(surface: Surface, colors: List<Color>) {\n            if (surface is IdentifiedSurface) {\n                val out = ByteArrayWriter(surface.name.length + colors.size * 3 + 20)\n                out.writeByte(1)\n                out.writeString(surface.name)\n                out.writeInt(colors.size)\n                colors.forEach {\n                    it.serializeWithoutAlpha(out)\n                }\n                tcpConnection.send(out.toBytes())\n            }\n        }\n    }\n\n    private fun updateListeningVisualizers(surface: Surface, colors: MutableList<Color>) {\n        if (listeningVisualizers.isNotEmpty()) {\n            listeningVisualizers.forEach {\n                it.sendFrame(surface, colors)\n            }\n        }\n    }\n\n    companion object {\n        val logger = Logger(\"Pinky\")\n    }\n}\n\ndata class BrainId(val uuid: String)\n\nclass BrainInfo(\n    val address: Network.Address,\n    val brainId: BrainId,\n    val surface: Surface,\n    val firmwareVersion: String?,\n    val idfVersion: String?,\n    val surfaceReceiver: ShowRunner.SurfaceReceiver,\n    var hadException: Boolean = false\n)\n","package baaahs\n\nimport kotlin.js.JsName\n\nobject Pluggables {\n    @JsName(\"defaultModel\")\n    const val defaultModel = \"BAAAHS\"\n\n    @JsName(\"loadModel\")\n    fun loadModel(name: String): Model<*> {\n        return when (name) {\n            \"Decom2019\" -> Decom2019Model()\n            \"SuiGeneris\" -> SuiGenerisModel()\n            \"BAAAHS\" -> SheepModel()\n            else -> throw IllegalArgumentException(\"unknown model \\\"$name\\\"\")\n        }.apply { load() }\n    }\n}","package baaahs\n\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport baaahs.net.Network\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.json.*\nimport kotlinx.serialization.modules.EmptyModule\nimport kotlinx.serialization.modules.SerialModule\nimport kotlinx.serialization.modules.plus\nimport kotlin.js.JsName\n\nabstract class PubSub {\n\n    companion object {\n        fun listen(httpServer: Network.HttpServer): Server {\n            return Server(httpServer)\n        }\n\n        fun connect(networkLink: Network.Link, address: Network.Address, port: Int): Client {\n            return Client(networkLink, address, port)\n        }\n\n        val logger = Logger(\"PubSub\")\n    }\n\n    open class Origin\n\n    interface Channel<T> {\n        @JsName(\"onChange\")\n        fun onChange(t: T)\n\n        @JsName(\"replaceOnUpdate\")\n        fun replaceOnUpdate(onUpdate: (T) -> Unit)\n\n        @JsName(\"unsubscribe\")\n        fun unsubscribe()\n    }\n\n    data class Topic<T>(\n        val name: String,\n        val serializer: KSerializer<T>\n    )\n\n    abstract class Listener(private val origin: Origin) {\n        fun onUpdate(data: JsonElement, fromOrigin: Origin) {\n            if (origin !== fromOrigin) {\n                onUpdate(data)\n            }\n        }\n\n        abstract fun onUpdate(data: JsonElement)\n    }\n\n    class TopicInfo(val name: String, var data: JsonElement = JsonNull) {\n        val listeners: MutableList<Listener> = mutableListOf()\n\n        fun notify(jsonData: JsonElement, origin: Origin) {\n            if (jsonData != data) {\n                data = jsonData\n                listeners.forEach { listener -> listener.onUpdate(jsonData, origin) }\n            }\n        }\n    }\n\n    open class Connection(\n        private val name: String,\n        private val topics: MutableMap<String, TopicInfo>,\n        private val json: Json\n    ) : Origin(), Network.WebSocketListener {\n        var isConnected: Boolean = false\n\n        protected var connection: Network.TcpConnection? = null\n        private val cleanup: MutableList<() -> Unit> = mutableListOf()\n\n        override fun connected(tcpConnection: Network.TcpConnection) {\n            debug(\"connection $this established\")\n            connection = tcpConnection\n            isConnected = true\n        }\n\n        inner class ClientListener(\n            private val topicName: String,\n            val tcpConnection: Network.TcpConnection\n        ): Listener(this) {\n            override fun onUpdate(data: JsonElement) = sendTopicUpdate(topicName, data)\n        }\n\n        override fun receive(tcpConnection: Network.TcpConnection, bytes: ByteArray) {\n            val reader = ByteArrayReader(bytes)\n            when (val command = reader.readString()) {\n                \"sub\" -> {\n                    val topicName = reader.readString()\n                    val topicInfo = topics[topicName] ?: throw IllegalArgumentException(\"Unknown topic $topicName\")\n\n                    val listener = ClientListener(topicName, tcpConnection)\n                    topicInfo.listeners.add(listener)\n                    cleanup.add {\n                        topicInfo.listeners.remove(listener)\n                    }\n\n                    val topicData = topicInfo.data\n                    if (topicData != JsonNull) {\n                        listener.onUpdate(topicData)\n                    }\n                }\n\n                \"unsub\" -> {\n                    val topicName = reader.readString()\n                    val topicInfo = topics[topicName] ?: throw IllegalArgumentException(\"Unknown topic $topicName\")\n\n                    topicInfo.listeners.removeAll { it is ClientListener && it.tcpConnection === tcpConnection }\n                }\n\n                \"update\" -> {\n                    val topicName = reader.readString()\n                    val data = json.parseJson(reader.readString())\n                    val topicInfo = topics[topicName]\n                    topicInfo?.notify(data, this)\n                }\n\n                else -> {\n                    throw IllegalArgumentException(\"huh? don't know what to do with $command\")\n                }\n            }\n        }\n\n        fun sendTopicUpdate(name: String, data: JsonElement) {\n            if (isConnected) {\n                debug(\"update $name $data\")\n\n                val writer = ByteArrayWriter()\n                writer.writeString(\"update\")\n                writer.writeString(name)\n                writer.writeString(json.stringify(JsonElementSerializer, data))\n                sendCommand(writer.toBytes())\n            } else {\n                debug(\"not connected to server, so no update $name $data\")\n            }\n        }\n\n        fun sendTopicSub(topicName: String) {\n            if (isConnected) {\n                debug(\"sub $topicName\")\n\n                val writer = ByteArrayWriter()\n                writer.writeString(\"sub\")\n                writer.writeString(topicName)\n                sendCommand(writer.toBytes())\n            } else {\n                debug(\"not connected to server, so no sub $topicName\")\n            }\n        }\n\n        fun sendTopicUnsub(topicName: String) {\n            if (isConnected) {\n                debug(\"unsub $topicName\")\n\n                val writer = ByteArrayWriter()\n                writer.writeString(\"unsub\")\n                writer.writeString(topicName)\n                sendCommand(writer.toBytes())\n            } else {\n                debug(\"not connected to server, so no sub $topicName\")\n            }\n        }\n\n        override fun reset(tcpConnection: Network.TcpConnection) {\n            logger.info { \"PubSub client $name disconnected.\" }\n            isConnected = false\n            cleanup.forEach { it.invoke() }\n        }\n\n        private fun sendCommand(bytes: ByteArray) {\n            connection?.send(bytes)\n        }\n\n        private fun debug(message: String) {\n            logger.debug { \"[PubSub $name -> ${connection?.toAddress ?: \"(deferred)\"}]: $message\" }\n        }\n    }\n\n    open class Endpoint {\n        var serialModule: SerialModule = EmptyModule\n        var json = Json(JsonConfiguration.Stable, serialModule)\n\n        fun install(toInstall: SerialModule) {\n            serialModule = serialModule.plus(toInstall)\n            json = Json(JsonConfiguration.Stable, serialModule)\n        }\n    }\n\n    class Server(httpServer: Network.HttpServer) : Endpoint() {\n        private val topics: MutableMap<String, TopicInfo> = hashMapOf()\n\n        init {\n            httpServer.listenWebSocket(\"/sm/ws\") { incomingConnection ->\n                Connection(\"server at ${incomingConnection.toAddress}\", topics, json)\n            }\n        }\n\n        fun <T : Any> publish(topic: Topic<T>, data: T, onUpdate: (T) -> Unit): Channel<T> {\n            val publisher = Origin()\n            val topicName = topic.name\n            val jsonData = json.toJson(topic.serializer, data)\n            val topicInfo = topics.getOrPut(topicName) { TopicInfo(topicName) }\n            val listener = PublisherListener(topic, publisher, onUpdate)\n            topicInfo.listeners.add(listener)\n            topicInfo.notify(jsonData, publisher)\n\n            return object : Channel<T> {\n                override fun onChange(t: T) {\n                    topicInfo.notify(json.toJson(topic.serializer, t), publisher)\n                }\n\n                override fun replaceOnUpdate(onUpdate: (T) -> Unit) {\n                    listener.onUpdate = onUpdate\n                }\n\n                override fun unsubscribe() {\n                    // TODO(\"${CLASS_NAME}.unsubscribe not implemented\")\n                }\n            }\n        }\n\n        internal fun getTopicInfo(topicName: String) = topics[topicName]\n\n        inner class PublisherListener<T : Any>(\n            private val topic: Topic<T>,\n            origin: Origin,\n            var onUpdate: (T) -> Unit\n        ) : Listener(origin) {\n            override fun onUpdate(data: JsonElement) {\n                onUpdate(json.fromJson(topic.serializer, data))\n            }\n        }\n    }\n\n    class Client(\n        link: Network.Link,\n        serverAddress: Network.Address,\n        port: Int,\n        coroutineScope: CoroutineScope = GlobalScope\n    ) : Endpoint() {\n        @JsName(\"isConnected\")\n        val isConnected: Boolean\n            get() = server.isConnected\n        private val stateChangeListeners = mutableListOf<() -> Unit>()\n\n        private val topics: MutableMap<String, TopicInfo> = hashMapOf()\n        private var server: Connection = object : Connection(\"client at ${link.myAddress}\", topics, json) {\n            override fun connected(tcpConnection: Network.TcpConnection) {\n                super.connected(tcpConnection)\n\n                // If any topics were subscribed to before this connection was established, send the sub command now.\n                topics.values.forEach { topic -> sendTopicSub(topic.name) }\n\n                notifyChangeListeners()\n            }\n\n            override fun reset(tcpConnection: Network.TcpConnection) {\n                super.reset(tcpConnection)\n                notifyChangeListeners()\n\n                coroutineScope.launch {\n                    delay(1000)\n                    connectWebSocket(link, serverAddress, port)\n                }\n            }\n        }\n\n        init {\n            connectWebSocket(link, serverAddress, port)\n        }\n\n        private fun connectWebSocket(link: Network.Link, serverAddress: Network.Address, port: Int) {\n            link.connectWebSocket(serverAddress, port, \"/sm/ws\", server)\n        }\n\n        @JsName(\"subscribe\")\n        fun <T> subscribe(topic: Topic<T>, onUpdate: (T) -> Unit): Channel<T> {\n            val subscriber = Origin()\n\n            val topicName = topic.name\n            val topicInfo = topics.getOrPut(topicName) {\n                TopicInfo(topicName)\n                    .apply {\n                        listeners.add(object : Listener(server) {\n                            override fun onUpdate(data: JsonElement) = server.sendTopicUpdate(topicName, data)\n                        })\n                    }\n                    .also { server.sendTopicSub(topicName) }\n            }\n\n            val listener = object : Listener(subscriber) {\n                override fun onUpdate(data: JsonElement) = onUpdate(json.fromJson(topic.serializer, data))\n            }\n            topicInfo.listeners.add(listener)\n            val data = topicInfo.data\n            if (data != JsonNull) {\n                listener.onUpdate(data)\n            }\n\n            return object : Channel<T> {\n                override fun onChange(t: T) {\n                    val jsonData = json.toJson(topic.serializer, t)\n                    topicInfo.notify(jsonData, subscriber)\n                }\n\n                override fun replaceOnUpdate(onUpdate: (T) -> Unit) {\n                    TODO(\"Client.channel.replaceOnUpdate not implemented\")\n                }\n\n                override fun unsubscribe() {\n                    topicInfo.listeners.remove(listener)\n\n                    // If there's only one listener left, it's the server listener, and we can safely go away.\n                    if (topicInfo.listeners.size == 1) {\n                        server.sendTopicUnsub(topicName)\n                    }\n                }\n            }\n        }\n\n        @JsName(\"addStateChangeListener\")\n        fun addStateChangeListener(callback: () -> Unit) {\n            stateChangeListeners.add(callback)\n        }\n\n        @JsName(\"removeStateChangeListener\")\n        fun removeStateChangeListener(callback: () -> Unit) {\n            stateChangeListeners.remove(callback)\n        }\n\n        private fun notifyChangeListeners() {\n            stateChangeListeners.forEach { callback -> callback() }\n        }\n    }\n}","package baaahs\n\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport baaahs.shaders.*\n\nenum class ShaderId(val reader: ShaderReader<*>) {\n    SOLID(SolidShader),\n    PIXEL(PixelShader),\n    SINE_WAVE(SineWaveShader),\n    COMPOSITOR(CompositorShader),\n    SPARKLE(SparkleShader),\n    SIMPLE_SPATIAL(SimpleSpatialShader),\n    HEART(HeartShader),\n    RANDOM(RandomShader),\n    GLSL_SHADER(GlslShader);\n\n    companion object {\n        val values = values()\n        fun get(i: Byte): ShaderId {\n            if (i > values.size || i < 0) {\n                throw Throwable(\"bad index for ShaderId: $i\")\n            }\n            return values[i.toInt()]\n        }\n    }\n}\n\ninterface ShaderReader<T : Shader<*>> {\n    fun parse(reader: ByteArrayReader): T\n}\n\ninterface RenderContext {\n    fun <T : PooledRenderer> registerPooled(key: Any, fn: () -> T): T\n}\n\nabstract class Shader<B : Shader.Buffer>(val id: ShaderId) {\n    open fun createRenderer(surface: Surface, renderContext: RenderContext): Renderer<B> {\n        return createRenderer(surface)\n    }\n\n    abstract fun createRenderer(surface: Surface): Renderer<B>\n\n    abstract fun createBuffer(surface: Surface): B\n\n    val descriptorBytes: ByteArray by lazy { toBytes() }\n\n    fun serialize(writer: ByteArrayWriter) {\n        writer.writeByte(id.ordinal.toByte())\n        serializeConfig(writer)\n    }\n\n    /** Override if your shader has static configuration that needs to be shared with the Renderer. */\n    open fun serializeConfig(writer: ByteArrayWriter) {\n    }\n\n    private fun toBytes(): ByteArray {\n        val writer = ByteArrayWriter()\n        serialize(writer)\n        return writer.toBytes()\n    }\n\n    abstract fun readBuffer(reader: ByteArrayReader): B\n\n    companion object {\n        fun parse(reader: ByteArrayReader): Shader<*> {\n            val shaderTypeI = reader.readByte()\n            val shaderType = ShaderId.get(shaderTypeI)\n            return shaderType.reader.parse(reader)\n        }\n    }\n\n    interface Buffer {\n        val shader: Shader<*>\n\n        fun serialize(writer: ByteArrayWriter)\n\n        /**\n         * Read new data into an existing buffer, as efficiently as possible.\n         */\n        fun read(reader: ByteArrayReader)\n    }\n\n    interface Renderer<B : Buffer> {\n        fun beginFrame(buffer: B, pixelCount: Int) {}\n        fun draw(buffer: B, pixelIndex: Int): Color\n        fun endFrame() {}\n        fun release() {}\n    }\n}\n\n/**\n * If a [Shader.Renderer] implements [PooledRenderer] and pixel prerendering is enabled on Pinky,\n * then the drawing cycle will look like this:\n *\n * - shader.createRenderer()\n * - rendererN*.beginFrame()\n * - pooledRenderer.preDraw()\n * - rendererN*.draw()\n * - rendererN*.endFrame()\n */\ninterface PooledRenderer {\n    fun preDraw()\n}\n\ninterface Pixels : Iterable<Color> {\n    val size: Int\n\n    val indices: IntRange\n        get() = IntRange(0, size - 1)\n\n    operator fun get(i: Int): Color\n    operator fun set(i: Int, color: Color)\n\n    fun set(colors: Array<Color>)\n\n    fun finishedFrame() {}\n\n    override fun iterator(): Iterator<Color> {\n        return object : Iterator<Color> {\n            private var i = 0\n\n            override fun hasNext(): Boolean = i < size\n\n            override fun next(): Color = get(i++)\n        }\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n","package baaahs\n\nimport baaahs.geom.Vector3F\nimport baaahs.geom.boundingBox\nimport baaahs.geom.center\nimport baaahs.glsl.CylindricalModelSpaceUvTranslator\nimport baaahs.glsl.LinearModelSpaceUvTranslator\nimport baaahs.glsl.UvTranslator\n\nabstract class Model<T : Model.Surface> {\n    abstract val name: String\n    abstract val movingHeads: List<MovingHead>\n    abstract val allSurfaces: List<T>\n    abstract val geomVertices: List<Vector3F>\n    abstract val defaultUvTranslator: UvTranslator\n\n    private val allSurfacesByName: Map<String, T> by lazy { allSurfaces.associateBy { it.name } }\n\n    fun findModelSurface(name: String) =\n        allSurfacesByName[name] ?: throw RuntimeException(\"no such model surface $name\")\n\n    val allVertices by lazy {\n        val allVertices = hashSetOf<Vector3F>()\n        allSurfaces.map { allVertices.addAll(it.allVertices()) }\n        allVertices\n    }\n\n    val modelBounds by lazy {\n        boundingBox(allVertices)\n    }\n\n    val modelExtents by lazy {\n        val (min, max) = modelBounds\n        max - min\n    }\n\n    val modelCenter by lazy {\n        center(allVertices)\n    }\n\n    /** A named surface in the geometry model. */\n    interface Surface {\n        val name: String\n        val description: String\n        val expectedPixelCount: Int?\n        fun allVertices(): Collection<Vector3F>\n        val faces: List<Face>\n        val lines: List<Line>\n    }\n\n    data class Line(val vertices: List<Vector3F>)\n\n    class Face(val vertexIds: List<Int>)\n}\n\nclass Decom2019Model : ObjModel<Model.Surface>(\"decom-2019-panels.obj\") {\n    override val name: String = \"Decom2019\"\n    override val defaultUvTranslator: UvTranslator by lazy { LinearModelSpaceUvTranslator(this) }\n\n    override fun createSurface(name: String, faces: MutableList<Face>, lines: MutableList<Line>): Surface {\n        return SheepModel.Panel(name, 16 * 60, faces, lines)\n    }\n}\n\nclass SuiGenerisModel : ObjModel<Model.Surface>(\"sui-generis.obj\") {\n    override val name: String = \"Decom2019\" // todo: it's weird that we're reusing Decom2019 here.\n    override val defaultUvTranslator: UvTranslator by lazy { LinearModelSpaceUvTranslator(this) }\n\n    override fun createSurface(name: String, faces: MutableList<Face>, lines: MutableList<Line>): Surface {\n        return SheepModel.Panel(name, 10 * 60, faces, lines)\n    }\n}\n\nclass SheepModel : ObjModel<SheepModel.Panel>(\"baaahs-model.obj\") {\n    override val name: String = \"BAAAHS\"\n    override val defaultUvTranslator: UvTranslator by lazy { CylindricalModelSpaceUvTranslator(this) }\n    private val pixelsPerPanel = hashMapOf<String, Int>()\n\n    override fun load() {\n        getResource(\"baaahs-panel-info.txt\")\n            .split(\"\\n\")\n            .map { it.split(Regex(\"\\\\s+\")) }\n            .forEach { pixelsPerPanel[it[0]] = it[1].toInt() * 60 }\n\n        super.load()\n    }\n\n    override fun createSurface(\n        name: String,\n        faces: MutableList<Face>,\n        lines: MutableList<Line>\n    ): Panel {\n        val expectedPixelCount = pixelsPerPanel[name]\n        if (expectedPixelCount == null) {\n            logger.warn { \"No pixel count found for $name\" }\n        }\n        return Panel(name, expectedPixelCount, faces, lines)\n    }\n\n    class Panel(\n        override val name: String,\n        override val expectedPixelCount: Int? = null,\n        override val faces: List<Face> = listOf(),\n        override val lines: List<Line> = listOf()\n    ) : Surface {\n        override fun allVertices(): Collection<Vector3F> {\n            val vertices = hashSetOf<Vector3F>()\n            vertices.addAll(lines.flatMap { it.vertices })\n            return vertices\n        }\n\n        override val description: String = \"Panel $name\"\n        override fun equals(other: Any?): Boolean = other is Panel && name == other.name\n        override fun hashCode(): Int = name.hashCode()\n    }\n}\n\nabstract class ObjModel<T : Model.Surface>(val objResourceName: String) : Model<T>() {\n    override val geomVertices: List<Vector3F> get() = vertices\n    lateinit var vertices: List<Vector3F>\n    lateinit var panels: List<T>\n\n    lateinit var eyes: List<MovingHead>\n\n    val allPanels: List<T>\n        get() = panels\n    val partySide: List<T>\n        get() = panels.filter { panel -> Regex(\"P$\").matches(panel.name) }\n\n    override val movingHeads: List<MovingHead> get() = eyes\n    override val allSurfaces get() = allPanels\n    lateinit var surfaceNeighbors: Map<T, List<T>>\n    private val surfacesByName = mutableMapOf<String, T>()\n\n    abstract fun createSurface(\n        name: String,\n        faces: MutableList<Face>,\n        lines: MutableList<Line>\n    ): T\n\n    open fun load() {\n        val vertices: MutableList<Vector3F> = mutableListOf()\n        val panels: MutableList<T> = mutableListOf()\n        var surfaceName: String? = null\n        var faces = mutableListOf<Face>()\n        var lines = mutableListOf<Line>()\n\n        val surfacesByEdge = mutableMapOf<List<Int>, MutableList<String>>()\n        val edgesBySurface = mutableMapOf<String, MutableList<List<Int>>>()\n\n        fun buildSurface() {\n            surfaceName?.let {\n                val surface = createSurface(it, faces, lines)\n                panels.add(surface)\n                surfacesByName[it] = surface\n\n                surfaceName = null\n                faces = mutableListOf()\n                lines = mutableListOf()\n            }\n        }\n\n        logger.debug { \"Loading model data from $objResourceName...\" }\n        getResource(objResourceName)\n            .split(\"\\n\")\n            .map { it.trim() }\n            .forEach { line ->\n                val parts = line.split(\" \")\n                val args = parts.subList(1, parts.size)\n\n                when (parts[0]) {\n                    \"v\" -> {\n                        if (args.size != 3) throw Exception(\"invalid vertex line: $line\")\n                        val coords = args.map { it.toFloat() }\n                        vertices.add(Vector3F(coords[0], coords[1], coords[2]))\n                    }\n                    \"o\" -> {\n                        buildSurface()\n\n                        val name = args.joinToString(\" \")\n                        surfaceName = name\n                    }\n                    \"f\" -> {\n                        val verts = args.map { it.toInt() - 1 }\n                        faces.add(Face(verts))\n                    }\n                    \"l\" -> {\n                        val verts = args.map { it.toInt() - 1 }\n                        val points = mutableListOf<Vector3F>()\n                        for (vi in verts) {\n                            val v = vertices[vi]\n                            points.add(v)\n                        }\n\n                        val sortedVerts = verts.sorted()\n                        surfacesByEdge.getOrPut(sortedVerts) { mutableListOf() }.add(surfaceName!!)\n                        edgesBySurface.getOrPut(surfaceName!!) { mutableListOf() }.add(sortedVerts)\n\n                        lines.add(Line(points))\n                    }\n                }\n            }\n\n        buildSurface()\n\n        logger.debug { \"${this::class.simpleName} has ${panels.size} panels and ${vertices.size} vertices\" }\n        this.vertices = vertices\n        this.panels = panels\n\n        fun neighborsOf(surface: T): List<T> {\n            return edgesBySurface[surface.name]\n                ?.flatMap { surfacesByEdge[it]?.toList() ?: emptyList() }\n                ?.filter { it != surface.name }\n                ?.map { surfacesByName[it]!! }\n                ?: emptyList()\n        }\n\n        surfaceNeighbors = allPanels.associateWith { neighborsOf(it) }\n\n        eyes = arrayListOf(\n            MovingHead(\"leftEye\", Vector3F(0f, 204.361f, 48.738f)),\n            MovingHead(\"rightEye\", Vector3F(0f, 204.361f, -153.738f))\n        )\n    }\n\n    fun neighborsOf(panel: T) = surfaceNeighbors[panel] ?: emptyList()\n\n    companion object {\n        val logger = Logger(\"ObjModel\")\n    }\n}\n\n","package baaahs\n\n/** A show takes input from gadgets and uses it to configure shaders, creating pretty stuff on surfaces. */\nabstract class Show(val name: String) {\n\n    abstract fun createRenderer(model: Model<*>, showRunner: ShowRunner): Renderer\n\n    override fun toString(): String = name\n\n    interface Renderer {\n        /**\n         * Renders the next frame of the show.\n         *\n         * Try to keep this under 30ms or so.\n         */\n        fun nextFrame()\n\n        /**\n         * Called when surfaces are newly or no longer available to the show.\n         *\n         * If the show is able to reconfigure itself for the new set of shaders, it should do so and return `true`.\n         *\n         * @return true if the show should be reinitialized.\n         */\n        fun surfacesChanged(newSurfaces: List<Surface>, removedSurfaces: List<Surface>): Unit =\n            throw RestartShowException()\n    }\n\n    class RestartShowException : Exception()\n}\n","package baaahs\n\nimport baaahs.dmx.Shenzarpy\nimport baaahs.shaders.CompositingMode\nimport baaahs.shaders.CompositorShader\n\nclass ShowRunner(\n    private val model: Model<*>,\n    initialShow: Show,\n    private val gadgetManager: GadgetManager,\n    private val beatSource: BeatSource,\n    private val dmxUniverse: Dmx.Universe,\n    private val movingHeadManager: MovingHeadManager,\n    internal val clock: Clock\n) {\n    var nextShow: Show? = initialShow\n    private var currentShow: Show? = null\n    private var currentShowRenderer: Show.Renderer? = null\n    private val changedSurfaces = mutableListOf<SurfacesChanges>()\n    private var totalSurfaceReceivers = 0\n    private var performedHousekeeping: Boolean = false\n\n    val allSurfaces: List<Surface> get() = surfaceReceivers.keys.toList()\n    val allUnusedSurfaces: List<Surface> get() = allSurfaces.minus(shaderBuffers.keys)\n\n    val allMovingHeads: List<MovingHead> get() = model.movingHeads\n\n    private val shaderBuffers: MutableMap<Surface, MutableList<Shader.Buffer>> = hashMapOf()\n\n    private var requestedGadgets: LinkedHashMap<String, Gadget> = linkedMapOf()\n\n    private var shadersLocked = true\n    private var gadgetsLocked = true\n\n    // Continuous from [0.0 ... 3.0] (0 is first beat in a measure, 3 is last)\n    val currentBeat: Float\n        get() = beatSource.getBeatData().beatWithinMeasure(clock)\n\n    fun getBeatSource(): BeatSource = beatSource\n\n    private fun recordShader(surface: Surface, shaderBuffer: Shader.Buffer) {\n        val buffersForSurface = shaderBuffers.getOrPut(surface) { mutableListOf() }\n\n        if (shaderBuffer is CompositorShader.Buffer) {\n            if (!buffersForSurface.remove(shaderBuffer.bufferA)\n                || !buffersForSurface.remove(shaderBuffer.bufferB)\n            ) {\n                throw IllegalStateException(\"Composite of unknown shader buffers!\")\n            }\n        }\n\n        buffersForSurface += shaderBuffer\n    }\n\n    /**\n     * Obtain a shader buffer which can be used to control the illumination of a surface.\n     *\n     * @param surface The surface we're shading.\n     * @param shader The type of shader.\n     * @return A shader buffer of the appropriate type.\n     */\n    fun <B : Shader.Buffer> getShaderBuffer(surface: Surface, shader: Shader<B>): B {\n        if (shadersLocked) throw IllegalStateException(\"Shaders can't be obtained during #nextFrame()\")\n        val buffer = shader.createBuffer(surface)\n        recordShader(surface, buffer)\n        return buffer\n    }\n\n    /**\n     * Obtain a compositing shader buffer which can be used to blend two other shaders together.\n     *\n     * The shaders must already have been obtained using [getShaderBuffer].\n     */\n    fun getCompositorBuffer(\n        surface: Surface,\n        bufferA: Shader.Buffer,\n        bufferB: Shader.Buffer,\n        mode: CompositingMode = CompositingMode.NORMAL,\n        fade: Float = 0.5f\n    ): CompositorShader.Buffer {\n        if (shadersLocked) throw IllegalStateException(\"Shaders can't be obtained during #nextFrame()\")\n        return CompositorShader(bufferA.shader, bufferB.shader)\n            .createBuffer(bufferA, bufferB)\n            .also {\n                it.mode = mode\n                it.fade = fade\n                recordShader(surface, it)\n            }\n    }\n\n    private fun getDmxBuffer(baseChannel: Int, channelCount: Int): Dmx.Buffer =\n        dmxUniverse.writer(baseChannel, channelCount)\n\n    fun getMovingHeadBuffer(movingHead: MovingHead): MovingHead.Buffer {\n        if (shadersLocked) throw IllegalStateException(\"Moving heads can't be obtained during #nextFrame()\")\n        val baseChannel = Config.DMX_DEVICES[movingHead.name]!!\n        val movingHeadBuffer = Shenzarpy(getDmxBuffer(baseChannel, 16))\n\n        movingHeadManager.listen(movingHead) { updated ->\n            println(\"Moving head ${movingHead.name} moved to ${updated.x} ${updated.y}\")\n            movingHeadBuffer.pan = updated.x / 255f\n            movingHeadBuffer.tilt = updated.y / 255f\n        }\n\n        return movingHeadBuffer\n    }\n\n    /**\n     * Obtain a gadget that can be used to receive input from a user. The gadget will be displayed in the show's UI.\n     *\n     * @param name Symbolic name for this gadget; must be unique within the show.\n     * @param gadget The gadget to display.\n     */\n    fun <T : Gadget> getGadget(name: String, gadget: T): T {\n        if (gadgetsLocked) throw IllegalStateException(\"Gadgets can't be obtained during #nextFrame()\")\n        val oldValue = requestedGadgets.put(name, gadget)\n        if (oldValue != null) throw IllegalStateException(\"Gadget names must be unique ($name)\")\n        return gadget\n    }\n\n    fun surfacesChanged(addedSurfaces: Collection<SurfaceReceiver>, removedSurfaces: Collection<SurfaceReceiver>) {\n        changedSurfaces.add(SurfacesChanges(ArrayList(addedSurfaces), ArrayList(removedSurfaces)))\n    }\n\n    fun nextFrame() {\n        if (!performedHousekeeping) housekeeping() else performedHousekeeping = false\n\n        // Always generate and send the next frame right away, then perform any housekeeping tasks immediately\n        // afterward, to avoid frame lag.\n        currentShowRenderer?.let {\n            it.nextFrame()\n            send()\n        }\n\n        housekeeping()\n        performedHousekeeping = true\n    }\n\n    private val surfaceReceivers = mutableMapOf<Surface, MutableList<SurfaceReceiver>>()\n\n    private fun housekeeping() {\n        for ((added, removed) in changedSurfaces) {\n            println(\"ShowRunner surfaces changed! ${added.size} added, ${removed.size} removed\")\n            for (receiver in removed) removeReceiver(receiver)\n            for (receiver in added) addReceiver(receiver)\n\n            if (nextShow == null) {\n                shadersLocked = false\n                try {\n                    currentShowRenderer?.surfacesChanged(added.map { it.surface }, removed.map { it.surface })\n\n                    logger.info {\n                        \"Show ${currentShow!!.name} updated; \" +\n                                \"${shaderBuffers.size} surfaces\"\n                    }\n                } catch (e: Show.RestartShowException) {\n                    // Show doesn't support changing surfaces, just restart it cold.\n                    nextShow = currentShow ?: nextShow\n                }\n                shadersLocked = true\n            }\n        }\n        changedSurfaces.clear()\n\n        // Maybe switch to a new show.\n        nextShow?.let { startingShow ->\n            createShowRenderer(startingShow)\n\n            currentShow = nextShow\n            nextShow = null\n        }\n    }\n\n    private fun createShowRenderer(startingShow: Show) {\n        shaderBuffers.clear()\n\n        val restartingSameShow = nextShow == currentShow\n        val gadgetsState = if (restartingSameShow) gadgetManager.getGadgetsState() else emptyMap()\n\n        unlockShadersAndGadgets {\n            currentShowRenderer = startingShow.createRenderer(model, this)\n        }\n\n        logger.info {\n            \"New show ${startingShow.name} created; \" +\n                    \"${shaderBuffers.size} surfaces \" +\n                    \"and ${requestedGadgets.size} gadgets\"\n        }\n\n        gadgetManager.sync(requestedGadgets.toList(), gadgetsState)\n        requestedGadgets.clear()\n    }\n\n    private fun unlockShadersAndGadgets(fn: () -> Unit) {\n        shadersLocked = false\n        gadgetsLocked = false\n\n        try {\n            fn()\n        } finally {\n            shadersLocked = true\n            gadgetsLocked = true\n        }\n    }\n\n    private fun addReceiver(receiver: SurfaceReceiver) {\n        receiversFor(receiver.surface).add(receiver)\n        totalSurfaceReceivers++\n    }\n\n    private fun removeReceiver(receiver: SurfaceReceiver) {\n        receiversFor(receiver.surface).remove(receiver)\n        shaderBuffers.remove(receiver.surface)\n        totalSurfaceReceivers--\n    }\n\n    private fun receiversFor(surface: Surface): MutableList<SurfaceReceiver> {\n        return surfaceReceivers.getOrPut(surface) { mutableListOf() }\n    }\n\n    fun send() {\n        shaderBuffers.forEach { (surface, shaderBuffers) ->\n            if (shaderBuffers.size != 1) {\n                throw IllegalStateException(\"Too many shader buffers for ${surface.describe()}: $shaderBuffers\")\n            }\n            val shaderBuffer = shaderBuffers.first()\n\n            receiversFor(surface).forEach { receiver ->\n                // TODO: The send might return an error, at which point this receiver should be nuked\n                // from the list of receivers for this surface. I'm not quite sure the best way to do\n                // that so I'm leaving this note.\n                receiver.send(shaderBuffer)\n            }\n        }\n\n        dmxUniverse.sendFrame()\n    }\n\n    fun shutDown() {\n        gadgetManager.clear()\n    }\n\n    data class SurfacesChanges(val added: Collection<SurfaceReceiver>, val removed: Collection<SurfaceReceiver>)\n\n    open class SurfaceReceiver(val surface: Surface, private val sendFn: (Shader.Buffer) -> Unit) {\n        open fun send(shaderBuffer: Shader.Buffer) = sendFn(shaderBuffer)\n    }\n\n    companion object {\n        val logger = Logger(\"ShowRunner\")\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * Randomly shuffles elements in this mutable list using the specified [random] instance as the source of randomness.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n","package baaahs\n\ninterface SoundAnalyzer {\n    val frequencies: FloatArray\n\n    fun listen(analysisListener: AnalysisListener)\n    fun unlisten(analysisListener: AnalysisListener)\n\n    interface AnalysisListener {\n        fun onSample(analysis: Analysis)\n    }\n\n    class Analysis(val frequencies: FloatArray, val magnitudes: FloatArray)\n}","package baaahs\n\nobject SparkleMotion {\n    const val MAX_PIXEL_COUNT = 2048\n    const val DEFAULT_PIXEL_COUNT = 1024\n    const val PIXEL_COUNT_UNKNOWN = -1\n}","package baaahs\n\nimport baaahs.geom.Vector3F\n\n/**\n * Represents a surface whose lighting can be controlled.\n *\n * May or may not be associated with a [Model.Surface].\n */\ninterface Surface {\n    val pixelCount: Int\n\n    fun describe(): String\n}\n\n/**\n * A surface which has been associated with a specific [Model.Surface].\n */\nclass IdentifiedSurface(\n    val modelSurface: Model.Surface,\n    override val pixelCount: Int,\n    /** Each pixel's location in the global 3d model. */\n    val pixelLocations: List<Vector3F?>? = emptyList()\n) : Surface {\n    val name: String = modelSurface.name\n    override fun describe(): String = modelSurface.description\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other == null || this::class != other::class) return false\n\n        other as IdentifiedSurface\n\n        if (modelSurface != other.modelSurface) return false\n\n        return true\n    }\n\n    override fun hashCode(): Int {\n        return modelSurface.hashCode()\n    }\n\n\n}\n\n/**\n * A surface whose identity isn't known.\n */\nclass AnonymousSurface(\n    val brainId: BrainId,\n    override val pixelCount: Int = SparkleMotion.MAX_PIXEL_COUNT\n) : Surface {\n    override fun describe(): String = \"Anonymous surface at $brainId\"\n    override fun equals(other: Any?): Boolean = other is AnonymousSurface && brainId.equals(other.brainId)\n    override fun hashCode(): Int = brainId.hashCode()\n}\n","package baaahs\n\nimport kotlinx.serialization.builtins.MapSerializer\nimport kotlinx.serialization.builtins.list\nimport kotlinx.serialization.builtins.serializer\n\nobject Topics {\n    val availableShows = PubSub.Topic(\"availableShows\", String.serializer().list)\n    val selectedShow = PubSub.Topic(\"selectedShow\", String.serializer())\n    val activeGadgets = PubSub.Topic(\"activeGadgets\", GadgetData.serializer().list)\n    val movingHeads = PubSub.Topic(\"movingHeads\", MovingHead.serializer().list)\n\n    val movingHeadPresets = PubSub.Topic(\n        \"movingHeadPresets\",\n        MapSerializer(String.serializer(), MovingHead.MovingHeadPosition.serializer())\n    )\n}","package baaahs.api.ws\n\nimport baaahs.Logger\nimport baaahs.imaging.Bitmap\nimport baaahs.mapper.MappingSession\nimport baaahs.mapper.Storage\nimport baaahs.net.Network\nimport baaahs.proto.Ports\nimport com.soywiz.klock.DateTime\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.channels.Channel\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\nimport kotlinx.serialization.builtins.list\nimport kotlinx.serialization.builtins.serializer\nimport kotlinx.serialization.json.*\n\nclass WebSocketClient(link: Network.Link, address: Network.Address) : Network.WebSocketListener,\n    CoroutineScope by MainScope() {\n    private lateinit var tcpConnection: Network.TcpConnection\n    private var connected = false\n    private lateinit var responses: Channel<ByteArray>\n\n    init {\n        link.connectWebSocket(address, Ports.PINKY_UI_TCP, \"/ws/api\", this)\n    }\n\n    suspend fun listSessions(): List<String> {\n        return WebSocketRouter.json.fromJson(String.serializer().list, sendCommand(\"listSessions\"))\n    }\n\n    suspend fun saveImage(sessionStartTime: DateTime, name: String, bitmap: Bitmap): String {\n        val filename = \"${Storage.formatDateTime(sessionStartTime)}/$name.webp\"\n        val dataUrl = bitmap.toDataUrl()\n        val startOfData = \";base64,\"\n        val i = dataUrl.indexOf(startOfData)\n        if (i == -1) {\n            throw IllegalArgumentException(\"failed to save image $dataUrl\")\n        }\n\n        sendCommand(\n            \"saveImage\",\n            JsonPrimitive(filename),\n            JsonPrimitive(dataUrl.substring(i + startOfData.length))\n        )\n\n        return filename\n    }\n\n    suspend fun saveSession(mappingSession: MappingSession) {\n        sendCommand(\"saveSession\", WebSocketRouter.json.toJson(MappingSession.serializer(), mappingSession))\n    }\n\n    private suspend fun sendCommand(command: String, vararg args: JsonElement): JsonElement {\n        val content = jsonArray {\n            +command\n            args.forEach { +it }\n        }\n        while (!connected) {\n            logger.warn { \"Mapper not connected to Pinky\u2026\" }\n            delay(50)\n        }\n        tcpConnection.send(WebSocketRouter.json.stringify(JsonArraySerializer, content).encodeToByteArray())\n\n        val responseJsonStr = responses.receive().decodeToString()\n        try {\n            val responseJson = WebSocketRouter.json.parseJson(responseJsonStr)\n            val status = responseJson.jsonObject.getPrimitive(\"status\")\n            val response = responseJson.jsonObject.getValue(\"response\")\n            when (status.contentOrNull) {\n                \"success\" -> return response\n                \"error\" -> throw RuntimeException(response.contentOrNull)\n            }\n            return responseJson\n        } catch (e: JsonDecodingException) {\n            logger.error { \"can't parse response to $command $args: $responseJsonStr\" }\n            throw e\n        }\n    }\n\n    override fun connected(tcpConnection: Network.TcpConnection) {\n        logger.info { \"Mapper connected to Pinky!\" }\n        this.tcpConnection = tcpConnection\n        responses = Channel(1)\n        connected = true\n    }\n\n    override fun receive(tcpConnection: Network.TcpConnection, bytes: ByteArray) {\n        logger.debug { \"Received ${bytes.decodeToString()}\" }\n        launch { responses.send(bytes) }\n    }\n\n    override fun reset(tcpConnection: Network.TcpConnection) {\n        if (::responses.isInitialized) responses.close()\n        logger.info { \"Mapper disconnected from Pinky!\" }\n    }\n\n    companion object {\n        val logger = Logger(\"MapperClient\")\n    }\n}\n","package baaahs.api.ws\n\nimport baaahs.Logger\nimport baaahs.net.Network\nimport kotlinx.serialization.json.*\n\nclass WebSocketRouter(handlers: HandlerBuilder.() -> Unit) : Network.WebSocketListener {\n    companion object {\n        val json = Json(JsonConfiguration.Stable)\n\n        val logger = Logger(\"WebSocketEndpoint\")\n    }\n\n    val handlerMap = HandlerBuilder(json).apply { handlers() }.handlerMap.toMap()\n\n    override fun connected(tcpConnection: Network.TcpConnection) {\n        logger.info { \"Received connection from ${tcpConnection.fromAddress}\" }\n    }\n\n    override fun receive(tcpConnection: Network.TcpConnection, bytes: ByteArray) {\n        val args = json.parseJson(bytes.decodeToString()).jsonArray\n        val command = args.first().contentOrNull\n        var status = \"success\"\n        var response: JsonElement\n\n        try {\n            val handler = handlerMap[command]\n                ?: throw UnsupportedOperationException(\"unknown command \\\"$command\\\"\")\n\n            response = handler(args.toList())\n        } catch (e: Exception) {\n            status = \"error\"\n            response = JsonPrimitive(e.toString())\n            logger.error { \"Command failed: $args\" }\n            logger.error { e.toString() }\n        }\n\n        logger.debug { \"Command: $args -> $status $response\" }\n        tcpConnection.send(json.stringify(JsonElementSerializer, json {\n            \"status\" to status\n            \"response\" to response\n        }).encodeToByteArray())\n    }\n\n    override fun reset(tcpConnection: Network.TcpConnection) {\n        logger.info { \"MapperEndpoint client disconnected from Pinky!\" }\n    }\n\n    class HandlerBuilder(val json: Json) {\n        val handlerMap = hashMapOf<String, (List<JsonElement>) -> JsonElement>()\n        fun handle(command: String, handler: (List<JsonElement>) -> JsonElement) {\n            handlerMap[command] = handler\n        }\n    }\n}\n","package baaahs.dmx\n\nimport baaahs.Color\nimport baaahs.Dmx\nimport baaahs.MovingHead\n\nclass LixadaMiniMovingHead(override val buffer: Dmx.Buffer) : Dmx.DeviceType(9), MovingHead.Buffer {\n    override val panChannel get() = Channel.PAN\n    override val panFineChannel: Dmx.Channel? get() = null /*Channel.PAN_FINE*/\n    override val tiltChannel: Dmx.Channel get() = Channel.TILT\n    override val tiltFineChannel: Dmx.Channel? get() = null /*Channel.TILT_FINE*/\n    override val dimmerChannel: Dmx.Channel get() = Channel.DIMMER\n    override var color: Color\n        get() = Color(buffer[Channel.RED], buffer[Channel.GREEN], buffer[Channel.BLUE])\n        set(value) {\n            buffer[Channel.RED] = value.redI.toByte()\n            buffer[Channel.GREEN] = value.greenI.toByte()\n            buffer[Channel.BLUE] = value.blueI.toByte()\n        }\n\n    override val colorMode: MovingHead.ColorMode get() = MovingHead.ColorMode.RGBW\n    override val colorWheelColors: List<Shenzarpy.WheelColor>\n        get() = throw UnsupportedOperationException()\n\n    init {\n        dimmer = 134 * 256 / 65535f\n        buffer[Channel.WHITE] = 255.toByte()\n        buffer[Channel.RED] = 255.toByte()\n        buffer[Channel.GREEN] = 255.toByte()\n        buffer[Channel.BLUE] = 255.toByte()\n    }\n\n    enum class Channel: Dmx.Channel {\n        PAN,\n//        PAN_FINE,\n        TILT,\n//        TILT_FINE,\n        DIMMER,\n        RED,\n        GREEN,\n        BLUE,\n        WHITE,\n        PAN_TILT_SPEED,\n//        COLOR_11,\n//        COLOR_12,\n//        COLOR_CONTROL,\n        COLOR_RESET;\n\n        override val offset = ordinal\n    }\n}","package baaahs.dmx\n\nimport baaahs.Color\nimport baaahs.Dmx\nimport baaahs.MovingHead\nimport baaahs.toRadians\n\nclass Shenzarpy(override val buffer: Dmx.Buffer) : Dmx.DeviceType(16), MovingHead.Buffer {\n    override val panChannel get() = Channel.PAN\n    override val panFineChannel: Dmx.Channel? get() = Channel.PAN_FINE\n    override val tiltChannel: Dmx.Channel get() = Channel.TILT\n    override val tiltFineChannel: Dmx.Channel? get() = Channel.TILT_FINE\n    override val dimmerChannel: Dmx.Channel get() = Channel.DIMMER\n    override var color: Color\n        get() = WheelColor.values[colorWheel.toInt()].color\n        set(value) { colorWheel = closestColorFor(value) }\n\n    override val colorMode: MovingHead.ColorMode get() = MovingHead.ColorMode.ColorWheel\n    override val colorWheelColors: List<WheelColor> = WheelColor.values.toList()\n\n    companion object {\n        val panRange = toRadians(0f)..toRadians(540f)\n        val tiltRange = toRadians(-110f)..toRadians(110f)\n    }\n\n    enum class WheelColor(val color: Color) {\n        RED(Color.from(0xc21e22)),\n        ORANGE(Color.from(0xeb8236)),\n        AQUAMARINE(Color.from(0x7cbc84)),\n        DEEP_GREEN(Color.from(0x12812f)),\n        LIGHT_GREEN(Color.from(0x9fc13f)),\n        LAVENDER(Color.from(0x8f74ab)),\n        PINK(Color.from(0xeb8182)),\n        YELLOW(Color.from(0xfeeb34)),\n        MAGENTA(Color.from(0xe11382)),\n        CYAN(Color.from(0x1ba7e8)),\n        CTO2(Color.from(0xf4c651)),\n        CTO1(Color.from(0xf4d88a)),\n        CTB(Color.from(0x97c7b8)),\n        DARK_BLUE(Color.from(0x085197)),\n        WHITE(Color.from(0xffffff));\n\n        companion object {\n            val values = values()\n            fun get(i: Byte) = values[i.toInt()]\n        }\n    }\n\n    enum class Channel : Dmx.Channel {\n        COLOR_WHEEL,\n        SHUTTER,\n        DIMMER,\n        GOBO_WHEEL,\n        PRISM,\n        PRISM_ROTATION,\n        MACRO,\n        FROST,\n        FOCUS,\n        PAN,\n        PAN_FINE,\n        TILT,\n        TILT_FINE,\n        PAN_TILT_SPEED,\n        RESET,\n        LAMP_CONTROL,\n        BLANK,\n        COLOR_WHEEL_SPEED,\n        DIM_PRISM_ATOM_SPEED,\n        GOBO_WHEEL_SPEED;\n\n\n        companion object {\n            val values = values()\n            fun get(i: Byte) = values[i.toInt()]\n        }\n\n        override val offset = ordinal\n    }\n\n    var colorWheel: Byte\n        get() = buffer[Channel.COLOR_WHEEL]\n        set(value) {\n            buffer[Channel.COLOR_WHEEL] = value\n        }\n\n    init {\n        dimmer = 1f\n    }\n}","package baaahs.gadgets\n\nimport baaahs.Color\nimport baaahs.Gadget\nimport kotlinx.serialization.Serializable\nimport kotlin.js.JsName\nimport kotlin.random.Random\n\n/** A gadget for picking a single color for a color palette. */\n@Serializable\ndata class ColorPicker(\n    /** The name for this color picker. */\n    val name: String,\n\n    /** The initial value for this color picker. */\n    val initialValue: Color = Color.WHITE\n) : Gadget() {\n\n    /** The selected color. */\n    @JsName(\"color\")\n    var color: Color by updatable(\"color\", initialValue, Color.serializer())\n\n    override fun adjustALittleBit() {\n        fun randomAmount() = Random.nextFloat() * .1f - .05f\n        color = Color(color.redF + randomAmount(), color.greenF + randomAmount(), color.blueF + randomAmount())\n    }\n}","package baaahs.gadgets\n\nimport baaahs.Color\nimport baaahs.Gadget\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.builtins.list\n\n/** A gadget for picking multiple colors. */\n@Serializable\ndata class PalettePicker(\n    /** The name for the palette picker. */\n    val name: String,\n\n    val initialColors: List<Color> = emptyList()\n) : Gadget() {\n    var colors: List<Color> by updatable(\"colors\", initialColors, Color.serializer().list)\n}\n","package baaahs.gadgets\n\nimport baaahs.Gadget\nimport baaahs.constrain\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.builtins.serializer\nimport kotlin.js.JsName\nimport kotlin.random.Random\n\n/** A gadget for adjusting a value using a slider. */\n@Serializable\ndata class Slider(\n    /** The name for this slider. */\n    val name: String,\n\n    /** The initial value for this slider. */\n    val initialValue: Float = 1f,\n\n    /** The minimum value for this slider. */\n    val minValue: Float = 0f,\n\n    /** The maximum value for this slider. */\n    val maxValue: Float = 1f,\n\n    /** The step value for the slider. Only used if minValue and maxValue are used. */\n    val stepValue: Float = 0.01f\n) : Gadget() {\n    /** The selected value. */\n    @JsName(\"value\")\n    var value: Float by updatable(\"value\", initialValue, Float.serializer())\n\n    override fun adjustALittleBit() {\n        val spread = maxValue - minValue\n        val amount = Random.nextFloat() * spread * .25f - spread * .125f\n        value = constrain(value + amount, minValue, maxValue)\n    }\n}","package baaahs.geom\n\nimport kotlinx.serialization.Serializable\n\n@Serializable\nclass Matrix4(val elements: Array<Double>)","package baaahs.geom\n\nimport kotlinx.serialization.Serializable\n\n@Serializable\nclass Vector2F(val x: Float, val y: Float) {\n    operator fun component1() = x\n    operator fun component2() = y\n\n    override fun toString(): String = \"Vector2F(x=$x, y=$y)\"\n}","package baaahs.geom\n\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlinx.serialization.Serializable\nimport kotlin.math.max\nimport kotlin.math.min\nimport kotlin.math.sqrt\n\n@Serializable\ndata class Vector3F(val x: Float, val y: Float, val z: Float) {\n    fun min(other: Vector3F): Vector3F = Vector3F(min(x, other.x), min(y, other.y), min(z, other.z))\n\n    fun max(other: Vector3F): Vector3F = Vector3F(max(x, other.x), max(y, other.y), max(z, other.z))\n\n    operator fun plus(other: Vector3F): Vector3F = Vector3F(x + other.x, y + other.y, z + other.z)\n\n    operator fun minus(other: Vector3F): Vector3F = Vector3F(x - other.x, y - other.y, z - other.z)\n\n    operator fun times(scalar: Float): Vector3F = Vector3F(x * scalar, y * scalar, z * scalar)\n\n    operator fun times(other: Vector3F): Vector3F = Vector3F(x * other.x, y * other.y, z * other.z)\n\n    operator fun div(scalar: Float): Vector3F = Vector3F(x / scalar, y / scalar, z / scalar)\n\n    operator fun div(other: Vector3F): Vector3F = Vector3F(x / other.x, y / other.y, z / other.z)\n\n    fun normalize(): Vector3F {\n        val invLength = 1.0f / length()\n        return Vector3F(x * invLength, y * invLength, z * invLength)\n    }\n\n    fun length(): Float {\n        return sqrt(lengthSquared().toDouble()).toFloat()\n    }\n\n    private fun lengthSquared(): Float {\n        return x * x + y * y + z * z\n    }\n\n    fun serialize(writer: ByteArrayWriter) {\n        writer.writeFloat(x)\n        writer.writeFloat(y)\n        writer.writeFloat(z)\n    }\n\n    companion object {\n        fun parse(reader: ByteArrayReader) =\n            Vector3F(reader.readFloat(), reader.readFloat(), reader.readFloat())\n    }\n}\n\nfun center(vectors: Collection<Vector3F>): Vector3F {\n    val (min, max) = boundingBox(vectors)\n    val diff = max.minus(min)\n    return diff * 0.5f + min\n}\n\nfun boundingBox(vectors: Collection<Vector3F>): Pair<Vector3F, Vector3F> {\n    val min = vectors.reduce { acc, vector3F -> acc.min(vector3F) }\n    val max = vectors.reduce { acc, vector3F -> acc.max(vector3F) }\n    return Pair(min, max)\n}","package baaahs.glsl\n\nimport com.danielgergely.kgl.*\n\nexpect object GlslBase {\n    val plugins: MutableList<GlslPlugin>\n    val manager: GlslManager\n}\n\ninline fun <T> Kgl.check(fn: () -> T): T {\n    val result = fn.invoke()\n    checkForGlError()\n    return result\n}\n\nfun Kgl.checkForGlError() {\n    while (true) {\n        val error = getError()\n        val code = when (error) {\n            GL_INVALID_ENUM -> \"GL_INVALID_ENUM\"\n            GL_INVALID_VALUE -> \"GL_INVALID_VALUE\"\n            GL_INVALID_OPERATION -> \"GL_INVALID_OPERATION\"\n            GL_INVALID_FRAMEBUFFER_OPERATION -> \"GL_INVALID_FRAMEBUFFER_OPERATION\"\n            GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT -> \"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\"\n//            GL_CONTEXT_LOST_WEBGL -> \"GL_CONTEXT_LOST_WEBGL\"\n            GL_OUT_OF_MEMORY -> \"GL_OUT_OF_MEMORY\"\n            else -> \"unknown error $error\"\n        }\n        if (error != 0) throw RuntimeException(\"OpenGL Error: $code\") else return\n    }\n}\n","package baaahs.glsl\n\nimport com.danielgergely.kgl.Kgl\n\nabstract class GlslContext(private val kgl: Kgl, private val glslVersion: String) {\n    abstract fun <T> runInContext(fn: () -> T): T\n\n    fun createProgram(fragShader: String): Program {\n        return runInContext {\n            Program(kgl, fragShader, glslVersion, GlslBase.plugins)\n        }\n    }\n\n    fun createRenderer(\n        program: Program,\n        uvTranslator: UvTranslator\n    ): GlslRenderer {\n        return runInContext {\n            GlslRenderer(kgl, object : GlslRenderer.ContextSwitcher {\n                override fun <T> inContext(fn: () -> T): T = runInContext(fn)\n            }, program, uvTranslator)\n        }\n    }\n}","package baaahs.glsl\n\nabstract class GlslManager {\n    abstract val available: Boolean\n\n    abstract fun createContext(): GlslContext\n}","package baaahs.glsl\n\nimport com.danielgergely.kgl.Kgl\n\ninterface GlslPlugin {\n    fun forProgram(gl: Kgl, program: Program): ProgramContext\n\n    interface ProgramContext {\n        val glslPreamble: String\n\n        fun afterCompile() {}\n\n        fun forRender(): RenderContext?\n\n        fun release() {}\n    }\n\n    interface RenderContext {\n        fun before() {}\n\n        fun after() {}\n\n        fun release() {}\n    }\n}","package baaahs.glsl\n\nimport baaahs.Color\nimport baaahs.Pixels\nimport baaahs.Surface\n\nclass GlslSurface(\n    val pixels: SurfacePixels,\n    val uniforms: GlslRenderer.Uniforms,\n    val rect0Index: Int,\n    val rects: List<Quad.Rect>, // these are in pixels, (0,0) at top left\n    val uvTranslator: UvTranslator\n)\n\nabstract class SurfacePixels(val surface: Surface, val pixel0Index: Int) : Pixels {\n    override val size: Int = surface.pixelCount\n    override fun set(i: Int, color: Color): Unit = TODO(\"set not implemented\")\n    override fun set(colors: Array<Color>): Unit = TODO(\"set not implemented\")\n}","package baaahs.glsl\n\nimport baaahs.shaders.GlslShader\nimport com.danielgergely.kgl.GL_LINK_STATUS\nimport com.danielgergely.kgl.GL_TRUE\nimport com.danielgergely.kgl.Kgl\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\n\nclass Program constructor(\n    private val gl: Kgl,\n    val fragShader: String,\n    private val glslVersion: String,\n    plugins: List<GlslPlugin> = GlslBase.plugins\n) {\n    private val id = gl.check { gl.createProgram() ?: throw IllegalStateException() }\n\n    val params: List<GlslShader.Param>\n    val plugins = plugins.map { it.forProgram(gl, this) }\n\n    private val gadgetPattern = Regex(\n        \"\\\\s*//\\\\s*SPARKLEMOTION GADGET:\\\\s*([^\\\\s]+)\\\\s+(\\\\{.*})\\\\s*\\n\" +\n                \"\\\\s*uniform\\\\s+([^\\\\s]+)\\\\s+([^\\\\s]+);\"\n    )\n    private val json = Json(JsonConfiguration.Stable.copy(isLenient = true))\n\n    private var nextTextureId = 0\n\n    fun obtainTextureId(): Int {\n        check(nextTextureId <= 31) { \"too many textures!\" }\n        return nextTextureId++\n    }\n\n    init {\n        attachVertexShader()\n        val src = buildFragmentShader()\n        println(src)\n        params = findParams(src)\n        val fragmentShader = Shader.createFragmentShader(gl, src)\n        attachShader(fragmentShader)\n\n        if (!link()) {\n            val infoLog = getInfoLog()\n            throw RuntimeException(\"ProgramInfoLog: $infoLog\")\n        }\n\n        this.plugins.forEach { it.afterCompile() }\n    }\n\n    fun findParams(glslFragmentShader: String): List<GlslShader.Param> {\n        return gadgetPattern.findAll(glslFragmentShader).map { matchResult ->\n            println(\"matches: ${matchResult.groupValues}\")\n            val (gadgetType, configJson, valueTypeName, varName) = matchResult.destructured\n            val configData = json.parseJson(configJson)\n            val valueType = when (valueTypeName) {\n                \"int\" -> GlslShader.Param.Type.INT\n                \"float\" -> GlslShader.Param.Type.FLOAT\n                \"vec3\" -> GlslShader.Param.Type.VEC3\n                else -> throw IllegalArgumentException(\"unsupported type $valueTypeName\")\n            }\n            GlslShader.Param(varName, gadgetType, valueType, configData.jsonObject)\n        }.toList()\n    }\n\n    fun getInfoLog(): String? = gl.getProgramInfoLog(id)\n    fun attachShader(shader: Shader) = gl.attachShader(id, shader.id)\n    fun link(): Boolean {\n        gl.linkProgram(id)\n        return gl.getProgramParameter(id, GL_LINK_STATUS) == GL_TRUE\n    }\n\n    fun bind() = gl.useProgram(id)\n\n    fun getUniform(name: String): Uniform? = gl.getUniformLocation(id, name)?.let { Uniform(gl, it) }\n\n    private fun attachVertexShader() {\n        val vertexShaderSource = \"\"\"#version $glslVersion\n    \nprecision lowp float;\n\n// xy = vertex position in normalized device coordinates ([-1,+1] range).\nin vec2 Vertex;\n\nconst vec2 scale = vec2(0.5, 0.5);\n\nvoid main()\n{\n    vec2 vTexCoords  = Vertex * scale + scale; // scale vertex attribute to [0,1] range\n    gl_Position = vec4(Vertex, 0.0, 1.0);\n}\n\"\"\"\n        val vertexShader = Shader.createVertexShader(gl, vertexShaderSource)\n        attachShader(vertexShader)\n    }\n\n    fun getVertexAttribLocation(): Int {\n        return gl.getAttribLocation(id, \"Vertex\")\n    }\n\n    private fun buildFragmentShader(): String {\n        return \"\"\"#version $glslVersion\n    \n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D sm_uvCoords;\n\n// SPARKLEMOTION GADGET: Slider { \"name\": \"u scale\", \"minValue\": 0, \"maxValue\": 3 }\nuniform float sm_uScale;\n\n// SPARKLEMOTION GADGET: Slider { \"name\": \"v scale\", \"minValue\": 0, \"maxValue\": 3 }\nuniform float sm_vScale;\n\n// SPARKLEMOTION GADGET: StartOfMeasure { \"name\": \"startOfMeasure\" }\nuniform float sm_startOfMeasure;\n\n// SPARKLEMOTION GADGET: Beat { \"name\": \"beat\" }\nuniform float sm_beat;\n\n// SPARKLEMOTION GADGET: Slider { \"name\": \"Brightness\", \"minValue\": 0, \"maxValue\": 1 }\nuniform float sm_brightness;\n\n// SPARKLEMOTION GADGET: Slider { \"name\": \"Saturation\", \"minValue\": 0, \"maxValue\": 1 }\nuniform float sm_saturation;\n\n${plugins.map { plugin -> plugin.glslPreamble }.joinToString(\"\\n\")}\n\nout vec4 sm_fragColor;\n\n${fragShader\n        .replace(\n            Regex(\"void main\\\\s*\\\\(\\\\s*(void\\\\s*)?\\\\)\"),\n            \"void sm_main(vec2 sm_pixelCoord)\"\n        )\n        .replace(\"gl_FragCoord\", \"sm_pixelCoord\")\n        .replace(\"gl_FragColor\", \"sm_fragColor\")\n    }\n\n// Coming in, `gl_FragCoord` is a vec2 where `x` and `y` correspond to positions in `sm_uvCoords`.\n// We look up the `u` and `v` coordinates (which should be floats `[0..1]` in the mapping space) and\n// pass them to the shader's original `main()` method.\nvoid main(void) {\n    int uvX = int(gl_FragCoord.x);\n    int uvY = int(gl_FragCoord.y);\n    \n    vec2 pixelCoord = vec2(\n        texelFetch(sm_uvCoords, ivec2(uvX * 2, uvY), 0).r * sm_uScale,    // u\n        texelFetch(sm_uvCoords, ivec2(uvX * 2 + 1, uvY), 0).r * sm_vScale // v\n    );\n\n    sm_main(pixelCoord);\n}\n\"\"\"\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Represents a collection of captured groups in a single match of a regular expression.\n *\n * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n *\n * An element of the collection at the particular index can be `null`,\n * if the corresponding group in the regular expression is optional and\n * there was no match captured by that group.\n */\npublic interface MatchGroupCollection : Collection<MatchGroup?> {\n\n    /** Returns a group with the specified [index].\n     *\n     * @return An instance of [MatchGroup] if the group with the specified [index] was matched or `null` otherwise.\n     *\n     * Groups are indexed from 1 to the count of groups in the regular expression. A group with the index 0\n     * corresponds to the entire match.\n     */\n    public operator fun get(index: Int): MatchGroup?\n}\n\n/**\n * Extends [MatchGroupCollection] by introducing a way to get matched groups by name, when regex supports it.\n */\n@SinceKotlin(\"1.1\")\npublic interface MatchNamedGroupCollection : MatchGroupCollection {\n    /**\n     * Returns a named group with the specified [name].\n     * @return An instance of [MatchGroup] if the group with the specified [name] was matched or `null` otherwise.\n     * @throws IllegalArgumentException if there is no group with the specified [name] defined in the regex pattern.\n     * @throws UnsupportedOperationException if getting named groups isn't supported on the current platform.\n     */\n    public operator fun get(name: String): MatchGroup?\n}\n\n/**\n * Represents the results from a single regular expression match.\n */\npublic interface MatchResult {\n    /** The range of indices in the original string where match was captured. */\n    public val range: IntRange\n    /** The substring from the input string captured by this match. */\n    public val value: String\n    /**\n     * A collection of groups matched by the regular expression.\n     *\n     * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     */\n    public val groups: MatchGroupCollection\n    /**\n     * A list of matched indexed group values.\n     *\n     * This list has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding item in [groupValues] is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val groupValues: List<String>\n\n    /**\n     * An instance of [MatchResult.Destructured] wrapper providing components for destructuring assignment of group values.\n     *\n     * component1 corresponds to the value of the first group, component2 \u2014 of the second, and so on.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val destructured: Destructured get() = Destructured(this)\n\n    /** Returns a new [MatchResult] with the results for the next match, starting at the position\n     *  at which the last match ended (at the character after the last matched character).\n     */\n    public fun next(): MatchResult?\n\n    /**\n     * Provides components for destructuring assignment of group values.\n     *\n     * [component1] corresponds to the value of the first group, [component2] \u2014 of the second, and so on.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding component value is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public class Destructured internal constructor(public val match: MatchResult) {\n        @kotlin.internal.InlineOnly\n        public operator inline fun component1():  String = match.groupValues[1]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component2():  String = match.groupValues[2]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component3():  String = match.groupValues[3]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component4():  String = match.groupValues[4]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component5():  String = match.groupValues[5]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component6():  String = match.groupValues[6]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component7():  String = match.groupValues[7]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component8():  String = match.groupValues[8]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component9():  String = match.groupValues[9]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component10(): String = match.groupValues[10]\n\n        /**\n         *  Returns destructured group values as a list of strings.\n         *  First value in the returned list corresponds to the value of the first group, and so on.\n         *\n         * @sample samples.text.Regexps.matchDestructuringToGroupValues\n         */\n        public fun toList(): List<String> = match.groupValues.subList(1, match.groupValues.size)\n    }\n}","package baaahs.glsl\n\nimport com.danielgergely.kgl.*\n\nclass Quad(private val gl: Kgl, program: Program, rects: List<Rect>) {\n    private val vertices = rects.flatMap { rect ->\n        listOf(\n            // First triangle:\n            rect.right, rect.top,\n            rect.left, rect.top,\n            rect.left, rect.bottom,\n            // Second triangle:\n            rect.left, rect.bottom,\n            rect.right, rect.bottom,\n            rect.right, rect.top\n        )\n    }.toFloatArray()\n\n    private var vao: VertexArrayObject = gl { gl.createVertexArray() }\n    private var quadVertexBuffer: GlBuffer = gl { gl.createBuffers(1)[0] }\n    private val vertexAttr = gl { program.getVertexAttribLocation() }\n\n    init {\n        gl { gl.bindVertexArray(vao) }\n        gl { gl.bindBuffer(GL_ARRAY_BUFFER, quadVertexBuffer) }\n        gl { gl.bufferData(GL_ARRAY_BUFFER, bufferOf(vertices), vertices.size, GL_STATIC_DRAW) }\n\n        gl { gl.vertexAttribPointer(vertexAttr, 2, GL_FLOAT, false, 0, 0) }\n        gl { gl.enableVertexAttribArray(vertexAttr) }\n\n        gl { gl.bindBuffer(GL_ARRAY_BUFFER, null) }\n\n        gl { gl.bindVertexArray(null) }\n    }\n\n    private fun bufferOf(floats: FloatArray): Buffer = FloatBuffer(floats)\n\n    internal fun prepareToRender(fn: () -> Unit) {\n        gl { gl.bindVertexArray(vao) }\n        gl { gl.enableVertexAttribArray(vertexAttr) }\n\n        fn()\n\n        gl { gl.disableVertexAttribArray(vertexAttr) }\n        gl { gl.bindVertexArray(null) }\n    }\n\n    internal fun renderRect(rectIndex: Int) {\n        // Draw the triangles\n        gl { gl.drawArrays(GL_TRIANGLES, rectIndex * 6, 6) }\n    }\n\n    fun release() {\n        gl { gl.deleteBuffer(quadVertexBuffer) }\n        gl { gl.deleteVertexArray(vao) }\n    }\n\n    fun <T> gl(fn: () -> T): T {\n        val result = fn.invoke()\n        gl.checkForGlError()\n        return result\n    }\n\n    data class Rect(val top: Float, val left: Float, val bottom: Float, val right: Float)\n}","package baaahs.glsl\n\nimport baaahs.Logger\nimport com.danielgergely.kgl.*\n\nclass Shader private constructor(\n    private val gl: Kgl,\n    internal val id: com.danielgergely.kgl.Shader,\n    private val source: String\n) {\n    val logger = Logger(\"baaahs.glsl.Shader\")\n\n    init {\n        compile()\n    }\n\n    private fun compile() {\n        gl.shaderSource(id, source)\n        gl.compileShader(id)\n\n        if (gl.getShaderParameter(id, GL_COMPILE_STATUS) != GL_TRUE) {\n            val infoLog = gl.getShaderInfoLog(id)\n            logger.warn {\n                \"Failed to compile shader: $infoLog\\n\" +\n                        \"Version: \\${gl.getParameter(GL_VERSION)}\\n\" +\n                        \"GLSL Version: \\${gl.getParameter(GL_SHADING_LANGUAGE_VERSION)}\\n\" +\n                        \"\\n\" +\n                        source\n            }\n            throw RuntimeException(\"Failed to compile shader: $infoLog\")\n        }\n    }\n\n    companion object {\n        fun createVertexShader(gl: Kgl, source: String): Shader {\n            val shaderId = gl.check { gl.createShader(GL_VERTEX_SHADER) } ?: throw IllegalStateException()\n            return Shader(gl, shaderId, source)\n        }\n\n        fun createFragmentShader(gl: Kgl, source: String): Shader {\n            val shaderId = gl.createShader(GL_FRAGMENT_SHADER) ?: throw IllegalStateException()\n            return Shader(gl, shaderId, source)\n        }\n    }\n}\n","package baaahs.glsl\n\nimport baaahs.IdentifiedSurface\nimport baaahs.Logger\nimport baaahs.Surface\nimport baaahs.geom.Vector3F\nimport kotlin.random.Random\n\nabstract class SurfacePixelStrategy {\n    abstract fun forSurface(surface: Surface): List<Vector3F?>\n}\n\nobject RandomSurfacePixelStrategy : SurfacePixelStrategy() {\n    override fun forSurface(surface: Surface): List<Vector3F?> {\n        return when {\n            surface is IdentifiedSurface && surface.pixelLocations != null -> {\n                surface.pixelLocations\n            }\n\n            surface is IdentifiedSurface -> {\n                // Randomly pick locations within the surface.\n                val surfaceVertices = surface.modelSurface.allVertices().toList()\n                var lastPixelLocation = surfaceVertices.random()\n                (0 until surface.pixelCount).map {\n                    lastPixelLocation = (lastPixelLocation + surfaceVertices.random()) / 2f\n                    lastPixelLocation\n                }\n            }\n\n            else -> {\n                // Randomly pick locations. TODO: this should be based on model extents.\n                val min = Vector3F(0f, 0f, 0f)\n                val max = Vector3F(100f, 100f, 100f)\n                val scale = max - min\n\n                (0 until surface.pixelCount).map {\n                    Vector3F(Random.nextFloat(), Random.nextFloat(), Random.nextFloat()) * scale + min\n                }\n            }\n        }\n    }\n}\n\nobject LinearSurfacePixelStrategy : SurfacePixelStrategy() {\n    val logger = Logger(\"LinearSurfacePixelStrategy\")\n\n    override fun forSurface(surface: Surface): List<Vector3F?> {\n        val pixelCount = surface.pixelCount\n\n        return when {\n            surface is IdentifiedSurface && surface.pixelLocations != null -> {\n                logger.debug { \"Surface ${surface.name} has mapped pixels.\"}\n                surface.pixelLocations\n            }\n\n            surface is IdentifiedSurface -> {\n                logger.debug { \"Surface ${surface.name} doesn't have mapped pixels.\"}\n                // Generate pixel locations along a line from one vertex to the surface's center.\n                val surfaceVertices = surface.modelSurface.allVertices()\n                val surfaceCenter = surfaceVertices.average()\n                val vertex1 = surfaceVertices.first()\n\n                interpolate(vertex1, surfaceCenter, pixelCount)\n            }\n\n            else -> {\n                logger.debug { \"Surface ${surface.describe()} is unknown.\"}\n                // Randomly pick locations. TODO: this should be based on model extents.\n                val min = Vector3F(0f, 0f, 0f)\n                val max = Vector3F(100f, 100f, 100f)\n                val scale = max - min\n                val vertex1 = Vector3F(Random.nextFloat(), Random.nextFloat(), Random.nextFloat()) * scale + min\n                val vertex2 = Vector3F(Random.nextFloat(), Random.nextFloat(), Random.nextFloat()) * scale + min\n\n                interpolate(vertex1, vertex2, pixelCount)\n            }\n        }\n    }\n\n    private fun Collection<Vector3F>.average(): Vector3F {\n        return reduce { acc, vector3F -> acc + vector3F } / size.toFloat()\n    }\n\n    private fun interpolate(from: Vector3F, to: Vector3F, steps: Int): List<Vector3F> {\n        return if (steps == 1) {\n            listOf(from)\n        } else {\n            (0 until steps).map { interpolate(from, to, it / (steps - 1f)) }\n        }\n    }\n\n    private fun interpolate(from: Vector3F, to: Vector3F, degree: Float): Vector3F {\n        val delta = to - from\n        return from + delta * degree\n    }\n}","package baaahs.glsl\n\nimport com.danielgergely.kgl.Kgl\nimport com.danielgergely.kgl.UniformLocation\n\nclass Uniform internal constructor(private val gl: Kgl, val uniformLocation: UniformLocation) {\n    fun set(x: Int) = gl.check { gl.uniform1i(uniformLocation, x) }\n    fun set(x: Int, y: Int) = gl.check { gl.uniform2i(uniformLocation, x, y) }\n    fun set(x: Int, y: Int, z: Int) = gl.check { gl.uniform3i(uniformLocation, x, y, z) }\n    fun set(x: Float) = gl.check { gl.uniform1f(uniformLocation, x) }\n    fun set(x: Float, y: Float) = gl.check { gl.uniform2f(uniformLocation, x, y) }\n    fun set(x: Float, y: Float, z: Float) = gl.check { gl.uniform3f(uniformLocation, x, y, z) }\n\n    companion object {\n        fun find(program: Program, name: String): Uniform? {\n            return program.getUniform(name)\n        }\n    }\n}\n","package baaahs.glsl\n\nimport baaahs.Color\nimport baaahs.shaders.GlslShader\n\nclass UniformSetter(program: Program, private val param: GlslShader.Param) {\n    private val uniformLocation = program.getUniform(param.varName)\n\n    fun set(value: Any?) {\n        if (value != null && uniformLocation != null) {\n            when (param.valueType) {\n                GlslShader.Param.Type.INT -> uniformLocation.set(value as Int)\n                GlslShader.Param.Type.FLOAT -> uniformLocation.set(value as Float)\n                GlslShader.Param.Type.VEC3 -> {\n                    val color = value as Color\n                    uniformLocation.set(color.redF, color.greenF, color.blueF)\n                }\n            }\n        }\n    }\n}\n","package baaahs.glsl\n\nimport baaahs.Model\nimport baaahs.geom.Vector3F\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlin.math.PI\nimport kotlin.math.abs\nimport kotlin.math.atan2\n\nabstract class UvTranslator(val id: Id) {\n    enum class Id {\n        PANEL_SPACE_UV_TRANSLATOR {\n            override fun parse(reader: ByteArrayReader): UvTranslator =\n                PanelSpaceUvTranslator\n        },\n\n        CYLINDRICAL_MODEL_UV_TRANSLATOR {\n            override fun parse(reader: ByteArrayReader): UvTranslator =\n                CylindricalModelSpaceUvTranslator.parse(reader)\n        },\n\n        LINEAR_MODEL_UV_TRANSLATOR {\n            override fun parse(reader: ByteArrayReader): UvTranslator =\n                LinearModelSpaceUvTranslator.parse(reader)\n        };\n\n        abstract fun parse(reader: ByteArrayReader): UvTranslator\n\n        companion object {\n            val values = values()\n            fun get(i: Byte): Id {\n                if (i > values.size || i < 0) {\n                    throw Throwable(\"bad index for UvTranslator.Id: $i\")\n                }\n                return values[i.toInt()]\n            }\n        }\n    }\n\n    abstract fun forPixels(pixelLocations: List<Vector3F?>): SurfaceUvTranslator\n\n    fun serialize(writer: ByteArrayWriter) {\n        writer.writeByte(id.ordinal.toByte())\n        serializeConfig(writer)\n    }\n\n    abstract fun serializeConfig(writer: ByteArrayWriter)\n\n    companion object {\n        fun parse(reader: ByteArrayReader): UvTranslator {\n            val uvTranslatorId = reader.readByte()\n            val uvTranslatorType = Id.get(uvTranslatorId)\n            return uvTranslatorType.parse(reader)\n        }\n    }\n\n    interface SurfaceUvTranslator {\n        val pixelCount: Int\n        fun getUV(pixelIndex: Int): Pair<Float, Float>\n    }\n}\n\nobject PanelSpaceUvTranslator :\n    UvTranslator(Id.PANEL_SPACE_UV_TRANSLATOR) {\n\n    override fun forPixels(pixelLocations: List<Vector3F?>): SurfaceUvTranslator {\n        return object : SurfaceUvTranslator {\n            override val pixelCount: Int = pixelLocations.size\n\n            override fun getUV(pixelIndex: Int): Pair<Float, Float> {\n                val vector3F = pixelLocations[pixelIndex]\n                return (vector3F?.x ?: 0f) to (vector3F?.y ?: 0f)\n            }\n        }\n    }\n\n    override fun serializeConfig(writer: ByteArrayWriter) {}\n}\n\nclass CylindricalModelSpaceUvTranslator(\n    val modelCenter: Vector3F,\n    val modelExtents: Vector3F\n) : UvTranslator(Id.CYLINDRICAL_MODEL_UV_TRANSLATOR) {\n    constructor(model: Model<*>) : this(model.modelCenter, model.modelExtents)\n\n    override fun forPixels(pixelLocations: List<Vector3F?>): SurfaceUvTranslator {\n        return object : SurfaceUvTranslator {\n            override val pixelCount: Int = pixelLocations.size\n\n            override fun getUV(pixelIndex: Int): Pair<Float, Float> {\n                val pixelLocation = pixelLocations[pixelIndex] ?: modelCenter\n\n                val normalDelta = pixelLocation.minus(modelCenter).normalize()\n                var theta = atan2(abs(normalDelta.z), normalDelta.x) // theta in range [-\u03c0,\u03c0]\n                if (theta < 0.0f) theta += (2.0f * PI.toFloat()) // theta in range [0,2\u03c0)\n                val u = theta / (2.0f * PI.toFloat()) // u in range [0,1)\n                val v = (pixelLocation.minus(modelCenter).y + modelExtents.y / 2.0f) / modelExtents.y\n                return u to v\n            }\n        }\n    }\n\n    override fun serializeConfig(writer: ByteArrayWriter) {\n        modelCenter.serialize(writer)\n        modelExtents.serialize(writer)\n    }\n\n    companion object {\n        fun parse(reader: ByteArrayReader): CylindricalModelSpaceUvTranslator {\n            val modelCenter = Vector3F.parse(reader)\n            val modelExtents = Vector3F.parse(reader)\n            return CylindricalModelSpaceUvTranslator(modelCenter, modelExtents)\n        }\n    }\n}\n\nclass LinearModelSpaceUvTranslator(\n    val modelCenter: Vector3F,\n    val modelBounds: Pair<Vector3F, Vector3F>\n) : UvTranslator(Id.LINEAR_MODEL_UV_TRANSLATOR) {\n    constructor(model: Model<*>) : this(model.modelCenter, model.modelBounds)\n\n    override fun forPixels(pixelLocations: List<Vector3F?>): SurfaceUvTranslator {\n        return object : SurfaceUvTranslator {\n            override val pixelCount: Int = pixelLocations.size\n\n            override fun getUV(pixelIndex: Int): Pair<Float, Float> {\n                val (min, max) = modelBounds\n                val pixelLocation = (pixelLocations[pixelIndex] ?: modelCenter) - min\n                val extents = max - min\n                val normalized = pixelLocation / extents // in range [0,1)\n                return normalized.x to normalized.y\n            }\n        }\n    }\n\n    override fun serializeConfig(writer: ByteArrayWriter) {\n        modelCenter.serialize(writer)\n        modelBounds.serialize(writer)\n    }\n\n    companion object {\n        fun parse(reader: ByteArrayReader): LinearModelSpaceUvTranslator {\n            val modelCenter = Vector3F.parse(reader)\n            val modelBounds = Vector3F.parse(reader) to Vector3F.parse(reader)\n            return LinearModelSpaceUvTranslator(modelCenter, modelBounds)\n        }\n\n        fun Pair<Vector3F, Vector3F>.serialize(writer: ByteArrayWriter) {\n            first.serialize(writer)\n            second.serialize(writer)\n        }\n    }\n}","package baaahs.imaging\n\nimport baaahs.MediaDevices\n\npublic interface Image {\n    val width: Int\n    val height: Int\n\n    fun toBitmap(): Bitmap\n}\n\npublic interface Bitmap {\n    val width: Int\n    val height: Int\n\n    fun drawImage(image: Image)\n\n    fun drawImage(\n        image: Image,\n        sX: Int, sY: Int, sWidth: Int, sHeight: Int,\n        dX: Int, dY: Int, dWidth: Int, dHeight: Int\n    )\n\n    fun copyFrom(other: Bitmap)\n\n    fun lighten(other: Bitmap)\n\n    fun darken(other: Bitmap)\n\n    fun subtract(other: Bitmap)\n\n    fun withData(\n        region: MediaDevices.Region = MediaDevices.Region.containing(this),\n        fn: (data: UByteClampedArray) -> Boolean\n    )\n\n    fun asImage(): Image\n    fun toDataUrl(): String\n\n    fun clone(): Bitmap\n}\n\ninterface UByteClampedArray {\n    val size: Int\n    operator fun get(index: Int): Int\n    operator fun set(index: Int, value: UByte)\n}\n\nexpect class NativeBitmap(width: Int, height: Int) : Bitmap","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToBits\")\npublic actual fun Double.toBits(): Long = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout,\n * preserving `NaN` values exact layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToRawBits\")\npublic actual fun Double.toRawBits(): Long = definedExternally\n\n/**\n * Returns the [Double] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Double.Companion.fromBits(bits: Long): Double = js(\"Kotlin\").doubleFromBits(bits).unsafeCast<Double>()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToBits\")\npublic actual fun Float.toBits(): Int = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout,\n * preserving `NaN` values exact layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToRawBits\")\npublic actual fun Float.toRawBits(): Int = definedExternally\n\n/**\n * Returns the [Float] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Float.Companion.fromBits(bits: Int): Float = js(\"Kotlin\").floatFromBits(bits).unsafeCast<Float>()\n\n\ninternal inline fun Long(low: Int, high: Int) = js(\"Kotlin\").Long.fromBits(low, high).unsafeCast<Long>()\ninternal inline val Long.low: Int get() = this.asDynamic().getLowBits().unsafeCast<Int>()\ninternal inline val Long.high: Int get() = this.asDynamic().getHighBits().unsafeCast<Int>()","package baaahs.io\n\nclass ByteArrayWriter(private var bytes: ByteArray = ByteArray(128), var offset: Int = 0) {\n    constructor(size: Int) : this(ByteArray(size))\n\n    fun writeBoolean(b: Boolean) {\n        growIfNecessary(1)\n        bytes[offset++] = if (b) 1 else 0\n    }\n\n    fun writeByte(b: Byte) {\n        growIfNecessary(1)\n        bytes[offset++] = b\n    }\n\n    fun writeShort(i: Int) {\n        if (i and 0xffff != i) {\n            throw IllegalArgumentException(\"$i doesn't fit in a short\")\n        }\n        writeShort(i.toShort())\n    }\n\n    fun writeShort(s: Short) {\n        growIfNecessary(2)\n        bytes[offset++] = s.toInt().shr(8).and(0xff).toByte()\n        bytes[offset++] = s.toInt().and(0xff).toByte()\n    }\n\n    fun writeChar(c: Char) = writeShort(c.toShort())\n\n    fun writeInt(i: Int) {\n        growIfNecessary(4)\n        bytes[offset++] = i.shr(24).and(0xff).toByte()\n        bytes[offset++] = i.shr(16).and(0xff).toByte()\n        bytes[offset++] = i.shr(8).and(0xff).toByte()\n        bytes[offset++] = i.and(0xff).toByte()\n    }\n\n    fun writeLong(l: Long) {\n        growIfNecessary(8)\n        writeInt(l.shr(32).and(0xffffffff).toInt())\n        writeInt(l.and(0xffffffff).toInt())\n    }\n\n    fun writeFloat(f: Float) {\n        writeInt(f.toBits())\n    }\n\n    fun writeString(s: String) {\n        writeBytes(s.encodeToByteArray())\n    }\n\n    fun writeNullableString(s: String?) {\n        writeBoolean(s != null)\n        if (s != null) {\n            writeString(s)\n        }\n    }\n\n    fun writeBytes(data: ByteArray, startIndex: Int = 0, endIndex: Int = data.size) {\n        val size = endIndex - startIndex\n\n        growIfNecessary(4 + size)\n        writeInt(size)\n\n        data.copyInto(bytes, offset, startIndex, endIndex)\n        offset += size\n    }\n\n    fun writeNBytes(data: ByteArray, startIndex: Int = 0, endIndex: Int = data.size) {\n        val size = endIndex - startIndex\n\n        growIfNecessary(size)\n\n        data.copyInto(bytes, offset, startIndex, endIndex)\n        offset += size\n    }\n\n    fun toBytes(): ByteArray {\n        return bytes.copyOf(offset)\n    }\n\n    private fun growIfNecessary(by: Int) {\n        if (offset + by > bytes.size) {\n            var newSize = bytes.size * 2\n            while (offset + by > newSize) newSize *= 2\n            bytes = bytes.copyOf(newSize)\n        }\n    }\n}","package baaahs.io\n\ninterface Fs {\n    fun listFiles(path: String): List<String>\n    fun loadFile(path: String): String?\n    fun createFile(path: String, content: ByteArray, allowOverwrite: Boolean = false)\n    fun createFile(path: String, content: String, allowOverwrite: Boolean = false)\n}\n","package baaahs.mapper\n\nimport com.soywiz.klock.DateTime\nimport kotlinx.serialization.Decoder\nimport kotlinx.serialization.Encoder\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.PrimitiveDescriptor\nimport kotlinx.serialization.PrimitiveKind.STRING\n\nobject DateTimeSerializer : KSerializer<DateTime> {\n    override val descriptor = PrimitiveDescriptor(\"DateTime\", STRING)\n\n    override fun deserialize(decoder: Decoder): DateTime {\n        return DateTime(decoder.decodeDouble())\n    }\n\n    override fun serialize(encoder: Encoder, obj: DateTime) {\n        encoder.encodeDouble(obj.unixMillis)\n    }\n}","package baaahs.mapper\n\nimport baaahs.Mapper\nimport baaahs.MediaDevices\nimport baaahs.imaging.Bitmap\nimport kotlin.math.max\n\nclass ImageProcessing {\n\n    class Histogram(val data: IntArray, val total: Int) {\n        fun sumValues(range: IntRange): Int {\n            var total = 0\n            for (i in range) {\n                total += data[i]\n            }\n            return total\n        }\n    }\n\n    companion object {\n        val rgbaPixelDetectionIndex = 1 // green\n\n        fun channelHistogram(\n            channel: Int,\n            bitmap: Bitmap\n        ): Histogram {\n            val hist = IntArray(256) { 0 }\n            bitmap.withData {\n                val totalBytes = it.size\n                for (i in channel until totalBytes step 4) {\n                    hist[it[i].toInt() and 0xFF]++\n                }\n                false\n            }\n            return Histogram(hist, bitmap.width * bitmap.height)\n        }\n\n        /**\n         * @param newBitmap Newly-captured bitmap from camera with some element lit.\n         * @param baseBitmap Base bitmap from camera with all elements off.\n         * @param deltaBitmap Bitmap to receive diff.\n         * @param withinRegion Region within which to find changes.\n         */\n        fun diff(\n            newBitmap: Bitmap,\n            baseBitmap: Bitmap,\n            deltaBitmap: Bitmap,\n            maskBitmap: Bitmap? = null,\n            withinRegion: MediaDevices.Region = MediaDevices.Region.containing(baseBitmap)\n        ): Analysis {\n            deltaBitmap.copyFrom(baseBitmap)\n            deltaBitmap.subtract(newBitmap)\n            if (maskBitmap != null) {\n                deltaBitmap.darken(maskBitmap)\n            }\n\n            return analyze(deltaBitmap, withinRegion)\n        }\n\n        @UseExperimental(ExperimentalUnsignedTypes::class)\n        fun pixels(\n            bitmap: Bitmap,\n            regionOfInterest: MediaDevices.Region = MediaDevices.Region.containing(bitmap),\n            fn: (x: Int, y: Int, value: Int) -> Unit\n        ) {\n            bitmap.withData { data ->\n                for (y in regionOfInterest.yRange) {\n                    for (x in regionOfInterest.xRange) {\n                        val pixelByteIndex = (x + y * bitmap.width) * 4\n                        val pixValue = data[pixelByteIndex + rgbaPixelDetectionIndex].toInt()\n                        fn(x, y, pixValue)\n                    }\n                }\n\n                false\n            }\n        }\n\n        @UseExperimental(ExperimentalUnsignedTypes::class)\n        fun analyze(\n            bitmap: Bitmap,\n            regionOfInterest: MediaDevices.Region = MediaDevices.Region.containing(bitmap)\n        ): Analysis {\n            val hist = IntArray(256) { 0 }\n            val xMin = ShortArray(bitmap.width) { if (regionOfInterest.xRange.contains(it)) 0xFF else 0 }\n            val xMax = ShortArray(bitmap.width) { 0x00 }\n            val yMin = ShortArray(bitmap.height) { if (regionOfInterest.yRange.contains(it)) 0xFF else 0 }\n            val yMax = ShortArray(bitmap.height) { 0x00 }\n\n            bitmap.withData { data ->\n                // Get histogram and per-row and -column min and max diffs.\n\n                for (y in regionOfInterest.yRange) {\n                    for (x in regionOfInterest.xRange) {\n                        val pixelByteIndex = (x + y * bitmap.width) * 4\n                        val pixValue = data[pixelByteIndex + rgbaPixelDetectionIndex].toShort()\n\n                        if (pixValue < xMin[x]) xMin[x] = pixValue\n                        if (pixValue > xMax[x]) xMax[x] = pixValue\n                        if (pixValue < yMin[y]) yMin[y] = pixValue\n                        if (pixValue > yMax[y]) yMax[y] = pixValue\n                        hist[pixValue.toInt()]++\n                    }\n                }\n\n                false\n            }\n\n            return Analysis(\n                bitmap.width,\n                bitmap.height,\n                regionOfInterest,\n                Histogram(hist, bitmap.width * bitmap.height),\n                xMin,\n                xMax,\n                yMin,\n                yMax\n            )\n        }\n\n        fun Collection<Int>.histogram(range: IntRange): IntArray {\n            val hist = IntArray(range.last - range.first)\n            forEach { i -> hist[i - range.first]++ }\n            return hist\n        }\n    }\n\n    class Analysis(\n        val width: Int,\n        val height: Int,\n        val regionOfInterest: MediaDevices.Region,\n        val hist: Histogram,\n        val xMin: ShortArray,\n        val xMax: ShortArray,\n        val yMin: ShortArray,\n        val yMax: ShortArray\n    ) {\n        val minValue: Int by lazy { xMin.copyOfRange(regionOfInterest.xRange).min()!!.toInt() }\n        val maxValue: Int by lazy { xMax.copyOfRange(regionOfInterest.xRange).max()!!.toInt() }\n\n        val minChangeToDetect = 10f\n        val scale: Float by lazy { max(minChangeToDetect, (maxValue - minValue).toFloat()) }\n        fun thresholdValueFor(threshold: Float) = (threshold * scale).toShort() + minValue\n\n        fun detectChangeRegion(\n            threshold: Float\n        ): MediaDevices.Region {\n//            val b255 = 255.toUByte()\n\n            val thresholdValue = thresholdValueFor(threshold)\n            val minX = xMax.indexOfFirst { rowMaxValue -> rowMaxValue >= thresholdValue }\n            val minY = yMax.indexOfFirst { colMaxValue -> colMaxValue >= thresholdValue }\n            val maxX = xMax.indexOfLast { rowMaxValue -> rowMaxValue >= thresholdValue }\n            val maxY = yMax.indexOfLast { colMaxValue -> colMaxValue >= thresholdValue }\n            return MediaDevices.Region(minX, minY, maxX, maxY)\n        }\n\n        private fun ShortArray.copyOfRange(intRange: IntRange): ShortArray {\n            return copyOfRange(intRange.first, intRange.last)\n        }\n\n        fun hasBrightSpots(): Boolean {\n            this.hist.data.reduce { acc, i ->\n                if (i - acc > 3) { // one or two brigher pixels don't count\n                    return true\n                }\n                i\n            }\n            return false\n        }\n    }\n}\n\n","package baaahs.mapper\n\nimport baaahs.BrainId\nimport baaahs.Logger\nimport baaahs.Model\nimport baaahs.geom.Vector3F\n\ninterface MappingResults {\n    fun dataFor(brainId: BrainId): Info?\n\n    fun dataFor(surfaceName: String): Info?\n\n    class Info(\n        val surface: Model.Surface,\n\n        /** Pixel's estimated position within the model. */\n        val pixelLocations: List<Vector3F?>?\n    )\n}\n\nclass SessionMappingResults(model: Model<*>, mappingSessions: List<MappingSession>) : MappingResults {\n    val brainData = mutableMapOf<BrainId, MappingResults.Info>()\n\n    init {\n        mappingSessions.forEach { mappingSession ->\n            mappingSession.surfaces.forEach { surfaceData ->\n                val brainId = BrainId(surfaceData.brainId)\n                val surfaceName = surfaceData.surfaceName\n\n                try {\n                    val modelSurface = model.findModelSurface(surfaceName)\n                    val pixelLocations = surfaceData.pixels.map { it?.modelPosition }\n\n                    brainData[brainId] = MappingResults.Info(modelSurface, pixelLocations)\n                } catch (e: Exception) {\n                    logger.warn(e) { \"Skipping $surfaceName\" }\n                }\n            }\n        }\n    }\n\n    override fun dataFor(brainId: BrainId): MappingResults.Info? = brainData[brainId]\n\n    override fun dataFor(surfaceName: String): MappingResults.Info? {\n        return brainData.values.find { it.surface.name == surfaceName }\n    }\n\n    companion object {\n        private val logger = Logger(\"SessionMappingResults\")\n    }\n}","package baaahs.mapper\n\nimport baaahs.geom.Matrix4\nimport baaahs.geom.Vector2F\nimport baaahs.geom.Vector3F\nimport com.soywiz.klock.DateTime\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class MappingSession(\n    val startedAt: Double,\n    val surfaces: List<SurfaceData>,\n    val cameraMatrix: Matrix4,\n    val baseImage: String?,\n    val version: Int = 0,\n    val savedAt: Double = DateTime.nowUnix(),\n    val notes: String? = null\n) {\n    val startedAtDateTime: DateTime get() = DateTime(startedAt)\n\n    @Serializable\n    data class SurfaceData(\n        val brainId: String,\n        val panelName: String, // TODO: rename to surfaceName\n        val pixels: List<PixelData?>,\n        val deltaImage: String?,\n        val screenAreaInSqPixels: Float?,\n        val screenAngle: Float?\n    ) {\n        val surfaceName: String get() = panelName\n\n        @Serializable\n        data class PixelData(\n            val modelPosition: Vector3F?,\n            val screenPosition: Vector2F?,\n            val deltaImage: String?\n        )\n    }\n}","package baaahs.mapper\n\nimport baaahs.api.ws.WebSocketRouter\nimport baaahs.decodeBase64\nimport kotlinx.serialization.builtins.list\nimport kotlinx.serialization.builtins.serializer\nimport kotlinx.serialization.json.JsonNull\n\nclass PinkyMapperHandlers(val storage: Storage) {\n    fun register(builder: WebSocketRouter.HandlerBuilder) {\n        builder.apply {\n            handle(\"listSessions\") {\n                json.toJson(String.serializer().list, storage.listSessions())\n            }\n\n            handle(\"saveImage\") { args ->\n                val name = args[1].primitive.contentOrNull\n                val imageDataBase64 = args[2].primitive.contentOrNull\n                val imageData = decodeBase64(imageDataBase64!!)\n                storage.saveImage(name!!, imageData)\n                JsonNull\n            }\n\n            handle(\"saveSession\") { args ->\n                val mappingSession = json.fromJson(\n                    MappingSession.serializer(), args[1]\n                )\n                storage.saveSession(mappingSession)\n                JsonNull\n            }\n        }\n    }\n}","package baaahs.mapper;\n\nimport baaahs.Logger\nimport baaahs.Model\nimport baaahs.io.Fs\nimport com.soywiz.klock.DateFormat\nimport com.soywiz.klock.DateTime\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\n\nclass Storage(val fs: Fs) {\n\n    companion object {\n        private val logger = Logger(\"Storage\")\n        val json = Json(JsonConfiguration.Stable.copy(isLenient = true))\n\n        private val format = DateFormat(\"yyyy''MM''dd'-'HH''mm''ss\")\n\n        fun formatDateTime(dateTime: DateTime): String {\n            return dateTime.format(format)\n        }\n    }\n\n    fun listSessions(): List<String> {\n        return fs.listFiles(\"mapping-sessions\").filter { it.endsWith(\".json\") }\n    }\n\n    fun saveSession(mappingSession: MappingSession) {\n        fs.createFile(\n            \"mapping-sessions/${formatDateTime(mappingSession.startedAtDateTime)}-v${mappingSession.version}.json\",\n            json.stringify(MappingSession.serializer(), mappingSession)\n        )\n    }\n\n    fun saveImage(name: String, imageData: ByteArray) {\n        fs.createFile(\"mapping-sessions/images/$name\", imageData)\n    }\n\n    fun loadMappingData(model: Model<*>): MappingResults {\n        val sessions = arrayListOf<MappingSession>()\n        val path = \"mapping/${model.name}\"\n        fs.listFiles(path).forEach { dir ->\n            fs.listFiles(\"$path/$dir\").sorted().filter { it.endsWith(\".json\") }.forEach { f ->\n                val mappingJson = fs.loadFile(\"$path/$dir/$f\")\n                val mappingSession = json.parse(MappingSession.serializer(), mappingJson!!)\n                mappingSession.surfaces.forEach { surface ->\n                    logger.debug { \"Found pixel mapping for ${surface.panelName} (${surface.brainId})\" }\n                }\n                sessions.add(mappingSession)\n            }\n        }\n        return SessionMappingResults(model, sessions)\n    }\n}\n","package baaahs.net\n\nimport baaahs.Logger\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlin.math.min\n\nclass FragmentingUdpLink(private val wrappedLink: Network.Link) : Network.Link {\n    override val myAddress: Network.Address get() = wrappedLink.myAddress\n    override val udpMtu: Int get() = wrappedLink.udpMtu\n\n    /**\n     * Header is 12 bytes long; format is:\n     * * message ID (short)\n     * * this frame size (short)\n     * * total payload size (long)\n     * * this frame offset (long)\n     */\n    companion object {\n        const val headerSize = 12\n\n        val logger = Logger(\"FragmentingUdpLink\")\n    }\n\n    private val mtu = wrappedLink.udpMtu\n    private var nextMessageId: Short = 0\n\n    private var fragments = arrayListOf<Fragment>()\n\n    class Fragment(val messageId: Short, val offset: Int, val bytes: ByteArray) {\n        override fun toString(): String {\n            return \"Fragment(messageId=$messageId, offset=$offset, bytes=${bytes.size})\"\n        }\n    }\n\n    override fun listenUdp(port: Int, udpListener: Network.UdpListener): Network.UdpSocket {\n        return FragmentingUdpSocket(wrappedLink.listenUdp(port, object : Network.UdpListener {\n            override fun receive(fromAddress: Network.Address, fromPort: Int, bytes: ByteArray) {\n                // reassemble fragmented payloads...\n                val reader = ByteArrayReader(bytes)\n                val messageId = reader.readShort()\n                val size = reader.readShort().toInt()\n                val totalSize = reader.readInt()\n                val offset = reader.readInt()\n//                println(\"Received UDP: messageId=$messageId thisFrameSize=${size} totalSize=${totalSize} offset=${offset} packetSize=${bytes.size}\")\n\n                if (size + headerSize > bytes.size) {\n                    logger.debug { \"Discarding short UDP message: ${size + headerSize} > ${bytes.size} available\" }\n                    return\n                }\n\n                val frameBytes = reader.readNBytes(size)\n                if (offset == 0 && size == totalSize) {\n                    udpListener.receive(fromAddress, fromPort, frameBytes)\n                } else {\n                    val thisFragment = Fragment(messageId, offset, frameBytes)\n                    synchronized(fragments) {\n                        fragments.add(thisFragment)\n                    }\n\n//                        println(\"received fragment: ${thisFragment}\")\n                    if (offset + size == totalSize) {\n                        // final fragment, try to reassemble\u2026\n\n                        val myFragments = removeMessageId(messageId)\n\n                        val actualTotalSize = myFragments.map { it.bytes.size }.reduce { acc, i -> acc + i }\n                        if (actualTotalSize == totalSize) {\n                            val reassembleBytes = ByteArray(totalSize)\n                            myFragments.forEach {\n                                it.bytes.copyInto(reassembleBytes, it.offset)\n                            }\n\n                            udpListener.receive(fromAddress, fromPort, reassembleBytes)\n                        } else {\n                            // todo: this should probably be a warn, not an error...\n                            logger.warn {\n                                \"incomplete fragmented UDP packet from $fromAddress:$fromPort:\" +\n                                        \" actualTotalSize=$actualTotalSize != totalSize=$totalSize\" +\n                                        \" for messageId=$messageId\" +\n                                        \" (have ${myFragments.map { it.bytes.size }.joinToString(\",\")})\"\n                            }\n\n                            synchronized(fragments) {\n                                fragments.addAll(myFragments)\n                            }\n                        }\n\n                    }\n                }\n            }\n        }))\n    }\n\n    private fun removeMessageId(messageId: Short): List<Fragment> {\n        val myFragments = arrayListOf<Fragment>()\n\n        synchronized(fragments) {\n            fragments.removeAll { fragment ->\n                val remove = fragment.messageId == messageId\n                if (remove) myFragments.add(fragment)\n                remove\n            }\n\n            val offsets = hashSetOf<Int>()\n            myFragments.removeAll { fragment ->\n                val alreadyThere = !offsets.add(fragment.offset)\n                if (alreadyThere) {\n                    println(\"already there: ${fragment}\")\n                    println(\"from: $myFragments\")\n                }\n                alreadyThere // duplicate, ignore\n            }\n\n            if (myFragments.isEmpty()) {\n                println(\"remaining fragments = ${fragments}\")\n            }\n        }\n\n        return myFragments.sortedBy { it.offset }\n    }\n\n    inner class FragmentingUdpSocket(private val delegate: Network.UdpSocket) : Network.UdpSocket {\n        override val serverPort: Int get() = delegate.serverPort\n\n        /** Sends payloads which might be larger than the network's MTU. */\n        override fun sendUdp(toAddress: Network.Address, port: Int, bytes: ByteArray) {\n            transmitMultipartUdp(bytes) { fragment -> delegate.sendUdp(toAddress, port, fragment) }\n        }\n\n        /** Broadcasts payloads which might be larger than the network's MTU. */\n        override fun broadcastUdp(port: Int, bytes: ByteArray) {\n            transmitMultipartUdp(bytes) { fragment -> delegate.broadcastUdp(port, fragment) }\n        }\n\n        /** Sends payloads which might be larger than the network's MTU. */\n        private fun transmitMultipartUdp(bytes: ByteArray, fn: (bytes: ByteArray) -> Unit) {\n            val maxSize = 65535 * 2 // arbitrary but probably sensible\n            if (bytes.size > maxSize) {\n                throw IllegalArgumentException(\"buffer too big! ${bytes.size} must be < $maxSize\")\n            }\n\n            val messageId = nextMessageId++\n            val messageCount = (bytes.size - 1) / (mtu - headerSize) + 1\n            val buf = ByteArray(mtu)\n            var offset = 0\n            for (i in 0 until messageCount) {\n                val writer = ByteArrayWriter(buf)\n                val thisFrameSize = min((mtu - headerSize), bytes.size - offset)\n                writer.writeShort(messageId)\n                writer.writeShort(thisFrameSize.toShort())\n                writer.writeInt(bytes.size)\n                writer.writeInt(offset)\n                writer.writeNBytes(bytes, offset, offset + thisFrameSize)\n                fn(writer.toBytes())\n\n//                println(\"Sending UDP: messageId=$messageId thisFrameSize=${thisFrameSize.toShort()} totalSize=${bytes.size} offset=${offset}\")\n\n                offset += thisFrameSize\n            }\n        }\n    }\n\n    override fun startHttpServer(port: Int): Network.HttpServer =\n        wrappedLink.startHttpServer(port)\n\n    override fun connectWebSocket(\n        toAddress: Network.Address,\n        port: Int,\n        path: String,\n        webSocketListener: Network.WebSocketListener\n    ): Network.TcpConnection =\n        wrappedLink.connectWebSocket(toAddress, port, path, webSocketListener)\n\n}\n","package baaahs.net\n\nimport baaahs.proto.Message\n\ninterface Network {\n    fun link(): Link\n\n    interface Link {\n        val myAddress: Address\n\n        val udpMtu: Int\n        fun listenUdp(port: Int, udpListener: UdpListener): UdpSocket\n\n        fun startHttpServer(port: Int): HttpServer\n        fun connectWebSocket(\n            toAddress: Address,\n            port: Int,\n            path: String,\n            webSocketListener: WebSocketListener\n        ): TcpConnection\n    }\n\n    interface Address\n\n    interface UdpListener {\n        fun receive(fromAddress: Address, fromPort: Int, bytes: ByteArray)\n    }\n\n    interface UdpSocket {\n        val serverPort: Int\n\n        fun sendUdp(toAddress: Address, port: Int, bytes: ByteArray)\n        fun sendUdp(toAddress: Address, port: Int, message: Message) = sendUdp(toAddress, port, message.toBytes())\n        fun broadcastUdp(port: Int, bytes: ByteArray)\n        fun broadcastUdp(port: Int, message: Message) = broadcastUdp(port, message.toBytes())\n    }\n\n    interface TcpConnection {\n        val fromAddress: Address\n        val toAddress: Address\n        val port: Int\n\n        fun send(bytes: ByteArray)\n\n        fun send(message: Message) {\n            send(message.toBytes())\n        }\n    }\n\n    interface HttpServer {\n        fun listenWebSocket(path: String, webSocketListener: WebSocketListener) {\n            listenWebSocket(path) { webSocketListener }\n        }\n\n        fun listenWebSocket(path: String, onConnect: (incomingConnection: TcpConnection) -> WebSocketListener)\n    }\n\n    interface WebSocketListener {\n        fun connected(tcpConnection: TcpConnection)\n        fun receive(tcpConnection: TcpConnection, bytes: ByteArray)\n        fun reset(tcpConnection: TcpConnection)\n    }\n\n    object UdpProxy {\n        val BROADCAST_OP = 'B'\n        val LISTEN_OP = 'L'\n        val SEND_OP = 'S'\n        val RECEIVE_OP = 'R'\n    }\n}","package baaahs.proto\n\nimport baaahs.BrainId\nimport baaahs.Shader\nimport baaahs.geom.Vector2F\nimport baaahs.geom.Vector3F\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\n\nobject Ports {\n    const val PINKY = 8002\n    const val BRAIN = 8003\n\n    const val PINKY_UI_TCP = 8004\n    const val PINKY_MAPPER_TCP = 8005\n    const val SIMULATOR_BRIDGE_TCP = 8006\n}\n\nenum class Type {\n    // UDP:\n    BRAIN_HELLO,\n    BRAIN_PANEL_SHADE,\n    MAPPER_HELLO,\n    BRAIN_ID_REQUEST,\n    BRAIN_MAPPING,\n    PING,\n    USE_FIRMWARE;\n\n    companion object {\n        val values = values()\n        fun get(i: Byte) = values[i.toInt()]\n    }\n}\n\nfun parse(bytes: ByteArray): Message {\n    val reader = ByteArrayReader(bytes)\n    return when (Type.get(reader.readByte())) {\n        Type.BRAIN_HELLO -> BrainHelloMessage.parse(reader)\n        Type.BRAIN_PANEL_SHADE -> BrainShaderMessage.parse(reader)\n        Type.MAPPER_HELLO -> MapperHelloMessage.parse(reader)\n        Type.BRAIN_ID_REQUEST -> BrainIdRequest.parse(reader)\n        Type.BRAIN_MAPPING -> BrainMappingMessage.parse(reader)\n        Type.PING -> PingMessage.parse(reader)\n        Type.USE_FIRMWARE -> UseFirmwareMessage.parse(reader)\n    }\n}\n\nclass BrainHelloMessage(val brainId: String, val surfaceName: String?, val firmwareVersion: String? = null,\n                        val idfVersion: String? = null) : Message(Type.BRAIN_HELLO) {\n    companion object {\n        fun parse(reader: ByteArrayReader): BrainHelloMessage {\n            val brainId = reader.readString()\n            val surfaceName = reader.readNullableString()\n            val firmwareVersion = if (reader.hasMoreBytes()) reader.readNullableString() else null\n            val idfVersion = if (reader.hasMoreBytes()) reader.readNullableString() else null\n            return BrainHelloMessage(brainId, surfaceName, firmwareVersion, idfVersion)\n        }\n    }\n\n    override fun serialize(writer: ByteArrayWriter) {\n        writer.writeString(brainId)\n        writer.writeNullableString(surfaceName)\n        writer.writeNullableString(firmwareVersion)\n        writer.writeNullableString(idfVersion)\n    }\n\n    override fun toString(): String {\n        return \"BrainHello $brainId, $surfaceName, $firmwareVersion, $idfVersion\"\n    }\n}\n\nclass BrainShaderMessage(val shader: Shader<*>, val buffer: Shader.Buffer, val pongData: ByteArray? = null) :\n    Message(Type.BRAIN_PANEL_SHADE) {\n    companion object {\n        /**\n         * Suboptimal parser; on the Brain we'll do better than this.\n         */\n        fun parse(reader: ByteArrayReader): BrainShaderMessage {\n            val pongData = if (reader.readBoolean()) reader.readBytes() else null\n            val shaderDesc = reader.readBytes()\n            val shader = Shader.parse(ByteArrayReader(shaderDesc))\n            val buffer = shader.readBuffer(reader)\n            return BrainShaderMessage(shader, buffer, pongData)\n        }\n    }\n\n    override fun serialize(writer: ByteArrayWriter) {\n        writer.writeBoolean(pongData != null)\n        if (pongData != null) writer.writeBytes(pongData)\n        writer.writeBytes(shader.descriptorBytes)\n        buffer.serialize(writer)\n    }\n}\n\n/**\n * The message that Pinky will send to a brain when Pinky has decided that\n * the Brain should use a particular firmware. The url can point anywhere,\n * either self hosted by Pinky or out into the nether reaches of the Interwebs.\n * What could possibly go wrong? Pinky would __never__ tell a brain to go\n * download a wikipedia article and use that as a firmware. It just won't\n * be nice.\n */\nclass UseFirmwareMessage(val url: String) :\n    Message(Type.USE_FIRMWARE) {\n    companion object {\n        fun parse(reader: ByteArrayReader): UseFirmwareMessage {\n            return UseFirmwareMessage(reader.readString())\n        }\n    }\n\n    override fun serialize(writer: ByteArrayWriter) {\n        writer.writeString(url)\n    }\n}\n\nclass MapperHelloMessage(val isRunning: Boolean) : Message(Type.MAPPER_HELLO) {\n    companion object {\n        fun parse(reader: ByteArrayReader): MapperHelloMessage {\n            return MapperHelloMessage(reader.readBoolean())\n        }\n    }\n\n    override fun serialize(writer: ByteArrayWriter) {\n        writer.writeBoolean(isRunning)\n    }\n}\n\nclass BrainIdRequest : Message(Type.BRAIN_ID_REQUEST) {\n    companion object {\n        fun parse(reader: ByteArrayReader) = BrainIdRequest()\n    }\n\n    override fun serialize(writer: ByteArrayWriter) {\n    }\n}\n\nclass BrainMappingMessage(\n    val brainId: BrainId,\n    val surfaceName: String?,\n    val uvMapName: String?,\n    val panelUvTopLeft: Vector2F,\n    val panelUvBottomRight: Vector2F,\n    val pixelCount: Int,\n    val pixelLocations: List<Vector3F>\n) : Message(Type.BRAIN_MAPPING) {\n\n    companion object {\n        fun parse(reader: ByteArrayReader) = BrainMappingMessage(\n            BrainId(reader.readString()), // brainId\n            reader.readNullableString(), // surfaceName\n            reader.readNullableString(), // uvMapName\n            reader.readVector2F(), // panelUvTopLeft\n            reader.readVector2F(), // panelUvBottomRight\n            reader.readInt(), // pixelCount\n            reader.readRelativeVerticesList()\n        )\n\n        private fun ByteArrayReader.readVector2F() = Vector2F(readFloat(), readFloat())\n\n        private fun ByteArrayWriter.writeVector2F(v: Vector2F) {\n            writeFloat(v.x)\n            writeFloat(v.y)\n        }\n\n        private fun ByteArrayReader.readRelativeVerticesList(): List<Vector3F> {\n            val vertexCount = readInt()\n            return (0 until vertexCount).map {\n                Vector3F(readFloat(), readFloat(), readFloat())\n            }\n        }\n\n        private fun ByteArrayWriter.writeRelativeVerticesList(pixelLocations: List<Vector3F>) {\n            writeInt(pixelLocations.size)\n            pixelLocations.forEach { vertex ->\n                writeFloat(vertex.x)\n                writeFloat(vertex.y)\n                writeFloat(vertex.z)\n            }\n        }\n    }\n\n    override fun serialize(writer: ByteArrayWriter) {\n        writer.writeString(brainId.uuid)\n        writer.writeNullableString(surfaceName)\n        writer.writeNullableString(uvMapName)\n        writer.writeVector2F(panelUvTopLeft)\n        writer.writeVector2F(panelUvBottomRight)\n        writer.writeInt(pixelCount)\n\n        val vertexCount = pixelLocations.size\n        writer.writeInt(vertexCount)\n        writer.writeRelativeVerticesList(pixelLocations)\n    }\n}\n\nclass PingMessage(val data: ByteArray, val isPong: Boolean = false) : Message(Type.PING) {\n    companion object {\n        fun parse(reader: ByteArrayReader): PingMessage {\n            val isPong = reader.readBoolean()\n            val data = reader.readBytes()\n            return PingMessage(data, isPong)\n        }\n    }\n\n    override fun serialize(writer: ByteArrayWriter) {\n        writer.writeBoolean(isPong)\n        writer.writeBytes(data)\n    }\n}\n\nopen class Message(val type: Type) {\n    // TODO: send message length as the first four bytes, plus maybe sequence/reassembly info for UDP\n    fun toBytes(): ByteArray {\n        val writer = ByteArrayWriter(1 + size())\n        writer.writeByte(type.ordinal.toByte())\n        serialize(writer)\n        return writer.toBytes()\n    }\n\n    open fun serialize(writer: ByteArrayWriter) {\n    }\n\n    open fun size(): Int = 127\n}\n","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\n\n/**\n * A shader which combines the results of two sub-shaders according to a specified compositing mode and cross-fade\n * value.\n */\nclass CompositorShader(val aShader: Shader<*>, val bShader: Shader<*>) :\n    Shader<CompositorShader.Buffer>(ShaderId.COMPOSITOR) {\n\n    override fun createBuffer(surface: Surface) = Buffer(aShader.createBuffer(surface), bShader.createBuffer(surface))\n\n    override fun serializeConfig(writer: ByteArrayWriter) {\n        aShader.serialize(writer)\n        bShader.serialize(writer)\n    }\n\n    override fun createRenderer(surface: Surface, renderContext: RenderContext): Shader.Renderer<Buffer> {\n        val rendererA: Shader.Renderer<*> = aShader.createRenderer(surface, renderContext)\n        val rendererB: Shader.Renderer<*> = bShader.createRenderer(surface, renderContext)\n        return Renderer(rendererA, rendererB)\n    }\n\n    override fun createRenderer(surface: Surface): Shader.Renderer<Buffer> {\n        val rendererA: Shader.Renderer<*> = aShader.createRenderer(surface)\n        val rendererB: Shader.Renderer<*> = bShader.createRenderer(surface)\n        return Renderer(rendererA, rendererB)\n    }\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer =\n        Buffer(\n            aShader.readBuffer(reader),\n            bShader.readBuffer(reader),\n            CompositingMode.get(reader.readByte()),\n            reader.readFloat()\n        )\n\n    fun createBuffer(bufferA: Shader.Buffer, bufferB: Shader.Buffer): Buffer =\n        Buffer(bufferA, bufferB)\n\n    companion object : ShaderReader<CompositorShader> {\n        override fun parse(reader: ByteArrayReader): CompositorShader {\n            val shaderA = Shader.parse(reader)\n            val shaderB = Shader.parse(reader)\n            return CompositorShader(shaderA, shaderB)\n        }\n    }\n\n    inner class Buffer(\n        val bufferA: Shader.Buffer, val bufferB: Shader.Buffer,\n        var mode: CompositingMode = CompositingMode.NORMAL,\n        var fade: Float = 0.5f\n    ) : Shader.Buffer {\n        override val shader: Shader<*> = this@CompositorShader\n\n        override fun serialize(writer: ByteArrayWriter) {\n            bufferA.serialize(writer)\n            bufferB.serialize(writer)\n            writer.writeByte(mode.ordinal.toByte())\n            writer.writeFloat(fade)\n        }\n\n        override fun read(reader: ByteArrayReader) {\n            bufferA.read(reader)\n            bufferB.read(reader)\n            mode = CompositingMode.get(reader.readByte())\n            fade = reader.readFloat()\n        }\n    }\n\n    class Renderer<A : Shader.Buffer, B : Shader.Buffer>(\n        private val rendererA: Shader.Renderer<A>,\n        private val rendererB: Shader.Renderer<B>\n    ) : Shader.Renderer<Buffer> {\n\n        @Suppress(\"UNCHECKED_CAST\")\n        override fun beginFrame(buffer: Buffer, pixelCount: Int) {\n            rendererA.beginFrame(buffer.bufferA as A, pixelCount)\n            rendererB.beginFrame(buffer.bufferB as B, pixelCount)\n        }\n\n        @Suppress(\"UNCHECKED_CAST\")\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color {\n            val dest = rendererA.draw(buffer.bufferA as A, pixelIndex)\n            val src = rendererB.draw(buffer.bufferB as B, pixelIndex)\n            return dest.fade(buffer.mode.composite(src, dest), buffer.fade)\n        }\n\n        override fun endFrame() {\n            rendererA.endFrame()\n            rendererB.endFrame()\n        }\n\n        override fun release() {\n            rendererA.release()\n            rendererB.release()\n        }\n    }\n}\n\nenum class CompositingMode {\n    NORMAL {\n        override fun composite(src: Color, dest: Color) = src\n    },\n    ADD {\n        override fun composite(src: Color, dest: Color) = dest.plus(src)\n    };\n\n    abstract fun composite(src: Color, dest: Color): Color\n\n    companion object {\n        val values = values()\n        fun get(i: Byte): CompositingMode {\n            return values[i.toInt()]\n        }\n    }\n}","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.glsl.GlslBase\nimport baaahs.glsl.GlslSurface\nimport baaahs.glsl.Program\nimport baaahs.glsl.UvTranslator\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlinx.serialization.json.JsonObject\n\nclass GlslShader(\n    private val program: Program,\n    private val uvTranslator: UvTranslator\n) : Shader<GlslShader.Buffer>(ShaderId.GLSL_SHADER) {\n    companion object : ShaderReader<GlslShader> {\n        val renderContext by lazy { GlslBase.manager.createContext() }\n\n        override fun parse(reader: ByteArrayReader): GlslShader {\n            val glslProgram = reader.readString()\n            val program = renderContext.createProgram(glslProgram)\n            val uvTranslator = UvTranslator.parse(reader)\n            return GlslShader(program, uvTranslator)\n        }\n    }\n\n    override fun serializeConfig(writer: ByteArrayWriter) {\n        writer.writeString(program.fragShader)\n    }\n\n    override fun createRenderer(surface: Surface, renderContext: RenderContext): Renderer {\n        val poolKey = GlslShader::class to program\n        val pooledRenderer = renderContext.registerPooled(poolKey) { PooledRenderer(program, uvTranslator) }\n        val glslSurface = pooledRenderer.glslRenderer.addSurface(surface)\n        return Renderer(glslSurface)\n    }\n\n    override fun createRenderer(surface: Surface): Renderer {\n        val glslRenderer = renderContext.createRenderer(program, uvTranslator)\n        val glslSurface = glslRenderer.addSurface(surface)\n        return Renderer(glslSurface)\n    }\n\n    class Renderer(private val glslSurface: GlslSurface?) : Shader.Renderer<Buffer> {\n        override fun beginFrame(buffer: Buffer, pixelCount: Int) {\n            // update uniforms from buffer...\n            glslSurface?.uniforms?.updateFrom(buffer.values)\n        }\n\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color {\n            return if (glslSurface != null) glslSurface.pixels[pixelIndex] else Color.BLACK\n        }\n    }\n\n    class PooledRenderer(program: Program, uvTranslator: UvTranslator) : baaahs.PooledRenderer {\n        val glslRenderer = renderContext.createRenderer(program, uvTranslator)\n\n        override fun preDraw() {\n            glslRenderer.draw()\n        }\n    }\n\n    override fun createBuffer(surface: Surface): Buffer = Buffer()\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer = Buffer().apply { read(reader) }\n\n    inner class Buffer : Shader.Buffer {\n        override val shader: Shader<*> get() = this@GlslShader\n\n        val values = Array<Any?>(program.params.size) { }\n\n        fun update(values: List<Any?>) {\n            values.forEachIndexed { index, value -> this.values[index] = value }\n        }\n\n        override fun serialize(writer: ByteArrayWriter) {\n            uvTranslator.serialize(writer)\n\n            program.params.zip(values).forEach { (param, value) -> param.serializeValue(value, writer) }\n        }\n\n        override fun read(reader: ByteArrayReader) {\n            program.params.forEachIndexed { index, param -> values[index] = param.readValue(reader) }\n        }\n    }\n\n    class Param(val varName: String, val gadgetType: String, val valueType: Type, val config: JsonObject) {\n        enum class Type { INT, FLOAT, VEC3 }\n\n        fun serializeConfig(writer: ByteArrayWriter) {\n            writer.writeString(varName)\n            writer.writeByte(valueType.ordinal.toByte())\n        }\n\n        fun serializeValue(value: Any?, writer: ByteArrayWriter) {\n            when (valueType) {\n                Type.INT -> writer.writeInt(value as Int? ?: 0)\n                Type.FLOAT -> writer.writeFloat(value as Float)\n                Type.VEC3 -> writer.writeInt((value as Color? ?: Color.WHITE).argb)\n            }\n        }\n\n        fun readValue(reader: ByteArrayReader): Any {\n            return when (valueType) {\n                Type.INT -> reader.readInt()\n                Type.FLOAT -> reader.readFloat()\n                Type.VEC3 -> Color(reader.readInt())\n            }\n        }\n\n        companion object {\n            private val types = Type.values()\n\n            fun parse(reader: ByteArrayReader): Param {\n                val varName = reader.readString()\n                val valueType = types[reader.readByte().toInt()]\n                return Param(varName, \"\", valueType, JsonObject(emptyMap()))\n            }\n        }\n    }\n}\n","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.glsl.LinearSurfacePixelStrategy\nimport baaahs.glsl.PanelSpaceUvTranslator\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlin.math.PI\nimport kotlin.math.abs\nimport kotlin.math.acos\nimport kotlin.math.pow\n\nclass HeartShader : Shader<HeartShader.Buffer>(ShaderId.HEART) {\n    override fun createBuffer(surface: Surface): Buffer = Buffer()\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer = Buffer().apply { read(reader) }\n\n    override fun createRenderer(surface: Surface): Renderer = Renderer(surface)\n\n    companion object : ShaderReader<HeartShader> {\n        override fun parse(reader: ByteArrayReader) = HeartShader()\n    }\n\n    inner class Buffer : Shader.Buffer {\n        override val shader: Shader<*> get() = this@HeartShader\n\n        var edgeColor = Color.RED\n        var centerColor = Color.RED.fade(Color.WHITE, .2f)\n        var heartSize = 1f\n        var strokeSize = 1f\n        var xOff = 0f\n        var yOff = 0f\n\n        override fun serialize(writer: ByteArrayWriter) {\n            writer.writeFloat(heartSize)\n            writer.writeFloat(strokeSize)\n            writer.writeFloat(xOff)\n            writer.writeFloat(yOff)\n        }\n\n        override fun read(reader: ByteArrayReader) {\n            heartSize = reader.readFloat()\n            strokeSize = reader.readFloat()\n            xOff = reader.readFloat()\n            yOff = reader.readFloat()\n        }\n\n    }\n\n    class Renderer(surface: Surface) : Shader.Renderer<Buffer> {\n        private val uvTranslator =\n            if (surface is IdentifiedSurface) {\n                PanelSpaceUvTranslator.forPixels(LinearSurfacePixelStrategy.forSurface(surface))\n            } else null\n\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color {\n            if (uvTranslator == null) return Color.BLACK\n\n            var (x, y) = uvTranslator.getUV(pixelIndex)\n            x -= .5f + buffer.xOff - .5f\n            x *= 1.1f\n            y -= .5f + buffer.yOff - .5f\n\n            x /= buffer.heartSize\n            y /= buffer.heartSize\n\n            val upperCurveDist = y - (1 - (abs(x) - 1).pow(2))\n            val lowerCurveDist = y - (acos(1 - abs(x)) - PI).toFloat()\n            if (y >= 0) { // upper section\n                if (upperCurveDist < 0) {\n                    val fadeAmount = if (abs(upperCurveDist) < buffer.strokeSize) {\n                        0f\n                    } else {\n                        abs(upperCurveDist / buffer.heartSize)\n                    }\n                    return buffer.edgeColor.fade(buffer.centerColor, fadeAmount)\n                } else {\n                    return Color.TRANSPARENT\n                }\n            } else if (lowerCurveDist > 0) {\n                val fadeAmount = if (lowerCurveDist < buffer.strokeSize) {\n                    1f\n                } else {\n                    lowerCurveDist / buffer.heartSize\n                }\n                return buffer.edgeColor.fade(buffer.centerColor, fadeAmount)\n            } else {\n                return Color.TRANSPARENT\n            }\n        }\n    }\n}","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlin.math.min\n\n/**\n * A shader that allows control of individual pixels' colors directly from a show.\n *\n * This is a suboptimal shader for most purposes, consider writing a custom shader instead!\n */\nclass PixelShader(private val encoding: Encoding = Encoding.DIRECT_ARGB) : Shader<PixelShader.Buffer>(ShaderId.PIXEL) {\n\n    enum class Encoding {\n        DIRECT_ARGB {\n            override fun createBuffer(shader: PixelShader, pixelCount: Int) =\n                shader.DirectColorBuffer(pixelCount)\n        },\n        DIRECT_RGB {\n            override fun createBuffer(shader: PixelShader, pixelCount: Int) =\n                shader.DirectColorBuffer(pixelCount, true)\n        },\n        INDEXED_2 {\n            override fun createBuffer(shader: PixelShader, pixelCount: Int) =\n                shader.IndexedBuffer(1, pixelCount)\n        },\n        INDEXED_4 {\n            override fun createBuffer(shader: PixelShader, pixelCount: Int) =\n                shader.IndexedBuffer(2, pixelCount)\n        },\n        INDEXED_16 {\n            override fun createBuffer(shader: PixelShader, pixelCount: Int) =\n                shader.IndexedBuffer(4, pixelCount)\n        };\n\n        abstract fun createBuffer(shader: PixelShader, pixelCount: Int): Buffer\n\n        companion object {\n            val values = values()\n            fun get(i: Byte): Encoding {\n                return values[i.toInt()]\n            }\n        }\n    }\n\n    override fun serializeConfig(writer: ByteArrayWriter) {\n        writer.writeByte(encoding.ordinal.toByte())\n    }\n\n    override fun createBuffer(surface: Surface): Buffer {\n        val pixelCount = if (surface.pixelCount == SparkleMotion.PIXEL_COUNT_UNKNOWN) {\n            SparkleMotion.DEFAULT_PIXEL_COUNT\n        } else {\n            surface.pixelCount\n        }\n\n        return encoding.createBuffer(this, pixelCount)\n    }\n\n    override fun createRenderer(surface: Surface): Shader.Renderer<Buffer> = Renderer()\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer {\n        val incomingPixelCount = reader.readShort().toInt()\n        val buf = encoding.createBuffer(this, incomingPixelCount)\n        buf.read(reader, incomingPixelCount)\n        return buf\n    }\n\n    companion object : ShaderReader<PixelShader> {\n        override fun parse(reader: ByteArrayReader): PixelShader {\n            val encoding = Encoding.get(reader.readByte())\n            return PixelShader(encoding)\n        }\n    }\n\n    abstract inner class Buffer : Shader.Buffer {\n        override val shader: Shader<*>\n            get() = this@PixelShader\n\n        override fun read(reader: ByteArrayReader) {\n            val incomingPixelCount = reader.readShort().toInt()\n            read(reader, incomingPixelCount)\n        }\n\n        abstract val colors: MutableList<Color>\n        abstract val palette: Array<Color>\n        protected abstract operator fun get(pixelIndex: Int): Color\n        protected abstract operator fun set(pixelIndex: Int, color: Color)\n        internal abstract operator fun set(pixelIndex: Int, paletteIndex: Int)\n        abstract fun setAll(color: Color)\n        abstract fun setAll(paletteIndex: Int)\n        abstract val indices: IntRange\n        abstract fun read(reader: ByteArrayReader, incomingPixelCount: Int)\n    }\n\n    inner class DirectColorBuffer(private val pixelCount: Int, private val rgb24BitMode: Boolean = false) : Buffer() {\n        override val palette: Array<Color> = emptyArray()\n        private var colorsBuf: Array<Color> = Array(pixelCount) { Color.WHITE }\n        override val colors: MutableList<Color>\n            get() = object : AbstractMutableList<Color>() {\n                override fun add(index: Int, element: Color): Unit = throw UnsupportedOperationException()\n\n                override fun removeAt(index: Int): Color = throw UnsupportedOperationException()\n\n                override fun set(index: Int, element: Color): Color {\n                    val oldValue = get(index)\n                    this@DirectColorBuffer.set(index, element)\n                    return oldValue\n                }\n\n                override val size = pixelCount\n\n                override fun get(index: Int): Color = this@DirectColorBuffer.get(index)\n            }\n\n        /** [serialize] and [read] are asymmetrical because pixel count is read in [Buffer.read]. */\n        override fun serialize(writer: ByteArrayWriter) {\n            writer.writeShort(pixelCount)\n            colorsBuf.forEach { color -> writeColor(color, writer) }\n        }\n\n        /** [serialize] and [read] are asymmetrical because pixel count is read in [Buffer.read]. */\n        override fun read(reader: ByteArrayReader, incomingPixelCount: Int) {\n            // if there are more colors in the buffer than pixels, drop from the end\n            val countFromBuffer = min(colorsBuf.size, incomingPixelCount)\n            for (i in 0 until countFromBuffer) {\n                colorsBuf[i] = readColor(reader)\n            }\n\n            // if there are more pixels than colors in the buffer, repeat\n            for (i in countFromBuffer until colorsBuf.size) {\n                colorsBuf[i] = colorsBuf[i % countFromBuffer]\n            }\n        }\n\n        private fun writeColor(color: Color, writer: ByteArrayWriter) {\n            if (rgb24BitMode) {\n                writer.writeByte(color.redB)\n                writer.writeByte(color.greenB)\n                writer.writeByte(color.blueB)\n            } else {\n                writer.writeInt(color.argb)\n            }\n        }\n\n        private fun readColor(reader: ByteArrayReader): Color {\n            return if (rgb24BitMode) {\n                Color(reader.readByte(), reader.readByte(), reader.readByte())\n            } else {\n                Color(reader.readInt())\n            }\n        }\n\n        override operator fun get(pixelIndex: Int): Color = colorsBuf[pixelIndex]\n        override fun set(pixelIndex: Int, color: Color) {\n            colorsBuf[pixelIndex] = color\n        }\n\n        override fun set(pixelIndex: Int, paletteIndex: Int): Unit =\n            throw UnsupportedOperationException(\"Indexed colors aren't available in this mode\")\n\n        override fun setAll(color: Color) {\n            for (i in colorsBuf.indices) set(i, color)\n        }\n\n        override fun setAll(paletteIndex: Int): Unit =\n            throw UnsupportedOperationException(\"Indexed colors aren't available in this mode\")\n\n        override val indices = colorsBuf.indices\n    }\n\n    inner class IndexedBuffer(private val bitsPerPixel: Int, private val pixelCount: Int) : Buffer() {\n        override val palette: Array<Color> = Array(1 shl bitsPerPixel) { Color.WHITE }\n        internal val dataBuf: ByteArray = ByteArray(bufferSizeFor(pixelCount)) { 0 }\n\n        override val colors: MutableList<Color>\n            get() = object : AbstractMutableList<Color>() {\n                override val size: Int = pixelCount\n\n                override fun add(index: Int, element: Color): Unit = throw UnsupportedOperationException()\n\n                override fun removeAt(index: Int): Color = throw UnsupportedOperationException()\n\n                override fun set(index: Int, element: Color): Color =\n                    throw IllegalArgumentException(\"Can't set color directly when using indexed color buffers\")\n\n                override fun get(index: Int): Color = this@IndexedBuffer.get(index)\n            }\n\n        override fun get(pixelIndex: Int): Color {\n            return palette[paletteIndex(pixelIndex)]\n        }\n\n        override fun set(pixelIndex: Int, color: Color): Unit =\n            throw IllegalArgumentException(\"Can't set color directly when using indexed color buffers\")\n\n        override fun set(pixelIndex: Int, paletteIndex: Int) {\n            val mask: Int\n            val pixelsPerByte: Int\n            val maxIndex: Int\n            when (bitsPerPixel) {\n                1 -> {\n                    mask = 0x01; pixelsPerByte = 8; maxIndex = 1\n                }\n                2 -> {\n                    mask = 0x03; pixelsPerByte = 4; maxIndex = 3\n                }\n                4 -> {\n                    mask = 0x0F; pixelsPerByte = 2; maxIndex = 15\n                }\n                else -> throw IllegalStateException()\n            }\n\n            if (paletteIndex < 0 || paletteIndex > maxIndex)\n                throw IllegalArgumentException(\"Invalid color index $paletteIndex\")\n\n\n            val bufOffset = pixelIndex / pixelsPerByte % dataBuf.size\n            val positionInByte = pixelsPerByte - pixelIndex % pixelsPerByte - 1\n            val bitShift = positionInByte * bitsPerPixel\n            val byte = (dataBuf[bufOffset].toInt() and (mask shl bitShift).inv()) or (paletteIndex shl bitShift)\n            dataBuf[bufOffset] = byte.toByte()\n        }\n\n        /** [serialize] and [read] are asymmetrical because pixel count is read in [Buffer.read]. */\n        override fun serialize(writer: ByteArrayWriter) {\n            writer.writeShort(pixelCount)\n            palette.forEach { paletteColor -> writer.writeInt(paletteColor.argb) }\n            writer.writeNBytes(dataBuf)\n        }\n\n        /** [serialize] and [read] are asymmetrical because pixel count is read in [Buffer.read]. */\n        override fun read(reader: ByteArrayReader, incomingPixelCount: Int) {\n            palette.indices.forEach { i -> palette[i] = Color.from(reader.readInt()) }\n            reader.readNBytes(dataBuf)\n        }\n\n        override fun setAll(color: Color): Unit =\n            throw IllegalArgumentException(\"Can't set color directly when using indexed color buffers\")\n\n        override fun setAll(paletteIndex: Int) {\n            for (i in indices) set(i, paletteIndex)\n        }\n\n        override val indices = 0 until pixelCount\n\n        private fun paletteIndex(pixelIndex: Int): Int {\n            val mask: Int\n            val pixelsPerByte: Int\n            when (bitsPerPixel) {\n                1 -> {\n                    mask = 0x01; pixelsPerByte = 8\n                }\n                2 -> {\n                    mask = 0x03; pixelsPerByte = 4\n                }\n                4 -> {\n                    mask = 0x0F; pixelsPerByte = 2\n                }\n                else -> throw IllegalStateException()\n            }\n\n            val bufOffset = pixelIndex / pixelsPerByte % dataBuf.size\n            val positionInByte = pixelsPerByte - pixelIndex % pixelsPerByte - 1\n            val bitShift = positionInByte * bitsPerPixel\n            return dataBuf[bufOffset].toInt() shr bitShift and mask\n        }\n\n        private fun bufferSizeFor(pixelCount: Int): Int {\n            return when (bitsPerPixel) {\n                1 -> (pixelCount + 7) / 8\n                2 -> (pixelCount + 3) / 4\n                4 -> (pixelCount + 1) / 2\n                else -> throw IllegalStateException()\n            }\n        }\n    }\n\n    class Renderer : Shader.Renderer<Buffer> {\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color = buffer.colors[pixelIndex]\n    }\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNUSED_PARAMETER\", \"NOTHING_TO_INLINE\")\n\npackage kotlin\n\n/**\n * Returns an empty array of the specified type [T].\n */\npublic inline fun <T> emptyArray(): Array<T> = js(\"[]\")\n\n@library\npublic fun <T> arrayOf(vararg elements: T): Array<T> = definedExternally\n\n@library\npublic fun doubleArrayOf(vararg elements: Double): DoubleArray = definedExternally\n\n@library\npublic fun floatArrayOf(vararg elements: Float): FloatArray = definedExternally\n\n@library\npublic fun longArrayOf(vararg elements: Long): LongArray = definedExternally\n\n@library\npublic fun intArrayOf(vararg elements: Int): IntArray = definedExternally\n\n@library\npublic fun charArrayOf(vararg elements: Char): CharArray = definedExternally\n\n@library\npublic fun shortArrayOf(vararg elements: Short): ShortArray = definedExternally\n\n@library\npublic fun byteArrayOf(vararg elements: Byte): ByteArray = definedExternally\n\n@library\npublic fun booleanArrayOf(vararg elements: Boolean): BooleanArray = definedExternally\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n */\npublic actual fun <T> lazy(initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [mode] parameter is ignored. */\npublic actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [lock] parameter is ignored.\n */\npublic actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n\ninternal fun fillFrom(src: dynamic, dst: dynamic): dynamic {\n    val srcLen: Int = src.length\n    val dstLen: Int = dst.length\n    var index: Int = 0\n    while (index < srcLen && index < dstLen) dst[index] = src[index++]\n    return dst\n}\n\n\ninternal fun arrayCopyResize(source: dynamic, newSize: Int, defaultValue: Any?): dynamic {\n    val result = source.slice(0, newSize)\n    copyArrayType(source, result)\n    var index: Int = source.length\n    if (newSize > index) {\n        result.length = newSize\n        while (index < newSize) result[index++] = defaultValue\n    }\n    return result\n}\n\ninternal fun <T> arrayPlusCollection(array: dynamic, collection: Collection<T>): dynamic {\n    val result = array.slice()\n    result.length += collection.size\n    copyArrayType(array, result)\n    var index: Int = array.length\n    for (element in collection) result[index++] = element\n    return result\n}\n\ninternal fun <T> fillFromCollection(dst: dynamic, startIndex: Int, collection: Collection<T>): dynamic {\n    var index = startIndex\n    for (element in collection) dst[index++] = element\n    return dst\n}\n\ninternal inline fun copyArrayType(from: dynamic, to: dynamic) {\n    if (from.`$type$` !== undefined) {\n        to.`$type$` = from.`$type$`\n    }\n}\n\ninternal inline fun jsIsType(obj: dynamic, jsClass: dynamic) = js(\"Kotlin\").isType(obj, jsClass)","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlin.random.Random\n\n/**\n * A shader that sets pixels to a random colors.\n */\nclass RandomShader : Shader<RandomShader.Buffer>(ShaderId.RANDOM) {\n    override fun createBuffer(surface: Surface): Buffer = Buffer()\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer = Buffer().apply { read(reader) }\n\n    override fun createRenderer(surface: Surface): Renderer = Renderer()\n\n    companion object : ShaderReader<RandomShader> {\n        override fun parse(reader: ByteArrayReader) = RandomShader()\n    }\n\n    inner class Buffer : Shader.Buffer {\n        override val shader: Shader<*>\n            get() = this@RandomShader\n\n        override fun serialize(writer: ByteArrayWriter) {\n        }\n\n        override fun read(reader: ByteArrayReader) {\n        }\n    }\n\n    class Renderer : Shader.Renderer<Buffer> {\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color =\n            Color.from(Random.nextInt(0xffffff) or (0xff ushr 24))\n    }\n}\n","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.glsl.LinearSurfacePixelStrategy\nimport baaahs.glsl.PanelSpaceUvTranslator\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlin.math.sqrt\n\n/**\n * A shader that sets all pixels to a single color within x/y constraints.\n */\nclass SimpleSpatialShader() : Shader<SimpleSpatialShader.Buffer>(ShaderId.SIMPLE_SPATIAL) {\n    override fun createBuffer(surface: Surface): Buffer = Buffer()\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer = Buffer().apply { read(reader) }\n\n    override fun createRenderer(surface: Surface): Renderer = Renderer(surface)\n\n    companion object : ShaderReader<SimpleSpatialShader> {\n        override fun parse(reader: ByteArrayReader) = SimpleSpatialShader()\n    }\n\n    inner class Buffer : Shader.Buffer {\n        override val shader: Shader<*>\n            get() = this@SimpleSpatialShader\n\n        var color: Color = Color.WHITE\n        var centerX: Float = 0.5f\n        var centerY: Float = 0.5f\n        var radius: Float = 0.75f\n\n        override fun serialize(writer: ByteArrayWriter) {\n            color.serialize(writer)\n            writer.writeFloat(centerX)\n            writer.writeFloat(centerY)\n            writer.writeFloat(radius)\n        }\n\n        override fun read(reader: ByteArrayReader) {\n            color = Color.parse(reader)\n            centerX = reader.readFloat()\n            centerY = reader.readFloat()\n            radius = reader.readFloat()\n        }\n    }\n\n    class Renderer(surface: Surface) : Shader.Renderer<Buffer> {\n        private val uvTranslator =\n            if (surface is IdentifiedSurface) {\n                PanelSpaceUvTranslator.forPixels(LinearSurfacePixelStrategy.forSurface(surface))\n            } else null\n\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color {\n            if (uvTranslator == null) return Color.BLACK\n\n            val (pixX, pixY) = uvTranslator.getUV(pixelIndex)\n\n            val distX = pixX - buffer.centerX\n            val distY = pixY - buffer.centerY\n            val dist = sqrt(distX * distX + distY * distY)\n            return when {\n                dist < buffer.radius - 0.025f -> buffer.color\n                dist < buffer.radius + 0.025f -> Color.BLACK\n                else -> buffer.color.fade(Color.BLACK, dist * 2)\n            }\n        }\n    }\n}\n","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlin.math.PI\nimport kotlin.math.sin\n\n/**\n * A shader that treats a surface's pixels as a linear strip and applies a configurable sine wave along the strip.\n */\nclass SineWaveShader() : Shader<SineWaveShader.Buffer>(ShaderId.SINE_WAVE) {\n    override fun createBuffer(surface: Surface): Buffer = Buffer()\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer = Buffer().apply { read(reader) }\n\n    override fun createRenderer(surface: Surface): Shader.Renderer<Buffer> = Renderer()\n\n    companion object : ShaderReader<SineWaveShader> {\n        override fun parse(reader: ByteArrayReader) = SineWaveShader()\n    }\n\n    inner class Buffer : Shader.Buffer {\n        override val shader: Shader<*>\n            get() = this@SineWaveShader\n\n        var color: Color = Color.WHITE\n        var theta: Float = 0f\n        var density: Float = 1f\n\n        override fun serialize(writer: ByteArrayWriter) {\n            color.serialize(writer)\n            writer.writeFloat(theta)\n            writer.writeFloat(density)\n        }\n\n        override fun read(reader: ByteArrayReader) {\n            color = Color.parse(reader)\n            theta = reader.readFloat()\n            density = reader.readFloat()\n        }\n    }\n\n    class Renderer : Shader.Renderer<Buffer> {\n        private var pixelCount: Int = 1\n\n        override fun beginFrame(buffer: Buffer, pixelCount: Int) {\n            this.pixelCount = pixelCount\n        }\n\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color {\n            val theta = buffer.theta\n            val density = buffer.density\n\n            val v = sin(theta + 2 * PI * (pixelIndex.toFloat() / pixelCount * density)) / 2 + .5\n            return Color.BLACK.fade(buffer.color, v.toFloat())\n        }\n    }\n}\n","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\n\n/**\n * A shader that sets all pixels to a single color.\n */\nclass SolidShader : Shader<SolidShader.Buffer>(ShaderId.SOLID) {\n    override fun createBuffer(surface: Surface): Buffer = Buffer()\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer = Buffer().apply { read(reader) }\n\n    override fun createRenderer(surface: Surface): Renderer = Renderer()\n\n    companion object : ShaderReader<SolidShader> {\n        override fun parse(reader: ByteArrayReader) = SolidShader()\n    }\n\n    inner class Buffer : Shader.Buffer {\n        override val shader: Shader<*>\n            get() = this@SolidShader\n\n        var color: Color = Color.WHITE\n\n        override fun serialize(writer: ByteArrayWriter) {\n            color.serialize(writer)\n        }\n\n        override fun read(reader: ByteArrayReader) {\n            color = Color.parse(reader)\n        }\n    }\n\n    class Renderer : Shader.Renderer<Buffer> {\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color = buffer.color\n    }\n}\n","package baaahs.shaders\n\nimport baaahs.SoundAnalyzer\nimport baaahs.glsl.GlslPlugin\nimport baaahs.glsl.Program\nimport baaahs.glsl.Uniform\nimport baaahs.glsl.check\nimport com.danielgergely.kgl.*\n\nclass SoundAnalysisPlugin(val soundAnalyzer: SoundAnalyzer, val historySize: Int = 300) : GlslPlugin {\n    private var textureBuffer = FloatArray(0)\n    private var textureGlBuffer = FloatBuffer(0)\n\n    init {\n        soundAnalyzer.listen(object : SoundAnalyzer.AnalysisListener {\n            override fun onSample(analysis: SoundAnalyzer.Analysis) {\n                val analysisBufferSize = soundAnalyzer.frequencies.size\n                val expectedBufferSize = analysisBufferSize * historySize\n                if (textureBuffer.size != expectedBufferSize) {\n                    textureBuffer = FloatArray(expectedBufferSize)\n                    textureGlBuffer = FloatBuffer(expectedBufferSize)\n                }\n\n                // Shift historical data down one row.\n                textureBuffer.copyInto(textureBuffer, analysisBufferSize, 0, expectedBufferSize - analysisBufferSize)\n\n                // Copy this sample's data into the buffer.\n                analysis.magnitudes.forEachIndexed { index, magitude ->\n                    textureBuffer[index] = magitude * analysisBufferSize\n                }\n            }\n        })\n    }\n\n    override fun forProgram(gl: Kgl, program: Program): GlslPlugin.ProgramContext {\n        return ProgramContext(gl, program)\n    }\n\n    inner class ProgramContext(private val gl: Kgl, private val program: Program) : GlslPlugin.ProgramContext {\n        override val glslPreamble: String = \"uniform sampler2D sm_soundAnalysis;\"\n\n        private var soundAnalysisUniform: Uniform? = null\n\n        override fun afterCompile() {\n            soundAnalysisUniform = gl.check { Uniform.find(program, \"sm_soundAnalysis\") }\n        }\n\n        override fun forRender(): GlslPlugin.RenderContext? {\n            val analysisBufferSize = soundAnalyzer.frequencies.size\n            val expectedBufferSize = analysisBufferSize * historySize\n\n            val uniform = soundAnalysisUniform\n            if (uniform == null || textureBuffer.size != expectedBufferSize) {\n                return null\n            } else {\n                return RenderContext(uniform)\n            }\n        }\n\n        inner class RenderContext(uniform: Uniform) : GlslPlugin.RenderContext {\n            private val texture = gl.check { gl.createTexture() }\n            private val textureId = program.obtainTextureId()\n\n            init {\n                textureGlBuffer.position = 0\n                textureGlBuffer.put(textureBuffer)\n\n                gl.check { gl.activeTexture(GL_TEXTURE0 + textureId) }\n                gl.check { gl.bindTexture(GL_TEXTURE_2D, texture) }\n                gl.check { gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST) }\n                gl.check { gl.texParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST) }\n                gl.check {\n                    gl.texImage2D(\n                        GL_TEXTURE_2D, 0,\n                        GL_R32F, soundAnalyzer.frequencies.size, historySize, 0,\n                        GL_RED, GL_FLOAT, textureGlBuffer\n                    )\n                }\n                uniform.set(textureId)\n            }\n\n            override fun release() {\n                gl.check { gl.deleteTexture(texture) }\n            }\n        }\n    }\n}","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlin.random.Random\n\n/**\n * A shader that randomly sets some pixels to white, changing with each frame.\n */\nclass SparkleShader : Shader<SparkleShader.Buffer>(ShaderId.SPARKLE) {\n    override fun createBuffer(surface: Surface): Buffer = Buffer()\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer = Buffer().apply { read(reader) }\n\n    override fun createRenderer(surface: Surface): Shader.Renderer<Buffer> = Renderer()\n\n    companion object : ShaderReader<SparkleShader> {\n        override fun parse(reader: ByteArrayReader) = SparkleShader()\n    }\n\n    inner class Buffer : Shader.Buffer {\n        override val shader: Shader<*> = this@SparkleShader\n\n        var color: Color = Color.WHITE\n        var sparkliness: Float = .1F\n\n        override fun serialize(writer: ByteArrayWriter) {\n            color.serialize(writer)\n            writer.writeFloat(sparkliness)\n        }\n\n        override fun read(reader: ByteArrayReader) {\n            color = Color.parse(reader)\n            sparkliness = reader.readFloat()\n        }\n    }\n\n    class Renderer : Shader.Renderer<Buffer> {\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color {\n            return if (Random.nextFloat() < buffer.sparkliness ) { buffer.color } else { Color.BLACK }\n        }\n    }\n}\n","package baaahs.shows\n\nimport baaahs.getResource\nimport baaahs.glsl.GlslBase\nimport baaahs.shaders.GlslShader\n\nclass AllShows {\n    companion object {\n        val allGlslShows: List<GlslShow> by lazy {\n            getResource(\"_RESOURCE_FILES_\")\n                .split(\"\\n\")\n                .filter { it.startsWith(\"baaahs/shows/\") && it.endsWith(\".glsl\")}\n                .map { fileName ->\n                    val shaderSource = getResource(fileName)\n                    val nameFromGlsl = Regex(\"^// (.*)\").find(shaderSource)?.groupValues?.get(1)\n                    val name = nameFromGlsl ?: fileName\n                        .split(\"/\").last()\n                        .replace(\".glsl\", \"\")\n                        .replace(\"_\", \" \")\n                    object : GlslShow(name) {\n                        override val program = GlslShader.renderContext.createProgram(shaderSource)\n                    }\n                }\n        }\n\n        private val nonGlslShows = listOf(\n            SomeDumbShow,\n//            RandomShow,\n            CompositeShow,\n//            ThumpShow,\n            PanelTweenShow\n//            PixelTweenShow\n//            LifeyShow,\n//            SimpleSpatialShow,\n//            HeartbleatShow,\n//            CreepingPixelsShow\n        )\n\n        val allShows = listOf(\n            SolidColorShow\n        ) + (nonGlslShows + allGlslShows).sortedBy { it.name.toLowerCase() }\n    }\n}\n","package baaahs.shows\n\nimport baaahs.*\nimport baaahs.gadgets.ColorPicker\nimport baaahs.shaders.CompositingMode\nimport baaahs.shaders.CompositorShader\nimport baaahs.shaders.SineWaveShader\nimport baaahs.shaders.SolidShader\nimport kotlin.math.PI\nimport kotlin.random.Random\n\nobject CompositeShow : Show(\"Composite\") {\n    override fun createRenderer(model: Model<*>, showRunner: ShowRunner) = object : Renderer {\n        val colorPicker = showRunner.getGadget(\"color\", ColorPicker(\"Color\", initialValue = Color.BLUE))\n\n        val solidShader = SolidShader()\n        val sineWaveShader = SineWaveShader()\n\n        private val shaderBufs = showRunner.allSurfaces.associateWith { surface -> shaderBufsFor(surface) }\n            .toMutableMap()\n\n        private fun shaderBufsFor(surface: Surface): ShaderBufs {\n            val solidShaderBuffer = showRunner.getShaderBuffer(surface, solidShader)\n            val sineWaveShaderBuffer = showRunner.getShaderBuffer(surface, sineWaveShader).apply {\n                density = Random.nextFloat() * 20\n            }\n\n            val compositorShaderBuffer =\n                showRunner.getCompositorBuffer(surface, solidShaderBuffer, sineWaveShaderBuffer, CompositingMode.ADD)\n\n            return ShaderBufs(solidShaderBuffer, sineWaveShaderBuffer, compositorShaderBuffer)\n        }\n\n        private val movingHeadBuffers = showRunner.allMovingHeads.map { showRunner.getMovingHeadBuffer(it) }\n\n        override fun nextFrame() {\n            val theta = ((getTimeMillis() % 10000 / 1000f) % (2 * PI)).toFloat()\n\n            var i = 0\n            shaderBufs.values.forEach { shaderBuffer ->\n                shaderBuffer.solidShaderBuffer.color = colorPicker.color\n                shaderBuffer.sineWaveShaderBuffer.color = Color.WHITE\n                shaderBuffer.sineWaveShaderBuffer.theta = theta + i++\n                shaderBuffer.compositorShaderBuffer.mode = CompositingMode.ADD\n                shaderBuffer.compositorShaderBuffer.fade = 1f\n            }\n\n            movingHeadBuffers.forEach { buf ->\n                buf.color = colorPicker.color\n                buf.pan = PI.toFloat() / 2\n                buf.tilt = theta / 2\n            }\n        }\n\n        override fun surfacesChanged(newSurfaces: List<Surface>, removedSurfaces: List<Surface>) {\n            removedSurfaces.forEach { shaderBufs.remove(it) }\n            newSurfaces.forEach { shaderBufs[it] = shaderBufsFor(it) }\n        }\n    }\n\n    class ShaderBufs(\n        val solidShaderBuffer: SolidShader.Buffer,\n        val sineWaveShaderBuffer: SineWaveShader.Buffer,\n        val compositorShaderBuffer: CompositorShader.Buffer\n    )\n}\n","package baaahs.shows\n\nimport baaahs.Color\nimport baaahs.Model\nimport baaahs.Show\nimport baaahs.ShowRunner\nimport baaahs.gadgets.ColorPicker\nimport baaahs.shaders.PixelShader\n\nobject CreepingPixelsShow : Show(\"Creeping Pixels\") {\n    override fun createRenderer(model: Model<*>, showRunner: ShowRunner): Renderer {\n        val colorPicker = showRunner.getGadget(\"color\", ColorPicker(\"Color\"))\n\n        val shader = PixelShader(PixelShader.Encoding.INDEXED_2)\n        val shaderBuffers = showRunner.allSurfaces.map {\n            showRunner.getShaderBuffer(it, shader).apply {\n                palette[0] = Color.BLACK\n            }\n        }\n\n        return object : Renderer {\n            var i: Int = 0\n\n            override fun nextFrame() {\n                val color = colorPicker.color\n\n                shaderBuffers.forEach {\n                    it.palette[1] = color\n                    it.setAll(0)\n                    it[i % it.colors.size] = 1\n                }\n                i++\n            }\n        }\n    }\n}","package baaahs.shows\n\nimport baaahs.*\nimport baaahs.gadgets.ColorPicker\nimport baaahs.gadgets.Slider\nimport baaahs.glsl.Program\nimport baaahs.shaders.GlslShader\n\nabstract class GlslShow(name: String) : Show(name) {\n    public abstract val program: Program\n\n    override fun createRenderer(model: Model<*>, showRunner: ShowRunner): Renderer {\n        val shader = GlslShader(program, model.defaultUvTranslator)\n\n        val paramDataSources = program.params.map { it.createDataSource(showRunner) }\n        val buffers = showRunner.allSurfaces.associateWithTo(hashMapOf()) { showRunner.getShaderBuffer(it, shader) }\n\n        return object : Renderer {\n            override fun nextFrame() {\n                buffers.values.forEach { buffer ->\n                    val bufferValues = paramDataSources.map { it.getValue() }\n                    buffer.update(bufferValues)\n                }\n            }\n\n            override fun surfacesChanged(newSurfaces: List<Surface>, removedSurfaces: List<Surface>) {\n                removedSurfaces.forEach { buffers.remove(it) }\n                newSurfaces.forEach { buffers[it] = showRunner.getShaderBuffer(it, shader) }\n            }\n        }\n    }\n\n    fun GlslShader.Param.createDataSource(showRunner: ShowRunner): DataSource {\n        val config = config\n        val name = config.getPrimitive(\"name\").contentOrNull ?: varName\n\n        return when (gadgetType) {\n            \"Slider\" -> {\n                GadgetDataSource(showRunner.getGadget(\"glsl_${varName}\", Slider(\n                    name,\n                    initialValue = config.getPrimitiveOrNull(\"initialValue\")?.float ?: 1f,\n                    minValue = config.getPrimitiveOrNull(\"minValue\")?.float ?: 0f,\n                    maxValue = config.getPrimitiveOrNull(\"maxValue\")?.float ?: 1f\n                )))\n            }\n            \"ColorPicker\" -> {\n                GadgetDataSource(showRunner.getGadget(\"glsl_${varName}\", ColorPicker(name)))\n            }\n            \"Beat\" -> {\n                BeatDataSource(showRunner.getBeatSource().getBeatData(), showRunner.clock)\n            }\n            \"StartOfMeasure\" -> {\n                StartOfMeasureDataSource(showRunner.getBeatSource().getBeatData(), showRunner.clock)\n            }\n            else -> throw IllegalArgumentException(\"unknown gadget ${gadgetType}\")\n        }\n    }\n\n    interface DataSource {\n        fun getValue(): Any\n    }\n\n    class GadgetDataSource(val gadget: Gadget) : DataSource {\n        override fun getValue(): Any {\n            return when (gadget) {\n                is Slider -> gadget.value\n                is ColorPicker -> gadget.color\n                else -> throw IllegalArgumentException(\"unsupported gadget $gadget\")\n            }\n        }\n    }\n\n    class BeatDataSource(val beatData: BeatData, val clock: Clock) : DataSource {\n        override fun getValue(): Any {\n            return beatData.fractionTillNextBeat(clock)\n        }\n    }\n\n    class StartOfMeasureDataSource(val beatData: BeatData, val clock: Clock) : DataSource {\n        override fun getValue(): Any {\n            return beatData.fractionTillNextMeasure(clock)\n        }\n    }\n}\n","package baaahs.shows\n\nimport baaahs.*\nimport baaahs.gadgets.Slider\nimport baaahs.shaders.HeartShader\nimport baaahs.shaders.SolidShader\nimport kotlin.math.PI\nimport kotlin.math.abs\nimport kotlin.math.sin\n\nobject HeartbleatShow : Show(\"Heartbleat\") {\n    override fun createRenderer(model: Model<*>, showRunner: ShowRunner): Renderer {\n        model as SheepModel\n\n        return object : Renderer {\n            val hearts = showRunner.allSurfaces.filter { it is IdentifiedSurface && it.number == 7 }\n                .map { showRunner.getShaderBuffer(it, HeartShader()) }\n            val heartSizeGadget = showRunner.getGadget(\"heartSize\", Slider(\"Heart Size\", .16f))\n            val strokeSize = showRunner.getGadget(\"strokeSize\", Slider(\"Stroke Size\", .5f))\n            val xOff = showRunner.getGadget(\"xOff\", Slider(\"X Offset\", .4f))\n            val yOff = showRunner.getGadget(\"yOff\", Slider(\"Y Offset\", .67f))\n            val otherSurfaces = showRunner.allUnusedSurfaces.map { showRunner.getShaderBuffer(it, SolidShader()) }\n\n            override fun nextFrame() {\n                val currentBeat = showRunner.currentBeat\n                var phase = (currentBeat % 1.0) * 3.0f\n                val heartSize = heartSizeGadget.value * if (phase > 1.5 && phase < 2.5f) {\n                    1f + ((.5f - abs(phase - 2)) / 4).toFloat()\n                } else if (phase > 2.5f || phase < 0.5f) {\n                    if (phase > 2.5f) phase -= 3\n                    1f + ((.5f - abs(phase)) / 2).toFloat()\n                } else {\n                    1f\n                }\n\n                hearts.forEach {\n                    it.heartSize = heartSize\n                    it.strokeSize = strokeSize.value\n                    it.xOff = xOff.value\n                    it.yOff = yOff.value\n                }\n\n                otherSurfaces.forEach {\n                    it.color = Color(.25f, .25f, .25f)\n                        .fade(Color(.75f, .3f, .3f), sin(currentBeat / 4.0f * PI).toFloat())\n                }\n            }\n        }\n    }\n\n    val IdentifiedSurface.number: Int\n        get() = Regex(\"\\\\d+\").find(name)?.value?.toInt() ?: -1\n}\n","package baaahs.shows\n\nimport baaahs.*\nimport baaahs.gadgets.Slider\nimport baaahs.shaders.SolidShader\nimport kotlin.random.Random\n\nobject LifeyShow : Show(\"Lifey\") {\n    override fun createRenderer(model: Model<*>, showRunner: ShowRunner): Renderer {\n        model as SheepModel\n\n        val speedSlider = showRunner.getGadget(\"speed\", Slider(\"Speed\", .25f))\n\n        val shader = SolidShader()\n        val shaderBuffers = showRunner.allSurfaces.associateWith {\n            showRunner.getShaderBuffer(it, shader).apply { color = Color.WHITE }\n        }\n\n        val selectedPanels = mutableListOf<SheepModel.Panel>()\n        var lastUpdateMs: Long = 0\n\n        fun SheepModel.Panel.neighbors() = model.neighborsOf(this)\n        fun SheepModel.Panel.isSelected() = selectedPanels.contains(this)\n        fun SheepModel.Panel.neighborsSelected() = neighbors().filter { selectedPanels.contains(it) }.count()\n\n        return object : Renderer {\n            override fun nextFrame() {\n                val nowMs = getTimeMillis()\n                val intervalMs = ((1f - speedSlider.value) * 1000).toLong()\n                if (nowMs > lastUpdateMs + intervalMs) {\n                    if (selectedPanels.isEmpty()) {\n                        selectedPanels.addAll(model.allPanels.filter { Random.nextFloat() < .5 })\n                    } else {\n                        val newSelectedPanels = mutableListOf<SheepModel.Panel>()\n                        selectedPanels.forEach { panel ->\n                            var living = panel.isSelected()\n\n                            val neighborsSelected = panel.neighborsSelected()\n                            if (living) {\n                                if (neighborsSelected < 1 || neighborsSelected > 3) {\n                                    living = false\n\n                                    // super-lonely panels will move next door instead of dying...\n                                    if (neighborsSelected == 0) {\n                                        val moveToNeighbor = panel.neighbors().random()\n                                        moveToNeighbor?.let { newSelectedPanels.add(it) }\n                                        living = false\n                                    }\n                                }\n                            } else {\n                                if (neighborsSelected == 2 || neighborsSelected == 3) {\n                                    living = true\n                                }\n                            }\n\n                            // sometimes panels spontaneously become alive or die...\n                            if (Random.nextFloat() < .1) {\n                                living = !living\n                            }\n\n                            if (living) {\n                                newSelectedPanels.add(panel)\n                            }\n                        }\n                        selectedPanels.clear()\n                        selectedPanels.addAll(newSelectedPanels)\n                    }\n\n                    lastUpdateMs = nowMs\n                }\n\n                shaderBuffers.forEach { (surface, buffer) ->\n                    buffer.color =\n                        if (surface is IdentifiedSurface\n                            && selectedPanels.contains(surface.modelSurface)) Color.WHITE else Color.BLACK\n                }\n            }\n        }\n    }\n}","package baaahs.shows\n\nimport baaahs.*\nimport baaahs.shaders.PixelShader\nimport kotlin.random.Random\n\nobject PixelTweenShow : Show(\"PixelTweenShow\") {\n    override fun createRenderer(model: Model<*>, showRunner: ShowRunner): Renderer {\n        val colorArray = arrayOf(\n            Color.from(\"#FF8A47\"),\n            Color.from(\"#FC6170\"),\n            Color.from(\"#8CEEEE\"),\n            Color.from(\"#26BFBF\"),\n            Color.from(\"#FFD747\")\n        )\n\n        return object : Renderer {\n            val shaderBuffers = showRunner.allSurfaces.map { surface ->\n                showRunner.getShaderBuffer(surface, PixelShader())\n            }\n            val fadeTimeMs = 1000\n\n            override fun nextFrame() {\n                val now = getTimeMillis().and(0xfffffff).toInt()\n                shaderBuffers.forEachIndexed { i, buffer ->\n                    val colorIndex = (now / fadeTimeMs + i) % colorArray.size\n                    val startColor = colorArray[colorIndex]\n                    val endColor = colorArray[(colorIndex + 1) % colorArray.size]\n\n                    val colors = buffer.colors\n                    colors.forEachIndexed { index, _ ->\n                        if (Random.nextFloat() < .1) {\n                            colors[index] = Color.WHITE\n                        } else {\n                            val tweenedColor =\n                                startColor.fade(endColor, ((now + index) % fadeTimeMs) / fadeTimeMs.toFloat())\n                            colors[index] = tweenedColor\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n","package baaahs.shows\n\nimport baaahs.Color\nimport baaahs.Model\nimport baaahs.Show\nimport baaahs.ShowRunner\nimport baaahs.dmx.Shenzarpy\nimport baaahs.shaders.RandomShader\nimport kotlin.random.Random\n\nobject RandomShow : Show(\"Random\") {\n    override fun createRenderer(model: Model<*>, showRunner: ShowRunner) = object : Renderer {\n        init {\n            showRunner.allSurfaces.map { surface -> showRunner.getShaderBuffer(surface, RandomShader()) }\n        }\n\n        val movingHeadBuffers = model.movingHeads.map { showRunner.getMovingHeadBuffer(it) }\n\n        override fun nextFrame() {\n            movingHeadBuffers.forEach { shenzarpy ->\n                shenzarpy.color = Color.random()\n                shenzarpy.pan = Random.nextFloat() * Shenzarpy.panRange.endInclusive\n                shenzarpy.tilt = Random.nextFloat() * Shenzarpy.tiltRange.endInclusive\n            }\n        }\n    }\n}\n","package baaahs.shows\n\nimport baaahs.Model\nimport baaahs.Show\nimport baaahs.ShowRunner\nimport baaahs.gadgets.ColorPicker\nimport baaahs.gadgets.Slider\nimport baaahs.shaders.SimpleSpatialShader\n\nobject SimpleSpatialShow : Show(\"Spatial\") {\n    override fun createRenderer(model: Model<*>, showRunner: ShowRunner): Renderer {\n        val colorPicker = showRunner.getGadget(\"color\", ColorPicker(\"Color\"))\n        val centerXSlider = showRunner.getGadget(\"centerX\", Slider(\"center X\", 0.5f, 0f, 1f, 0.01f))\n        val centerYSlider = showRunner.getGadget(\"centerY\", Slider(\"center Y\", 0.5f, 0f, 1f, 0.01f))\n        val radiusSlider = showRunner.getGadget(\"radius\", Slider(\"radius\", 0.25f, 0f, 1f, 0.01f))\n\n        val shader = SimpleSpatialShader()\n        val shaderBuffers = showRunner.allSurfaces.map {\n            showRunner.getShaderBuffer(it, shader)\n        }\n\n        return object : Renderer {\n            override fun nextFrame() {\n                shaderBuffers.forEach {\n                    it.color = colorPicker.color\n                    it.centerX = centerXSlider.value\n                    it.centerY = centerYSlider.value\n                    it.radius = radiusSlider.value\n                }\n            }\n        }\n    }\n}","package baaahs.shows\n\nimport baaahs.Color\nimport baaahs.Model\nimport baaahs.Show\nimport baaahs.ShowRunner\nimport baaahs.gadgets.ColorPicker\nimport baaahs.gadgets.Slider\nimport baaahs.shaders.SolidShader\n\nobject SolidColorShow : Show(\"Solid Color\") {\n    override fun createRenderer(model: Model<*>, showRunner: ShowRunner): Renderer {\n        val colorPicker = showRunner.getGadget(\"color\", ColorPicker(\"Color\"))\n        val saturationPicker = showRunner.getGadget(\"sm_saturation\", Slider(\"Saturation\"))\n        val brightnessPicker = showRunner.getGadget(\"sm_brightness\", Slider(\"Brightness\"))\n\n        val shader = SolidShader()\n        val shaderBuffers = showRunner.allSurfaces.map {\n            showRunner.getShaderBuffer(it, shader).apply { color = Color.ORANGE }\n        }\n\n        val eyes = model.movingHeads.map { eye -> showRunner.getMovingHeadBuffer(eye) }\n\n        return object : Renderer {\n            override fun nextFrame() {\n                val color = colorPicker.color\n                shaderBuffers.forEach {\n                    it.color = color.withSaturation(saturationPicker.value).withBrightness(brightnessPicker.value)\n                }\n                eyes.forEach { it.color = color }\n            }\n        }\n    }\n}","package baaahs.shows\n\nimport baaahs.*\nimport baaahs.gadgets.ColorPicker\nimport baaahs.shaders.PixelShader\nimport kotlin.math.abs\nimport kotlin.math.sin\nimport kotlin.random.Random\n\nobject SomeDumbShow : Show(\"SomeDumbShow\") {\n    override fun createRenderer(model: Model<*>, showRunner: ShowRunner) = object : Renderer {\n        val colorPicker = showRunner.getGadget(\"color\", ColorPicker(\"Color\"))\n        val pixelShader = PixelShader()\n\n        val pixelShaderBuffers =\n            showRunner.allSurfaces.map { surface -> showRunner.getShaderBuffer(surface, pixelShader) }\n        val movingHeads = model.movingHeads.map { showRunner.getMovingHeadBuffer(it) }\n\n        override fun nextFrame() {\n            val seed = Random(0)\n            val now = getTimeMillis()\n\n            fun Random.nextTimeShiftedFloat(): Float =\n                sin(nextFloat() + now / 1000.0).toFloat()\n\n            fun Color.desaturateRandomishly(baseSaturation: Float, seed: Random): Color {\n                return withSaturation(baseSaturation * abs(seed.nextFloat()))\n            }\n\n            pixelShaderBuffers.forEach { shaderBuffer ->\n                val baseSaturation = seed.nextFloat()\n                val panelColor = if (seed.nextTimeShiftedFloat() < 0.1) Color.random() else colorPicker.color\n\n                for (i in shaderBuffer.colors.indices) {\n                    shaderBuffer.colors[i] = panelColor.desaturateRandomishly(baseSaturation, seed)\n                }\n            }\n\n            movingHeads.forEach { buf ->\n                buf.color = colorPicker.color\n                buf.pan += (seed.nextTimeShiftedFloat() - .5f) / 5\n                buf.tilt += (seed.nextTimeShiftedFloat() - .5f) / 5\n            }\n        }\n    }\n}\n","package baaahs.shows\n\nimport baaahs.Color\nimport baaahs.Model\nimport baaahs.Show\nimport baaahs.ShowRunner\nimport baaahs.gadgets.ColorPicker\nimport baaahs.shaders.CompositingMode\nimport baaahs.shaders.CompositorShader\nimport baaahs.shaders.SineWaveShader\nimport baaahs.shaders.SolidShader\nimport kotlin.math.roundToInt\nimport kotlin.random.Random\n\nobject ThumpShow : Show(\"Thump\") {\n    override fun createRenderer(model: Model<*>, showRunner: ShowRunner) = object : Renderer {\n        private val beatSource = showRunner.getBeatSource()\n        val colorPicker = showRunner.getGadget(\"color\", ColorPicker(\"Color\"))\n\n        val solidShader = SolidShader()\n        val sineWaveShader = SineWaveShader()\n        val compositorShader = CompositorShader(solidShader, sineWaveShader)\n\n        private val shaderBufs = showRunner.allSurfaces.map { surface ->\n            val solidShaderBuffer = showRunner.getShaderBuffer(surface, solidShader)\n\n            val sineWaveShaderBuffer = showRunner.getShaderBuffer(surface, sineWaveShader).apply {\n                density = Random.nextFloat() * 20\n            }\n\n            val compositorShaderBuffer =\n                showRunner.getCompositorBuffer(surface, solidShaderBuffer, sineWaveShaderBuffer, CompositingMode.ADD, 1f)\n\n            ShaderBufs(solidShaderBuffer, sineWaveShaderBuffer, compositorShaderBuffer)\n        }\n\n        private val movingHeadBuffers = model.movingHeads.map { showRunner.getMovingHeadBuffer(it) }\n\n        init {\n//        println(\"Created new CompositeShow, we have ${shaderBufs.size} buffers\")\n        }\n\n        override fun nextFrame() {\n//            val theta = ((getTimeMillis() / 1000f) % (2 * PI)).toFloat()\n            val beat = showRunner.currentBeat\n\n            var i = 0\n            val beatColor: Color = Color.WHITE.fade(colorPicker.color, beat % 1)\n\n            shaderBufs.forEach { shaderBuffer ->\n                shaderBuffer.solidShaderBuffer.color = beatColor\n                shaderBuffer.sineWaveShaderBuffer.color = beatColor\n//                shaderBuffer.sineWaveShaderBuffer.theta = theta + i++\n                shaderBuffer.compositorShaderBuffer.mode = CompositingMode.ADD\n                shaderBuffer.compositorShaderBuffer.fade = 1f\n            }\n\n            movingHeadBuffers.forEach { buf ->\n                buf.color = beatColor\n                buf.pan = beat.roundToInt().toFloat() / 2\n                buf.tilt = beat.roundToInt().toFloat() / 2\n            }\n        }\n    }\n\n    class ShaderBufs(\n        val solidShaderBuffer: SolidShader.Buffer,\n        val sineWaveShaderBuffer: SineWaveShader.Buffer,\n        val compositorShaderBuffer: CompositorShader.Buffer\n    )\n}\n","package baaahs.sim\n\nimport baaahs.Dmx\n\nclass FakeDmxUniverse : Dmx.Universe() {\n    private val channelsOut = ByteArray(512)\n    private val channelsIn = ByteArray(512)\n    private val listeners = mutableListOf<() -> Unit>()\n\n    override fun writer(baseChannel: Int, channelCount: Int) =\n        Dmx.Buffer(channelsOut, baseChannel, channelCount)\n\n    fun reader(baseChannel: Int, channelCount: Int, listener: () -> Unit): Dmx.Buffer {\n        listeners.add(listener)\n        return Dmx.Buffer(channelsIn, baseChannel, channelCount)\n    }\n\n    override fun sendFrame() {\n        channelsOut.copyInto(channelsIn)\n        updateListeners()\n    }\n\n    override fun allOff() {\n        for (i in 0 until 512) channelsIn[i] = 0\n        updateListeners()\n    }\n\n    private fun updateListeners() {\n        listeners.forEach { it() }\n    }\n}","package baaahs.sim\n\nimport baaahs.Logger\nimport baaahs.io.Fs\n\nclass FakeFs : Fs {\n    private val files = mutableMapOf<String, ByteArray>()\n\n    override fun listFiles(path: String): List<String> {\n        logger.debug { \"FakeFs.listFiles($path)\" }\n        return files.keys.filter { it.startsWith(\"$path/\") }\n    }\n\n    override fun loadFile(path: String): String? {\n        logger.debug { \"FakeFs.loadFile($path)\" }\n        return files[path]?.decodeToString()\n    }\n\n    override fun createFile(path: String, content: ByteArray, allowOverwrite: Boolean) {\n        logger.debug { \"FakeFs.createFile($path) -> ${content.size} bytes\" }\n        addFile(path, content)\n    }\n\n    override fun createFile(path: String, content: String, allowOverwrite: Boolean) {\n        createFile(path, content.encodeToByteArray(), allowOverwrite)\n    }\n\n    private fun addFile(path: String, content: ByteArray) {\n        if (files.containsKey(path)) {\n            throw Exception(\"$path already exists\")\n        }\n        files[path] = content\n    }\n\n    companion object {\n        val logger = Logger(\"FakeFs\")\n    }\n}","package baaahs.sim\n\nimport baaahs.Logger\nimport baaahs.NetworkDisplay\nimport baaahs.net.Network\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\nimport kotlin.coroutines.CoroutineContext\nimport kotlin.coroutines.EmptyCoroutineContext\nimport kotlin.random.Random\n\nclass FakeNetwork(\n    private val networkDelay: Int = 1,\n    private val display: NetworkDisplay? = null,\n    coroutineContext: CoroutineContext = EmptyCoroutineContext\n) : Network {\n    private val coroutineScope: CoroutineScope = object : CoroutineScope {\n        override val coroutineContext: CoroutineContext get() = coroutineContext\n    }\n    private var nextAddress = 0xb00f\n    private val udpListeners: MutableMap<Pair<Network.Address, Int>, Network.UdpListener> = hashMapOf()\n    private val udpListenersByPort: MutableMap<Int, MutableList<Network.UdpListener>> = hashMapOf()\n\n    private val httpServersByPort:\n            MutableMap<Pair<Network.Address, Int>, FakeLink.FakeHttpServer> = hashMapOf()\n\n    override fun link(): FakeLink {\n        val address = FakeAddress(nextAddress++)\n        return FakeLink(address)\n    }\n\n    private fun sendPacketSuccess() = Random.nextFloat() > packetLossRate() / 2\n    private fun receivePacketSuccess() = Random.nextFloat() > packetLossRate() / 2\n    private fun packetLossRate() = display?.packetLossRate ?: 0f\n\n    inner class FakeLink(override val myAddress: Network.Address) : Network.Link {\n        override val udpMtu = 1500\n        private var nextAvailablePort = 65000\n        var webSocketListeners = mutableListOf<Network.WebSocketListener>()\n        var tcpConnections = mutableListOf<Network.TcpConnection>()\n\n        override fun listenUdp(port: Int, udpListener: Network.UdpListener): Network.UdpSocket {\n            val serverPort = if (port == 0) nextAvailablePort++ else port\n            udpListeners.put(Pair(myAddress, serverPort), udpListener)\n            val portListeners = udpListenersByPort.getOrPut(serverPort) { mutableListOf() }\n            portListeners.add(udpListener)\n            return FakeUdpSocket(serverPort)\n        }\n\n        override fun startHttpServer(port: Int): Network.HttpServer {\n            val fakeHttpServer = FakeHttpServer(port)\n            httpServersByPort[myAddress to port] = fakeHttpServer\n            return fakeHttpServer\n        }\n\n        override fun connectWebSocket(\n            toAddress: Network.Address,\n            port: Int,\n            path: String,\n            webSocketListener: Network.WebSocketListener\n        ): Network.TcpConnection {\n            webSocketListeners.add(webSocketListener)\n\n            val fakeHttpServer = httpServersByPort[toAddress to port]\n            if (fakeHttpServer == null) {\n                logger.warn { \"No HTTP server at $toAddress:$port for $path\" }\n            }\n\n            val onConnectCallback = fakeHttpServer?.webSocketListeners?.get(path)\n            if (onConnectCallback == null) {\n                val connection = FakeTcpConnection(myAddress, toAddress, port, null)\n                coroutineScope.launch {\n                    networkDelay()\n                    webSocketListener.reset(connection)\n                }\n                tcpConnections.add(connection)\n                return connection\n            } else {\n                logger.warn { \"No WebSocket listener at $toAddress:$port$path\" }\n            }\n\n            lateinit var clientSideConnection: FakeTcpConnection\n            val serverSideConnection = FakeTcpConnection(myAddress, toAddress, port, webSocketListener) {\n                clientSideConnection\n            }\n\n            val serverListener = onConnectCallback(serverSideConnection)\n\n            clientSideConnection = FakeTcpConnection(myAddress, toAddress, port, serverListener) {\n                serverSideConnection\n            }\n\n            coroutineScope.launch {\n                networkDelay()\n                webSocketListener.connected(clientSideConnection)\n            }\n\n            coroutineScope.launch {\n                networkDelay()\n                serverListener.connected(serverSideConnection)\n            }\n            tcpConnections.add(clientSideConnection)\n            return clientSideConnection\n        }\n\n        inner class FakeTcpConnection(\n            override val fromAddress: Network.Address,\n            override val toAddress: Network.Address,\n            override val port: Int,\n            private val webSocketListener: Network.WebSocketListener? = null,\n            private val otherListener: (() -> Network.TcpConnection)? = null\n        ) : Network.TcpConnection {\n            override fun send(bytes: ByteArray) {\n                coroutineScope.launch {\n                    webSocketListener?.receive(otherListener!!(), bytes)\n                }\n            }\n        }\n\n        private inner class FakeUdpSocket(override val serverPort: Int) : Network.UdpSocket {\n            override fun sendUdp(toAddress: Network.Address, port: Int, bytes: ByteArray) {\n                if (!sendPacketSuccess()) {\n                    display?.droppedPacket()\n                    return\n                }\n\n                val listener = udpListeners[Pair(toAddress, port)]\n                if (listener != null) transmitUdp(myAddress, serverPort, listener, bytes)\n            }\n\n            override fun broadcastUdp(port: Int, bytes: ByteArray) {\n                if (!sendPacketSuccess()) {\n                    display?.droppedPacket()\n                    return\n                }\n\n                udpListenersByPort[port]?.forEach { listener ->\n                    transmitUdp(myAddress, serverPort, listener, bytes)\n                }\n            }\n\n            private fun transmitUdp(\n                fromAddress: Network.Address,\n                fromPort: Int,\n                udpListener: Network.UdpListener,\n                bytes: ByteArray\n            ) {\n                coroutineScope.launch {\n                    networkDelay()\n\n                    if (!receivePacketSuccess()) {\n                        display?.droppedPacket()\n                    } else {\n                        display?.receivedPacket()\n                        udpListener.receive(fromAddress, fromPort, bytes)\n                    }\n                }\n            }\n        }\n\n        internal inner class FakeHttpServer(val port: Int) : Network.HttpServer {\n            val webSocketListeners: MutableMap<String, (Network.TcpConnection) -> Network.WebSocketListener> =\n                mutableMapOf()\n\n            override fun listenWebSocket(\n                path: String,\n                onConnect: (incomingConnection: Network.TcpConnection) -> Network.WebSocketListener\n            ) {\n                webSocketListeners[path] = onConnect\n            }\n        }\n    }\n\n    private suspend fun networkDelay() {\n        if (networkDelay != 0) delay(networkDelay.toLong())\n    }\n\n    private data class FakeAddress(val id: Int) : Network.Address {\n        override fun toString(): String = \"x${id.toString(16)}\"\n    }\n\n    companion object {\n        val logger = Logger(\"FakeNetwork\")\n    }\n}","package baaahs\n\nimport com.soywiz.klock.DateFormat\nimport com.soywiz.klock.DateTime\nimport kotlinx.coroutines.delay\nimport kotlin.math.PI\nimport kotlin.math.max\nimport kotlin.math.min\nimport kotlin.random.Random\n\nfun <E> List<E>.random(): E? = if (size > 0) get(Random.nextInt(size)) else null\n\nfun <E> List<E>.random(random: Random): E? = if (size > 0) get(random.nextInt(size)) else null\n\nfun <E> Collection<E>.only(description: String = \"item\"): E {\n    if (size != 1) throw IllegalArgumentException(\"Expected one $description, found $size: $this\")\n    else return iterator().next()\n}\n\nfun toRadians(degrees: Float) = (degrees * PI / 180).toFloat()\n\nfun constrain(value: Float, minValue: Float, maxValue: Float): Float {\n    return max(min(value, maxValue), minValue)\n}\n\nsuspend fun randomDelay(timeMs: Int) {\n    delay(Random.nextInt(timeMs).toLong())\n}\n\nexpect fun log(id: String, level: String, message: String, exception: Throwable? = null)\n\nclass Logger(val id: String) {\n    fun debug(message: () -> String) {\n        log(id, \"DEBUG\", message.invoke())\n    }\n\n    fun info(message: () -> String) {\n        log(id, \"INFO\", message.invoke())\n    }\n\n    fun warn(message: () -> String) {\n        log(id, \"WARN\", message.invoke())\n    }\n\n    fun warn(exception: Throwable, message: () -> String) {\n        log(id, \"WARN\", message.invoke(), exception)\n    }\n\n    fun error(message: () -> String) {\n        log(id, \"ERROR\", message.invoke())\n    }\n\n    fun error(message: String, exception: Throwable) {\n        log(id, \"ERROR\", message, exception)\n    }\n\n    fun error(exception: Throwable, message: () -> String) {\n        log(id, \"ERROR\", message.invoke(), exception)\n    }\n\n    companion object {\n        private val FORMAT by lazy { DateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\") }\n\n        fun ts(): String {\n            return DateTime.now().format(FORMAT)\n        }\n\n    }\n}\n\n\nexpect fun getTimeMillis(): Long\nexpect fun doRunBlocking(block: suspend () -> Unit)\n\nexpect fun getResource(name: String): String\n\nexpect fun decodeBase64(s: String): ByteArray\n\ninternal suspend fun time(function: suspend () -> Unit): Long {\n    val now = getTimeMillis()\n    function.invoke()\n    return getTimeMillis() - now\n}\n\ninternal fun timeSync(function: () -> Unit): Int {\n    val now = getTimeMillis()\n    function.invoke()\n    return (getTimeMillis() - now).toInt()\n}\n","package baaahs\n\nimport baaahs.admin.AdminPage\nimport baaahs.net.Network\nimport baaahs.visualizer.Visualizer\nimport baaahs.visualizer.VisualizerListenerClient\nimport kotlinext.js.jsObject\nimport org.w3c.dom.HTMLDivElement\nimport react.ReactElement\nimport react.createElement\nimport kotlin.browser.document\n\nclass AdminUi(network: Network, pinkyAddress: Network.Address) : HostedWebApp {\n    private val clientLink = network.link()\n    private val container = document.createElement(\"div\") as HTMLDivElement\n    private val model = selectModel()\n    private val visualizer = Visualizer(model, NoOpVisualizerDisplay, container)\n    private val visualizerListenerClient = VisualizerListenerClient(clientLink, pinkyAddress, visualizer, model)\n\n    init {\n        container.className = \"adminModelVisualizerContainer\"\n        visualizer.render()\n    }\n\n    override fun render(): ReactElement {\n        return createElement(AdminPage::class.js, jsObject<AdminPage.Props> {\n            this.containerDiv = container\n            this.visualizer = this@AdminUi.visualizer\n        })\n    }\n\n    override fun onClose() {\n        visualizer.stopRendering = true\n        visualizerListenerClient.close()\n    }\n\n    private fun selectModel(): Model<*> =\n        Pluggables.loadModel(Pluggables.defaultModel)\n\n    object NoOpVisualizerDisplay : VisualizerDisplay {\n        override var renderMs: Int\n            get() = 0\n            set(value) {}\n    }\n}\n","package kotlinext.js\n\ninline fun <T : Any> jsObject(builder: T.() -> Unit): T {\n    val obj: T = js(\"({})\")\n    return obj.apply {\n        builder()\n    }\n}\n\ninline fun js(builder: dynamic.() -> Unit): dynamic = jsObject(builder)\n\nfun <T : Any> clone(obj: T) = Object.assign(jsObject<T> {}, obj)\n\ninline fun <T : Any> assign(obj: T, builder: T.() -> Unit) = clone(obj).apply(builder)\n\n@Deprecated(\n        message = \"Use Object.assign instead\",\n        replaceWith = ReplaceWith(\"Object.assign(dest, src)\",\"kotlinext.js\")\n)\nfun <T, R : T> assign(dest: R, src: T): R = Object.assign(dest, src)\n\nfun toPlainObjectStripNull(obj: Any) = js {\n    for (key in Object.keys(obj)) {\n        val value = obj.asDynamic()[key]\n        if (value != null) this[key] = value\n    }\n}\n","package baaahs\n\nimport baaahs.net.Network\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.launch\nimport org.w3c.dom.Document\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLSelectElement\nimport org.w3c.dom.get\nimport kotlin.browser.document\nimport kotlin.dom.addClass\nimport kotlin.dom.appendElement\nimport kotlin.dom.appendText\nimport kotlin.dom.clear\n\nclass JsDisplay : Display {\n    override fun forNetwork(): NetworkDisplay = JsNetworkDisplay(document)\n\n    override fun forPinky(): PinkyDisplay =\n        JsPinkyDisplay(document.getElementById(\"pinkyView\")!!)\n\n    override fun forBrain(): BrainDisplay =\n        JsBrainDisplay(\n            document.getElementById(\"brainsView\")!!,\n            document.getElementById(\"brainDetails\")!!\n        )\n\n    override fun forVisualizer(): VisualizerDisplay = JsVisualizerDisplay()\n}\n\nclass JsNetworkDisplay(document: Document) : NetworkDisplay {\n    private val packetLossRateSpan = document.getElementById(\"networkPacketLossRate\")!!.apply {\n        addEventListener(\"click\", {\n            packetLossRate = kotlin.browser.window.prompt(\n                \"Packet loss rate (%):\", \"${(packetLossRate * 100).toInt()}\"\n            )!!.toFloat() / 100\n        })\n    }\n\n    override var packetLossRate: Float = 0.05f\n        set(value) {\n            packetLossRateSpan.textContent = \"${(value * 100).toInt()}%\"\n            field = value\n        }\n\n    init {\n//        packetLossRate = 0.05f\n        packetLossRate = 0.0f\n    }\n\n    private val packetsReceivedSpan = document.getElementById(\"networkPacketsReceived\")!!\n    private val packetsDroppedSpan = document.getElementById(\"networkPacketsDropped\")!!\n\n    private var packetsReceived = 0\n    private var packetsDropped = 0\n\n    override fun receivedPacket() {\n        packetsReceivedSpan.textContent = packetsReceived++.toString()\n    }\n\n    override fun droppedPacket() {\n        packetsDroppedSpan.textContent = packetsDropped++.toString()\n    }\n}\n\nclass JsPinkyDisplay(element: Element) : PinkyDisplay {\n    override var onShowChange: (() -> Unit) = {}\n    override var selectedShow: Show? = null\n        set(value) {\n            field = value\n            val options = showListInput.options\n            for (i in 0 until options.length) {\n                if (options[i]?.textContent == value?.name) showListInput.selectedIndex = i\n            }\n        }\n\n    override var showFrameMs: Int = 0\n        set(value) {\n            field = value\n            showFramerate.textContent = \"${1000 / value}fps\"\n            showElapsedMs.textContent = \"${value}ms\"\n        }\n\n    override var stats: Pinky.NetworkStats? = null\n        set(value) {\n            field = value\n            statsSpan.textContent = value?.run { \"$bytesSent bytes / $packetsSent packets per frame\" } ?: \"?\"\n        }\n\n    private val brainCountDiv: Element\n    private val beat1: Element\n    private val beat2: Element\n    private val beat3: Element\n    private val beat4: Element\n    private val beats: List<Element>\n    private val bpmSpan: Element\n    private val beatConfidenceElement: Element\n    private var showList = emptyList<Show>()\n    private val showListInput: HTMLSelectElement\n    private var showFramerate: Element = document.getElementById(\"showFramerate\")!!\n    private var showElapsedMs: Element = document.getElementById(\"showElapsedMs\")!!\n    private var statsSpan: Element\n\n    init {\n        element.appendText(\"Current Show: \")\n        showListInput = element.appendElement(\"select\") { className = \"showsDiv\" } as HTMLSelectElement\n        showListInput.onchange = {\n            selectedShow = showList.find { it.name == showListInput.selectedOptions[0]?.textContent }\n            onShowChange.invoke()\n        }\n\n        element.appendElement(\"br\") { }\n        element.appendText(\"Brains online: \")\n        brainCountDiv = element.appendElement(\"span\") {}\n\n        val beatsDiv = element.appendElement(\"div\") {\n            id = \"beatsDiv\"\n            appendElement(\"b\") { appendText(\"Beats: \") }\n        }\n        beatConfidenceElement = beatsDiv.appendElement(\"span\") {\n            appendText(\"[confidence: ?]\")\n        }\n        beatsDiv.appendElement(\"br\") {}\n        beat1 = beatsDiv.appendElement(\"div\") { appendText(\"1\") }\n        beat2 = beatsDiv.appendElement(\"div\") { appendText(\"2\") }\n        beat3 = beatsDiv.appendElement(\"div\") { appendText(\"3\") }\n        beat4 = beatsDiv.appendElement(\"div\") { appendText(\"4\") }\n        beats = listOf(beat1, beat2, beat3, beat4)\n\n        bpmSpan = beatsDiv.appendElement(\"span\") { appendText(\"\u2026BPM\") }\n        bpmSpan.classList.add(\"bpmDisplay-beatOff\")\n\n        element.appendElement(\"br\") { }\n        element.appendElement(\"b\") { appendText(\"Data to Brains:\") }\n        element.appendElement(\"br\") { }\n        statsSpan = element.appendElement(\"span\") {}\n    }\n\n    override fun listShows(shows: List<Show>) {\n        showListInput.clear()\n        showList = shows\n        shows.forEach {\n            showListInput.appendElement(\"option\") { appendText(it.name) }\n        }\n    }\n\n    override var brainCount: Int = 0\n        set(value) {\n            brainCountDiv.clear()\n            brainCountDiv.appendText(value.toString())\n            field = value\n        }\n\n    override var beat: Int = 0\n        set(value) {\n            if (value < 0 || value > 3) return\n\n            try {\n                beats[field].classList.clear()\n                beats[value].classList.add(\"selected\")\n                if (value % 2 == 1) {\n                    bpmSpan.classList.add(\"bpmDisplay-beatOn\")\n                } else {\n                    bpmSpan.classList.remove(\"bpmDisplay-beatOn\")\n                }\n            } catch (e: Exception) {\n                println(\"durrr error $e\")\n            }\n\n            field = value\n        }\n\n    fun Double.format(digits: Int): String = this.asDynamic().toFixed(digits) as String\n    fun Float.format(digits: Int): String = this.asDynamic().toFixed(digits) as String\n\n    override var bpm: Float = 0.0f\n        set(value) {\n            bpmSpan.textContent = \"${value.format(1)} BPM\"\n            field = value\n        }\n\n    override var beatConfidence: Float = 1.0f\n        set(value) {\n            beatConfidenceElement.textContent = \"[confidence: ${value * 100}%]\"\n            field = value\n        }\n}\n\nclass JsBrainDisplay(container: Element, detailsContainer: Element) : BrainDisplay {\n    override var id: String? = null\n    override var surface: Surface? = null\n    override var onReset: suspend () -> Unit = {}\n\n    private var myDiv = container.appendElement(\"div\") {\n        addClass(\"brain-box\", \"brain-offline\")\n        this.addEventListener(\"click\", { GlobalScope.launch { onReset() } })\n        this.addEventListener(\"mouseover\", {\n            detailsContainer.clear()\n            detailsContainer.appendElement(\"hr\") {}\n            detailsContainer.appendElement(\"b\") {\n                appendText(\"Brain ${this@JsBrainDisplay.id}\")\n            }\n            detailsContainer.appendElement(\"div\") {\n                appendText(\"Surface: ${surface?.describe()}\")\n            }\n        })\n    }\n\n    override fun haveLink(link: Network.Link) {\n        myDiv.classList.remove(\"brain-offline\")\n        myDiv.classList.add(\"brain-link\")\n    }\n}\n\nclass JsVisualizerDisplay : VisualizerDisplay {\n    private var visualizerFramerate: Element = document.getElementById(\"visualizerFramerate\")!!\n    private var visualizerElapsedMs: Element = document.getElementById(\"visualizerElapsedMs\")!!\n\n    override var renderMs: Int = 0\n        set(value) {\n            field = value\n            visualizerFramerate.textContent = \"${1000 / value}fps\"\n            visualizerElapsedMs.textContent = \"${value}ms\"\n        }\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external abstract class HTMLAllCollection {\n    open val length: Int\n    fun item(nameOrIndex: String = definedExternally): UnionElementOrHTMLCollection?\n    fun namedItem(name: String): UnionElementOrHTMLCollection?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLAllCollection.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLAllCollection.get(name: String): UnionElementOrHTMLCollection? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLFormControlsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLFormControlsCollection) to Kotlin\n */\npublic external abstract class HTMLFormControlsCollection : HTMLCollection\n\n/**\n * Exposes the JavaScript [RadioNodeList](https://developer.mozilla.org/en/docs/Web/API/RadioNodeList) to Kotlin\n */\npublic external abstract class RadioNodeList : NodeList, UnionElementOrRadioNodeList {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionsCollection) to Kotlin\n */\npublic external abstract class HTMLOptionsCollection : HTMLCollection {\n    override var length: Int\n    open var selectedIndex: Int\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally)\n    fun remove(index: Int)\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLOptionsCollection.set(index: Int, option: HTMLOptionElement?) { asDynamic()[index] = option }\n\n/**\n * Exposes the JavaScript [HTMLElement](https://developer.mozilla.org/en/docs/Web/API/HTMLElement) to Kotlin\n */\npublic external abstract class HTMLElement : Element, GlobalEventHandlers, DocumentAndElementEventHandlers, ElementContentEditable, ElementCSSInlineStyle {\n    open var title: String\n    open var lang: String\n    open var translate: Boolean\n    open var dir: String\n    open val dataset: DOMStringMap\n    open var hidden: Boolean\n    open var tabIndex: Int\n    open var accessKey: String\n    open val accessKeyLabel: String\n    open var draggable: Boolean\n    open val dropzone: DOMTokenList\n    open var contextMenu: HTMLMenuElement?\n    open var spellcheck: Boolean\n    open var innerText: String\n    open val offsetParent: Element?\n    open val offsetTop: Int\n    open val offsetLeft: Int\n    open val offsetWidth: Int\n    open val offsetHeight: Int\n    fun click()\n    fun focus()\n    fun blur()\n    fun forceSpellCheck()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLUnknownElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUnknownElement) to Kotlin\n */\npublic external abstract class HTMLUnknownElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMStringMap](https://developer.mozilla.org/en/docs/Web/API/DOMStringMap) to Kotlin\n */\npublic external abstract class DOMStringMap\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMStringMap.get(name: String): String? = asDynamic()[name]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMStringMap.set(name: String, value: String) { asDynamic()[name] = value }\n\n/**\n * Exposes the JavaScript [HTMLHtmlElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHtmlElement) to Kotlin\n */\npublic external abstract class HTMLHtmlElement : HTMLElement {\n    open var version: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadElement) to Kotlin\n */\npublic external abstract class HTMLHeadElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTitleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTitleElement) to Kotlin\n */\npublic external abstract class HTMLTitleElement : HTMLElement {\n    open var text: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBaseElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBaseElement) to Kotlin\n */\npublic external abstract class HTMLBaseElement : HTMLElement {\n    open var href: String\n    open var target: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLinkElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLinkElement) to Kotlin\n */\npublic external abstract class HTMLLinkElement : HTMLElement, LinkStyle {\n    open var href: String\n    open var crossOrigin: String?\n    open var rel: String\n    open var `as`: RequestDestination\n    open val relList: DOMTokenList\n    open var media: String\n    open var nonce: String\n    open var hreflang: String\n    open var type: String\n    open val sizes: DOMTokenList\n    open var referrerPolicy: String\n    open var charset: String\n    open var rev: String\n    open var target: String\n    open var scope: String\n    open var workerType: WorkerType\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMetaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMetaElement) to Kotlin\n */\npublic external abstract class HTMLMetaElement : HTMLElement {\n    open var name: String\n    open var httpEquiv: String\n    open var content: String\n    open var scheme: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLStyleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLStyleElement) to Kotlin\n */\npublic external abstract class HTMLStyleElement : HTMLElement, LinkStyle {\n    open var media: String\n    open var nonce: String\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBodyElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBodyElement) to Kotlin\n */\npublic external abstract class HTMLBodyElement : HTMLElement, WindowEventHandlers {\n    open var text: String\n    open var link: String\n    open var vLink: String\n    open var aLink: String\n    open var bgColor: String\n    open var background: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadingElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadingElement) to Kotlin\n */\npublic external abstract class HTMLHeadingElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLParagraphElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParagraphElement) to Kotlin\n */\npublic external abstract class HTMLParagraphElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHRElement) to Kotlin\n */\npublic external abstract class HTMLHRElement : HTMLElement {\n    open var align: String\n    open var color: String\n    open var noShade: Boolean\n    open var size: String\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLPreElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPreElement) to Kotlin\n */\npublic external abstract class HTMLPreElement : HTMLElement {\n    open var width: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLQuoteElement](https://developer.mozilla.org/en/docs/Web/API/HTMLQuoteElement) to Kotlin\n */\npublic external abstract class HTMLQuoteElement : HTMLElement {\n    open var cite: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOListElement) to Kotlin\n */\npublic external abstract class HTMLOListElement : HTMLElement {\n    open var reversed: Boolean\n    open var start: Int\n    open var type: String\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLUListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUListElement) to Kotlin\n */\npublic external abstract class HTMLUListElement : HTMLElement {\n    open var compact: Boolean\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLIElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLIElement) to Kotlin\n */\npublic external abstract class HTMLLIElement : HTMLElement {\n    open var value: Int\n    open var type: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDListElement) to Kotlin\n */\npublic external abstract class HTMLDListElement : HTMLElement {\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDivElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDivElement) to Kotlin\n */\npublic external abstract class HTMLDivElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAnchorElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAnchorElement) to Kotlin\n */\npublic external abstract class HTMLAnchorElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var hreflang: String\n    open var type: String\n    open var text: String\n    open var referrerPolicy: String\n    open var coords: String\n    open var charset: String\n    open var name: String\n    open var rev: String\n    open var shape: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLDataElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataElement) to Kotlin\n */\npublic external abstract class HTMLDataElement : HTMLElement {\n    open var value: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTimeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTimeElement) to Kotlin\n */\npublic external abstract class HTMLTimeElement : HTMLElement {\n    open var dateTime: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSpanElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSpanElement) to Kotlin\n */\npublic external abstract class HTMLSpanElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLBRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBRElement) to Kotlin\n */\npublic external abstract class HTMLBRElement : HTMLElement {\n    open var clear: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLHyperlinkElementUtils](https://developer.mozilla.org/en/docs/Web/API/HTMLHyperlinkElementUtils) to Kotlin\n */\npublic external interface HTMLHyperlinkElementUtils {\n    var href: String\n    val origin: String\n    var protocol: String\n    var username: String\n    var password: String\n    var host: String\n    var hostname: String\n    var port: String\n    var pathname: String\n    var search: String\n    var hash: String\n}\n\n/**\n * Exposes the JavaScript [HTMLModElement](https://developer.mozilla.org/en/docs/Web/API/HTMLModElement) to Kotlin\n */\npublic external abstract class HTMLModElement : HTMLElement {\n    open var cite: String\n    open var dateTime: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLPictureElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPictureElement) to Kotlin\n */\npublic external abstract class HTMLPictureElement : HTMLElement {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSourceElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSourceElement) to Kotlin\n */\npublic external abstract class HTMLSourceElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var srcset: String\n    open var sizes: String\n    open var media: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLImageElement](https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement) to Kotlin\n */\npublic external abstract class HTMLImageElement : HTMLElement, HTMLOrSVGImageElement, TexImageSource {\n    open var alt: String\n    open var src: String\n    open var srcset: String\n    open var sizes: String\n    open var crossOrigin: String?\n    open var useMap: String\n    open var isMap: Boolean\n    open var width: Int\n    open var height: Int\n    open val naturalWidth: Int\n    open val naturalHeight: Int\n    open val complete: Boolean\n    open val currentSrc: String\n    open var referrerPolicy: String\n    open var name: String\n    open var lowsrc: String\n    open var align: String\n    open var hspace: Int\n    open var vspace: Int\n    open var longDesc: String\n    open var border: String\n    open val x: Int\n    open val y: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLIFrameElement](https://developer.mozilla.org/en/docs/Web/API/HTMLIFrameElement) to Kotlin\n */\npublic external abstract class HTMLIFrameElement : HTMLElement {\n    open var src: String\n    open var srcdoc: String\n    open var name: String\n    open val sandbox: DOMTokenList\n    open var allowFullscreen: Boolean\n    open var allowUserMedia: Boolean\n    open var width: String\n    open var height: String\n    open var referrerPolicy: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var align: String\n    open var scrolling: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var marginHeight: String\n    open var marginWidth: String\n    fun getSVGDocument(): Document?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLEmbedElement](https://developer.mozilla.org/en/docs/Web/API/HTMLEmbedElement) to Kotlin\n */\npublic external abstract class HTMLEmbedElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var width: String\n    open var height: String\n    open var align: String\n    open var name: String\n    fun getSVGDocument(): Document?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLObjectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLObjectElement) to Kotlin\n */\npublic external abstract class HTMLObjectElement : HTMLElement {\n    open var data: String\n    open var type: String\n    open var typeMustMatch: Boolean\n    open var name: String\n    open var useMap: String\n    open val form: HTMLFormElement?\n    open var width: String\n    open var height: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open var align: String\n    open var archive: String\n    open var code: String\n    open var declare: Boolean\n    open var hspace: Int\n    open var standby: String\n    open var vspace: Int\n    open var codeBase: String\n    open var codeType: String\n    open var border: String\n    fun getSVGDocument(): Document?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLParamElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParamElement) to Kotlin\n */\npublic external abstract class HTMLParamElement : HTMLElement {\n    open var name: String\n    open var value: String\n    open var type: String\n    open var valueType: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLVideoElement](https://developer.mozilla.org/en/docs/Web/API/HTMLVideoElement) to Kotlin\n */\npublic external abstract class HTMLVideoElement : HTMLMediaElement, CanvasImageSource, TexImageSource {\n    open var width: Int\n    open var height: Int\n    open val videoWidth: Int\n    open val videoHeight: Int\n    open var poster: String\n    open var playsInline: Boolean\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAudioElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement) to Kotlin\n */\npublic external abstract class HTMLAudioElement : HTMLMediaElement {\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTrackElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTrackElement) to Kotlin\n */\npublic external abstract class HTMLTrackElement : HTMLElement {\n    open var kind: String\n    open var src: String\n    open var srclang: String\n    open var label: String\n    open var default: Boolean\n    open val readyState: Short\n    open val track: TextTrack\n\n    companion object {\n        val NONE: Short\n        val LOADING: Short\n        val LOADED: Short\n        val ERROR: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMediaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMediaElement) to Kotlin\n */\npublic external abstract class HTMLMediaElement : HTMLElement {\n    open val error: MediaError?\n    open var src: String\n    open var srcObject: dynamic\n    open val currentSrc: String\n    open var crossOrigin: String?\n    open val networkState: Short\n    open var preload: String\n    open val buffered: TimeRanges\n    open val readyState: Short\n    open val seeking: Boolean\n    open var currentTime: Double\n    open val duration: Double\n    open val paused: Boolean\n    open var defaultPlaybackRate: Double\n    open var playbackRate: Double\n    open val played: TimeRanges\n    open val seekable: TimeRanges\n    open val ended: Boolean\n    open var autoplay: Boolean\n    open var loop: Boolean\n    open var controls: Boolean\n    open var volume: Double\n    open var muted: Boolean\n    open var defaultMuted: Boolean\n    open val audioTracks: AudioTrackList\n    open val videoTracks: VideoTrackList\n    open val textTracks: TextTrackList\n    fun load()\n    fun canPlayType(type: String): CanPlayTypeResult\n    fun fastSeek(time: Double)\n    fun getStartDate(): dynamic\n    fun play(): Promise<Unit>\n    fun pause()\n    fun addTextTrack(kind: TextTrackKind, label: String = definedExternally, language: String = definedExternally): TextTrack\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [MediaError](https://developer.mozilla.org/en/docs/Web/API/MediaError) to Kotlin\n */\npublic external abstract class MediaError {\n    open val code: Short\n\n    companion object {\n        val MEDIA_ERR_ABORTED: Short\n        val MEDIA_ERR_NETWORK: Short\n        val MEDIA_ERR_DECODE: Short\n        val MEDIA_ERR_SRC_NOT_SUPPORTED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [AudioTrackList](https://developer.mozilla.org/en/docs/Web/API/AudioTrackList) to Kotlin\n */\npublic external abstract class AudioTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): AudioTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun AudioTrackList.get(index: Int): AudioTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [AudioTrack](https://developer.mozilla.org/en/docs/Web/API/AudioTrack) to Kotlin\n */\npublic external abstract class AudioTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var enabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [VideoTrackList](https://developer.mozilla.org/en/docs/Web/API/VideoTrackList) to Kotlin\n */\npublic external abstract class VideoTrackList : EventTarget {\n    open val length: Int\n    open val selectedIndex: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): VideoTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun VideoTrackList.get(index: Int): VideoTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [VideoTrack](https://developer.mozilla.org/en/docs/Web/API/VideoTrack) to Kotlin\n */\npublic external abstract class VideoTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var selected: Boolean\n}\n\npublic external abstract class TextTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): TextTrack?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TextTrackList.get(index: Int): TextTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrack](https://developer.mozilla.org/en/docs/Web/API/TextTrack) to Kotlin\n */\npublic external abstract class TextTrack : EventTarget, UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val kind: TextTrackKind\n    open val label: String\n    open val language: String\n    open val id: String\n    open val inBandMetadataTrackDispatchType: String\n    open var mode: TextTrackMode\n    open val cues: TextTrackCueList?\n    open val activeCues: TextTrackCueList?\n    open var oncuechange: ((Event) -> dynamic)?\n    fun addCue(cue: TextTrackCue)\n    fun removeCue(cue: TextTrackCue)\n}\n\npublic external abstract class TextTrackCueList {\n    open val length: Int\n    fun getCueById(id: String): TextTrackCue?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TextTrackCueList.get(index: Int): TextTrackCue? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrackCue](https://developer.mozilla.org/en/docs/Web/API/TextTrackCue) to Kotlin\n */\npublic external abstract class TextTrackCue : EventTarget {\n    open val track: TextTrack?\n    open var id: String\n    open var startTime: Double\n    open var endTime: Double\n    open var pauseOnExit: Boolean\n    open var onenter: ((Event) -> dynamic)?\n    open var onexit: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [TimeRanges](https://developer.mozilla.org/en/docs/Web/API/TimeRanges) to Kotlin\n */\npublic external abstract class TimeRanges {\n    open val length: Int\n    fun start(index: Int): Double\n    fun end(index: Int): Double\n}\n\n/**\n * Exposes the JavaScript [TrackEvent](https://developer.mozilla.org/en/docs/Web/API/TrackEvent) to Kotlin\n */\npublic external open class TrackEvent(type: String, eventInitDict: TrackEventInit = definedExternally) : Event {\n    open val track: UnionAudioTrackOrTextTrackOrVideoTrack?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface TrackEventInit : EventInit {\n    var track: UnionAudioTrackOrTextTrackOrVideoTrack? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun TrackEventInit(track: UnionAudioTrackOrTextTrackOrVideoTrack? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): TrackEventInit {\n    val o = js(\"({})\")\n    o[\"track\"] = track\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLMapElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMapElement) to Kotlin\n */\npublic external abstract class HTMLMapElement : HTMLElement {\n    open var name: String\n    open val areas: HTMLCollection\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAreaElement) to Kotlin\n */\npublic external abstract class HTMLAreaElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var alt: String\n    open var coords: String\n    open var shape: String\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var referrerPolicy: String\n    open var noHref: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableElement) to Kotlin\n */\npublic external abstract class HTMLTableElement : HTMLElement {\n    open var caption: HTMLTableCaptionElement?\n    open var tHead: HTMLTableSectionElement?\n    open var tFoot: HTMLTableSectionElement?\n    open val tBodies: HTMLCollection\n    open val rows: HTMLCollection\n    open var align: String\n    open var border: String\n    open var frame: String\n    open var rules: String\n    open var summary: String\n    open var width: String\n    open var bgColor: String\n    open var cellPadding: String\n    open var cellSpacing: String\n    fun createCaption(): HTMLTableCaptionElement\n    fun deleteCaption()\n    fun createTHead(): HTMLTableSectionElement\n    fun deleteTHead()\n    fun createTFoot(): HTMLTableSectionElement\n    fun deleteTFoot()\n    fun createTBody(): HTMLTableSectionElement\n    fun insertRow(index: Int = definedExternally): HTMLTableRowElement\n    fun deleteRow(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCaptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCaptionElement) to Kotlin\n */\npublic external abstract class HTMLTableCaptionElement : HTMLElement {\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableColElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableColElement) to Kotlin\n */\npublic external abstract class HTMLTableColElement : HTMLElement {\n    open var span: Int\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableSectionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableSectionElement) to Kotlin\n */\npublic external abstract class HTMLTableSectionElement : HTMLElement {\n    open val rows: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    fun insertRow(index: Int = definedExternally): HTMLElement\n    fun deleteRow(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableRowElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableRowElement) to Kotlin\n */\npublic external abstract class HTMLTableRowElement : HTMLElement {\n    open val rowIndex: Int\n    open val sectionRowIndex: Int\n    open val cells: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var bgColor: String\n    fun insertCell(index: Int = definedExternally): HTMLElement\n    fun deleteCell(index: Int)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCellElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCellElement) to Kotlin\n */\npublic external abstract class HTMLTableCellElement : HTMLElement {\n    open var colSpan: Int\n    open var rowSpan: Int\n    open var headers: String\n    open val cellIndex: Int\n    open var scope: String\n    open var abbr: String\n    open var align: String\n    open var axis: String\n    open var height: String\n    open var width: String\n    open var ch: String\n    open var chOff: String\n    open var noWrap: Boolean\n    open var vAlign: String\n    open var bgColor: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFormElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFormElement) to Kotlin\n */\npublic external abstract class HTMLFormElement : HTMLElement {\n    open var acceptCharset: String\n    open var action: String\n    open var autocomplete: String\n    open var enctype: String\n    open var encoding: String\n    open var method: String\n    open var name: String\n    open var noValidate: Boolean\n    open var target: String\n    open val elements: HTMLFormControlsCollection\n    open val length: Int\n    fun submit()\n    fun reset()\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLFormElement.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLFormElement.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLLabelElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLabelElement) to Kotlin\n */\npublic external abstract class HTMLLabelElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var htmlFor: String\n    open val control: HTMLElement?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLInputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement) to Kotlin\n */\npublic external abstract class HTMLInputElement : HTMLElement {\n    open var accept: String\n    open var alt: String\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var defaultChecked: Boolean\n    open var checked: Boolean\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open val files: FileList?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var height: Int\n    open var indeterminate: Boolean\n    open var inputMode: String\n    open val list: HTMLElement?\n    open var max: String\n    open var maxLength: Int\n    open var min: String\n    open var minLength: Int\n    open var multiple: Boolean\n    open var name: String\n    open var pattern: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var size: Int\n    open var src: String\n    open var step: String\n    open var type: String\n    open var defaultValue: String\n    open var value: String\n    open var valueAsDate: dynamic\n    open var valueAsNumber: Double\n    open var width: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    open var align: String\n    open var useMap: String\n    fun stepUp(n: Int = definedExternally)\n    fun stepDown(n: Int = definedExternally)\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    fun select()\n    fun setRangeText(replacement: String)\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally)\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLButtonElement](https://developer.mozilla.org/en/docs/Web/API/HTMLButtonElement) to Kotlin\n */\npublic external abstract class HTMLButtonElement : HTMLElement {\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var name: String\n    open var type: String\n    open var value: String\n    open var menu: HTMLMenuElement?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSelectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSelectElement) to Kotlin\n */\npublic external abstract class HTMLSelectElement : HTMLElement, ItemArrayLike<Element> {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var multiple: Boolean\n    open var name: String\n    open var required: Boolean\n    open var size: Int\n    open val type: String\n    open val options: HTMLOptionsCollection\n    override var length: Int\n    open val selectedOptions: HTMLCollection\n    open var selectedIndex: Int\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun namedItem(name: String): HTMLOptionElement?\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally)\n    fun remove(index: Int)\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    override fun item(index: Int): Element?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLSelectElement.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLSelectElement.set(index: Int, option: HTMLOptionElement?) { asDynamic()[index] = option }\n\n/**\n * Exposes the JavaScript [HTMLDataListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataListElement) to Kotlin\n */\npublic external abstract class HTMLDataListElement : HTMLElement {\n    open val options: HTMLCollection\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOptGroupElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptGroupElement) to Kotlin\n */\npublic external abstract class HTMLOptGroupElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open var label: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionElement) to Kotlin\n */\npublic external abstract class HTMLOptionElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var label: String\n    open var defaultSelected: Boolean\n    open var selected: Boolean\n    open var value: String\n    open var text: String\n    open val index: Int\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTextAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTextAreaElement) to Kotlin\n */\npublic external abstract class HTMLTextAreaElement : HTMLElement {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var cols: Int\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var inputMode: String\n    open var maxLength: Int\n    open var minLength: Int\n    open var name: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var rows: Int\n    open var wrap: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val textLength: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n    fun select()\n    fun setRangeText(replacement: String)\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally)\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLKeygenElement](https://developer.mozilla.org/en/docs/Web/API/HTMLKeygenElement) to Kotlin\n */\npublic external abstract class HTMLKeygenElement : HTMLElement {\n    open var autofocus: Boolean\n    open var challenge: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var keytype: String\n    open var name: String\n    open val type: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLOutputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOutputElement) to Kotlin\n */\npublic external abstract class HTMLOutputElement : HTMLElement {\n    open val htmlFor: DOMTokenList\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLProgressElement](https://developer.mozilla.org/en/docs/Web/API/HTMLProgressElement) to Kotlin\n */\npublic external abstract class HTMLProgressElement : HTMLElement {\n    open var value: Double\n    open var max: Double\n    open val position: Double\n    open val labels: NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMeterElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMeterElement) to Kotlin\n */\npublic external abstract class HTMLMeterElement : HTMLElement {\n    open var value: Double\n    open var min: Double\n    open var max: Double\n    open var low: Double\n    open var high: Double\n    open var optimum: Double\n    open val labels: NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFieldSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFieldSetElement) to Kotlin\n */\npublic external abstract class HTMLFieldSetElement : HTMLElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open val elements: HTMLCollection\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLLegendElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLegendElement) to Kotlin\n */\npublic external abstract class HTMLLegendElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var align: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ValidityState](https://developer.mozilla.org/en/docs/Web/API/ValidityState) to Kotlin\n */\npublic external abstract class ValidityState {\n    open val valueMissing: Boolean\n    open val typeMismatch: Boolean\n    open val patternMismatch: Boolean\n    open val tooLong: Boolean\n    open val tooShort: Boolean\n    open val rangeUnderflow: Boolean\n    open val rangeOverflow: Boolean\n    open val stepMismatch: Boolean\n    open val badInput: Boolean\n    open val customError: Boolean\n    open val valid: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDetailsElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDetailsElement) to Kotlin\n */\npublic external abstract class HTMLDetailsElement : HTMLElement {\n    open var open: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLMenuElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLMenuItemElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var icon: String\n    open var disabled: Boolean\n    open var checked: Boolean\n    open var radiogroup: String\n    open var default: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class RelatedEvent(type: String, eventInitDict: RelatedEventInit = definedExternally) : Event {\n    open val relatedTarget: EventTarget?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface RelatedEventInit : EventInit {\n    var relatedTarget: EventTarget? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun RelatedEventInit(relatedTarget: EventTarget? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): RelatedEventInit {\n    val o = js(\"({})\")\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLDialogElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDialogElement) to Kotlin\n */\npublic external abstract class HTMLDialogElement : HTMLElement {\n    open var open: Boolean\n    open var returnValue: String\n    fun show(anchor: UnionElementOrMouseEvent = definedExternally)\n    fun showModal(anchor: UnionElementOrMouseEvent = definedExternally)\n    fun close(returnValue: String = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLScriptElement](https://developer.mozilla.org/en/docs/Web/API/HTMLScriptElement) to Kotlin\n */\npublic external abstract class HTMLScriptElement : HTMLElement, HTMLOrSVGScriptElement {\n    open var src: String\n    open var type: String\n    open var charset: String\n    open var async: Boolean\n    open var defer: Boolean\n    open var crossOrigin: String?\n    open var text: String\n    open var nonce: String\n    open var event: String\n    open var htmlFor: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLTemplateElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTemplateElement) to Kotlin\n */\npublic external abstract class HTMLTemplateElement : HTMLElement {\n    open val content: DocumentFragment\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLSlotElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSlotElement) to Kotlin\n */\npublic external abstract class HTMLSlotElement : HTMLElement {\n    open var name: String\n    fun assignedNodes(options: AssignedNodesOptions = definedExternally): Array<Node>\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface AssignedNodesOptions {\n    var flatten: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AssignedNodesOptions(flatten: Boolean? = false): AssignedNodesOptions {\n    val o = js(\"({})\")\n    o[\"flatten\"] = flatten\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLCanvasElement](https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement) to Kotlin\n */\npublic external abstract class HTMLCanvasElement : HTMLElement, CanvasImageSource, TexImageSource {\n    open var width: Int\n    open var height: Int\n    fun getContext(contextId: String, vararg arguments: Any?): RenderingContext?\n    fun toDataURL(type: String = definedExternally, quality: Any? = definedExternally): String\n    fun toBlob(_callback: (Blob?) -> Unit, type: String = definedExternally, quality: Any? = definedExternally)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface CanvasRenderingContext2DSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CanvasRenderingContext2DSettings(alpha: Boolean? = true): CanvasRenderingContext2DSettings {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    return o\n}\n\n/**\n * Exposes the JavaScript [CanvasRenderingContext2D](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D) to Kotlin\n */\npublic external abstract class CanvasRenderingContext2D : CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasHitRegion, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath, RenderingContext {\n    open val canvas: HTMLCanvasElement\n}\n\npublic external interface CanvasState {\n    fun save()\n    fun restore()\n}\n\npublic external interface CanvasTransform {\n    fun scale(x: Double, y: Double)\n    fun rotate(angle: Double)\n    fun translate(x: Double, y: Double)\n    fun transform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double)\n    fun getTransform(): DOMMatrix\n    fun setTransform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double)\n    fun setTransform(transform: dynamic = definedExternally)\n    fun resetTransform()\n}\n\npublic external interface CanvasCompositing {\n    var globalAlpha: Double\n    var globalCompositeOperation: String\n}\n\npublic external interface CanvasImageSmoothing {\n    var imageSmoothingEnabled: Boolean\n    var imageSmoothingQuality: ImageSmoothingQuality\n}\n\npublic external interface CanvasFillStrokeStyles {\n    var strokeStyle: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillStyle: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    fun createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double): CanvasGradient\n    fun createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double): CanvasGradient\n    fun createPattern(image: CanvasImageSource, repetition: String): CanvasPattern?\n}\n\npublic external interface CanvasShadowStyles {\n    var shadowOffsetX: Double\n    var shadowOffsetY: Double\n    var shadowBlur: Double\n    var shadowColor: String\n}\n\npublic external interface CanvasFilters {\n    var filter: String\n}\n\npublic external interface CanvasRect {\n    fun clearRect(x: Double, y: Double, w: Double, h: Double)\n    fun fillRect(x: Double, y: Double, w: Double, h: Double)\n    fun strokeRect(x: Double, y: Double, w: Double, h: Double)\n}\n\npublic external interface CanvasDrawPath {\n    fun beginPath()\n    fun fill(fillRule: CanvasFillRule = definedExternally)\n    fun fill(path: Path2D, fillRule: CanvasFillRule = definedExternally)\n    fun stroke()\n    fun stroke(path: Path2D)\n    fun clip(fillRule: CanvasFillRule = definedExternally)\n    fun clip(path: Path2D, fillRule: CanvasFillRule = definedExternally)\n    fun resetClip()\n    fun isPointInPath(x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInPath(path: Path2D, x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInStroke(x: Double, y: Double): Boolean\n    fun isPointInStroke(path: Path2D, x: Double, y: Double): Boolean\n}\n\npublic external interface CanvasUserInterface {\n    fun drawFocusIfNeeded(element: Element)\n    fun drawFocusIfNeeded(path: Path2D, element: Element)\n    fun scrollPathIntoView()\n    fun scrollPathIntoView(path: Path2D)\n}\n\npublic external interface CanvasText {\n    fun fillText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally)\n    fun strokeText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally)\n    fun measureText(text: String): TextMetrics\n}\n\npublic external interface CanvasDrawImage {\n    fun drawImage(image: CanvasImageSource, dx: Double, dy: Double)\n    fun drawImage(image: CanvasImageSource, dx: Double, dy: Double, dw: Double, dh: Double)\n    fun drawImage(image: CanvasImageSource, sx: Double, sy: Double, sw: Double, sh: Double, dx: Double, dy: Double, dw: Double, dh: Double)\n}\n\npublic external interface CanvasHitRegion {\n    fun addHitRegion(options: HitRegionOptions = definedExternally)\n    fun removeHitRegion(id: String)\n    fun clearHitRegions()\n}\n\npublic external interface CanvasImageData {\n    fun createImageData(sw: Double, sh: Double): ImageData\n    fun createImageData(imagedata: ImageData): ImageData\n    fun getImageData(sx: Double, sy: Double, sw: Double, sh: Double): ImageData\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double)\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double, dirtyX: Double, dirtyY: Double, dirtyWidth: Double, dirtyHeight: Double)\n}\n\npublic external interface CanvasPathDrawingStyles {\n    var lineWidth: Double\n    var lineCap: CanvasLineCap\n    var lineJoin: CanvasLineJoin\n    var miterLimit: Double\n    var lineDashOffset: Double\n    fun setLineDash(segments: Array<Double>)\n    fun getLineDash(): Array<Double>\n}\n\npublic external interface CanvasTextDrawingStyles {\n    var font: String\n    var textAlign: CanvasTextAlign\n    var textBaseline: CanvasTextBaseline\n    var direction: CanvasDirection\n}\n\npublic external interface CanvasPath {\n    fun closePath()\n    fun moveTo(x: Double, y: Double)\n    fun lineTo(x: Double, y: Double)\n    fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double)\n    fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double)\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double)\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double)\n    fun rect(x: Double, y: Double, w: Double, h: Double)\n    fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally)\n    fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [CanvasGradient](https://developer.mozilla.org/en/docs/Web/API/CanvasGradient) to Kotlin\n */\npublic external abstract class CanvasGradient {\n    fun addColorStop(offset: Double, color: String)\n}\n\n/**\n * Exposes the JavaScript [CanvasPattern](https://developer.mozilla.org/en/docs/Web/API/CanvasPattern) to Kotlin\n */\npublic external abstract class CanvasPattern {\n    fun setTransform(transform: dynamic = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [TextMetrics](https://developer.mozilla.org/en/docs/Web/API/TextMetrics) to Kotlin\n */\npublic external abstract class TextMetrics {\n    open val width: Double\n    open val actualBoundingBoxLeft: Double\n    open val actualBoundingBoxRight: Double\n    open val fontBoundingBoxAscent: Double\n    open val fontBoundingBoxDescent: Double\n    open val actualBoundingBoxAscent: Double\n    open val actualBoundingBoxDescent: Double\n    open val emHeightAscent: Double\n    open val emHeightDescent: Double\n    open val hangingBaseline: Double\n    open val alphabeticBaseline: Double\n    open val ideographicBaseline: Double\n}\n\npublic external interface HitRegionOptions {\n    var path: Path2D? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillRule: CanvasFillRule? /* = CanvasFillRule.NONZERO */\n        get() = definedExternally\n        set(value) = definedExternally\n    var id: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var parentID: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cursor: String? /* = \"inherit\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var control: Element? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var label: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var role: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HitRegionOptions(path: Path2D? = null, fillRule: CanvasFillRule? = CanvasFillRule.NONZERO, id: String? = \"\", parentID: String? = null, cursor: String? = \"inherit\", control: Element? = null, label: String? = null, role: String? = null): HitRegionOptions {\n    val o = js(\"({})\")\n    o[\"path\"] = path\n    o[\"fillRule\"] = fillRule\n    o[\"id\"] = id\n    o[\"parentID\"] = parentID\n    o[\"cursor\"] = cursor\n    o[\"control\"] = control\n    o[\"label\"] = label\n    o[\"role\"] = role\n    return o\n}\n\n/**\n * Exposes the JavaScript [ImageData](https://developer.mozilla.org/en/docs/Web/API/ImageData) to Kotlin\n */\npublic external open class ImageData : ImageBitmapSource, TexImageSource {\n    constructor(sw: Int, sh: Int)\n    constructor(data: Uint8ClampedArray, sw: Int, sh: Int = definedExternally)\n    open val width: Int\n    open val height: Int\n    open val data: Uint8ClampedArray\n}\n\n/**\n * Exposes the JavaScript [Path2D](https://developer.mozilla.org/en/docs/Web/API/Path2D) to Kotlin\n */\npublic external open class Path2D() : CanvasPath {\n    constructor(path: Path2D)\n    constructor(paths: Array<Path2D>, fillRule: CanvasFillRule = definedExternally)\n    constructor(d: String)\n    fun addPath(path: Path2D, transform: dynamic = definedExternally)\n    override fun closePath()\n    override fun moveTo(x: Double, y: Double)\n    override fun lineTo(x: Double, y: Double)\n    override fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double)\n    override fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double)\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double)\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double)\n    override fun rect(x: Double, y: Double, w: Double, h: Double)\n    override fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */)\n    override fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */)\n}\n\n/**\n * Exposes the JavaScript [ImageBitmapRenderingContext](https://developer.mozilla.org/en/docs/Web/API/ImageBitmapRenderingContext) to Kotlin\n */\npublic external abstract class ImageBitmapRenderingContext {\n    open val canvas: HTMLCanvasElement\n    fun transferFromImageBitmap(bitmap: ImageBitmap?)\n}\n\npublic external interface ImageBitmapRenderingContextSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapRenderingContextSettings(alpha: Boolean? = true): ImageBitmapRenderingContextSettings {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomElementRegistry](https://developer.mozilla.org/en/docs/Web/API/CustomElementRegistry) to Kotlin\n */\npublic external abstract class CustomElementRegistry {\n    fun define(name: String, constructor: () -> dynamic, options: ElementDefinitionOptions = definedExternally)\n    fun get(name: String): Any?\n    fun whenDefined(name: String): Promise<Unit>\n}\n\npublic external interface ElementDefinitionOptions {\n    var extends: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementDefinitionOptions(extends: String? = undefined): ElementDefinitionOptions {\n    val o = js(\"({})\")\n    o[\"extends\"] = extends\n    return o\n}\n\npublic external interface ElementContentEditable {\n    var contentEditable: String\n    val isContentEditable: Boolean\n}\n\n/**\n * Exposes the JavaScript [DataTransfer](https://developer.mozilla.org/en/docs/Web/API/DataTransfer) to Kotlin\n */\npublic external abstract class DataTransfer {\n    open var dropEffect: String\n    open var effectAllowed: String\n    open val items: DataTransferItemList\n    open val types: Array<out String>\n    open val files: FileList\n    fun setDragImage(image: Element, x: Int, y: Int)\n    fun getData(format: String): String\n    fun setData(format: String, data: String)\n    fun clearData(format: String = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [DataTransferItemList](https://developer.mozilla.org/en/docs/Web/API/DataTransferItemList) to Kotlin\n */\npublic external abstract class DataTransferItemList {\n    open val length: Int\n    fun add(data: String, type: String): DataTransferItem?\n    fun add(data: File): DataTransferItem?\n    fun remove(index: Int)\n    fun clear()\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DataTransferItemList.get(index: Int): DataTransferItem? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DataTransferItem](https://developer.mozilla.org/en/docs/Web/API/DataTransferItem) to Kotlin\n */\npublic external abstract class DataTransferItem {\n    open val kind: String\n    open val type: String\n    fun getAsString(_callback: ((String) -> Unit)?)\n    fun getAsFile(): File?\n}\n\n/**\n * Exposes the JavaScript [DragEvent](https://developer.mozilla.org/en/docs/Web/API/DragEvent) to Kotlin\n */\npublic external open class DragEvent(type: String, eventInitDict: DragEventInit = definedExternally) : MouseEvent {\n    open val dataTransfer: DataTransfer?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface DragEventInit : MouseEventInit {\n    var dataTransfer: DataTransfer? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DragEventInit(dataTransfer: DataTransfer? = null, screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, region: String? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): DragEventInit {\n    val o = js(\"({})\")\n    o[\"dataTransfer\"] = dataTransfer\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"region\"] = region\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Window](https://developer.mozilla.org/en/docs/Web/API/Window) to Kotlin\n */\npublic external abstract class Window : EventTarget, GlobalEventHandlers, WindowEventHandlers, WindowOrWorkerGlobalScope, WindowSessionStorage, WindowLocalStorage, GlobalPerformance, UnionMessagePortOrWindowProxy {\n    open val window: Window\n    open val self: Window\n    open val document: Document\n    open var name: String\n    open val location: Location\n    open val history: History\n    open val customElements: CustomElementRegistry\n    open val locationbar: BarProp\n    open val menubar: BarProp\n    open val personalbar: BarProp\n    open val scrollbars: BarProp\n    open val statusbar: BarProp\n    open val toolbar: BarProp\n    open var status: String\n    open val closed: Boolean\n    open val frames: Window\n    open val length: Int\n    open val top: Window\n    open var opener: Any?\n    open val parent: Window\n    open val frameElement: Element?\n    open val navigator: Navigator\n    open val applicationCache: ApplicationCache\n    open val external: External\n    open val screen: Screen\n    open val innerWidth: Int\n    open val innerHeight: Int\n    open val scrollX: Double\n    open val pageXOffset: Double\n    open val scrollY: Double\n    open val pageYOffset: Double\n    open val screenX: Int\n    open val screenY: Int\n    open val outerWidth: Int\n    open val outerHeight: Int\n    open val devicePixelRatio: Double\n    fun close()\n    fun stop()\n    fun focus()\n    fun blur()\n    fun open(url: String = definedExternally, target: String = definedExternally, features: String = definedExternally): Window?\n    fun alert()\n    fun alert(message: String)\n    fun confirm(message: String = definedExternally): Boolean\n    fun prompt(message: String = definedExternally, default: String = definedExternally): String?\n    fun print()\n    fun requestAnimationFrame(callback: (Double) -> Unit): Int\n    fun cancelAnimationFrame(handle: Int)\n    fun postMessage(message: Any?, targetOrigin: String, transfer: Array<dynamic> = definedExternally)\n    fun captureEvents()\n    fun releaseEvents()\n    fun matchMedia(query: String): MediaQueryList\n    fun moveTo(x: Int, y: Int)\n    fun moveBy(x: Int, y: Int)\n    fun resizeTo(x: Int, y: Int)\n    fun resizeBy(x: Int, y: Int)\n    fun scroll(options: ScrollToOptions = definedExternally)\n    fun scroll(x: Double, y: Double)\n    fun scrollTo(options: ScrollToOptions = definedExternally)\n    fun scrollTo(x: Double, y: Double)\n    fun scrollBy(options: ScrollToOptions = definedExternally)\n    fun scrollBy(x: Double, y: Double)\n    fun getComputedStyle(elt: Element, pseudoElt: String? = definedExternally): CSSStyleDeclaration\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Window.get(name: String): dynamic = asDynamic()[name]\n\npublic external abstract class BarProp {\n    open val visible: Boolean\n}\n\n/**\n * Exposes the JavaScript [History](https://developer.mozilla.org/en/docs/Web/API/History) to Kotlin\n */\npublic external abstract class History {\n    open val length: Int\n    open var scrollRestoration: ScrollRestoration\n    open val state: Any?\n    fun go(delta: Int = definedExternally)\n    fun back()\n    fun forward()\n    fun pushState(data: Any?, title: String, url: String? = definedExternally)\n    fun replaceState(data: Any?, title: String, url: String? = definedExternally)\n}\n\n/**\n * Exposes the JavaScript [Location](https://developer.mozilla.org/en/docs/Web/API/Location) to Kotlin\n */\npublic external abstract class Location {\n    open var href: String\n    open val origin: String\n    open var protocol: String\n    open var host: String\n    open var hostname: String\n    open var port: String\n    open var pathname: String\n    open var search: String\n    open var hash: String\n    open val ancestorOrigins: Array<out String>\n    fun assign(url: String)\n    fun replace(url: String)\n    fun reload()\n}\n\n/**\n * Exposes the JavaScript [PopStateEvent](https://developer.mozilla.org/en/docs/Web/API/PopStateEvent) to Kotlin\n */\npublic external open class PopStateEvent(type: String, eventInitDict: PopStateEventInit = definedExternally) : Event {\n    open val state: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PopStateEventInit : EventInit {\n    var state: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PopStateEventInit(state: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PopStateEventInit {\n    val o = js(\"({})\")\n    o[\"state\"] = state\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [HashChangeEvent](https://developer.mozilla.org/en/docs/Web/API/HashChangeEvent) to Kotlin\n */\npublic external open class HashChangeEvent(type: String, eventInitDict: HashChangeEventInit = definedExternally) : Event {\n    open val oldURL: String\n    open val newURL: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface HashChangeEventInit : EventInit {\n    var oldURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HashChangeEventInit(oldURL: String? = \"\", newURL: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): HashChangeEventInit {\n    val o = js(\"({})\")\n    o[\"oldURL\"] = oldURL\n    o[\"newURL\"] = newURL\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PageTransitionEvent](https://developer.mozilla.org/en/docs/Web/API/PageTransitionEvent) to Kotlin\n */\npublic external open class PageTransitionEvent(type: String, eventInitDict: PageTransitionEventInit = definedExternally) : Event {\n    open val persisted: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PageTransitionEventInit : EventInit {\n    var persisted: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PageTransitionEventInit(persisted: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PageTransitionEventInit {\n    val o = js(\"({})\")\n    o[\"persisted\"] = persisted\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [BeforeUnloadEvent](https://developer.mozilla.org/en/docs/Web/API/BeforeUnloadEvent) to Kotlin\n */\npublic external open class BeforeUnloadEvent : Event {\n    var returnValue: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external abstract class ApplicationCache : EventTarget {\n    open val status: Short\n    open var onchecking: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onnoupdate: ((Event) -> dynamic)?\n    open var ondownloading: ((Event) -> dynamic)?\n    open var onprogress: ((ProgressEvent) -> dynamic)?\n    open var onupdateready: ((Event) -> dynamic)?\n    open var oncached: ((Event) -> dynamic)?\n    open var onobsolete: ((Event) -> dynamic)?\n    fun update()\n    fun abort()\n    fun swapCache()\n\n    companion object {\n        val UNCACHED: Short\n        val IDLE: Short\n        val CHECKING: Short\n        val DOWNLOADING: Short\n        val UPDATEREADY: Short\n        val OBSOLETE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NavigatorOnLine](https://developer.mozilla.org/en/docs/Web/API/NavigatorOnLine) to Kotlin\n */\npublic external interface NavigatorOnLine {\n    val onLine: Boolean\n}\n\n/**\n * Exposes the JavaScript [ErrorEvent](https://developer.mozilla.org/en/docs/Web/API/ErrorEvent) to Kotlin\n */\npublic external open class ErrorEvent(type: String, eventInitDict: ErrorEventInit = definedExternally) : Event {\n    open val message: String\n    open val filename: String\n    open val lineno: Int\n    open val colno: Int\n    open val error: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface ErrorEventInit : EventInit {\n    var message: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var filename: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lineno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var error: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ErrorEventInit(message: String? = \"\", filename: String? = \"\", lineno: Int? = 0, colno: Int? = 0, error: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ErrorEventInit {\n    val o = js(\"({})\")\n    o[\"message\"] = message\n    o[\"filename\"] = filename\n    o[\"lineno\"] = lineno\n    o[\"colno\"] = colno\n    o[\"error\"] = error\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [PromiseRejectionEvent](https://developer.mozilla.org/en/docs/Web/API/PromiseRejectionEvent) to Kotlin\n */\npublic external open class PromiseRejectionEvent(type: String, eventInitDict: PromiseRejectionEventInit) : Event {\n    open val promise: Promise<Any?>\n    open val reason: Any?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface PromiseRejectionEventInit : EventInit {\n    var promise: Promise<Any?>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PromiseRejectionEventInit(promise: Promise<Any?>?, reason: Any? = undefined, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PromiseRejectionEventInit {\n    val o = js(\"({})\")\n    o[\"promise\"] = promise\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [GlobalEventHandlers](https://developer.mozilla.org/en/docs/Web/API/GlobalEventHandlers) to Kotlin\n */\npublic external interface GlobalEventHandlers {\n    var onabort: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onblur: ((FocusEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncancel: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncanplay: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncanplaythrough: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onchange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onclick: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onclose: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncontextmenu: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncuechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondblclick: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondrag: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragend: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragenter: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragexit: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragleave: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragover: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondragstart: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondrop: ((DragEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ondurationchange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onemptied: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onended: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onfocus: ((FocusEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oninput: ((InputEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oninvalid: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeydown: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeypress: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onkeyup: ((KeyboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onload: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadeddata: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadedmetadata: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadend: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmousedown: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseenter: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseleave: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmousemove: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseout: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseover: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmouseup: ((MouseEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onwheel: ((WheelEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpause: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onplay: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onplaying: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onprogress: ((ProgressEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onratechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onreset: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onresize: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onscroll: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onseeked: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onseeking: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onselect: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onshow: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onstalled: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onsubmit: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onsuspend: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ontimeupdate: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ontoggle: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onvolumechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onwaiting: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ongotpointercapture: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onlostpointercapture: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerdown: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointermove: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerup: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointercancel: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerover: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerout: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerenter: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpointerleave: ((PointerEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [WindowEventHandlers](https://developer.mozilla.org/en/docs/Web/API/WindowEventHandlers) to Kotlin\n */\npublic external interface WindowEventHandlers {\n    var onafterprint: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onbeforeprint: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onbeforeunload: ((BeforeUnloadEvent) -> String?)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onhashchange: ((HashChangeEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onlanguagechange: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onmessage: ((MessageEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onoffline: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ononline: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpagehide: ((PageTransitionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpageshow: ((PageTransitionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpopstate: ((PopStateEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onrejectionhandled: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onstorage: ((StorageEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onunload: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\npublic external interface DocumentAndElementEventHandlers {\n    var oncopy: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var oncut: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    var onpaste: ((ClipboardEvent) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [WindowOrWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WindowOrWorkerGlobalScope) to Kotlin\n */\npublic external interface WindowOrWorkerGlobalScope {\n    val origin: String\n    val caches: CacheStorage\n    fun btoa(data: String): String\n    fun atob(data: String): String\n    fun setTimeout(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearTimeout(handle: Int = definedExternally)\n    fun setInterval(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearInterval(handle: Int = definedExternally)\n    fun createImageBitmap(image: ImageBitmapSource, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun createImageBitmap(image: ImageBitmapSource, sx: Int, sy: Int, sw: Int, sh: Int, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun fetch(input: dynamic, init: RequestInit = definedExternally): Promise<Response>\n}\n\n/**\n * Exposes the JavaScript [Navigator](https://developer.mozilla.org/en/docs/Web/API/Navigator) to Kotlin\n */\npublic external abstract class Navigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorContentUtils, NavigatorCookies, NavigatorPlugins, NavigatorConcurrentHardware {\n    open val clipboard: Clipboard\n    open val mediaDevices: MediaDevices\n    open val maxTouchPoints: Int\n    open val serviceWorker: ServiceWorkerContainer\n    fun getUserMedia(constraints: MediaStreamConstraints, successCallback: (MediaStream) -> Unit, errorCallback: (dynamic) -> Unit)\n    fun vibrate(pattern: dynamic): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorID](https://developer.mozilla.org/en/docs/Web/API/NavigatorID) to Kotlin\n */\npublic external interface NavigatorID {\n    val appCodeName: String\n    val appName: String\n    val appVersion: String\n    val platform: String\n    val product: String\n    val productSub: String\n    val userAgent: String\n    val vendor: String\n    val vendorSub: String\n    val oscpu: String\n    fun taintEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorLanguage](https://developer.mozilla.org/en/docs/Web/API/NavigatorLanguage) to Kotlin\n */\npublic external interface NavigatorLanguage {\n    val language: String\n    val languages: Array<out String>\n}\n\npublic external interface NavigatorContentUtils {\n    fun registerProtocolHandler(scheme: String, url: String, title: String)\n    fun registerContentHandler(mimeType: String, url: String, title: String)\n    fun isProtocolHandlerRegistered(scheme: String, url: String): String\n    fun isContentHandlerRegistered(mimeType: String, url: String): String\n    fun unregisterProtocolHandler(scheme: String, url: String)\n    fun unregisterContentHandler(mimeType: String, url: String)\n}\n\npublic external interface NavigatorCookies {\n    val cookieEnabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorPlugins](https://developer.mozilla.org/en/docs/Web/API/NavigatorPlugins) to Kotlin\n */\npublic external interface NavigatorPlugins {\n    val plugins: PluginArray\n    val mimeTypes: MimeTypeArray\n    fun javaEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [PluginArray](https://developer.mozilla.org/en/docs/Web/API/PluginArray) to Kotlin\n */\npublic external abstract class PluginArray : ItemArrayLike<Plugin> {\n    fun refresh(reload: Boolean = definedExternally)\n    override fun item(index: Int): Plugin?\n    fun namedItem(name: String): Plugin?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun PluginArray.get(index: Int): Plugin? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun PluginArray.get(name: String): Plugin? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeTypeArray](https://developer.mozilla.org/en/docs/Web/API/MimeTypeArray) to Kotlin\n */\npublic external abstract class MimeTypeArray : ItemArrayLike<MimeType> {\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MimeTypeArray.get(index: Int): MimeType? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun MimeTypeArray.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Plugin](https://developer.mozilla.org/en/docs/Web/API/Plugin) to Kotlin\n */\npublic external abstract class Plugin : ItemArrayLike<MimeType> {\n    open val name: String\n    open val description: String\n    open val filename: String\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Plugin.get(index: Int): MimeType? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Plugin.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeType](https://developer.mozilla.org/en/docs/Web/API/MimeType) to Kotlin\n */\npublic external abstract class MimeType {\n    open val type: String\n    open val description: String\n    open val suffixes: String\n    open val enabledPlugin: Plugin\n}\n\n/**\n * Exposes the JavaScript [ImageBitmap](https://developer.mozilla.org/en/docs/Web/API/ImageBitmap) to Kotlin\n */\npublic external abstract class ImageBitmap : CanvasImageSource, TexImageSource {\n    open val width: Int\n    open val height: Int\n    fun close()\n}\n\npublic external interface ImageBitmapOptions {\n    var imageOrientation: ImageOrientation? /* = ImageOrientation.NONE */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultiplyAlpha: PremultiplyAlpha? /* = PremultiplyAlpha.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colorSpaceConversion: ColorSpaceConversion? /* = ColorSpaceConversion.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeWidth: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeHeight: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeQuality: ResizeQuality? /* = ResizeQuality.LOW */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapOptions(imageOrientation: ImageOrientation? = ImageOrientation.NONE, premultiplyAlpha: PremultiplyAlpha? = PremultiplyAlpha.DEFAULT, colorSpaceConversion: ColorSpaceConversion? = ColorSpaceConversion.DEFAULT, resizeWidth: Int? = undefined, resizeHeight: Int? = undefined, resizeQuality: ResizeQuality? = ResizeQuality.LOW): ImageBitmapOptions {\n    val o = js(\"({})\")\n    o[\"imageOrientation\"] = imageOrientation\n    o[\"premultiplyAlpha\"] = premultiplyAlpha\n    o[\"colorSpaceConversion\"] = colorSpaceConversion\n    o[\"resizeWidth\"] = resizeWidth\n    o[\"resizeHeight\"] = resizeHeight\n    o[\"resizeQuality\"] = resizeQuality\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageEvent](https://developer.mozilla.org/en/docs/Web/API/MessageEvent) to Kotlin\n */\npublic external open class MessageEvent(type: String, eventInitDict: MessageEventInit = definedExternally) : Event {\n    open val data: Any?\n    open val origin: String\n    open val lastEventId: String\n    open val source: UnionMessagePortOrWindowProxy?\n    open val ports: Array<out MessagePort>\n    fun initMessageEvent(type: String, bubbles: Boolean, cancelable: Boolean, data: Any?, origin: String, lastEventId: String, source: UnionMessagePortOrWindowProxy?, ports: Array<MessagePort>)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MessageEventInit : EventInit {\n    var data: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lastEventId: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var source: UnionMessagePortOrWindowProxy? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var ports: Array<MessagePort>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MessageEventInit(data: Any? = null, origin: String? = \"\", lastEventId: String? = \"\", source: UnionMessagePortOrWindowProxy? = null, ports: Array<MessagePort>? = arrayOf(), bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MessageEventInit {\n    val o = js(\"({})\")\n    o[\"data\"] = data\n    o[\"origin\"] = origin\n    o[\"lastEventId\"] = lastEventId\n    o[\"source\"] = source\n    o[\"ports\"] = ports\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [EventSource](https://developer.mozilla.org/en/docs/Web/API/EventSource) to Kotlin\n */\npublic external open class EventSource(url: String, eventSourceInitDict: EventSourceInit = definedExternally) : EventTarget {\n    open val url: String\n    open val withCredentials: Boolean\n    open val readyState: Short\n    var onopen: ((Event) -> dynamic)?\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    fun close()\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSED: Short\n    }\n}\n\npublic external interface EventSourceInit {\n    var withCredentials: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventSourceInit(withCredentials: Boolean? = false): EventSourceInit {\n    val o = js(\"({})\")\n    o[\"withCredentials\"] = withCredentials\n    return o\n}\n\n/**\n * Exposes the JavaScript [WebSocket](https://developer.mozilla.org/en/docs/Web/API/WebSocket) to Kotlin\n */\npublic external open class WebSocket(url: String, protocols: dynamic = definedExternally) : EventTarget {\n    open val url: String\n    open val readyState: Short\n    open val bufferedAmount: Number\n    var onopen: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    open val extensions: String\n    open val protocol: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var binaryType: BinaryType\n    fun close(code: Short = definedExternally, reason: String = definedExternally)\n    fun send(data: String)\n    fun send(data: Blob)\n    fun send(data: ArrayBuffer)\n    fun send(data: ArrayBufferView)\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSING: Short\n        val CLOSED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CloseEvent](https://developer.mozilla.org/en/docs/Web/API/CloseEvent) to Kotlin\n */\npublic external open class CloseEvent(type: String, eventInitDict: CloseEventInit = definedExternally) : Event {\n    open val wasClean: Boolean\n    open val code: Short\n    open val reason: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CloseEventInit : EventInit {\n    var wasClean: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var code: Short? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CloseEventInit(wasClean: Boolean? = false, code: Short? = 0, reason: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CloseEventInit {\n    val o = js(\"({})\")\n    o[\"wasClean\"] = wasClean\n    o[\"code\"] = code\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageChannel](https://developer.mozilla.org/en/docs/Web/API/MessageChannel) to Kotlin\n */\npublic external open class MessageChannel {\n    open val port1: MessagePort\n    open val port2: MessagePort\n}\n\n/**\n * Exposes the JavaScript [MessagePort](https://developer.mozilla.org/en/docs/Web/API/MessagePort) to Kotlin\n */\npublic external abstract class MessagePort : EventTarget, UnionMessagePortOrWindowProxy, UnionMessagePortOrServiceWorker, UnionClientOrMessagePortOrServiceWorker {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n    fun start()\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [BroadcastChannel](https://developer.mozilla.org/en/docs/Web/API/BroadcastChannel) to Kotlin\n */\npublic external open class BroadcastChannel(name: String) : EventTarget {\n    open val name: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?)\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [WorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WorkerGlobalScope) to Kotlin\n */\npublic external abstract class WorkerGlobalScope : EventTarget, WindowOrWorkerGlobalScope, GlobalPerformance {\n    open val self: WorkerGlobalScope\n    open val location: WorkerLocation\n    open val navigator: WorkerNavigator\n    open var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    open var onlanguagechange: ((Event) -> dynamic)?\n    open var onoffline: ((Event) -> dynamic)?\n    open var ononline: ((Event) -> dynamic)?\n    open var onrejectionhandled: ((Event) -> dynamic)?\n    open var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n    fun importScripts(vararg urls: String)\n}\n\n/**\n * Exposes the JavaScript [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/DedicatedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class DedicatedWorkerGlobalScope : WorkerGlobalScope {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [SharedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/SharedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class SharedWorkerGlobalScope : WorkerGlobalScope {\n    open val name: String\n    open val applicationCache: ApplicationCache\n    open var onconnect: ((Event) -> dynamic)?\n    fun close()\n}\n\n/**\n * Exposes the JavaScript [AbstractWorker](https://developer.mozilla.org/en/docs/Web/API/AbstractWorker) to Kotlin\n */\npublic external interface AbstractWorker {\n    var onerror: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n/**\n * Exposes the JavaScript [Worker](https://developer.mozilla.org/en/docs/Web/API/Worker) to Kotlin\n */\npublic external open class Worker(scriptURL: String, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    var onmessage: ((MessageEvent) -> dynamic)?\n    override var onerror: ((Event) -> dynamic)?\n    fun terminate()\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally)\n}\n\npublic external interface WorkerOptions {\n    var type: WorkerType? /* = WorkerType.CLASSIC */\n        get() = definedExternally\n        set(value) = definedExternally\n    var credentials: RequestCredentials? /* = RequestCredentials.OMIT */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WorkerOptions(type: WorkerType? = WorkerType.CLASSIC, credentials: RequestCredentials? = RequestCredentials.OMIT): WorkerOptions {\n    val o = js(\"({})\")\n    o[\"type\"] = type\n    o[\"credentials\"] = credentials\n    return o\n}\n\n/**\n * Exposes the JavaScript [SharedWorker](https://developer.mozilla.org/en/docs/Web/API/SharedWorker) to Kotlin\n */\npublic external open class SharedWorker(scriptURL: String, name: String = definedExternally, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    open val port: MessagePort\n    override var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [NavigatorConcurrentHardware](https://developer.mozilla.org/en/docs/Web/API/NavigatorConcurrentHardware) to Kotlin\n */\npublic external interface NavigatorConcurrentHardware {\n    val hardwareConcurrency: Number\n}\n\n/**\n * Exposes the JavaScript [WorkerNavigator](https://developer.mozilla.org/en/docs/Web/API/WorkerNavigator) to Kotlin\n */\npublic external abstract class WorkerNavigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n}\n\n/**\n * Exposes the JavaScript [WorkerLocation](https://developer.mozilla.org/en/docs/Web/API/WorkerLocation) to Kotlin\n */\npublic external abstract class WorkerLocation {\n    open val href: String\n    open val origin: String\n    open val protocol: String\n    open val host: String\n    open val hostname: String\n    open val port: String\n    open val pathname: String\n    open val search: String\n    open val hash: String\n}\n\n/**\n * Exposes the JavaScript [Storage](https://developer.mozilla.org/en/docs/Web/API/Storage) to Kotlin\n */\npublic external abstract class Storage {\n    open val length: Int\n    fun key(index: Int): String?\n    fun removeItem(key: String)\n    fun clear()\n    fun getItem(key: String): String?\n    fun setItem(key: String, value: String)\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Storage.get(key: String): String? = asDynamic()[key]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Storage.set(key: String, value: String) { asDynamic()[key] = value }\n\n/**\n * Exposes the JavaScript [WindowSessionStorage](https://developer.mozilla.org/en/docs/Web/API/WindowSessionStorage) to Kotlin\n */\npublic external interface WindowSessionStorage {\n    val sessionStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [WindowLocalStorage](https://developer.mozilla.org/en/docs/Web/API/WindowLocalStorage) to Kotlin\n */\npublic external interface WindowLocalStorage {\n    val localStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [StorageEvent](https://developer.mozilla.org/en/docs/Web/API/StorageEvent) to Kotlin\n */\npublic external open class StorageEvent(type: String, eventInitDict: StorageEventInit = definedExternally) : Event {\n    open val key: String?\n    open val oldValue: String?\n    open val newValue: String?\n    open val url: String\n    open val storageArea: Storage?\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface StorageEventInit : EventInit {\n    var key: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var oldValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var url: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var storageArea: Storage? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun StorageEventInit(key: String? = null, oldValue: String? = null, newValue: String? = null, url: String? = \"\", storageArea: Storage? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): StorageEventInit {\n    val o = js(\"({})\")\n    o[\"key\"] = key\n    o[\"oldValue\"] = oldValue\n    o[\"newValue\"] = newValue\n    o[\"url\"] = url\n    o[\"storageArea\"] = storageArea\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external abstract class HTMLAppletElement : HTMLElement {\n    open var align: String\n    open var alt: String\n    open var archive: String\n    open var code: String\n    open var codeBase: String\n    open var height: String\n    open var hspace: Int\n    open var name: String\n    open var _object: String\n    open var vspace: Int\n    open var width: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMarqueeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMarqueeElement) to Kotlin\n */\npublic external abstract class HTMLMarqueeElement : HTMLElement {\n    open var behavior: String\n    open var bgColor: String\n    open var direction: String\n    open var height: String\n    open var hspace: Int\n    open var loop: Int\n    open var scrollAmount: Int\n    open var scrollDelay: Int\n    open var trueSpeed: Boolean\n    open var vspace: Int\n    open var width: String\n    open var onbounce: ((Event) -> dynamic)?\n    open var onfinish: ((Event) -> dynamic)?\n    open var onstart: ((Event) -> dynamic)?\n    fun start()\n    fun stop()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFrameSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFrameSetElement) to Kotlin\n */\npublic external abstract class HTMLFrameSetElement : HTMLElement, WindowEventHandlers {\n    open var cols: String\n    open var rows: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLFrameElement : HTMLElement {\n    open var name: String\n    open var scrolling: String\n    open var src: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var noResize: Boolean\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var marginHeight: String\n    open var marginWidth: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external abstract class HTMLDirectoryElement : HTMLElement {\n    open var compact: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLFontElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFontElement) to Kotlin\n */\npublic external abstract class HTMLFontElement : HTMLElement {\n    open var color: String\n    open var face: String\n    open var size: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface External {\n    fun AddSearchProvider()\n    fun IsSearchProviderInstalled()\n}\n\npublic external interface EventInit {\n    var bubbles: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cancelable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventInit(bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): EventInit {\n    val o = js(\"({})\")\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomEvent](https://developer.mozilla.org/en/docs/Web/API/CustomEvent) to Kotlin\n */\npublic external open class CustomEvent(type: String, eventInitDict: CustomEventInit = definedExternally) : Event {\n    open val detail: Any?\n    fun initCustomEvent(type: String, bubbles: Boolean, cancelable: Boolean, detail: Any?)\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface CustomEventInit : EventInit {\n    var detail: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CustomEventInit(detail: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CustomEventInit {\n    val o = js(\"({})\")\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external interface EventListenerOptions {\n    var capture: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventListenerOptions(capture: Boolean? = false): EventListenerOptions {\n    val o = js(\"({})\")\n    o[\"capture\"] = capture\n    return o\n}\n\npublic external interface AddEventListenerOptions : EventListenerOptions {\n    var passive: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var once: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AddEventListenerOptions(passive: Boolean? = false, once: Boolean? = false, capture: Boolean? = false): AddEventListenerOptions {\n    val o = js(\"({})\")\n    o[\"passive\"] = passive\n    o[\"once\"] = once\n    o[\"capture\"] = capture\n    return o\n}\n\npublic external interface NonElementParentNode {\n    fun getElementById(elementId: String): Element?\n}\n\n/**\n * Exposes the JavaScript [DocumentOrShadowRoot](https://developer.mozilla.org/en/docs/Web/API/DocumentOrShadowRoot) to Kotlin\n */\npublic external interface DocumentOrShadowRoot {\n    val fullscreenElement: Element?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [ParentNode](https://developer.mozilla.org/en/docs/Web/API/ParentNode) to Kotlin\n */\npublic external interface ParentNode {\n    val children: HTMLCollection\n    val firstElementChild: Element?\n        get() = definedExternally\n    val lastElementChild: Element?\n        get() = definedExternally\n    val childElementCount: Int\n    fun prepend(vararg nodes: dynamic)\n    fun append(vararg nodes: dynamic)\n    fun querySelector(selectors: String): Element?\n    fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [NonDocumentTypeChildNode](https://developer.mozilla.org/en/docs/Web/API/NonDocumentTypeChildNode) to Kotlin\n */\npublic external interface NonDocumentTypeChildNode {\n    val previousElementSibling: Element?\n        get() = definedExternally\n    val nextElementSibling: Element?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [ChildNode](https://developer.mozilla.org/en/docs/Web/API/ChildNode) to Kotlin\n */\npublic external interface ChildNode {\n    fun before(vararg nodes: dynamic)\n    fun after(vararg nodes: dynamic)\n    fun replaceWith(vararg nodes: dynamic)\n    fun remove()\n}\n\n/**\n * Exposes the JavaScript [Slotable](https://developer.mozilla.org/en/docs/Web/API/Slotable) to Kotlin\n */\npublic external interface Slotable {\n    val assignedSlot: HTMLSlotElement?\n        get() = definedExternally\n}\n\n/**\n * Exposes the JavaScript [NodeList](https://developer.mozilla.org/en/docs/Web/API/NodeList) to Kotlin\n */\npublic external abstract class NodeList : ItemArrayLike<Node> {\n    override fun item(index: Int): Node?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NodeList.get(index: Int): Node? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [HTMLCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLCollection) to Kotlin\n */\npublic external abstract class HTMLCollection : ItemArrayLike<Element>, UnionElementOrHTMLCollection {\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): Element?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLCollection.get(index: Int): Element? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun HTMLCollection.get(name: String): Element? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver) to Kotlin\n */\npublic external open class MutationObserver(callback: (Array<MutationRecord>, MutationObserver) -> Unit) {\n    fun observe(target: Node, options: MutationObserverInit = definedExternally)\n    fun disconnect()\n    fun takeRecords(): Array<MutationRecord>\n}\n\n/**\n * Exposes the JavaScript [MutationObserverInit](https://developer.mozilla.org/en/docs/Web/API/MutationObserverInit) to Kotlin\n */\npublic external interface MutationObserverInit {\n    var childList: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributes: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterData: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var subtree: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterDataOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeFilter: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MutationObserverInit(childList: Boolean? = false, attributes: Boolean? = undefined, characterData: Boolean? = undefined, subtree: Boolean? = false, attributeOldValue: Boolean? = undefined, characterDataOldValue: Boolean? = undefined, attributeFilter: Array<String>? = undefined): MutationObserverInit {\n    val o = js(\"({})\")\n    o[\"childList\"] = childList\n    o[\"attributes\"] = attributes\n    o[\"characterData\"] = characterData\n    o[\"subtree\"] = subtree\n    o[\"attributeOldValue\"] = attributeOldValue\n    o[\"characterDataOldValue\"] = characterDataOldValue\n    o[\"attributeFilter\"] = attributeFilter\n    return o\n}\n\n/**\n * Exposes the JavaScript [MutationRecord](https://developer.mozilla.org/en/docs/Web/API/MutationRecord) to Kotlin\n */\npublic external abstract class MutationRecord {\n    open val type: String\n    open val target: Node\n    open val addedNodes: NodeList\n    open val removedNodes: NodeList\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open val attributeName: String?\n    open val attributeNamespace: String?\n    open val oldValue: String?\n}\n\n/**\n * Exposes the JavaScript [Node](https://developer.mozilla.org/en/docs/Web/API/Node) to Kotlin\n */\npublic external abstract class Node : EventTarget {\n    open val nodeType: Short\n    open val nodeName: String\n    open val baseURI: String\n    open val isConnected: Boolean\n    open val ownerDocument: Document?\n    open val parentNode: Node?\n    open val parentElement: Element?\n    open val childNodes: NodeList\n    open val firstChild: Node?\n    open val lastChild: Node?\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open var nodeValue: String?\n    open var textContent: String?\n    fun getRootNode(options: GetRootNodeOptions = definedExternally): Node\n    fun hasChildNodes(): Boolean\n    fun normalize()\n    fun cloneNode(deep: Boolean = definedExternally): Node\n    fun isEqualNode(otherNode: Node?): Boolean\n    fun isSameNode(otherNode: Node?): Boolean\n    fun compareDocumentPosition(other: Node): Short\n    fun contains(other: Node?): Boolean\n    fun lookupPrefix(namespace: String?): String?\n    fun lookupNamespaceURI(prefix: String?): String?\n    fun isDefaultNamespace(namespace: String?): Boolean\n    fun insertBefore(node: Node, child: Node?): Node\n    fun appendChild(node: Node): Node\n    fun replaceChild(node: Node, child: Node): Node\n    fun removeChild(child: Node): Node\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface GetRootNodeOptions {\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun GetRootNodeOptions(composed: Boolean? = false): GetRootNodeOptions {\n    val o = js(\"({})\")\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Document](https://developer.mozilla.org/en/docs/Web/API/Document) to Kotlin\n */\npublic external open class Document : Node, GlobalEventHandlers, DocumentAndElementEventHandlers, NonElementParentNode, DocumentOrShadowRoot, ParentNode, GeometryUtils {\n    open val implementation: DOMImplementation\n    open val URL: String\n    open val documentURI: String\n    open val origin: String\n    open val compatMode: String\n    open val characterSet: String\n    open val charset: String\n    open val inputEncoding: String\n    open val contentType: String\n    open val doctype: DocumentType?\n    open val documentElement: Element?\n    open val location: Location?\n    var domain: String\n    open val referrer: String\n    var cookie: String\n    open val lastModified: String\n    open val readyState: DocumentReadyState\n    var title: String\n    var dir: String\n    var body: HTMLElement?\n    open val head: HTMLHeadElement?\n    open val images: HTMLCollection\n    open val embeds: HTMLCollection\n    open val plugins: HTMLCollection\n    open val links: HTMLCollection\n    open val forms: HTMLCollection\n    open val scripts: HTMLCollection\n    open val currentScript: HTMLOrSVGScriptElement?\n    open val defaultView: Window?\n    open val activeElement: Element?\n    var designMode: String\n    var onreadystatechange: ((Event) -> dynamic)?\n    var fgColor: String\n    var linkColor: String\n    var vlinkColor: String\n    var alinkColor: String\n    var bgColor: String\n    open val anchors: HTMLCollection\n    open val applets: HTMLCollection\n    open val all: HTMLAllCollection\n    open val scrollingElement: Element?\n    open val styleSheets: StyleSheetList\n    open val rootElement: SVGSVGElement?\n    open val fullscreenEnabled: Boolean\n    open val fullscreen: Boolean\n    var onfullscreenchange: ((Event) -> dynamic)?\n    var onfullscreenerror: ((Event) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override val fullscreenElement: Element?\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun createElement(localName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createElementNS(namespace: String?, qualifiedName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createDocumentFragment(): DocumentFragment\n    fun createTextNode(data: String): Text\n    fun createCDATASection(data: String): CDATASection\n    fun createComment(data: String): Comment\n    fun createProcessingInstruction(target: String, data: String): ProcessingInstruction\n    fun importNode(node: Node, deep: Boolean = definedExternally): Node\n    fun adoptNode(node: Node): Node\n    fun createAttribute(localName: String): Attr\n    fun createAttributeNS(namespace: String?, qualifiedName: String): Attr\n    fun createEvent(`interface`: String): Event\n    fun createRange(): Range\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): NodeIterator\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): NodeIterator\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): TreeWalker\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): TreeWalker\n    fun getElementsByName(elementName: String): NodeList\n    fun open(type: String = definedExternally, replace: String = definedExternally): Document\n    fun open(url: String, name: String, features: String): Window\n    fun close()\n    fun write(vararg text: String)\n    fun writeln(vararg text: String)\n    fun hasFocus(): Boolean\n    fun execCommand(commandId: String, showUI: Boolean = definedExternally, value: String = definedExternally): Boolean\n    fun queryCommandEnabled(commandId: String): Boolean\n    fun queryCommandIndeterm(commandId: String): Boolean\n    fun queryCommandState(commandId: String): Boolean\n    fun queryCommandSupported(commandId: String): Boolean\n    fun queryCommandValue(commandId: String): String\n    fun clear()\n    fun captureEvents()\n    fun releaseEvents()\n    fun elementFromPoint(x: Double, y: Double): Element?\n    fun elementsFromPoint(x: Double, y: Double): Array<Element>\n    fun caretPositionFromPoint(x: Double, y: Double): CaretPosition?\n    fun createTouch(view: Window, target: EventTarget, identifier: Int, pageX: Int, pageY: Int, screenX: Int, screenY: Int): Touch\n    fun createTouchList(vararg touches: Touch): TouchList\n    fun exitFullscreen(): Promise<Unit>\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Document.get(name: String): dynamic = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [XMLDocument](https://developer.mozilla.org/en/docs/Web/API/XMLDocument) to Kotlin\n */\npublic external open class XMLDocument : Document {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface ElementCreationOptions {\n    var `is`: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementCreationOptions(`is`: String? = undefined): ElementCreationOptions {\n    val o = js(\"({})\")\n    o[\"is\"] = `is`\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMImplementation](https://developer.mozilla.org/en/docs/Web/API/DOMImplementation) to Kotlin\n */\npublic external abstract class DOMImplementation {\n    fun createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType\n    fun createDocument(namespace: String?, qualifiedName: String, doctype: DocumentType? = definedExternally): XMLDocument\n    fun createHTMLDocument(title: String = definedExternally): Document\n    fun hasFeature(): Boolean\n}\n\n/**\n * Exposes the JavaScript [DocumentType](https://developer.mozilla.org/en/docs/Web/API/DocumentType) to Kotlin\n */\npublic external abstract class DocumentType : Node, ChildNode {\n    open val name: String\n    open val publicId: String\n    open val systemId: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [DocumentFragment](https://developer.mozilla.org/en/docs/Web/API/DocumentFragment) to Kotlin\n */\npublic external open class DocumentFragment : Node, NonElementParentNode, ParentNode {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ShadowRoot](https://developer.mozilla.org/en/docs/Web/API/ShadowRoot) to Kotlin\n */\npublic external open class ShadowRoot : DocumentFragment, DocumentOrShadowRoot {\n    open val mode: ShadowRootMode\n    open val host: Element\n    override val fullscreenElement: Element?\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Element](https://developer.mozilla.org/en/docs/Web/API/Element) to Kotlin\n */\npublic external abstract class Element : Node, ParentNode, NonDocumentTypeChildNode, ChildNode, Slotable, GeometryUtils, UnionElementOrHTMLCollection, UnionElementOrRadioNodeList, UnionElementOrMouseEvent, UnionElementOrProcessingInstruction {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val tagName: String\n    open var id: String\n    open var className: String\n    open val classList: DOMTokenList\n    open var slot: String\n    open val attributes: NamedNodeMap\n    open val shadowRoot: ShadowRoot?\n    open var scrollTop: Double\n    open var scrollLeft: Double\n    open val scrollWidth: Int\n    open val scrollHeight: Int\n    open val clientTop: Int\n    open val clientLeft: Int\n    open val clientWidth: Int\n    open val clientHeight: Int\n    open var innerHTML: String\n    open var outerHTML: String\n    fun hasAttributes(): Boolean\n    fun getAttributeNames(): Array<String>\n    fun getAttribute(qualifiedName: String): String?\n    fun getAttributeNS(namespace: String?, localName: String): String?\n    fun setAttribute(qualifiedName: String, value: String)\n    fun setAttributeNS(namespace: String?, qualifiedName: String, value: String)\n    fun removeAttribute(qualifiedName: String)\n    fun removeAttributeNS(namespace: String?, localName: String)\n    fun hasAttribute(qualifiedName: String): Boolean\n    fun hasAttributeNS(namespace: String?, localName: String): Boolean\n    fun getAttributeNode(qualifiedName: String): Attr?\n    fun getAttributeNodeNS(namespace: String?, localName: String): Attr?\n    fun setAttributeNode(attr: Attr): Attr?\n    fun setAttributeNodeNS(attr: Attr): Attr?\n    fun removeAttributeNode(attr: Attr): Attr\n    fun attachShadow(init: ShadowRootInit): ShadowRoot\n    fun closest(selectors: String): Element?\n    fun matches(selectors: String): Boolean\n    fun webkitMatchesSelector(selectors: String): Boolean\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun insertAdjacentElement(where: String, element: Element): Element?\n    fun insertAdjacentText(where: String, data: String)\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun scrollIntoView()\n    fun scrollIntoView(arg: dynamic)\n    fun scroll(options: ScrollToOptions = definedExternally)\n    fun scroll(x: Double, y: Double)\n    fun scrollTo(options: ScrollToOptions = definedExternally)\n    fun scrollTo(x: Double, y: Double)\n    fun scrollBy(options: ScrollToOptions = definedExternally)\n    fun scrollBy(x: Double, y: Double)\n    fun insertAdjacentHTML(position: String, text: String)\n    fun setPointerCapture(pointerId: Int)\n    fun releasePointerCapture(pointerId: Int)\n    fun hasPointerCapture(pointerId: Int): Boolean\n    fun requestFullscreen(): Promise<Unit>\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface ShadowRootInit {\n    var mode: ShadowRootMode?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ShadowRootInit(mode: ShadowRootMode?): ShadowRootInit {\n    val o = js(\"({})\")\n    o[\"mode\"] = mode\n    return o\n}\n\n/**\n * Exposes the JavaScript [NamedNodeMap](https://developer.mozilla.org/en/docs/Web/API/NamedNodeMap) to Kotlin\n */\npublic external abstract class NamedNodeMap : ItemArrayLike<Attr> {\n    fun getNamedItemNS(namespace: String?, localName: String): Attr?\n    fun setNamedItem(attr: Attr): Attr?\n    fun setNamedItemNS(attr: Attr): Attr?\n    fun removeNamedItem(qualifiedName: String): Attr\n    fun removeNamedItemNS(namespace: String?, localName: String): Attr\n    override fun item(index: Int): Attr?\n    fun getNamedItem(qualifiedName: String): Attr?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NamedNodeMap.get(index: Int): Attr? = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun NamedNodeMap.get(qualifiedName: String): Attr? = asDynamic()[qualifiedName]\n\n/**\n * Exposes the JavaScript [Attr](https://developer.mozilla.org/en/docs/Web/API/Attr) to Kotlin\n */\npublic external abstract class Attr : Node {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val name: String\n    open var value: String\n    open val ownerElement: Element?\n    open val specified: Boolean\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CharacterData](https://developer.mozilla.org/en/docs/Web/API/CharacterData) to Kotlin\n */\npublic external abstract class CharacterData : Node, NonDocumentTypeChildNode, ChildNode {\n    open var data: String\n    open val length: Int\n    fun substringData(offset: Int, count: Int): String\n    fun appendData(data: String)\n    fun insertData(offset: Int, data: String)\n    fun deleteData(offset: Int, count: Int)\n    fun replaceData(offset: Int, count: Int, data: String)\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Text](https://developer.mozilla.org/en/docs/Web/API/Text) to Kotlin\n */\npublic external open class Text(data: String = definedExternally) : CharacterData, Slotable, GeometryUtils {\n    open val wholeText: String\n    override val assignedSlot: HTMLSlotElement?\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    fun splitText(offset: Int): Text\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CDATASection](https://developer.mozilla.org/en/docs/Web/API/CDATASection) to Kotlin\n */\npublic external open class CDATASection : Text {\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [ProcessingInstruction](https://developer.mozilla.org/en/docs/Web/API/ProcessingInstruction) to Kotlin\n */\npublic external abstract class ProcessingInstruction : CharacterData, LinkStyle, UnionElementOrProcessingInstruction {\n    open val target: String\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Comment](https://developer.mozilla.org/en/docs/Web/API/Comment) to Kotlin\n */\npublic external open class Comment(data: String = definedExternally) : CharacterData {\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Range](https://developer.mozilla.org/en/docs/Web/API/Range) to Kotlin\n */\npublic external open class Range {\n    open val startContainer: Node\n    open val startOffset: Int\n    open val endContainer: Node\n    open val endOffset: Int\n    open val collapsed: Boolean\n    open val commonAncestorContainer: Node\n    fun setStart(node: Node, offset: Int)\n    fun setEnd(node: Node, offset: Int)\n    fun setStartBefore(node: Node)\n    fun setStartAfter(node: Node)\n    fun setEndBefore(node: Node)\n    fun setEndAfter(node: Node)\n    fun collapse(toStart: Boolean = definedExternally)\n    fun selectNode(node: Node)\n    fun selectNodeContents(node: Node)\n    fun compareBoundaryPoints(how: Short, sourceRange: Range): Short\n    fun deleteContents()\n    fun extractContents(): DocumentFragment\n    fun cloneContents(): DocumentFragment\n    fun insertNode(node: Node)\n    fun surroundContents(newParent: Node)\n    fun cloneRange(): Range\n    fun detach()\n    fun isPointInRange(node: Node, offset: Int): Boolean\n    fun comparePoint(node: Node, offset: Int): Short\n    fun intersectsNode(node: Node): Boolean\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun createContextualFragment(fragment: String): DocumentFragment\n\n    companion object {\n        val START_TO_START: Short\n        val START_TO_END: Short\n        val END_TO_END: Short\n        val END_TO_START: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NodeIterator](https://developer.mozilla.org/en/docs/Web/API/NodeIterator) to Kotlin\n */\npublic external abstract class NodeIterator {\n    open val root: Node\n    open val referenceNode: Node\n    open val pointerBeforeReferenceNode: Boolean\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    fun nextNode(): Node?\n    fun previousNode(): Node?\n    fun detach()\n}\n\n/**\n * Exposes the JavaScript [TreeWalker](https://developer.mozilla.org/en/docs/Web/API/TreeWalker) to Kotlin\n */\npublic external abstract class TreeWalker {\n    open val root: Node\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    open var currentNode: Node\n    fun parentNode(): Node?\n    fun firstChild(): Node?\n    fun lastChild(): Node?\n    fun previousSibling(): Node?\n    fun nextSibling(): Node?\n    fun previousNode(): Node?\n    fun nextNode(): Node?\n}\n\n/**\n * Exposes the JavaScript [NodeFilter](https://developer.mozilla.org/en/docs/Web/API/NodeFilter) to Kotlin\n */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface NodeFilter {\n    fun acceptNode(node: Node): Short\n\n    companion object {\n        val FILTER_ACCEPT: Short\n        val FILTER_REJECT: Short\n        val FILTER_SKIP: Short\n        val SHOW_ALL: Int\n        val SHOW_ELEMENT: Int\n        val SHOW_ATTRIBUTE: Int\n        val SHOW_TEXT: Int\n        val SHOW_CDATA_SECTION: Int\n        val SHOW_ENTITY_REFERENCE: Int\n        val SHOW_ENTITY: Int\n        val SHOW_PROCESSING_INSTRUCTION: Int\n        val SHOW_COMMENT: Int\n        val SHOW_DOCUMENT: Int\n        val SHOW_DOCUMENT_TYPE: Int\n        val SHOW_DOCUMENT_FRAGMENT: Int\n        val SHOW_NOTATION: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMTokenList](https://developer.mozilla.org/en/docs/Web/API/DOMTokenList) to Kotlin\n */\npublic external abstract class DOMTokenList : ItemArrayLike<String> {\n    open var value: String\n    fun contains(token: String): Boolean\n    fun add(vararg tokens: String)\n    fun remove(vararg tokens: String)\n    fun toggle(token: String, force: Boolean = definedExternally): Boolean\n    fun replace(token: String, newToken: String)\n    fun supports(token: String): Boolean\n    override fun item(index: Int): String?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMTokenList.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMPointReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMPointReadOnly) to Kotlin\n */\npublic external open class DOMPointReadOnly(x: Double, y: Double, z: Double, w: Double) {\n    open val x: Double\n    open val y: Double\n    open val z: Double\n    open val w: Double\n    fun matrixTransform(matrix: DOMMatrixReadOnly): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [DOMPoint](https://developer.mozilla.org/en/docs/Web/API/DOMPoint) to Kotlin\n */\npublic external open class DOMPoint : DOMPointReadOnly {\n    constructor(point: DOMPointInit)\n    constructor(x: Double = definedExternally, y: Double = definedExternally, z: Double = definedExternally, w: Double = definedExternally)\n    override var x: Double\n    override var y: Double\n    override var z: Double\n    override var w: Double\n}\n\n/**\n * Exposes the JavaScript [DOMPointInit](https://developer.mozilla.org/en/docs/Web/API/DOMPointInit) to Kotlin\n */\npublic external interface DOMPointInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var z: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var w: Double? /* = 1.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMPointInit(x: Double? = 0.0, y: Double? = 0.0, z: Double? = 0.0, w: Double? = 1.0): DOMPointInit {\n    val o = js(\"({})\")\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"z\"] = z\n    o[\"w\"] = w\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMRect](https://developer.mozilla.org/en/docs/Web/API/DOMRect) to Kotlin\n */\npublic external open class DOMRect(x: Double = definedExternally, y: Double = definedExternally, width: Double = definedExternally, height: Double = definedExternally) : DOMRectReadOnly {\n    override var x: Double\n    override var y: Double\n    override var width: Double\n    override var height: Double\n}\n\n/**\n * Exposes the JavaScript [DOMRectReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMRectReadOnly) to Kotlin\n */\npublic external open class DOMRectReadOnly(x: Double, y: Double, width: Double, height: Double) {\n    open val x: Double\n    open val y: Double\n    open val width: Double\n    open val height: Double\n    open val top: Double\n    open val right: Double\n    open val bottom: Double\n    open val left: Double\n}\n\npublic external interface DOMRectInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var width: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMRectInit(x: Double? = 0.0, y: Double? = 0.0, width: Double? = 0.0, height: Double? = 0.0): DOMRectInit {\n    val o = js(\"({})\")\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"width\"] = width\n    o[\"height\"] = height\n    return o\n}\n\npublic external interface DOMRectList : ItemArrayLike<DOMRect> {\n    override fun item(index: Int): DOMRect?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun DOMRectList.get(index: Int): DOMRect? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMQuad](https://developer.mozilla.org/en/docs/Web/API/DOMQuad) to Kotlin\n */\npublic external open class DOMQuad {\n    constructor(p1: DOMPointInit = definedExternally, p2: DOMPointInit = definedExternally, p3: DOMPointInit = definedExternally, p4: DOMPointInit = definedExternally)\n    constructor(rect: DOMRectInit)\n    open val p1: DOMPoint\n    open val p2: DOMPoint\n    open val p3: DOMPoint\n    open val p4: DOMPoint\n    open val bounds: DOMRectReadOnly\n}\n\n/**\n * Exposes the JavaScript [DOMMatrixReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMMatrixReadOnly) to Kotlin\n */\npublic external open class DOMMatrixReadOnly(numberSequence: Array<Double>) {\n    open val a: Double\n    open val b: Double\n    open val c: Double\n    open val d: Double\n    open val e: Double\n    open val f: Double\n    open val m11: Double\n    open val m12: Double\n    open val m13: Double\n    open val m14: Double\n    open val m21: Double\n    open val m22: Double\n    open val m23: Double\n    open val m24: Double\n    open val m31: Double\n    open val m32: Double\n    open val m33: Double\n    open val m34: Double\n    open val m41: Double\n    open val m42: Double\n    open val m43: Double\n    open val m44: Double\n    open val is2D: Boolean\n    open val isIdentity: Boolean\n    fun translate(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scale(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3d(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniform(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotate(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVector(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngle(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewX(sx: Double): DOMMatrix\n    fun skewY(sy: Double): DOMMatrix\n    fun multiply(other: DOMMatrix): DOMMatrix\n    fun flipX(): DOMMatrix\n    fun flipY(): DOMMatrix\n    fun inverse(): DOMMatrix\n    fun transformPoint(point: DOMPointInit = definedExternally): DOMPoint\n    fun toFloat32Array(): Float32Array\n    fun toFloat64Array(): Float64Array\n}\n\n/**\n * Exposes the JavaScript [DOMMatrix](https://developer.mozilla.org/en/docs/Web/API/DOMMatrix) to Kotlin\n */\npublic external open class DOMMatrix() : DOMMatrixReadOnly {\n    constructor(transformList: String)\n    constructor(other: DOMMatrixReadOnly)\n    constructor(array32: Float32Array)\n    constructor(array64: Float64Array)\n    constructor(numberSequence: Array<Double>)\n    override var a: Double\n    override var b: Double\n    override var c: Double\n    override var d: Double\n    override var e: Double\n    override var f: Double\n    override var m11: Double\n    override var m12: Double\n    override var m13: Double\n    override var m14: Double\n    override var m21: Double\n    override var m22: Double\n    override var m23: Double\n    override var m24: Double\n    override var m31: Double\n    override var m32: Double\n    override var m33: Double\n    override var m34: Double\n    override var m41: Double\n    override var m42: Double\n    override var m43: Double\n    override var m44: Double\n    fun multiplySelf(other: DOMMatrix): DOMMatrix\n    fun preMultiplySelf(other: DOMMatrix): DOMMatrix\n    fun translateSelf(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scaleSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3dSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniformSelf(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotateSelf(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVectorSelf(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngleSelf(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewXSelf(sx: Double): DOMMatrix\n    fun skewYSelf(sy: Double): DOMMatrix\n    fun invertSelf(): DOMMatrix\n    fun setMatrixValue(transformList: String): DOMMatrix\n}\n\npublic external interface ScrollOptions {\n    var behavior: ScrollBehavior? /* = ScrollBehavior.AUTO */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollOptions(behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollOptions {\n    val o = js(\"({})\")\n    o[\"behavior\"] = behavior\n    return o\n}\n\n/**\n * Exposes the JavaScript [ScrollToOptions](https://developer.mozilla.org/en/docs/Web/API/ScrollToOptions) to Kotlin\n */\npublic external interface ScrollToOptions : ScrollOptions {\n    var left: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var top: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollToOptions(left: Double? = undefined, top: Double? = undefined, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollToOptions {\n    val o = js(\"({})\")\n    o[\"left\"] = left\n    o[\"top\"] = top\n    o[\"behavior\"] = behavior\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaQueryList](https://developer.mozilla.org/en/docs/Web/API/MediaQueryList) to Kotlin\n */\npublic external abstract class MediaQueryList : EventTarget {\n    open val media: String\n    open val matches: Boolean\n    open var onchange: ((Event) -> dynamic)?\n    fun addListener(listener: EventListener?)\n    fun addListener(listener: ((Event) -> Unit)?)\n    fun removeListener(listener: EventListener?)\n    fun removeListener(listener: ((Event) -> Unit)?)\n}\n\n/**\n * Exposes the JavaScript [MediaQueryListEvent](https://developer.mozilla.org/en/docs/Web/API/MediaQueryListEvent) to Kotlin\n */\npublic external open class MediaQueryListEvent(type: String, eventInitDict: MediaQueryListEventInit = definedExternally) : Event {\n    open val media: String\n    open val matches: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MediaQueryListEventInit : EventInit {\n    var media: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var matches: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaQueryListEventInit(media: String? = \"\", matches: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaQueryListEventInit {\n    val o = js(\"({})\")\n    o[\"media\"] = media\n    o[\"matches\"] = matches\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [Screen](https://developer.mozilla.org/en/docs/Web/API/Screen) to Kotlin\n */\npublic external abstract class Screen {\n    open val availWidth: Int\n    open val availHeight: Int\n    open val width: Int\n    open val height: Int\n    open val colorDepth: Int\n    open val pixelDepth: Int\n}\n\n/**\n * Exposes the JavaScript [CaretPosition](https://developer.mozilla.org/en/docs/Web/API/CaretPosition) to Kotlin\n */\npublic external abstract class CaretPosition {\n    open val offsetNode: Node\n    open val offset: Int\n    fun getClientRect(): DOMRect?\n}\n\npublic external interface ScrollIntoViewOptions : ScrollOptions {\n    var block: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var inline: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollIntoViewOptions(block: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, inline: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollIntoViewOptions {\n    val o = js(\"({})\")\n    o[\"block\"] = block\n    o[\"inline\"] = inline\n    o[\"behavior\"] = behavior\n    return o\n}\n\npublic external interface BoxQuadOptions {\n    var box: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var relativeTo: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BoxQuadOptions(box: CSSBoxType? = CSSBoxType.BORDER, relativeTo: dynamic = undefined): BoxQuadOptions {\n    val o = js(\"({})\")\n    o[\"box\"] = box\n    o[\"relativeTo\"] = relativeTo\n    return o\n}\n\npublic external interface ConvertCoordinateOptions {\n    var fromBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var toBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConvertCoordinateOptions(fromBox: CSSBoxType? = CSSBoxType.BORDER, toBox: CSSBoxType? = CSSBoxType.BORDER): ConvertCoordinateOptions {\n    val o = js(\"({})\")\n    o[\"fromBox\"] = fromBox\n    o[\"toBox\"] = toBox\n    return o\n}\n\n/**\n * Exposes the JavaScript [GeometryUtils](https://developer.mozilla.org/en/docs/Web/API/GeometryUtils) to Kotlin\n */\npublic external interface GeometryUtils {\n    fun getBoxQuads(options: BoxQuadOptions = definedExternally): Array<DOMQuad>\n    fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [Touch](https://developer.mozilla.org/en/docs/Web/API/Touch) to Kotlin\n */\npublic external abstract class Touch {\n    open val identifier: Int\n    open val target: EventTarget\n    open val screenX: Int\n    open val screenY: Int\n    open val clientX: Int\n    open val clientY: Int\n    open val pageX: Int\n    open val pageY: Int\n    open val region: String?\n}\n\npublic external abstract class TouchList : ItemArrayLike<Touch> {\n    override fun item(index: Int): Touch?\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun TouchList.get(index: Int): Touch? = asDynamic()[index]\n\npublic external open class TouchEvent : UIEvent {\n    open val touches: TouchList\n    open val targetTouches: TouchList\n    open val changedTouches: TouchList\n    open val altKey: Boolean\n    open val metaKey: Boolean\n    open val ctrlKey: Boolean\n    open val shiftKey: Boolean\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Image](https://developer.mozilla.org/en/docs/Web/API/Image) to Kotlin\n */\npublic external open class Image(width: Int = definedExternally, height: Int = definedExternally) : HTMLImageElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external open class Audio(src: String = definedExternally) : HTMLAudioElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [Option](https://developer.mozilla.org/en/docs/Web/API/Option) to Kotlin\n */\npublic external open class Option(text: String = definedExternally, value: String = definedExternally, defaultSelected: Boolean = definedExternally, selected: Boolean = definedExternally) : HTMLOptionElement {\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override val style: CSSStyleDeclaration\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override fun prepend(vararg nodes: dynamic)\n    override fun append(vararg nodes: dynamic)\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic)\n    override fun after(vararg nodes: dynamic)\n    override fun replaceWith(vararg nodes: dynamic)\n    override fun remove()\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface UnionElementOrHTMLCollection\n\npublic external interface UnionElementOrRadioNodeList\n\npublic external interface UnionHTMLOptGroupElementOrHTMLOptionElement\n\npublic external interface UnionAudioTrackOrTextTrackOrVideoTrack\n\npublic external interface UnionElementOrMouseEvent\n\npublic external interface RenderingContext\n\npublic external interface HTMLOrSVGImageElement : CanvasImageSource\n\npublic external interface CanvasImageSource : ImageBitmapSource\n\npublic external interface ImageBitmapSource\n\npublic external interface UnionMessagePortOrWindowProxy\n\npublic external interface HTMLOrSVGScriptElement\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface DocumentReadyState {\n    companion object\n}\n\npublic inline val DocumentReadyState.Companion.LOADING: DocumentReadyState get() = \"loading\".asDynamic().unsafeCast<DocumentReadyState>()\n\npublic inline val DocumentReadyState.Companion.INTERACTIVE: DocumentReadyState get() = \"interactive\".asDynamic().unsafeCast<DocumentReadyState>()\n\npublic inline val DocumentReadyState.Companion.COMPLETE: DocumentReadyState get() = \"complete\".asDynamic().unsafeCast<DocumentReadyState>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanPlayTypeResult {\n    companion object\n}\n\npublic inline val CanPlayTypeResult.Companion.EMPTY: CanPlayTypeResult get() = \"\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\npublic inline val CanPlayTypeResult.Companion.MAYBE: CanPlayTypeResult get() = \"maybe\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\npublic inline val CanPlayTypeResult.Companion.PROBABLY: CanPlayTypeResult get() = \"probably\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface TextTrackMode {\n    companion object\n}\n\npublic inline val TextTrackMode.Companion.DISABLED: TextTrackMode get() = \"disabled\".asDynamic().unsafeCast<TextTrackMode>()\n\npublic inline val TextTrackMode.Companion.HIDDEN: TextTrackMode get() = \"hidden\".asDynamic().unsafeCast<TextTrackMode>()\n\npublic inline val TextTrackMode.Companion.SHOWING: TextTrackMode get() = \"showing\".asDynamic().unsafeCast<TextTrackMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface TextTrackKind {\n    companion object\n}\n\npublic inline val TextTrackKind.Companion.SUBTITLES: TextTrackKind get() = \"subtitles\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.CAPTIONS: TextTrackKind get() = \"captions\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.DESCRIPTIONS: TextTrackKind get() = \"descriptions\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.CHAPTERS: TextTrackKind get() = \"chapters\".asDynamic().unsafeCast<TextTrackKind>()\n\npublic inline val TextTrackKind.Companion.METADATA: TextTrackKind get() = \"metadata\".asDynamic().unsafeCast<TextTrackKind>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface SelectionMode {\n    companion object\n}\n\npublic inline val SelectionMode.Companion.SELECT: SelectionMode get() = \"select\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.START: SelectionMode get() = \"start\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.END: SelectionMode get() = \"end\".asDynamic().unsafeCast<SelectionMode>()\n\npublic inline val SelectionMode.Companion.PRESERVE: SelectionMode get() = \"preserve\".asDynamic().unsafeCast<SelectionMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasFillRule {\n    companion object\n}\n\npublic inline val CanvasFillRule.Companion.NONZERO: CanvasFillRule get() = \"nonzero\".asDynamic().unsafeCast<CanvasFillRule>()\n\npublic inline val CanvasFillRule.Companion.EVENODD: CanvasFillRule get() = \"evenodd\".asDynamic().unsafeCast<CanvasFillRule>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ImageSmoothingQuality {\n    companion object\n}\n\npublic inline val ImageSmoothingQuality.Companion.LOW: ImageSmoothingQuality get() = \"low\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\npublic inline val ImageSmoothingQuality.Companion.MEDIUM: ImageSmoothingQuality get() = \"medium\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\npublic inline val ImageSmoothingQuality.Companion.HIGH: ImageSmoothingQuality get() = \"high\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasLineCap {\n    companion object\n}\n\npublic inline val CanvasLineCap.Companion.BUTT: CanvasLineCap get() = \"butt\".asDynamic().unsafeCast<CanvasLineCap>()\n\npublic inline val CanvasLineCap.Companion.ROUND: CanvasLineCap get() = \"round\".asDynamic().unsafeCast<CanvasLineCap>()\n\npublic inline val CanvasLineCap.Companion.SQUARE: CanvasLineCap get() = \"square\".asDynamic().unsafeCast<CanvasLineCap>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasLineJoin {\n    companion object\n}\n\npublic inline val CanvasLineJoin.Companion.ROUND: CanvasLineJoin get() = \"round\".asDynamic().unsafeCast<CanvasLineJoin>()\n\npublic inline val CanvasLineJoin.Companion.BEVEL: CanvasLineJoin get() = \"bevel\".asDynamic().unsafeCast<CanvasLineJoin>()\n\npublic inline val CanvasLineJoin.Companion.MITER: CanvasLineJoin get() = \"miter\".asDynamic().unsafeCast<CanvasLineJoin>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasTextAlign {\n    companion object\n}\n\npublic inline val CanvasTextAlign.Companion.START: CanvasTextAlign get() = \"start\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.END: CanvasTextAlign get() = \"end\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.LEFT: CanvasTextAlign get() = \"left\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.RIGHT: CanvasTextAlign get() = \"right\".asDynamic().unsafeCast<CanvasTextAlign>()\n\npublic inline val CanvasTextAlign.Companion.CENTER: CanvasTextAlign get() = \"center\".asDynamic().unsafeCast<CanvasTextAlign>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasTextBaseline {\n    companion object\n}\n\npublic inline val CanvasTextBaseline.Companion.TOP: CanvasTextBaseline get() = \"top\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.HANGING: CanvasTextBaseline get() = \"hanging\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.MIDDLE: CanvasTextBaseline get() = \"middle\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.ALPHABETIC: CanvasTextBaseline get() = \"alphabetic\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.IDEOGRAPHIC: CanvasTextBaseline get() = \"ideographic\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\npublic inline val CanvasTextBaseline.Companion.BOTTOM: CanvasTextBaseline get() = \"bottom\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CanvasDirection {\n    companion object\n}\n\npublic inline val CanvasDirection.Companion.LTR: CanvasDirection get() = \"ltr\".asDynamic().unsafeCast<CanvasDirection>()\n\npublic inline val CanvasDirection.Companion.RTL: CanvasDirection get() = \"rtl\".asDynamic().unsafeCast<CanvasDirection>()\n\npublic inline val CanvasDirection.Companion.INHERIT: CanvasDirection get() = \"inherit\".asDynamic().unsafeCast<CanvasDirection>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollRestoration {\n    companion object\n}\n\npublic inline val ScrollRestoration.Companion.AUTO: ScrollRestoration get() = \"auto\".asDynamic().unsafeCast<ScrollRestoration>()\n\npublic inline val ScrollRestoration.Companion.MANUAL: ScrollRestoration get() = \"manual\".asDynamic().unsafeCast<ScrollRestoration>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ImageOrientation {\n    companion object\n}\n\npublic inline val ImageOrientation.Companion.NONE: ImageOrientation get() = \"none\".asDynamic().unsafeCast<ImageOrientation>()\n\npublic inline val ImageOrientation.Companion.FLIPY: ImageOrientation get() = \"flipY\".asDynamic().unsafeCast<ImageOrientation>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface PremultiplyAlpha {\n    companion object\n}\n\npublic inline val PremultiplyAlpha.Companion.NONE: PremultiplyAlpha get() = \"none\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\npublic inline val PremultiplyAlpha.Companion.PREMULTIPLY: PremultiplyAlpha get() = \"premultiply\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\npublic inline val PremultiplyAlpha.Companion.DEFAULT: PremultiplyAlpha get() = \"default\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ColorSpaceConversion {\n    companion object\n}\n\npublic inline val ColorSpaceConversion.Companion.NONE: ColorSpaceConversion get() = \"none\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\npublic inline val ColorSpaceConversion.Companion.DEFAULT: ColorSpaceConversion get() = \"default\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ResizeQuality {\n    companion object\n}\n\npublic inline val ResizeQuality.Companion.PIXELATED: ResizeQuality get() = \"pixelated\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.LOW: ResizeQuality get() = \"low\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.MEDIUM: ResizeQuality get() = \"medium\".asDynamic().unsafeCast<ResizeQuality>()\n\npublic inline val ResizeQuality.Companion.HIGH: ResizeQuality get() = \"high\".asDynamic().unsafeCast<ResizeQuality>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface BinaryType {\n    companion object\n}\n\npublic inline val BinaryType.Companion.BLOB: BinaryType get() = \"blob\".asDynamic().unsafeCast<BinaryType>()\n\npublic inline val BinaryType.Companion.ARRAYBUFFER: BinaryType get() = \"arraybuffer\".asDynamic().unsafeCast<BinaryType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface WorkerType {\n    companion object\n}\n\npublic inline val WorkerType.Companion.CLASSIC: WorkerType get() = \"classic\".asDynamic().unsafeCast<WorkerType>()\n\npublic inline val WorkerType.Companion.MODULE: WorkerType get() = \"module\".asDynamic().unsafeCast<WorkerType>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ShadowRootMode {\n    companion object\n}\n\npublic inline val ShadowRootMode.Companion.OPEN: ShadowRootMode get() = \"open\".asDynamic().unsafeCast<ShadowRootMode>()\n\npublic inline val ShadowRootMode.Companion.CLOSED: ShadowRootMode get() = \"closed\".asDynamic().unsafeCast<ShadowRootMode>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollBehavior {\n    companion object\n}\n\npublic inline val ScrollBehavior.Companion.AUTO: ScrollBehavior get() = \"auto\".asDynamic().unsafeCast<ScrollBehavior>()\n\npublic inline val ScrollBehavior.Companion.INSTANT: ScrollBehavior get() = \"instant\".asDynamic().unsafeCast<ScrollBehavior>()\n\npublic inline val ScrollBehavior.Companion.SMOOTH: ScrollBehavior get() = \"smooth\".asDynamic().unsafeCast<ScrollBehavior>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface ScrollLogicalPosition {\n    companion object\n}\n\npublic inline val ScrollLogicalPosition.Companion.START: ScrollLogicalPosition get() = \"start\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.CENTER: ScrollLogicalPosition get() = \"center\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.END: ScrollLogicalPosition get() = \"end\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\npublic inline val ScrollLogicalPosition.Companion.NEAREST: ScrollLogicalPosition get() = \"nearest\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface CSSBoxType {\n    companion object\n}\n\npublic inline val CSSBoxType.Companion.MARGIN: CSSBoxType get() = \"margin\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.BORDER: CSSBoxType get() = \"border\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.PADDING: CSSBoxType get() = \"padding\".asDynamic().unsafeCast<CSSBoxType>()\n\npublic inline val CSSBoxType.Companion.CONTENT: CSSBoxType get() = \"content\".asDynamic().unsafeCast<CSSBoxType>()","package baaahs\n\nimport baaahs.browser.RealMediaDevices\nimport baaahs.jsx.MosaicUI\nimport baaahs.net.BrowserNetwork\nimport baaahs.net.BrowserNetwork.BrowserAddress\nimport kotlinext.js.jsObject\nimport org.w3c.dom.get\nimport react.createElement\nimport react.dom.render\nimport kotlin.browser.document\nimport kotlin.browser.window\n\nfun main(args: Array<String>) {\n    val mode = document[\"sparklemotionMode\"] ?: \"test\"\n    println(\"args = $args, mode = $mode\")\n\n    val pinkyAddress = BrowserAddress(websocketsUrl())\n    val network = BrowserNetwork(pinkyAddress, baaahs.proto.Ports.PINKY)\n    val contentDiv = document.getElementById(\"content\")\n\n    when (mode) {\n        \"Simulator\" -> {\n            // Instead of starting the simulator directly, pass the JS\n            // a function that it can use to get and start the simulator.\n            // We do this so the JS can create the HTML templates before\n            // the JsDisplay tries to find them.\n            val props = jsObject<MosaicUI.Props> {\n                getSheepSimulator = { SheepSimulator() }\n            }\n            val simulatorEl = document.getElementById(\"app\")\n            render(createElement(MosaicUI::class.js, props), simulatorEl)\n        }\n\n        \"Admin\" -> {\n            val adminApp = AdminUi(network, pinkyAddress)\n            render(adminApp.render(), contentDiv)\n        }\n\n        \"Mapper\" -> {\n\n            val model = Pluggables.loadModel(Pluggables.defaultModel) // todo: which model?\n            (model as? ObjModel)?.load()\n\n            val mapperUi = JsMapperUi();\n            val mediaDevices = RealMediaDevices();\n            val mapper = Mapper(network, model, mapperUi, mediaDevices, pinkyAddress);\n            render(mapperUi.render(), contentDiv);\n            mapper.start();\n        }\n\n        \"UI\" -> {\n            val uiApp = WebUi(network, pinkyAddress)\n            render(uiApp.render(), contentDiv)\n        }\n\n        \"test\" -> {}\n\n        else -> throw UnsupportedOperationException(\"unknown mode $mode\")\n    }\n}\n\nprivate fun websocketsUrl(): String {\n    val l = window.location\n    val proto = if (l.protocol === \"https:\") \"wss:\" else \"ws:\"\n    return \"$proto//${l.host}/\"\n}\n","package kotlinx.html\r\n\r\nimport kotlinx.html.*\r\nimport kotlinx.html.impl.*\r\nimport kotlinx.html.attributes.*\r\n\r\n/*******************************************************************************\r\n    DO NOT EDIT\r\n    This file was generated by module generate\r\n*******************************************************************************/\r\n\r\ninterface FlowContent : FlowOrHeadingContent, FlowOrMetaDataContent, FlowOrInteractiveContent, FlowOrPhrasingContent, FlowOrPhrasingOrMetaDataContent, SectioningOrFlowContent, FlowOrInteractiveOrPhrasingContent, Tag {\r\n}\r\n\r\ninterface HeadingContent : FlowOrHeadingContent, Tag {\r\n}\r\n\r\ninterface InteractiveContent : FlowOrInteractiveContent, FlowOrInteractiveOrPhrasingContent, Tag {\r\n}\r\n\r\ninterface MetaDataContent : FlowOrMetaDataContent, FlowOrPhrasingOrMetaDataContent, Tag {\r\n}\r\n\r\ninterface PhrasingContent : FlowOrPhrasingContent, FlowOrPhrasingOrMetaDataContent, FlowOrInteractiveOrPhrasingContent, Tag {\r\n}\r\n\r\ninterface SectioningContent : SectioningOrFlowContent, Tag {\r\n}\r\n\r\n/**\r\n * Information on author\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.address(classes : String? = null, crossinline block : ADDRESS.() -> Unit = {}) : Unit = ADDRESS(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Long quotation\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.blockQuote(classes : String? = null, crossinline block : BLOCKQUOTE.() -> Unit = {}) : Unit = BLOCKQUOTE(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Dialog box or window\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.dialog(classes : String? = null, crossinline block : DIALOG.() -> Unit = {}) : Unit = DIALOG(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Generic language/style container\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.div(classes : String? = null, crossinline block : DIV.() -> Unit = {}) : Unit = DIV(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Definition list\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.dl(classes : String? = null, crossinline block : DL.() -> Unit = {}) : Unit = DL(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Form control group\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.fieldSet(classes : String? = null, crossinline block : FIELDSET.() -> Unit = {}) : Unit = FIELDSET(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Figure with optional caption\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.figure(classes : String? = null, crossinline block : FIGURE.() -> Unit = {}) : Unit = FIGURE(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Caption for \r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.figcaption(classes : String? = null, crossinline block : FIGCAPTION.() -> Unit = {}) : Unit = FIGCAPTION(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Footer for a page or section\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.footer(classes : String? = null, crossinline block : FOOTER.() -> Unit = {}) : Unit = FOOTER(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Interactive form\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.form(action : String? = null, encType : FormEncType? = null, method : FormMethod? = null, classes : String? = null, crossinline block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", method?.enumEncode(),\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowContent.getForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, crossinline block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.get.realValue,\"class\", classes), consumer).visit(block)\r\n@HtmlTagMarker\r\ninline fun FlowContent.postForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, crossinline block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.post.realValue,\"class\", classes), consumer).visit(block)\r\n@Suppress(\"DEPRECATION\")\r\n@HtmlTagMarker\r\ninline fun FlowContent.putForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, crossinline block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.put.realValue,\"class\", classes), consumer).visit(block)\r\n@Suppress(\"DEPRECATION\")\r\n@HtmlTagMarker\r\ninline fun FlowContent.deleteForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, crossinline block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.delete.realValue,\"class\", classes), consumer).visit(block)\r\n@Suppress(\"DEPRECATION\")\r\n@HtmlTagMarker\r\ninline fun FlowContent.patchForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, crossinline block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.patch.realValue,\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Introductory or navigational aids for a page or section\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.header(classes : String? = null, crossinline block : HEADER.() -> Unit = {}) : Unit = HEADER(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Horizontal rule\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.hr(classes : String? = null, crossinline block : HR.() -> Unit = {}) : Unit = HR(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Ordered list\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.ol(classes : String? = null, crossinline block : OL.() -> Unit = {}) : Unit = OL(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Paragraph\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.p(classes : String? = null, crossinline block : P.() -> Unit = {}) : Unit = P(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Preformatted text\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.pre(classes : String? = null, crossinline block : PRE.() -> Unit = {}) : Unit = PRE(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * \r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.table(classes : String? = null, crossinline block : TABLE.() -> Unit = {}) : Unit = TABLE(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Unordered list\r\n */\r\n@HtmlTagMarker\r\ninline fun FlowContent.ul(classes : String? = null, crossinline block : UL.() -> Unit = {}) : Unit = UL(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Document base URI\r\n */\r\n@HtmlTagMarker\r\ninline fun MetaDataContent.base(classes : String? = null, crossinline block : BASE.() -> Unit = {}) : Unit = BASE(attributesMapOf(\"class\", classes), consumer).visit(block)\r\n\r\n/**\r\n * Document title\r\n */\r\n@HtmlTagMarker\r\ninline fun MetaDataContent.title(crossinline block : TITLE.() -> Unit = {}) : Unit = TITLE(emptyMap, consumer).visit(block)\r\n/**\r\n * Document title\r\n */\r\n@HtmlTagMarker\r\nfun MetaDataContent.title(content : String = \"\") : Unit = TITLE(emptyMap, consumer).visit({+content})\r\n\r\n","package baaahs\n\nimport baaahs.geom.Vector2F\nimport baaahs.geom.Vector3F\nimport baaahs.imaging.Bitmap\nimport baaahs.imaging.CanvasBitmap\nimport baaahs.imaging.Image\nimport baaahs.imaging.NativeBitmap\nimport baaahs.jsx.MapperIndex\nimport baaahs.visualizer.Rotator\nimport info.laht.threekt.cameras.Camera\nimport info.laht.threekt.cameras.PerspectiveCamera\nimport info.laht.threekt.core.*\nimport info.laht.threekt.core.Clock\nimport info.laht.threekt.geometries.SphereBufferGeometry\nimport info.laht.threekt.materials.LineBasicMaterial\nimport info.laht.threekt.materials.MeshBasicMaterial\nimport info.laht.threekt.materials.PointsMaterial\nimport info.laht.threekt.math.*\nimport info.laht.threekt.math.Color\nimport info.laht.threekt.objects.Line\nimport info.laht.threekt.objects.Mesh\nimport info.laht.threekt.objects.Points\nimport info.laht.threekt.renderers.WebGLRenderer\nimport info.laht.threekt.scenes.Scene\nimport kotlinext.js.jsObject\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.launch\nimport kotlinx.html.*\nimport kotlinx.html.dom.append\nimport kotlinx.html.dom.create\nimport kotlinx.html.js.onClickFunction\nimport kotlinx.html.js.table\nimport org.w3c.dom.*\nimport org.w3c.dom.events.KeyboardEvent\nimport react.ReactElement\nimport react.createElement\nimport three.Matrix4\nimport kotlin.browser.document\nimport kotlin.browser.window\nimport kotlin.collections.component1\nimport kotlin.collections.component2\nimport kotlin.collections.set\nimport kotlin.dom.clear\nimport kotlin.math.min\nimport kotlin.math.roundToInt\n\nclass JsMapperUi(private val statusListener: StatusListener? = null) : MapperUi, HostedWebApp {\n    private lateinit var listener: MapperUi.Listener\n\n    override fun listen(listener: MapperUi.Listener) {\n        this.listener = listener\n    }\n\n    private var width = 512\n    private var height = 384\n\n    private var uiWidth = 512\n    private var uiHeight = 384\n\n    private var haveCamDimensions = false\n    private var camWidth = 0\n    private var camHeight = 0\n\n    private val clock = Clock()\n\n    // onscreen renderer for registration UI:\n    private val uiRenderer = WebGLRenderer(js(\"{alpha: true}\"))\n    private var uiScene = Scene()\n    private var uiCamera = PerspectiveCamera(45, width.toDouble() / height, 1, 10000)\n    private var uiControls: dynamic\n    private val wireframe = Object3D()\n\n    private var selectedSurfaces = mutableListOf<PanelInfo>()\n    private var uiLocked: Boolean = false\n\n    private val screen = document.create.div(\"mapperUi-screen\") {\n        tabIndex = \"-1\" // So we can receive key events.\n\n        div(\"mapperUi-controls\") {\n            button { +\"\u25b2\"; onClickFunction = { wireframe.position.y += 10 } }\n            button { +\"\u25bc\"; onClickFunction = { wireframe.position.y -= 10 } }\n//            button { i(classes=\"fas fa-crosshairs\"); onClickFunction = { target() } }\n            button { i(classes = \"fas fa-play\"); onClickFunction = { clickedPlay() } }\n            button { i(classes = \"fas fa-pause\"); onClickFunction = { clickedPause() } }\n            button { i(classes = \"fas fa-redo\"); onClickFunction = { redoFn?.invoke() } }\n            button { i(classes = \"fas fa-stop\"); onClickFunction = { clickedStop() } }\n            button {\n                i(classes = \"fas fa-sign-in-alt\")\n                onClickFunction = {\n                    val surfaceName = window.prompt(\"Surface:\")\n                    if (surfaceName != null && surfaceName.isNotEmpty()) {\n                        goToSurface(surfaceName.toUpperCase())\n                    }\n                }\n            }\n            select(\"mapperUi-sessionSelector\") { }\n        }\n        canvas(classes = \"mapperUi-2d-canvas\") {\n            width = this@JsMapperUi.width.toString() + \"px\"\n            height = this@JsMapperUi.height.toString() + \"px\"\n        }\n        div(\"mapperUi-3d-div\") { }\n        canvas(classes = \"mapperUi-diff-canvas\") {\n            width = this@JsMapperUi.width.toString() + \"px\"\n            height = this@JsMapperUi.height.toString() + \"px\"\n        }\n        canvas(classes = \"mapperUi-before-canvas\") {\n            width = this@JsMapperUi.width.toString() + \"px\"\n            height = this@JsMapperUi.height.toString() + \"px\"\n        }\n        canvas(classes = \"mapperUi-after-canvas\") {\n            width = this@JsMapperUi.width.toString() + \"px\"\n            height = this@JsMapperUi.height.toString() + \"px\"\n        }\n        div(\"mapperUi-stats\") { }\n        div(\"mapperUi-message\") { }\n        div(\"mapperUi-message2\") { }\n        div(\"mapperUi-table\") { }\n    }\n\n    private val ui2dCanvas = screen.first<HTMLCanvasElement>(\"mapperUi-2d-canvas\")\n    private val ui2dCtx = ui2dCanvas.context2d()\n\n    private val ui3dDiv = screen.first<HTMLCanvasElement>(\"mapperUi-3d-div\")\n    private val ui3dCanvas = uiRenderer.domElement as HTMLCanvasElement\n\n    private val diffCanvas = screen.first<HTMLCanvasElement>(\"mapperUi-diff-canvas\")\n    private val diffCtx = diffCanvas.context2d()\n\n    private val beforeCanvas = screen.first<HTMLCanvasElement>(\"mapperUi-before-canvas\")\n    private val afterCanvas = screen.first<HTMLCanvasElement>(\"mapperUi-after-canvas\")\n\n    private val statsDiv = screen.first<HTMLDivElement>(\"mapperUi-stats\")\n    private val messageDiv = screen.first<HTMLDivElement>(\"mapperUi-message\")\n    private val message2Div = screen.first<HTMLDivElement>(\"mapperUi-message2\")\n    private val table = screen.first<HTMLDivElement>(\"mapperUi-table\")\n    private val sessionSelector = screen.first<HTMLSelectElement>(\"mapperUi-sessionSelector\")\n\n    private val playButton = screen.first<HTMLButtonElement>(\"fa-play\")\n    private val pauseButton = screen.first<HTMLButtonElement>(\"fa-pause\")\n    private val redoButton = screen.first<HTMLButtonElement>(\"fa-redo\")\n\n    private val modelSurfaceInfos = mutableMapOf<Model.Surface, PanelInfo>()\n\n    private var commandProgress = \"\"\n    private var cameraZRotation = 0f\n\n    private var redoFn: (() -> Unit)? = null\n\n    init {\n        statusListener?.mapperStatusChanged(true)\n\n        ui3dDiv.appendChild(ui3dCanvas)\n\n        uiCamera.position.z = 1000.0\n        uiScene.add(uiCamera)\n\n        uiControls = MapperIndex.createCameraControls(uiCamera, uiRenderer.domElement)\n\n        screen.focus()\n        screen.addEventListener(\"keydown\", { event -> gotUiKeypress(event as KeyboardEvent) })\n\n        drawAnimationFrame()\n    }\n\n    private fun gotUiKeypress(event: KeyboardEvent) {\n        if (event.code == \"Enter\") {\n            processCommand(commandProgress.trim())\n            commandProgress = \"\"\n        } else if (event.code == \"Backspace\") {\n            if (commandProgress.isNotEmpty()) {\n                commandProgress = commandProgress.substring(0..(commandProgress.length - 2))\n            }\n            checkProgress()\n        } else if (commandProgress.isEmpty() && event.code == \"KeyQ\") {\n            updateCameraRotation(if (event.shiftKey) 0.025f else 0.1f)\n        } else if (commandProgress.isEmpty() && event.code == \"KeyW\") {\n            updateCameraRotation(if (event.shiftKey) -0.025f else -0.1f)\n        } else if (commandProgress.isEmpty() && event.code == \"Digit0\") {\n            cameraZRotation = 0f\n        } else if (event.key.length == 1) {\n            commandProgress += event.key\n            checkProgress()\n        }\n        showMessage2(commandProgress)\n    }\n\n    private fun checkProgress() {\n        if (commandProgress.startsWith(\"/\") && commandProgress.length > 1) {\n            selectSurfacesMatching(commandProgress.substring(1))\n        }\n    }\n\n    override fun addExistingSession(name: String) {\n        sessionSelector.insertBefore(\n            document.create.option { label = name; value = name },\n            sessionSelector.childNodes.asList().find { (it as HTMLOptionElement).value > name }\n        )\n    }\n\n    private fun resetCameraRotation() {\n        cameraZRotation = 0f\n        updateCameraRotation(0f)\n    }\n\n    private fun updateCameraRotation(angle: Float) {\n        cameraZRotation += angle\n        uiCamera.up.set(0, 1, 0)\n        uiCamera.up.applyMatrix4(Matrix4().makeRotationZ(cameraZRotation.toDouble()))\n    }\n\n    private fun selectSurfacesMatching(pattern: String) {\n        selectedSurfaces.forEach { it.deselect() }\n        selectedSurfaces.clear()\n        selectedSurfaces.addAll(modelSurfaceInfos.values.filter { it.name.contains(pattern, true) })\n        selectedSurfaces.forEach { it.select() }\n    }\n\n    private fun processCommand(command: String) {\n        console.log(command)\n\n        if (command.startsWith(\"g\", ignoreCase = true) || command.startsWith(\"/\")) {\n            val surfaceName = command.substring(1).trim()\n            goToSurface(surfaceName.toUpperCase())\n        }\n    }\n\n    private fun drawAnimationFrame() {\n        if (!uiLocked) {\n            uiControls.update(clock.getDelta())\n        }\n        uiRenderer.render(uiScene, uiCamera)\n\n        window.requestAnimationFrame { drawAnimationFrame() }\n    }\n\n    override fun render(): ReactElement {\n        return createElement(MapperIndex::class.js, jsObject<MapperIndex.Props> {\n            render = this@JsMapperUi::renderDom\n        })\n    }\n\n    private fun renderDom(parentNode: HTMLElement) {\n        parentNode.appendChild(screen)\n        resizeTo(parentNode.offsetWidth, heightOrWindowHeight(parentNode))\n\n        parentNode.onresize = {\n            resizeTo(parentNode.offsetWidth, heightOrWindowHeight(parentNode))\n        }\n    }\n\n    private fun heightOrWindowHeight(parentNode: HTMLElement): Int {\n        return if (parentNode.offsetHeight == 0) window.innerHeight else parentNode.offsetHeight\n    }\n\n    override fun onClose() {\n        statusListener?.mapperStatusChanged(false)\n\n        listener.onClose()\n    }\n\n    private val diffCanvasScale = 1 / 3.0\n\n    private fun resizeTo(width: Int, height: Int) {\n        this.width = width\n        this.height = height\n\n        if (!haveCamDimensions) {\n            camWidth = width\n            camHeight = height\n        }\n\n        val scale = min(1f, min((width - 10).toFloat() / camWidth, (height - 10).toFloat() / camHeight))\n        uiWidth = camWidth - 10\n        uiHeight = camHeight - 10\n\n        uiCamera.aspect = uiWidth.toDouble() / uiHeight\n        uiCamera.updateProjectionMatrix()\n\n        uiRenderer.setSize(uiWidth, uiHeight, true)\n        ui3dCanvas.width = uiWidth\n        ui3dCanvas.height = uiHeight\n\n        ui2dCanvas.width = uiWidth\n        ui2dCanvas.height = uiHeight\n        ui2dCanvas.style.transform = \"scale(${scale})\"\n\n        diffCanvas.width = (uiWidth * diffCanvasScale).toInt()\n        diffCanvas.height = (uiHeight * diffCanvasScale).toInt()\n        beforeCanvas.width = (uiWidth * diffCanvasScale).toInt()\n        beforeCanvas.height = (uiHeight * diffCanvasScale).toInt()\n        afterCanvas.width = (uiWidth * diffCanvasScale).toInt()\n        afterCanvas.height = (uiHeight * diffCanvasScale).toInt()\n    }\n\n    override fun addWireframe(model: Model<*>) {\n        val vertices = model.geomVertices.map { v -> Vector3(v.x, v.y, v.z) }.toTypedArray()\n        model.allSurfaces.forEach { surface ->\n            val geom = Geometry()\n            val allFaces = mutableListOf<Face3>()\n            geom.vertices = vertices\n\n            val panelFaces = mutableListOf<Face3>()\n            val faceNormalAcc = Vector3()\n            surface.faces.forEach { face ->\n                val face3 = Face3(face.vertexIds[0], face.vertexIds[1], face.vertexIds[2], Vector3(0, 0, 0))\n                allFaces.add(face3)\n                panelFaces.add(face3)\n\n                // just compute this face's normal\n                geom.faces = arrayOf(face3)\n                geom.computeFaceNormals()\n                faceNormalAcc.add(face3.normal!!)\n            }\n            val surfaceNormal = faceNormalAcc.divideScalar(surface.faces.size.toDouble())\n\n            val panelMaterial = MeshBasicMaterial().apply { color = Color(0, 0, 0) }\n            val mesh = Mesh(geom, panelMaterial)\n            mesh.asDynamic().name = surface.name\n            uiScene.add(mesh)\n\n            val lineMaterial = LineBasicMaterial().apply {\n                color = Color(0f, 1f, 0f)\n                linewidth = 2.0\n            }\n\n            // offset the wireframe by one of the panel's face normals so it's not clipped by the panel mesh\n            surface.lines.forEach { line ->\n                val lineGeom = BufferGeometry()\n                lineGeom.setFromPoints(line.vertices.map { pt ->\n                    Vector3(\n                        pt.x,\n                        pt.y,\n                        pt.z\n                    ) + surfaceNormal\n                }.toTypedArray())\n                wireframe.add(Line(lineGeom, lineMaterial))\n            }\n\n            geom.faces = allFaces.toTypedArray()\n            geom.computeFaceNormals()\n            geom.computeVertexNormals()\n\n            modelSurfaceInfos[surface] = PanelInfo(surface.name, panelFaces, mesh, geom, lineMaterial)\n        }\n\n        uiScene.add(wireframe)\n\n        val originMarker = Mesh(\n            SphereBufferGeometry(1, 32, 32),\n            MeshBasicMaterial().apply { color = Color(0xff0000) })\n        uiScene.add(originMarker)\n\n        val boundingBox = Box3().setFromObject(wireframe)\n        uiControls.fitTo(boundingBox, false)\n    }\n\n    override fun lockUi(): MapperUi.CameraOrientation {\n        uiLocked = true\n        return CameraOrientation.from(uiCamera)\n    }\n\n    override fun unlockUi() {\n        uiLocked = false\n    }\n\n    override fun getVisibleSurfaces(): List<MapperUi.VisibleSurface> {\n        val visibleSurfaces = mutableListOf<MapperUi.VisibleSurface>()\n        val screenBox = getScreenBox()\n        val screenCenter = screenBox.center\n        val cameraOrientation = CameraOrientation.from(uiCamera)\n\n        modelSurfaceInfos.forEach { (panel, panelInfo) ->\n            val panelPosition = panelInfo.geom.vertices[panelInfo.faces[0].a]\n            val dirToCamera = uiCamera.position.clone().sub(panelPosition)\n            dirToCamera.normalize()\n            val angle = panelInfo.faces[0].normal!!.dot(dirToCamera)\n            if (angle > 0) {\n                panelInfo.mesh.updateMatrixWorld()\n\n                val panelBoundingBox = panelInfo.boundingBox.project(uiCamera)\n                val panelBoxOnScreen = calcBoundingBoxOnScreen(panelBoundingBox, screenCenter)\n                panelInfo.boxOnScreen = panelBoxOnScreen\n                if (panelBoxOnScreen.asDynamic().intersectsBox(screenBox)) {\n                    val region = MediaDevices.Region(\n                        panelBoxOnScreen.min.x.roundToInt(),\n                        panelBoxOnScreen.min.y.roundToInt(),\n                        panelBoxOnScreen.max.x.roundToInt(),\n                        panelBoxOnScreen.max.y.roundToInt()\n                    )\n                    visibleSurfaces.add(VisibleSurface(panel, region, panelInfo, cameraOrientation))\n                }\n            }\n        }\n\n        return visibleSurfaces\n    }\n\n    inner class VisibleSurface(\n        override val modelSurface: Model.Surface,\n        override val boxOnScreen: MediaDevices.Region,\n        val panelInfo: PanelInfo,\n        cameraOrientation: CameraOrientation\n    ) : MapperUi.VisibleSurface {\n        private val camera = cameraOrientation.createCamera()\n        private val geom = Geometry()\n        private val material = PointsMaterial().apply {\n            color = Color(0x00FF00)\n            size = 5\n        }\n        private val points = Points().apply {\n            geometry = this@VisibleSurface.geom\n            material = this@VisibleSurface.material\n        }\n        private val pixels = mutableMapOf<Int, VisiblePixel>()\n\n        override fun addPixel(pixelIndex: Int, x: Float, y: Float) {\n            pixels[pixelIndex] = VisiblePixel(pixelIndex, x, y).apply { addToGeom() }\n        }\n\n        override fun translatePixelToPanelSpace(screenX: Float, screenY: Float): Vector2F? {\n            val intersection = findIntersection(screenX, screenY) ?: return null\n\n            val point = panelInfo.toPanelSpace(intersection.point.clone())\n            console.log(\"   ---->\", point.x, point.y, point.z)\n            return Vector2F(point.x.toFloat(), point.y.toFloat())\n        }\n\n        override val pixelsInModelSpace: List<Vector3F?>\n            get() {\n                val vectors = mutableListOf<Vector3F?>()\n                for (i in 0..(pixels.keys.max()!!)) {\n                    val position = pixels[i]?.positionInModel\n                    vectors.add(position?.let {\n                        Vector3F(it.x.toFloat(), it.y.toFloat(), it.z.toFloat())\n                    })\n                }\n                return vectors\n            }\n\n        private fun findIntersection(x: Float, y: Float): Intersect? {\n            val raycaster = three.Raycaster()\n            val pixelVector = Vector2(\n                x / uiWidth * 2 - 1,\n                -(y / uiHeight * 2 - 1)\n            )\n            raycaster.setFromCamera(pixelVector, camera)\n            var intersections = raycaster.intersectObject(panelInfo.mesh, false)\n            if (intersections.isEmpty()) {\n                intersections = raycaster.intersectObject(uiScene, true)\n                console.log(\"Couldn't find point in ${modelSurface.name}...\", intersections)\n            }\n            if (intersections.isNotEmpty()) {\n                return intersections.first()\n            } else {\n                return null\n            }\n        }\n\n        override fun showPixels() {\n            uiScene.add(points)\n        }\n\n        override fun hidePixels() {\n            uiScene.remove(points)\n        }\n\n        inner class VisiblePixel(val pixelIndex: Int, val cameraX: Float, val cameraY: Float) {\n            private val intersect: Intersect? by lazy { findIntersection(cameraX, cameraY) }\n            val positionInModel = intersect?.point\n\n            fun addToGeom() {\n                if (intersect != null) {\n                    // fill in any missing vertices...\n                    while (geom.vertices.size < pixelIndex) {\n                        geom.vertices[geom.vertices.size] = Vector3(0, 0, 0)\n                    }\n\n                    geom.vertices[pixelIndex] = intersect!!.point\n                }\n            }\n\n            val panelSpaceCoords: Pair<Float, Float>? by lazy {\n                if (positionInModel == null) {\n                    null\n                } else {\n                    panelInfo.toPanelSpace(positionInModel)\n                    positionInModel.x.toFloat() to positionInModel.y.toFloat()\n                }\n            }\n        }\n    }\n\n    data class CameraOrientation(override val cameraMatrix: baaahs.geom.Matrix4, override val aspect: Double) :\n        MapperUi.CameraOrientation {\n        fun createCamera(): PerspectiveCamera {\n            return PerspectiveCamera(45, aspect, 1, 10000).apply {\n                matrix.fromArray(cameraMatrix.elements.toDoubleArray())\n                // Get back position/rotation/scale attributes.\n                matrix.asDynamic().decompose(position, quaternion, scale)\n                updateMatrixWorld()\n            }\n        }\n\n        companion object {\n            fun from(camera: PerspectiveCamera): CameraOrientation {\n                return CameraOrientation(\n                    baaahs.geom.Matrix4(camera.matrix.toArray(js(\"undefined\")).toTypedArray()),\n                    camera.aspect\n                )\n            }\n        }\n    }\n\n    override fun showCandidates(orderedPanels: List<Pair<MapperUi.VisibleSurface, Float>>) {\n        orderedPanels as List<Pair<VisibleSurface, Float>>\n\n        val firstGuess = orderedPanels.first()\n        (firstGuess.first.panelInfo.mesh.material as MeshBasicMaterial).color.r += .25\n\n        table.clear()\n        table.append {\n            table {\n                tr {\n                    th { +\"Panel\" }\n                    th { +\"Centroid dist\" }\n                }\n\n                orderedPanels.subList(0, min(5, orderedPanels.size)).forEach { (visibleSurface, distance) ->\n                    tr {\n                        td { +visibleSurface.modelSurface.name }\n                        td { +\"$distance\" }\n                    }\n                }\n            }\n        }\n    }\n\n    override fun intersectingSurface(\n        x: Int,\n        y: Int,\n        visibleSurfaces: List<MapperUi.VisibleSurface>\n    ): MapperUi.VisibleSurface? {\n        val raycaster = three.Raycaster()\n        val pixelVector = Vector2(\n            x.toFloat() / uiWidth * 2 - 1,\n            -(y.toFloat() / uiHeight * 2 - 1)\n        )\n        raycaster.setFromCamera(pixelVector, uiCamera)\n        val intersections = raycaster.intersectObject(uiScene, true)\n        if (intersections.isNotEmpty()) {\n            val intersect = intersections.first()\n            return visibleSurfaces.find { it.modelSurface.name == intersect.`object`.name }\n        } else {\n            return null\n        }\n    }\n\n    private fun getScreenBox(): Box2 {\n        return Box2(Vector2(0, 0), Vector2(width, height))\n    }\n\n    private fun calcBoundingBoxOnScreen(box: Box3, screenCenter: Vector2): Box2 {\n        val minX = ((box.min.x * screenCenter.x) + screenCenter.x).toInt()\n        val maxX = ((box.max.x * screenCenter.x) + screenCenter.x).toInt()\n\n        // Invert Y for screen coordinates.\n        val minY = ((-box.max.y * screenCenter.y) + screenCenter.y).toInt()\n        val maxY = ((-box.min.y * screenCenter.y) + screenCenter.y).toInt()\n\n        return Box2(Vector2(minX, minY), Vector2(maxX, maxY))\n    }\n\n    override fun showCamImage(image: Image, changeRegion: MediaDevices.Region?) {\n        if (!haveCamDimensions) {\n            camWidth = image.width\n            camHeight = image.height\n            haveCamDimensions = true\n            resizeTo(width, height)\n        }\n\n        ui2dCtx.resetTransform()\n        CanvasBitmap(ui2dCanvas).drawImage(image)\n\n        changeRegion?.apply {\n            ui2dCtx.lineWidth = 2.0\n            ui2dCtx.strokeStyle = \"#ff0000\"\n            ui2dCtx.strokeRect(x0.toDouble(), y0.toDouble(), width.toDouble(), height.toDouble())\n        }\n    }\n\n    override fun showDiffImage(deltaBitmap: Bitmap, changeRegion: MediaDevices.Region?) {\n        diffCtx.resetTransform()\n        diffCtx.scale(diffCanvasScale, diffCanvasScale)\n        CanvasBitmap(diffCanvas).drawImage(deltaBitmap.asImage())\n\n        changeRegion?.apply {\n            diffCtx.strokeStyle = \"#ff0000\"\n            diffCtx.lineWidth = 1 / diffCanvasScale\n            diffCtx.strokeRect(\n                x0.toDouble(), y0.toDouble(),\n                changeRegion.width.toDouble(), changeRegion.height.toDouble()\n            )\n        }\n    }\n\n    override fun showMessage(message: String) {\n        messageDiv.innerText = message\n        console.log(\"Message:\", message)\n    }\n\n    override fun showMessage2(message: String) {\n        message2Div.innerText = message\n//        console.log(\"Message2:\", message)\n    }\n\n    override fun showBefore(bitmap: Bitmap) {\n        val beforeCanvas = document.body!!.first<HTMLCanvasElement>(\"mapperUi-before-canvas\")\n        val beforeCtx = beforeCanvas.getContext(\"2d\") as CanvasRenderingContext2D\n        beforeCtx.resetTransform()\n        beforeCtx.scale(.3, .3)\n        val renderBitmap = when (bitmap) { // TODO: huh?\n            is NativeBitmap -> bitmap.canvas\n            is CanvasBitmap -> bitmap.canvas\n            else -> bitmap as CanvasImageSource\n        }\n        beforeCtx.drawImage(renderBitmap, 0.0, 0.0)\n    }\n\n    override fun showAfter(bitmap: Bitmap) {\n        val afterCanvas = document.body!!.first<HTMLCanvasElement>(\"mapperUi-after-canvas\")\n        val afterCtx = afterCanvas.getContext(\"2d\") as CanvasRenderingContext2D\n        afterCtx.resetTransform()\n        afterCtx.scale(.3, .3)\n        val renderBitmap = when (bitmap) {\n            is NativeBitmap -> bitmap.canvas\n            is CanvasBitmap -> bitmap.canvas\n            else -> bitmap as CanvasImageSource\n        }\n        afterCtx.drawImage(renderBitmap, 0.0, 0.0)\n    }\n\n    override fun setRedo(fn: (suspend () -> Unit)?) {\n        if (fn == null) {\n            redoFn = null\n        } else {\n            redoFn = {\n                GlobalScope.launch { fn() }\n                redoButton.enabled(false)\n            }\n        }\n        redoButton.enabled(fn != null)\n    }\n\n    override fun showStats(total: Int, mapped: Int, visible: Int) {\n        statsDiv.innerHTML = \"<i class=\\\"fas fa-triangle\\\"></i>Mapped: $mapped / $total<br/>Visible: $visible\"\n    }\n\n    override fun pauseForUserInteraction() {\n        clickedPause()\n    }\n\n    private fun clickedPlay() {\n        showPauseMode(false)\n        listener.onStart()\n    }\n\n    private fun clickedPause() {\n        showPauseMode(true)\n        listener.onPause()\n    }\n\n    private fun showPauseMode(isPaused: Boolean) {\n        pauseButton.enabled(!isPaused)\n        playButton.enabled(isPaused)\n    }\n\n    private fun HTMLButtonElement.enabled(isEnabled: Boolean) {\n        style.opacity = if (isEnabled) \"1\" else \".5\"\n    }\n\n    private fun clickedStop() {\n        listener.onStop()\n    }\n\n    private fun goToSurface(name: String) {\n        val surface = modelSurfaceInfos.keys.find { it.name == name }\n        if (surface != null) {\n            val panelInfo = modelSurfaceInfos[surface]!!\n            panelInfo.geom.computeBoundingBox()\n            val surfaceCenter = panelInfo.center\n            val surfaceNormal = panelInfo.surfaceNormal\n\n            val newCamPosition = surfaceCenter.clone()\n            newCamPosition.add(surfaceNormal.clone().multiplyScalar(100))\n            resetCameraRotation()\n            uiControls.setLookAt(\n                newCamPosition.x, newCamPosition.y, newCamPosition.z,\n                surfaceCenter.x, surfaceCenter.y, surfaceCenter.z, true\n            )\n        }\n    }\n\n    override fun close() {\n    }\n\n    interface StatusListener {\n        fun mapperStatusChanged(isRunning: Boolean)\n    }\n}\n\nprivate val Box2.center: Vector2 get() = max.clone().sub(min).divideScalar(2).add(min)\n\nprivate fun Box3.project(camera: Camera): Box3 {\n    min.project(camera)\n    max.project(camera)\n\n    // Projection may cause min/max to be swapped; correct.\n    if (min.x > max.x) {\n        val temp = min.x; min.x = max.x; max.x = temp\n    }\n    if (min.y > max.y) {\n        val temp = min.y; min.y = max.y; max.y = temp\n    }\n    if (min.z > max.z) {\n        val temp = min.z; min.z = max.z; max.z = temp\n    }\n\n    return this\n}\n\nclass PanelInfo(\n    val name: String,\n    val faces: List<Face3>,\n    val mesh: Mesh,\n    val geom: Geometry,\n    val lineMaterial: LineBasicMaterial\n) {\n    val vertices: Set<Vector3>\n        get() {\n            val v = mutableSetOf<Vector3>()\n            for (face in faces) {\n                v.add(geom.vertices[face.a])\n                v.add(geom.vertices[face.b])\n                v.add(geom.vertices[face.c])\n            }\n            return v\n        }\n\n    val _boundingBox: Box3 by lazy {\n        val boundingBox = Box3()\n        for (vertex in vertices) {\n            boundingBox.expandByPoint(vertex)\n        }\n        boundingBox.translate(mesh.getWorldPosition())\n    }\n\n    val boundingBox get() = _boundingBox.clone()\n\n    private val rotator by lazy { Rotator(surfaceNormal, Vector3(0, 0, 1)) }\n\n    fun toSurfaceNormal(point: Vector3): Vector3 {\n        rotator.rotate(point); return point\n    }\n\n    private val normalBoundingBox: Box3 by lazy {\n        val worldPos = mesh.getWorldPosition()\n        val boundingBox = Box3()\n        for (vertex in vertices) {\n            boundingBox.expandByPoint(toSurfaceNormal(vertex).add(worldPos))\n        }\n        boundingBox\n    }\n\n    private val normalBoundingBoxVolume: Vector3 by lazy {\n        normalBoundingBox.max.clone().sub(normalBoundingBox.min)\n    }\n\n    fun toPanelSpace(point: Vector3): Vector3 {\n        var pt = point.clone()\n        pt = toSurfaceNormal(pt)\n        pt.sub(normalBoundingBox.min)\n        pt.divide(normalBoundingBoxVolume)\n        return pt\n    }\n\n    fun select() {\n        lineMaterial.color.r = 1.0\n        lineMaterial.color.g = 0.0\n    }\n\n    fun deselect() {\n        lineMaterial.color.r = 0.0\n        lineMaterial.color.g = 1.0\n    }\n\n    val center get() = boundingBox.getCenter()\n\n    val isMultiFaced get() = faces.size > 1\n\n    val _surfaceNormal: Vector3 by lazy {\n        val faceNormalSum = Vector3()\n        var totalArea = 0f\n        for (face in faces) {\n            val triangle = Triangle(geom.vertices[face.a], geom.vertices[face.b], geom.vertices[face.c])\n            val faceArea = triangle.asDynamic().getArea() as Float\n            faceNormalSum.addScaledVector(face.normal!!, faceArea)\n            totalArea += faceArea\n        }\n        faceNormalSum.divideScalar(totalArea.toDouble())\n    }\n\n    val surfaceNormal get() = _surfaceNormal.clone()\n\n    var boxOnScreen: Box2? = null\n}","package baaahs\n\nimport baaahs.jsx.FakeClientDevice\nimport kotlinext.js.jsObject\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLButtonElement\nimport org.w3c.dom.HTMLElement\nimport react.ReactElement\nimport react.createElement\nimport react.dom.render\nimport kotlin.browser.document\nimport kotlin.dom.appendElement\nimport kotlin.dom.appendText\n\nclass Launcher(val parentNode: Element) {\n\n    fun add(name: String, onLaunch: () -> HostedWebApp): HTMLButtonElement {\n\n        return parentNode.appendElement(\"button\") {\n            appendText(name)\n\n            (this as HTMLElement).onclick = {\n                console.log(\"Launch $name\", this)\n\n                val containerDiv = document.createElement(\"div\").also {\n                    document.body?.appendChild(it)\n                }\n\n                // Into the darkness.\n                val props = jsObject<FakeClientDevice.Props> {\n                    this.name = name\n                    width = 1024\n                    height = 768\n                    this.hostedWebApp = onLaunch()\n                    onClose = { document.body?.removeChild(containerDiv) }\n                }\n                render(createElement(FakeClientDevice::class.js, props), containerDiv)\n            }\n        } as HTMLButtonElement\n    }\n}\n\nexternal interface HostedWebApp {\n    @JsName(\"render\")\n    fun render(): ReactElement\n\n    @JsName(\"onClose\")\n    fun onClose()\n}\n","package baaahs\n\nimport org.w3c.dom.*\n\nvar Element.disabled: Boolean\n    get() = getAttribute(\"disabled\") == \"disabled\"\n    set(value) {\n        if (value) {\n            setAttribute(\"disabled\", \"disabled\")\n        } else {\n            removeAttribute(\"disabled\")\n        }\n    }\n\nfun <T> ItemArrayLike<T>.forEach(action: (T) -> Unit) {\n    for (i in 0 until length) {\n        action(item(i)!!)\n    }\n}\n\nfun DOMTokenList.clear() {\n    while (length > 0) {\n        remove(item(0)!!)\n    }\n}\n\n@Suppress(\"UNCHECKED_CAST\")\nfun <T : HTMLElement> HTMLElement.first(className: String) : T = (getElementsByClassName(className)[0] as T?)!!\n\nfun HTMLCanvasElement.context2d() = this.getContext(\"2d\")!! as CanvasRenderingContext2D\n","package baaahs\n\nimport baaahs.jsx.AppIndex\nimport baaahs.net.Network\nimport baaahs.proto.Ports\nimport kotlinext.js.jsObject\nimport react.ReactElement\nimport react.createElement\n\nclass WebUi(private val network: Network, private val pinkyAddress: Network.Address) : HostedWebApp {\n\n    override fun render(): ReactElement {\n        val webUiClientLink = network.link()\n        val pubSub = PubSub.Client(webUiClientLink, pinkyAddress, Ports.PINKY_UI_TCP).apply {\n            install(gadgetModule)\n        }\n\n        if (1 + 1 == 3) {\n            // Protection from dead code elimination:\n            GadgetDisplay(pubSub) {}\n        }\n\n        return createElement(AppIndex::class.js, jsObject<AppIndex.Props> {\n            this.pubSub = pubSub\n        })\n    }\n\n    override fun onClose() {\n    }\n}\n","package baaahs.admin\n\nimport baaahs.visualizer.Visualizer\nimport org.w3c.dom.HTMLDivElement\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.dom.div\n\nclass AdminPage(props: Props) : RComponent<AdminPage.Props, AdminPage.State>(props) {\n    private val container = react.createRef<HTMLDivElement>()\n\n    override fun componentDidMount() {\n        container.current?.appendChild(props.containerDiv)\n        props.visualizer.resize()\n    }\n\n    override fun componentWillUnmount() {\n        container.current?.removeChild(props.containerDiv)\n    }\n\n    override fun RBuilder.render() {\n        div { ref = container }\n    }\n\n    class Props(\n        var containerDiv: HTMLDivElement,\n        var visualizer: Visualizer\n    ) : RProps\n\n    class State : RState\n}","package baaahs.browser\n\nimport baaahs.MediaDevices\nimport baaahs.imaging.Image\nimport baaahs.imaging.VideoElementImage\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.MainScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\nimport org.w3c.dom.HTMLVideoElement\nimport org.w3c.dom.ImageBitmap\nimport org.w3c.dom.events.EventTarget\nimport org.w3c.dom.mediacapture.MediaStream\nimport org.w3c.dom.mediacapture.MediaStreamConstraints\nimport org.w3c.dom.mediacapture.MediaStreamTrack\nimport org.w3c.dom.mediacapture.MediaStreamTrackEvent\nimport kotlin.browser.document\nimport kotlin.browser.window\nimport kotlin.js.Promise\n\nclass RealMediaDevices : MediaDevices, CoroutineScope by MainScope() {\n    override fun getCamera(): MediaDevices.Camera {\n        return object : MediaDevices.Camera {\n            val camPromise: Promise<MediaStream> =\n                window.navigator.mediaDevices.getUserMedia(MediaStreamConstraints(video = js(\"({\" +\n                        \"    width: { min: 1024, ideal: 1280, max: 1920 },\\n\" +\n                        \"    height: { min: 776, ideal: 720, max: 1080 }\\n\" +\n                        \"})\")))\n            lateinit var videoTrack: MediaStreamTrack\n            //            lateinit var imageCapture: ImageCapture\n            val videoEl = document.createElement(\"video\") as HTMLVideoElement\n\n            init {\n                videoEl.autoplay = true\n\n                camPromise.then { stream: MediaStream ->\n                    videoTrack = stream.getVideoTracks()[0]\n//                    imageCapture = ImageCapture(videoTrack)\n                    videoEl.srcObject = stream\n                    videoEl.controls = true\n                    videoEl.play()\n\n                    videoEl.oncanplay = {\n                        println(\"oncanplay\")\n                        launch { capture() }\n                    }\n\n                    videoEl.onended = {\n                        println(\"onended\")\n                    }\n\n                    videoEl.onloadeddata = {\n                        println(\"onloadeddata\")\n                    }\n\n                }.catch { t -> println(\"caught ${t}\") }\n            }\n\n\n            override var onImage: (image: Image) -> Unit = {}\n\n            override fun close() {\n            }\n\n            suspend fun capture() {\n                onImage(VideoElementImage(videoEl))\n\n                delay(50)\n                capture()\n            }\n        }\n    }\n}\n\npublic open external class ImageCapture() : EventTarget {\n    constructor(track: MediaStreamTrack)\n\n    //    constructor(tracks: Array<MediaStreamTrack>)\n    open val id: String\n    open val active: Boolean\n    var onaddtrack: ((MediaStreamTrackEvent) -> dynamic)?\n    var onremovetrack: ((MediaStreamTrackEvent) -> dynamic)?\n    fun getAudioTracks(): Array<MediaStreamTrack>\n    fun getVideoTracks(): Array<MediaStreamTrack>\n    fun getTracks(): Array<MediaStreamTrack>\n    fun getTrackById(trackId: String): MediaStreamTrack?\n    fun addTrack(track: MediaStreamTrack): Unit\n    fun removeTrack(track: MediaStreamTrack): Unit\n    fun clone(): MediaStream\n    fun grabFrame(): Promise<ImageBitmap>\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.w3c.dom.mediacapture\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [MediaStream](https://developer.mozilla.org/en/docs/Web/API/MediaStream) to Kotlin\n */\npublic external open class MediaStream() : EventTarget {\n    constructor(stream: MediaStream)\n    constructor(tracks: Array<MediaStreamTrack>)\n    open val id: String\n    open val active: Boolean\n    var onaddtrack: ((MediaStreamTrackEvent) -> dynamic)?\n    var onremovetrack: ((MediaStreamTrackEvent) -> dynamic)?\n    fun getAudioTracks(): Array<MediaStreamTrack>\n    fun getVideoTracks(): Array<MediaStreamTrack>\n    fun getTracks(): Array<MediaStreamTrack>\n    fun getTrackById(trackId: String): MediaStreamTrack?\n    fun addTrack(track: MediaStreamTrack)\n    fun removeTrack(track: MediaStreamTrack)\n    fun clone(): MediaStream\n}\n\n/**\n * Exposes the JavaScript [MediaStreamTrack](https://developer.mozilla.org/en/docs/Web/API/MediaStreamTrack) to Kotlin\n */\npublic external abstract class MediaStreamTrack : EventTarget {\n    open val kind: String\n    open val id: String\n    open val label: String\n    open var enabled: Boolean\n    open val muted: Boolean\n    open var onmute: ((Event) -> dynamic)?\n    open var onunmute: ((Event) -> dynamic)?\n    open val readyState: MediaStreamTrackState\n    open var onended: ((Event) -> dynamic)?\n    open var onoverconstrained: ((Event) -> dynamic)?\n    fun clone(): MediaStreamTrack\n    fun stop()\n    fun getCapabilities(): MediaTrackCapabilities\n    fun getConstraints(): MediaTrackConstraints\n    fun getSettings(): MediaTrackSettings\n    fun applyConstraints(constraints: MediaTrackConstraints = definedExternally): Promise<Unit>\n}\n\n/**\n * Exposes the JavaScript [MediaTrackSupportedConstraints](https://developer.mozilla.org/en/docs/Web/API/MediaTrackSupportedConstraints) to Kotlin\n */\npublic external interface MediaTrackSupportedConstraints {\n    var width: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var aspectRatio: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var frameRate: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var facingMode: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeMode: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var volume: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleRate: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleSize: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var echoCancellation: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var autoGainControl: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var noiseSuppression: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var latency: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var channelCount: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var deviceId: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var groupId: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaTrackSupportedConstraints(width: Boolean? = true, height: Boolean? = true, aspectRatio: Boolean? = true, frameRate: Boolean? = true, facingMode: Boolean? = true, resizeMode: Boolean? = true, volume: Boolean? = true, sampleRate: Boolean? = true, sampleSize: Boolean? = true, echoCancellation: Boolean? = true, autoGainControl: Boolean? = true, noiseSuppression: Boolean? = true, latency: Boolean? = true, channelCount: Boolean? = true, deviceId: Boolean? = true, groupId: Boolean? = true): MediaTrackSupportedConstraints {\n    val o = js(\"({})\")\n    o[\"width\"] = width\n    o[\"height\"] = height\n    o[\"aspectRatio\"] = aspectRatio\n    o[\"frameRate\"] = frameRate\n    o[\"facingMode\"] = facingMode\n    o[\"resizeMode\"] = resizeMode\n    o[\"volume\"] = volume\n    o[\"sampleRate\"] = sampleRate\n    o[\"sampleSize\"] = sampleSize\n    o[\"echoCancellation\"] = echoCancellation\n    o[\"autoGainControl\"] = autoGainControl\n    o[\"noiseSuppression\"] = noiseSuppression\n    o[\"latency\"] = latency\n    o[\"channelCount\"] = channelCount\n    o[\"deviceId\"] = deviceId\n    o[\"groupId\"] = groupId\n    return o\n}\n\npublic external interface MediaTrackCapabilities {\n    var width: ULongRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: ULongRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var aspectRatio: DoubleRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var frameRate: DoubleRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var facingMode: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeMode: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var volume: DoubleRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleRate: ULongRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleSize: ULongRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var echoCancellation: Array<Boolean>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var autoGainControl: Array<Boolean>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var noiseSuppression: Array<Boolean>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var latency: DoubleRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var channelCount: ULongRange?\n        get() = definedExternally\n        set(value) = definedExternally\n    var deviceId: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var groupId: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaTrackCapabilities(width: ULongRange? = undefined, height: ULongRange? = undefined, aspectRatio: DoubleRange? = undefined, frameRate: DoubleRange? = undefined, facingMode: Array<String>? = undefined, resizeMode: Array<String>? = undefined, volume: DoubleRange? = undefined, sampleRate: ULongRange? = undefined, sampleSize: ULongRange? = undefined, echoCancellation: Array<Boolean>? = undefined, autoGainControl: Array<Boolean>? = undefined, noiseSuppression: Array<Boolean>? = undefined, latency: DoubleRange? = undefined, channelCount: ULongRange? = undefined, deviceId: String? = undefined, groupId: String? = undefined): MediaTrackCapabilities {\n    val o = js(\"({})\")\n    o[\"width\"] = width\n    o[\"height\"] = height\n    o[\"aspectRatio\"] = aspectRatio\n    o[\"frameRate\"] = frameRate\n    o[\"facingMode\"] = facingMode\n    o[\"resizeMode\"] = resizeMode\n    o[\"volume\"] = volume\n    o[\"sampleRate\"] = sampleRate\n    o[\"sampleSize\"] = sampleSize\n    o[\"echoCancellation\"] = echoCancellation\n    o[\"autoGainControl\"] = autoGainControl\n    o[\"noiseSuppression\"] = noiseSuppression\n    o[\"latency\"] = latency\n    o[\"channelCount\"] = channelCount\n    o[\"deviceId\"] = deviceId\n    o[\"groupId\"] = groupId\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaTrackConstraints](https://developer.mozilla.org/en/docs/Web/API/MediaTrackConstraints) to Kotlin\n */\npublic external interface MediaTrackConstraints : MediaTrackConstraintSet {\n    var advanced: Array<MediaTrackConstraintSet>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaTrackConstraints(advanced: Array<MediaTrackConstraintSet>? = undefined, width: dynamic = undefined, height: dynamic = undefined, aspectRatio: dynamic = undefined, frameRate: dynamic = undefined, facingMode: dynamic = undefined, resizeMode: dynamic = undefined, volume: dynamic = undefined, sampleRate: dynamic = undefined, sampleSize: dynamic = undefined, echoCancellation: dynamic = undefined, autoGainControl: dynamic = undefined, noiseSuppression: dynamic = undefined, latency: dynamic = undefined, channelCount: dynamic = undefined, deviceId: dynamic = undefined, groupId: dynamic = undefined): MediaTrackConstraints {\n    val o = js(\"({})\")\n    o[\"advanced\"] = advanced\n    o[\"width\"] = width\n    o[\"height\"] = height\n    o[\"aspectRatio\"] = aspectRatio\n    o[\"frameRate\"] = frameRate\n    o[\"facingMode\"] = facingMode\n    o[\"resizeMode\"] = resizeMode\n    o[\"volume\"] = volume\n    o[\"sampleRate\"] = sampleRate\n    o[\"sampleSize\"] = sampleSize\n    o[\"echoCancellation\"] = echoCancellation\n    o[\"autoGainControl\"] = autoGainControl\n    o[\"noiseSuppression\"] = noiseSuppression\n    o[\"latency\"] = latency\n    o[\"channelCount\"] = channelCount\n    o[\"deviceId\"] = deviceId\n    o[\"groupId\"] = groupId\n    return o\n}\n\npublic external interface MediaTrackConstraintSet {\n    var width: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var aspectRatio: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var frameRate: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var facingMode: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeMode: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var volume: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleRate: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleSize: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var echoCancellation: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var autoGainControl: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var noiseSuppression: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var latency: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var channelCount: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var deviceId: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var groupId: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaTrackConstraintSet(width: dynamic = undefined, height: dynamic = undefined, aspectRatio: dynamic = undefined, frameRate: dynamic = undefined, facingMode: dynamic = undefined, resizeMode: dynamic = undefined, volume: dynamic = undefined, sampleRate: dynamic = undefined, sampleSize: dynamic = undefined, echoCancellation: dynamic = undefined, autoGainControl: dynamic = undefined, noiseSuppression: dynamic = undefined, latency: dynamic = undefined, channelCount: dynamic = undefined, deviceId: dynamic = undefined, groupId: dynamic = undefined): MediaTrackConstraintSet {\n    val o = js(\"({})\")\n    o[\"width\"] = width\n    o[\"height\"] = height\n    o[\"aspectRatio\"] = aspectRatio\n    o[\"frameRate\"] = frameRate\n    o[\"facingMode\"] = facingMode\n    o[\"resizeMode\"] = resizeMode\n    o[\"volume\"] = volume\n    o[\"sampleRate\"] = sampleRate\n    o[\"sampleSize\"] = sampleSize\n    o[\"echoCancellation\"] = echoCancellation\n    o[\"autoGainControl\"] = autoGainControl\n    o[\"noiseSuppression\"] = noiseSuppression\n    o[\"latency\"] = latency\n    o[\"channelCount\"] = channelCount\n    o[\"deviceId\"] = deviceId\n    o[\"groupId\"] = groupId\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaTrackSettings](https://developer.mozilla.org/en/docs/Web/API/MediaTrackSettings) to Kotlin\n */\npublic external interface MediaTrackSettings {\n    var width: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var aspectRatio: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var frameRate: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var facingMode: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeMode: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var volume: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleRate: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var sampleSize: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var echoCancellation: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var autoGainControl: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var noiseSuppression: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var latency: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var channelCount: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var deviceId: String?\n        get() = definedExternally\n        set(value) = definedExternally\n    var groupId: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaTrackSettings(width: Int? = undefined, height: Int? = undefined, aspectRatio: Double? = undefined, frameRate: Double? = undefined, facingMode: String? = undefined, resizeMode: String? = undefined, volume: Double? = undefined, sampleRate: Int? = undefined, sampleSize: Int? = undefined, echoCancellation: Boolean? = undefined, autoGainControl: Boolean? = undefined, noiseSuppression: Boolean? = undefined, latency: Double? = undefined, channelCount: Int? = undefined, deviceId: String? = undefined, groupId: String? = undefined): MediaTrackSettings {\n    val o = js(\"({})\")\n    o[\"width\"] = width\n    o[\"height\"] = height\n    o[\"aspectRatio\"] = aspectRatio\n    o[\"frameRate\"] = frameRate\n    o[\"facingMode\"] = facingMode\n    o[\"resizeMode\"] = resizeMode\n    o[\"volume\"] = volume\n    o[\"sampleRate\"] = sampleRate\n    o[\"sampleSize\"] = sampleSize\n    o[\"echoCancellation\"] = echoCancellation\n    o[\"autoGainControl\"] = autoGainControl\n    o[\"noiseSuppression\"] = noiseSuppression\n    o[\"latency\"] = latency\n    o[\"channelCount\"] = channelCount\n    o[\"deviceId\"] = deviceId\n    o[\"groupId\"] = groupId\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaStreamTrackEvent](https://developer.mozilla.org/en/docs/Web/API/MediaStreamTrackEvent) to Kotlin\n */\npublic external open class MediaStreamTrackEvent(type: String, eventInitDict: MediaStreamTrackEventInit) : Event {\n    open val track: MediaStreamTrack\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface MediaStreamTrackEventInit : EventInit {\n    var track: MediaStreamTrack?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaStreamTrackEventInit(track: MediaStreamTrack?, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaStreamTrackEventInit {\n    val o = js(\"({})\")\n    o[\"track\"] = track\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\npublic external open class OverconstrainedErrorEvent(type: String, eventInitDict: OverconstrainedErrorEventInit) : Event {\n    open val error: dynamic\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface OverconstrainedErrorEventInit : EventInit {\n    var error: dynamic /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun OverconstrainedErrorEventInit(error: dynamic = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): OverconstrainedErrorEventInit {\n    val o = js(\"({})\")\n    o[\"error\"] = error\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaDevices](https://developer.mozilla.org/en/docs/Web/API/MediaDevices) to Kotlin\n */\npublic external abstract class MediaDevices : EventTarget {\n    open var ondevicechange: ((Event) -> dynamic)?\n    fun enumerateDevices(): Promise<Array<MediaDeviceInfo>>\n    fun getSupportedConstraints(): MediaTrackSupportedConstraints\n    fun getUserMedia(constraints: MediaStreamConstraints = definedExternally): Promise<MediaStream>\n}\n\n/**\n * Exposes the JavaScript [MediaDeviceInfo](https://developer.mozilla.org/en/docs/Web/API/MediaDeviceInfo) to Kotlin\n */\npublic external abstract class MediaDeviceInfo {\n    open val deviceId: String\n    open val kind: MediaDeviceKind\n    open val label: String\n    open val groupId: String\n    fun toJSON(): dynamic\n}\n\npublic external abstract class InputDeviceInfo : MediaDeviceInfo {\n    fun getCapabilities(): MediaTrackCapabilities\n}\n\n/**\n * Exposes the JavaScript [MediaStreamConstraints](https://developer.mozilla.org/en/docs/Web/API/MediaStreamConstraints) to Kotlin\n */\npublic external interface MediaStreamConstraints {\n    var video: dynamic /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var audio: dynamic /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaStreamConstraints(video: dynamic = false, audio: dynamic = false): MediaStreamConstraints {\n    val o = js(\"({})\")\n    o[\"video\"] = video\n    o[\"audio\"] = audio\n    return o\n}\n\npublic external interface ConstrainablePattern {\n    var onoverconstrained: ((Event) -> dynamic)?\n        get() = definedExternally\n        set(value) = definedExternally\n    fun getCapabilities(): Capabilities\n    fun getConstraints(): Constraints\n    fun getSettings(): Settings\n    fun applyConstraints(constraints: Constraints = definedExternally): Promise<Unit>\n}\n\n/**\n * Exposes the JavaScript [DoubleRange](https://developer.mozilla.org/en/docs/Web/API/DoubleRange) to Kotlin\n */\npublic external interface DoubleRange {\n    var max: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var min: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DoubleRange(max: Double? = undefined, min: Double? = undefined): DoubleRange {\n    val o = js(\"({})\")\n    o[\"max\"] = max\n    o[\"min\"] = min\n    return o\n}\n\npublic external interface ConstrainDoubleRange : DoubleRange {\n    var exact: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ideal: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConstrainDoubleRange(exact: Double? = undefined, ideal: Double? = undefined, max: Double? = undefined, min: Double? = undefined): ConstrainDoubleRange {\n    val o = js(\"({})\")\n    o[\"exact\"] = exact\n    o[\"ideal\"] = ideal\n    o[\"max\"] = max\n    o[\"min\"] = min\n    return o\n}\n\npublic external interface ULongRange {\n    var max: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var min: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ULongRange(max: Int? = undefined, min: Int? = undefined): ULongRange {\n    val o = js(\"({})\")\n    o[\"max\"] = max\n    o[\"min\"] = min\n    return o\n}\n\npublic external interface ConstrainULongRange : ULongRange {\n    var exact: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ideal: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConstrainULongRange(exact: Int? = undefined, ideal: Int? = undefined, max: Int? = undefined, min: Int? = undefined): ConstrainULongRange {\n    val o = js(\"({})\")\n    o[\"exact\"] = exact\n    o[\"ideal\"] = ideal\n    o[\"max\"] = max\n    o[\"min\"] = min\n    return o\n}\n\n/**\n * Exposes the JavaScript [ConstrainBooleanParameters](https://developer.mozilla.org/en/docs/Web/API/ConstrainBooleanParameters) to Kotlin\n */\npublic external interface ConstrainBooleanParameters {\n    var exact: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var ideal: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConstrainBooleanParameters(exact: Boolean? = undefined, ideal: Boolean? = undefined): ConstrainBooleanParameters {\n    val o = js(\"({})\")\n    o[\"exact\"] = exact\n    o[\"ideal\"] = ideal\n    return o\n}\n\n/**\n * Exposes the JavaScript [ConstrainDOMStringParameters](https://developer.mozilla.org/en/docs/Web/API/ConstrainDOMStringParameters) to Kotlin\n */\npublic external interface ConstrainDOMStringParameters {\n    var exact: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n    var ideal: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConstrainDOMStringParameters(exact: dynamic = undefined, ideal: dynamic = undefined): ConstrainDOMStringParameters {\n    val o = js(\"({})\")\n    o[\"exact\"] = exact\n    o[\"ideal\"] = ideal\n    return o\n}\n\npublic external interface Capabilities\n\n@kotlin.internal.InlineOnly\npublic inline fun Capabilities(): Capabilities {\n    val o = js(\"({})\")\n    return o\n}\n\npublic external interface Settings\n\n@kotlin.internal.InlineOnly\npublic inline fun Settings(): Settings {\n    val o = js(\"({})\")\n    return o\n}\n\npublic external interface ConstraintSet\n\n@kotlin.internal.InlineOnly\npublic inline fun ConstraintSet(): ConstraintSet {\n    val o = js(\"({})\")\n    return o\n}\n\npublic external interface Constraints : ConstraintSet {\n    var advanced: Array<ConstraintSet>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun Constraints(advanced: Array<ConstraintSet>? = undefined): Constraints {\n    val o = js(\"({})\")\n    o[\"advanced\"] = advanced\n    return o\n}\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface MediaStreamTrackState {\n    companion object\n}\n\npublic inline val MediaStreamTrackState.Companion.LIVE: MediaStreamTrackState get() = \"live\".asDynamic().unsafeCast<MediaStreamTrackState>()\n\npublic inline val MediaStreamTrackState.Companion.ENDED: MediaStreamTrackState get() = \"ended\".asDynamic().unsafeCast<MediaStreamTrackState>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface VideoFacingModeEnum {\n    companion object\n}\n\npublic inline val VideoFacingModeEnum.Companion.USER: VideoFacingModeEnum get() = \"user\".asDynamic().unsafeCast<VideoFacingModeEnum>()\n\npublic inline val VideoFacingModeEnum.Companion.ENVIRONMENT: VideoFacingModeEnum get() = \"environment\".asDynamic().unsafeCast<VideoFacingModeEnum>()\n\npublic inline val VideoFacingModeEnum.Companion.LEFT: VideoFacingModeEnum get() = \"left\".asDynamic().unsafeCast<VideoFacingModeEnum>()\n\npublic inline val VideoFacingModeEnum.Companion.RIGHT: VideoFacingModeEnum get() = \"right\".asDynamic().unsafeCast<VideoFacingModeEnum>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface VideoResizeModeEnum {\n    companion object\n}\n\npublic inline val VideoResizeModeEnum.Companion.NONE: VideoResizeModeEnum get() = \"none\".asDynamic().unsafeCast<VideoResizeModeEnum>()\n\npublic inline val VideoResizeModeEnum.Companion.CROP_AND_SCALE: VideoResizeModeEnum get() = \"crop-and-scale\".asDynamic().unsafeCast<VideoResizeModeEnum>()\n\n/* please, don't implement this interface! */\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface MediaDeviceKind {\n    companion object\n}\n\npublic inline val MediaDeviceKind.Companion.AUDIOINPUT: MediaDeviceKind get() = \"audioinput\".asDynamic().unsafeCast<MediaDeviceKind>()\n\npublic inline val MediaDeviceKind.Companion.AUDIOOUTPUT: MediaDeviceKind get() = \"audiooutput\".asDynamic().unsafeCast<MediaDeviceKind>()\n\npublic inline val MediaDeviceKind.Companion.VIDEOINPUT: MediaDeviceKind get() = \"videoinput\".asDynamic().unsafeCast<MediaDeviceKind>()","package baaahs.geom\n\nactual class Vector2 actual constructor(x: Double, y: Double) : info.laht.threekt.math.Vector2(x, y) {\n}","package baaahs.glsl\n\nimport com.danielgergely.kgl.Kgl\nimport com.danielgergely.kgl.KglJs\nimport com.danielgergely.kgl.WebGL2RenderingContext\nimport org.w3c.dom.HTMLCanvasElement\nimport kotlin.browser.document\nimport kotlin.browser.window\n\nactual object GlslBase {\n    actual val plugins: MutableList<GlslPlugin> = mutableListOf()\n    actual val manager: GlslManager by lazy { JsGlslManager() }\n\n    class JsGlslManager : GlslManager() {\n        override val available: Boolean by lazy {\n            val canvas = document.createElement(\"canvas\") as HTMLCanvasElement\n            val gl = canvas.getContext(\"webgl\")\n            gl != null\n        }\n\n        override fun createContext(): GlslContext {\n            val canvas = document.createElement(\"canvas\") as HTMLCanvasElement\n            val gl = canvas.getContext(\"webgl2\") as WebGL2RenderingContext?\n            if (gl == null) {\n                window.alert(\n                    \"Running GLSL shows on iOS requires WebGL 2.0.\\n\" +\n                            \"\\n\" +\n                            \"Go to Settings \u2192 Safari \u2192 Advanced \u2192 Experimental Features and enable WebGL 2.0.\"\n                )\n                throw Exception(\"WebGL 2 not supported\")\n            }\n            return JsGlslContext(KglJs(gl), \"300 es\")\n        }\n    }\n\n    class JsGlslContext(kgl: Kgl, glslVersion: String) : GlslContext(kgl, glslVersion) {\n        override fun <T> runInContext(fn: () -> T): T = fn()\n    }\n}\n","package baaahs.imaging\n\nimport baaahs.MediaDevices\nimport baaahs.context2d\nimport baaahs.first\nimport kotlinx.html.dom.create\nimport kotlinx.html.js.canvas\nimport org.khronos.webgl.Uint8ClampedArray\nimport org.khronos.webgl.get\nimport org.w3c.dom.CanvasRenderingContext2D\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.HTMLVideoElement\nimport org.w3c.dom.ImageBitmap\nimport kotlin.browser.document\n\nactual class NativeBitmap actual constructor(override val width: Int, override val height: Int) :\n    CanvasBitmap(createCanvas(width, height)), Bitmap {\n}\n\nfun createCanvas(width: Int, height: Int) =\n    document.create.canvas {\n        this.width = \"${width}px\"\n        this.height = \"${height}px\"\n    }\n\nopen class CanvasBitmap(internal val canvas: HTMLCanvasElement) : Bitmap {\n    override val width = canvas.width\n    override val height = canvas.height\n\n    internal val ctx = canvas.context2d()\n\n    override fun drawImage(image: Image) = (image as JsImage).draw(ctx, 0, 0)\n\n    override fun drawImage(\n        image: Image,\n        sX: Int, sY: Int, sWidth: Int, sHeight: Int,\n        dX: Int, dY: Int, dWidth: Int, dHeight: Int\n    ) = (image as JsImage).draw(ctx, sX, sY, sWidth, sHeight, dX, dY, dWidth, dHeight)\n\n    override fun copyFrom(other: Bitmap) {\n        assertSameSizeAs(other)\n\n        ctx.resetTransform()\n        ctx.globalCompositeOperation = \"source-over\"\n        ctx.drawImage((other as CanvasBitmap).canvas, 0.0, 0.0)\n        ctx.resetTransform()\n    }\n\n    private fun apply(other: Bitmap, operation: String) {\n        other as CanvasBitmap\n        assertSameSizeAs(other)\n\n        ctx.resetTransform()\n        ctx.globalCompositeOperation = operation\n        ctx.drawImage(other.canvas, 0.0, 0.0)\n        ctx.resetTransform()\n    }\n\n    override fun lighten(other: Bitmap) {\n        apply(other, \"lighten\")\n    }\n\n    override fun darken(other: Bitmap) {\n        apply(other, \"darken\")\n    }\n\n    override fun subtract(other: Bitmap) {\n        apply(other, \"difference\")\n    }\n\n    override fun toDataUrl(): String = canvas.toDataURL(\"image/webp\")\n\n    override fun withData(region: MediaDevices.Region, fn: (data: UByteClampedArray) -> Boolean) {\n        val x = region.x0.toDouble()\n        val y = region.y0.toDouble()\n        val width = region.width.toDouble()\n        val height = region.height.toDouble()\n        val imageData = ctx.getImageData(x, y, width, height)\n        if (fn(JsUByteClampedArray(imageData.data))) {\n            ctx.putImageData(imageData, x, y, x, y, width, height)\n        }\n    }\n\n    override fun asImage(): Image {\n        return object : JsImage() {\n            override val width = this@CanvasBitmap.width\n            override val height = this@CanvasBitmap.height\n            override fun toBitmap(): Bitmap = this@CanvasBitmap\n\n            override fun draw(ctx: CanvasRenderingContext2D, x: Int, y: Int) {\n                ctx.drawImage(canvas, 0.0, 0.0)\n            }\n\n            override fun draw(\n                ctx: CanvasRenderingContext2D,\n                sX: Int, sY: Int, sWidth: Int, sHeight: Int,\n                dX: Int, dY: Int, dWidth: Int, dHeight: Int\n            ) {\n                ctx.drawImage(\n                    canvas,\n                    sX.toDouble(), sY.toDouble(), sWidth.toDouble(), sHeight.toDouble(),\n                    dX.toDouble(), dY.toDouble(), dWidth.toDouble(), dHeight.toDouble()\n                )\n            }\n        }\n    }\n\n    override fun clone(): Bitmap {\n        val newCanvas = document.createElement(\"canvas\") as HTMLCanvasElement\n        newCanvas.width = canvas.width\n        newCanvas.height = canvas.height\n        val ctx = newCanvas.getContext(\"2d\") as CanvasRenderingContext2D\n        ctx.drawImage(canvas, 0.0, 0.0)\n        return CanvasBitmap(newCanvas)\n    }\n\n    private fun assertSameSizeAs(other: Bitmap) {\n        if (width != other.width || height != other.height) {\n            throw IllegalArgumentException(\n                \"other bitmap is not the same size\" +\n                        \" (${width}x${height} != ${other.width}x${other.height})\"\n            )\n        }\n    }\n}\n\nabstract class JsImage : Image {\n    abstract fun draw(ctx: CanvasRenderingContext2D, x: Int, y: Int)\n\n    abstract fun draw(\n        ctx: CanvasRenderingContext2D,\n        sX: Int, sY: Int, sWidth: Int, sHeight: Int,\n        dX: Int, dY: Int, dWidth: Int, dHeight: Int\n    )\n}\n\nclass ImageBitmapImage(private val imageBitmap: ImageBitmap) : JsImage() {\n    override val width = imageBitmap.width\n    override val height = imageBitmap.height\n\n    override fun toBitmap(): Bitmap {\n        val bitmap = NativeBitmap(imageBitmap.width, imageBitmap.height)\n        bitmap.drawImage(this)\n        return bitmap\n    }\n\n    override fun draw(ctx: CanvasRenderingContext2D, x: Int, y: Int) {\n        ctx.drawImage(imageBitmap, 0.0, 0.0)\n    }\n\n    override fun draw(\n        ctx: CanvasRenderingContext2D,\n        sX: Int, sY: Int, sWidth: Int, sHeight: Int,\n        dX: Int, dY: Int, dWidth: Int, dHeight: Int\n    ) {\n        ctx.drawImage(\n            imageBitmap,\n            sX.toDouble(), sY.toDouble(), sWidth.toDouble(), sHeight.toDouble(),\n            dX.toDouble(), dY.toDouble(), dWidth.toDouble(), dHeight.toDouble()\n        )\n    }\n}\n\nclass VideoElementImage(private val videoEl: HTMLVideoElement) : JsImage() {\n    override val width get() = videoEl.videoWidth\n    override val height get() = videoEl.videoHeight\n\n    override fun toBitmap(): Bitmap {\n        val bitmap = NativeBitmap(videoEl.videoWidth, videoEl.videoHeight)\n        bitmap.drawImage(this)\n        return bitmap\n    }\n\n    override fun draw(ctx: CanvasRenderingContext2D, x: Int, y: Int) {\n        ctx.drawImage(videoEl, 0.0, 0.0)\n    }\n\n    override fun draw(\n        ctx: CanvasRenderingContext2D,\n        sX: Int, sY: Int, sWidth: Int, sHeight: Int,\n        dX: Int, dY: Int, dWidth: Int, dHeight: Int\n    ) {\n        ctx.drawImage(\n            videoEl,\n            sX.toDouble(), sY.toDouble(), sWidth.toDouble(), sHeight.toDouble(),\n            dX.toDouble(), dY.toDouble(), dWidth.toDouble(), dHeight.toDouble()\n        )\n    }\n}\n\nclass JsUByteClampedArray(val delegate: Uint8ClampedArray) : UByteClampedArray {\n    override val size: Int get() = delegate.length\n\n    override operator fun get(index: Int): Int {\n        return delegate[index].toInt()\n    }\n\n    override operator fun set(index: Int, value: UByte) {\n        delegate.asDynamic()[index] = value\n    }\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See github.com/kotlin/dukat for details\n\npackage org.khronos.webgl\n\nimport kotlin.js.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external interface WebGLContextAttributes {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var depth: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var stencil: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var antialias: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultipliedAlpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preserveDrawingBuffer: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preferLowPowerToHighPerformance: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var failIfMajorPerformanceCaveat: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextAttributes(alpha: Boolean? = true, depth: Boolean? = true, stencil: Boolean? = false, antialias: Boolean? = true, premultipliedAlpha: Boolean? = true, preserveDrawingBuffer: Boolean? = false, preferLowPowerToHighPerformance: Boolean? = false, failIfMajorPerformanceCaveat: Boolean? = false): WebGLContextAttributes {\n    val o = js(\"({})\")\n    o[\"alpha\"] = alpha\n    o[\"depth\"] = depth\n    o[\"stencil\"] = stencil\n    o[\"antialias\"] = antialias\n    o[\"premultipliedAlpha\"] = premultipliedAlpha\n    o[\"preserveDrawingBuffer\"] = preserveDrawingBuffer\n    o[\"preferLowPowerToHighPerformance\"] = preferLowPowerToHighPerformance\n    o[\"failIfMajorPerformanceCaveat\"] = failIfMajorPerformanceCaveat\n    return o\n}\n\npublic external abstract class WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLBuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLBuffer) to Kotlin\n */\npublic external abstract class WebGLBuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLFramebuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLFramebuffer) to Kotlin\n */\npublic external abstract class WebGLFramebuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLProgram](https://developer.mozilla.org/en/docs/Web/API/WebGLProgram) to Kotlin\n */\npublic external abstract class WebGLProgram : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLRenderbuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderbuffer) to Kotlin\n */\npublic external abstract class WebGLRenderbuffer : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLShader](https://developer.mozilla.org/en/docs/Web/API/WebGLShader) to Kotlin\n */\npublic external abstract class WebGLShader : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLTexture](https://developer.mozilla.org/en/docs/Web/API/WebGLTexture) to Kotlin\n */\npublic external abstract class WebGLTexture : WebGLObject\n\n/**\n * Exposes the JavaScript [WebGLUniformLocation](https://developer.mozilla.org/en/docs/Web/API/WebGLUniformLocation) to Kotlin\n */\npublic external abstract class WebGLUniformLocation\n\n/**\n * Exposes the JavaScript [WebGLActiveInfo](https://developer.mozilla.org/en/docs/Web/API/WebGLActiveInfo) to Kotlin\n */\npublic external abstract class WebGLActiveInfo {\n    open val size: Int\n    open val type: Int\n    open val name: String\n}\n\n/**\n * Exposes the JavaScript [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en/docs/Web/API/WebGLShaderPrecisionFormat) to Kotlin\n */\npublic external abstract class WebGLShaderPrecisionFormat {\n    open val rangeMin: Int\n    open val rangeMax: Int\n    open val precision: Int\n}\n\n@Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npublic external interface WebGLRenderingContextBase {\n    val canvas: HTMLCanvasElement\n    val drawingBufferWidth: Int\n    val drawingBufferHeight: Int\n    fun getContextAttributes(): WebGLContextAttributes?\n    fun isContextLost(): Boolean\n    fun getSupportedExtensions(): Array<String>?\n    fun getExtension(name: String): dynamic\n    fun activeTexture(texture: Int)\n    fun attachShader(program: WebGLProgram?, shader: WebGLShader?)\n    fun bindAttribLocation(program: WebGLProgram?, index: Int, name: String)\n    fun bindBuffer(target: Int, buffer: WebGLBuffer?)\n    fun bindFramebuffer(target: Int, framebuffer: WebGLFramebuffer?)\n    fun bindRenderbuffer(target: Int, renderbuffer: WebGLRenderbuffer?)\n    fun bindTexture(target: Int, texture: WebGLTexture?)\n    fun blendColor(red: Float, green: Float, blue: Float, alpha: Float)\n    fun blendEquation(mode: Int)\n    fun blendEquationSeparate(modeRGB: Int, modeAlpha: Int)\n    fun blendFunc(sfactor: Int, dfactor: Int)\n    fun blendFuncSeparate(srcRGB: Int, dstRGB: Int, srcAlpha: Int, dstAlpha: Int)\n    fun bufferData(target: Int, size: Int, usage: Int)\n    fun bufferData(target: Int, data: BufferDataSource?, usage: Int)\n    fun bufferSubData(target: Int, offset: Int, data: BufferDataSource?)\n    fun checkFramebufferStatus(target: Int): Int\n    fun clear(mask: Int)\n    fun clearColor(red: Float, green: Float, blue: Float, alpha: Float)\n    fun clearDepth(depth: Float)\n    fun clearStencil(s: Int)\n    fun colorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean)\n    fun compileShader(shader: WebGLShader?)\n    fun compressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, data: ArrayBufferView)\n    fun compressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, data: ArrayBufferView)\n    fun copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int)\n    fun copyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int)\n    fun createBuffer(): WebGLBuffer?\n    fun createFramebuffer(): WebGLFramebuffer?\n    fun createProgram(): WebGLProgram?\n    fun createRenderbuffer(): WebGLRenderbuffer?\n    fun createShader(type: Int): WebGLShader?\n    fun createTexture(): WebGLTexture?\n    fun cullFace(mode: Int)\n    fun deleteBuffer(buffer: WebGLBuffer?)\n    fun deleteFramebuffer(framebuffer: WebGLFramebuffer?)\n    fun deleteProgram(program: WebGLProgram?)\n    fun deleteRenderbuffer(renderbuffer: WebGLRenderbuffer?)\n    fun deleteShader(shader: WebGLShader?)\n    fun deleteTexture(texture: WebGLTexture?)\n    fun depthFunc(func: Int)\n    fun depthMask(flag: Boolean)\n    fun depthRange(zNear: Float, zFar: Float)\n    fun detachShader(program: WebGLProgram?, shader: WebGLShader?)\n    fun disable(cap: Int)\n    fun disableVertexAttribArray(index: Int)\n    fun drawArrays(mode: Int, first: Int, count: Int)\n    fun drawElements(mode: Int, count: Int, type: Int, offset: Int)\n    fun enable(cap: Int)\n    fun enableVertexAttribArray(index: Int)\n    fun finish()\n    fun flush()\n    fun framebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: WebGLRenderbuffer?)\n    fun framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: WebGLTexture?, level: Int)\n    fun frontFace(mode: Int)\n    fun generateMipmap(target: Int)\n    fun getActiveAttrib(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getActiveUniform(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getAttachedShaders(program: WebGLProgram?): Array<WebGLShader>?\n    fun getAttribLocation(program: WebGLProgram?, name: String): Int\n    fun getBufferParameter(target: Int, pname: Int): Any?\n    fun getParameter(pname: Int): Any?\n    fun getError(): Int\n    fun getFramebufferAttachmentParameter(target: Int, attachment: Int, pname: Int): Any?\n    fun getProgramParameter(program: WebGLProgram?, pname: Int): Any?\n    fun getProgramInfoLog(program: WebGLProgram?): String?\n    fun getRenderbufferParameter(target: Int, pname: Int): Any?\n    fun getShaderParameter(shader: WebGLShader?, pname: Int): Any?\n    fun getShaderPrecisionFormat(shadertype: Int, precisiontype: Int): WebGLShaderPrecisionFormat?\n    fun getShaderInfoLog(shader: WebGLShader?): String?\n    fun getShaderSource(shader: WebGLShader?): String?\n    fun getTexParameter(target: Int, pname: Int): Any?\n    fun getUniform(program: WebGLProgram?, location: WebGLUniformLocation?): Any?\n    fun getUniformLocation(program: WebGLProgram?, name: String): WebGLUniformLocation?\n    fun getVertexAttrib(index: Int, pname: Int): Any?\n    fun getVertexAttribOffset(index: Int, pname: Int): Int\n    fun hint(target: Int, mode: Int)\n    fun isBuffer(buffer: WebGLBuffer?): Boolean\n    fun isEnabled(cap: Int): Boolean\n    fun isFramebuffer(framebuffer: WebGLFramebuffer?): Boolean\n    fun isProgram(program: WebGLProgram?): Boolean\n    fun isRenderbuffer(renderbuffer: WebGLRenderbuffer?): Boolean\n    fun isShader(shader: WebGLShader?): Boolean\n    fun isTexture(texture: WebGLTexture?): Boolean\n    fun lineWidth(width: Float)\n    fun linkProgram(program: WebGLProgram?)\n    fun pixelStorei(pname: Int, param: Int)\n    fun polygonOffset(factor: Float, units: Float)\n    fun readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun renderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int)\n    fun sampleCoverage(value: Float, invert: Boolean)\n    fun scissor(x: Int, y: Int, width: Int, height: Int)\n    fun shaderSource(shader: WebGLShader?, source: String)\n    fun stencilFunc(func: Int, ref: Int, mask: Int)\n    fun stencilFuncSeparate(face: Int, func: Int, ref: Int, mask: Int)\n    fun stencilMask(mask: Int)\n    fun stencilMaskSeparate(face: Int, mask: Int)\n    fun stencilOp(fail: Int, zfail: Int, zpass: Int)\n    fun stencilOpSeparate(face: Int, fail: Int, zfail: Int, zpass: Int)\n    fun texImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun texImage2D(target: Int, level: Int, internalformat: Int, format: Int, type: Int, source: TexImageSource?)\n    fun texParameterf(target: Int, pname: Int, param: Float)\n    fun texParameteri(target: Int, pname: Int, param: Int)\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?)\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, type: Int, source: TexImageSource?)\n    fun uniform1f(location: WebGLUniformLocation?, x: Float)\n    fun uniform1fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform1fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform1i(location: WebGLUniformLocation?, x: Int)\n    fun uniform1iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform1iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform2f(location: WebGLUniformLocation?, x: Float, y: Float)\n    fun uniform2fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform2fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform2i(location: WebGLUniformLocation?, x: Int, y: Int)\n    fun uniform2iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform2iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform3f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float)\n    fun uniform3fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform3fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform3i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int)\n    fun uniform3iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform3iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniform4f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float, w: Float)\n    fun uniform4fv(location: WebGLUniformLocation?, v: Float32Array)\n    fun uniform4fv(location: WebGLUniformLocation?, v: Array<Float>)\n    fun uniform4i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int, w: Int)\n    fun uniform4iv(location: WebGLUniformLocation?, v: Int32Array)\n    fun uniform4iv(location: WebGLUniformLocation?, v: Array<Int>)\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array)\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>)\n    fun useProgram(program: WebGLProgram?)\n    fun validateProgram(program: WebGLProgram?)\n    fun vertexAttrib1f(index: Int, x: Float)\n    fun vertexAttrib1fv(index: Int, values: dynamic)\n    fun vertexAttrib2f(index: Int, x: Float, y: Float)\n    fun vertexAttrib2fv(index: Int, values: dynamic)\n    fun vertexAttrib3f(index: Int, x: Float, y: Float, z: Float)\n    fun vertexAttrib3fv(index: Int, values: dynamic)\n    fun vertexAttrib4f(index: Int, x: Float, y: Float, z: Float, w: Float)\n    fun vertexAttrib4fv(index: Int, values: dynamic)\n    fun vertexAttribPointer(index: Int, size: Int, type: Int, normalized: Boolean, stride: Int, offset: Int)\n    fun viewport(x: Int, y: Int, width: Int, height: Int)\n\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLRenderingContext](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderingContext) to Kotlin\n */\npublic external abstract class WebGLRenderingContext : WebGLRenderingContextBase, RenderingContext {\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLContextEvent](https://developer.mozilla.org/en/docs/Web/API/WebGLContextEvent) to Kotlin\n */\npublic external open class WebGLContextEvent(type: String, eventInit: WebGLContextEventInit = definedExternally) : Event {\n    open val statusMessage: String\n\n    companion object {\n        val NONE: Short\n        val CAPTURING_PHASE: Short\n        val AT_TARGET: Short\n        val BUBBLING_PHASE: Short\n    }\n}\n\npublic external interface WebGLContextEventInit : EventInit {\n    var statusMessage: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextEventInit(statusMessage: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): WebGLContextEventInit {\n    val o = js(\"({})\")\n    o[\"statusMessage\"] = statusMessage\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n    return o\n}\n\n/**\n * Exposes the JavaScript [ArrayBuffer](https://developer.mozilla.org/en/docs/Web/API/ArrayBuffer) to Kotlin\n */\npublic external open class ArrayBuffer(length: Int) : BufferDataSource {\n    open val byteLength: Int\n    fun slice(begin: Int, end: Int = definedExternally): ArrayBuffer\n\n    companion object {\n        fun isView(value: Any?): Boolean\n    }\n}\n\n/**\n * Exposes the JavaScript [ArrayBufferView](https://developer.mozilla.org/en/docs/Web/API/ArrayBufferView) to Kotlin\n */\npublic external interface ArrayBufferView : BufferDataSource {\n    val buffer: ArrayBuffer\n    val byteOffset: Int\n    val byteLength: Int\n}\n\n/**\n * Exposes the JavaScript [Int8Array](https://developer.mozilla.org/en/docs/Web/API/Int8Array) to Kotlin\n */\npublic external open class Int8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int8Array, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int8Array.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int8Array.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint8Array](https://developer.mozilla.org/en/docs/Web/API/Uint8Array) to Kotlin\n */\npublic external open class Uint8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8Array, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8Array.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8Array.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint8ClampedArray](https://developer.mozilla.org/en/docs/Web/API/Uint8ClampedArray) to Kotlin\n */\npublic external open class Uint8ClampedArray : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8ClampedArray)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8ClampedArray, offset: Int = definedExternally)\n    fun set(array: Array<Byte>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint8ClampedArray\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8ClampedArray.get(index: Int): Byte = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint8ClampedArray.set(index: Int, value: Byte) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Int16Array](https://developer.mozilla.org/en/docs/Web/API/Int16Array) to Kotlin\n */\npublic external open class Int16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int16Array, offset: Int = definedExternally)\n    fun set(array: Array<Short>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int16Array.get(index: Int): Short = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int16Array.set(index: Int, value: Short) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint16Array](https://developer.mozilla.org/en/docs/Web/API/Uint16Array) to Kotlin\n */\npublic external open class Uint16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint16Array, offset: Int = definedExternally)\n    fun set(array: Array<Short>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint16Array.get(index: Int): Short = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint16Array.set(index: Int, value: Short) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Int32Array](https://developer.mozilla.org/en/docs/Web/API/Int32Array) to Kotlin\n */\npublic external open class Int32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int32Array, offset: Int = definedExternally)\n    fun set(array: Array<Int>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Int32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int32Array.get(index: Int): Int = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Int32Array.set(index: Int, value: Int) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Uint32Array](https://developer.mozilla.org/en/docs/Web/API/Uint32Array) to Kotlin\n */\npublic external open class Uint32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint32Array, offset: Int = definedExternally)\n    fun set(array: Array<Int>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Uint32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint32Array.get(index: Int): Int = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Uint32Array.set(index: Int, value: Int) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Float32Array](https://developer.mozilla.org/en/docs/Web/API/Float32Array) to Kotlin\n */\npublic external open class Float32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float32Array)\n    constructor(array: Array<Float>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float32Array, offset: Int = definedExternally)\n    fun set(array: Array<Float>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Float32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float32Array.get(index: Int): Float = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float32Array.set(index: Int, value: Float) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [Float64Array](https://developer.mozilla.org/en/docs/Web/API/Float64Array) to Kotlin\n */\npublic external open class Float64Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float64Array)\n    constructor(array: Array<Double>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float64Array, offset: Int = definedExternally)\n    fun set(array: Array<Double>, offset: Int = definedExternally)\n    fun subarray(start: Int, end: Int): Float64Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float64Array.get(index: Int): Double = asDynamic()[index]\n\n@kotlin.internal.InlineOnly\npublic inline operator fun Float64Array.set(index: Int, value: Double) { asDynamic()[index] = value }\n\n/**\n * Exposes the JavaScript [DataView](https://developer.mozilla.org/en/docs/Web/API/DataView) to Kotlin\n */\npublic external open class DataView(buffer: ArrayBuffer, byteOffset: Int = definedExternally, byteLength: Int = definedExternally) : ArrayBufferView {\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun getInt8(byteOffset: Int): Byte\n    fun getUint8(byteOffset: Int): Byte\n    fun getInt16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getUint16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getInt32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getUint32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getFloat32(byteOffset: Int, littleEndian: Boolean = definedExternally): Float\n    fun getFloat64(byteOffset: Int, littleEndian: Boolean = definedExternally): Double\n    fun setInt8(byteOffset: Int, value: Byte)\n    fun setUint8(byteOffset: Int, value: Byte)\n    fun setInt16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally)\n    fun setUint16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally)\n    fun setInt32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally)\n    fun setUint32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally)\n    fun setFloat32(byteOffset: Int, value: Float, littleEndian: Boolean = definedExternally)\n    fun setFloat64(byteOffset: Int, value: Double, littleEndian: Boolean = definedExternally)\n}\n\npublic external interface BufferDataSource\n\npublic external interface TexImageSource","package baaahs\n\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.promise\nimport org.w3c.dom.get\nimport org.w3c.xhr.XMLHttpRequest\nimport kotlin.browser.document\nimport kotlin.browser.window\nimport kotlin.js.Date\n\nactual fun doRunBlocking(block: suspend () -> Unit) {\n    GlobalScope.promise { block() }\n    return\n}\n\nval resourcesBase = document[\"resourcesBase\"]\n\nactual fun getResource(name: String): String {\n    val xhr = XMLHttpRequest()\n    xhr.open(\"GET\", \"$resourcesBase/$name\", false)\n    xhr.send()\n\n    if (xhr.status.equals(200)) {\n        return xhr.responseText\n    }\n\n    throw Exception(\"failed to load resource ${name}: ${xhr.status} ${xhr.responseText}\")\n}\n\nactual fun getTimeMillis(): Long = Date.now().toLong()\n\nactual fun decodeBase64(s: String): ByteArray {\n    return window.atob(s).encodeToByteArray()\n}\n\nactual fun log(id: String, level: String, message: String, exception: Throwable?) {\n    logMessage(level, \"${Logger.ts()} [] $level  $id - $message\", exception)\n}\n\nprivate fun logMessage(level: String, message: String, exception: Throwable?) {\n    when (level) {\n        \"ERROR\" -> console.error(message, exception)\n        \"WARN\" -> console.warn(message, exception)\n        \"INFO\" -> console.info(message, exception)\n        \"DEBUG\" -> console.log(message, exception)\n        else -> console.log(message, exception)\n    }\n}","package baaahs.net\n\nimport org.khronos.webgl.ArrayBuffer\nimport org.khronos.webgl.Int8Array\nimport org.khronos.webgl.get\nimport org.w3c.dom.ARRAYBUFFER\nimport org.w3c.dom.BinaryType\nimport org.w3c.dom.WebSocket\n\n/**\n * Uses WebSockets for TCP, and proxies UDP via Pinky.\n */\nclass BrowserNetwork(private val udpProxyAddress: BrowserAddress? = null, private val udpProxyPort: Int = 0) : Network {\n    override fun link(): Network.Link = object : Network.Link {\n        override val myAddress: Network.Address = object : Network.Address {}\n\n        var udpProxy: BrowserUdpProxy? = null\n        init {\n            udpProxyAddress?.let {\n                udpProxy = BrowserUdpProxy(this, it, udpProxyPort)\n            }\n        }\n\n        override val udpMtu = 1500\n\n        override fun listenUdp(port: Int, udpListener: Network.UdpListener): Network.UdpSocket {\n            return udpProxy!!.listenUdp(port, udpListener)\n        }\n\n        override fun startHttpServer(port: Int): Network.HttpServer =\n            TODO(\"BrowserNetwork.startHttpServer not implemented\")\n\n        override fun connectWebSocket(\n            toAddress: Network.Address,\n            port: Int,\n            path: String,\n            webSocketListener: Network.WebSocketListener\n        ): Network.TcpConnection {\n            val webSocket = WebSocket((toAddress as BrowserAddress).urlString.trimEnd('/') + path)\n            webSocket.binaryType = BinaryType.ARRAYBUFFER\n\n            val tcpConnection = object : Network.TcpConnection {\n                override val fromAddress: Network.Address = myAddress\n                override val toAddress: Network.Address = myAddress\n                override val port: Int get() = port\n\n                override fun send(bytes: ByteArray) {\n                    webSocket.send(Int8Array(bytes.toTypedArray()))\n                }\n            }\n\n            webSocket.onopen = {\n                console.log(\"WebSocket open!\", it)\n                webSocketListener.connected(tcpConnection)\n            }\n\n            webSocket.onmessage = {\n                // TODO: be less woefully inefficient...\n                val buf = it.data as ArrayBuffer\n                val byteBuf = Int8Array(buf)\n                val bytes = ByteArray(byteBuf.length)\n                for (i in 0 until byteBuf.length) {\n                    bytes[i] = byteBuf[i]\n                }\n                webSocketListener.receive(tcpConnection, bytes)\n            }\n\n            webSocket.onerror = { console.error(\"WebSocket error!\", it) }\n            webSocket.onclose = {\n                console.error(\"WebSocket close!\", it)\n                webSocketListener.reset(tcpConnection)\n            }\n\n            return tcpConnection\n        }\n    }\n\n    class BrowserAddress(val urlString: String) : Network.Address\n\n}","package baaahs.net\n\nimport baaahs.Logger\nimport baaahs.getTimeMillis\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\n\ninternal class BrowserUdpProxy(\n    link: Network.Link, address: BrowserNetwork.BrowserAddress, port: Int\n) : Network.WebSocketListener {\n    private var udpListener: Network.UdpListener? = null\n\n    val tcpConnection = link.connectWebSocket(address, port, \"/sm/udpProxy\", this)\n    var connected: Boolean = false\n    val toSend = mutableListOf<ByteArray>()\n\n    override fun connected(tcpConnection: Network.TcpConnection) {\n        connected = true\n\n        toSend.forEach { tcpConnection.send(it) }\n        toSend.clear()\n    }\n\n    override fun receive(tcpConnection: Network.TcpConnection, bytes: ByteArray) {\n        try {\n            if (bytes.isEmpty()) return\n\n            ByteArrayReader(bytes).apply {\n                val op = readByte()\n                when (op) {\n                    Network.UdpProxy.RECEIVE_OP.toByte() -> {\n                        val fromAddress = UdpProxyAddress(readBytes())\n                        val fromPort = readInt()\n                        val data = readBytes()\n                        log(\"UDP: Received ${data.size} bytes ${msgId(data)} from $fromAddress:$fromPort\")\n                        udpListener!!.receive(fromAddress, fromPort, data)\n                    }\n                    else -> {\n                        log(\"UDP: Huh? unknown op $op: $bytes\")\n                    }\n                }\n            }\n        } catch (e: Exception) {\n            logger.error(\"Error receiving WebSocket command\", e)\n            throw e\n        }\n    }\n\n    override fun reset(tcpConnection: Network.TcpConnection) {\n        TODO(\"UdpProxy.reset not implemented\")\n    }\n\n    fun listenUdp(port: Int, udpListener: Network.UdpListener): Network.UdpSocket {\n        if (this.udpListener != null) {\n            throw IllegalStateException(\"UDP proxy is already listening\")\n        }\n\n        this.udpListener = udpListener\n\n        if (port != 0) {\n            throw IllegalArgumentException(\"UDP proxy can't listen on a specific port, sorry!\")\n        }\n\n        tcpConnectionSend(ByteArrayWriter().apply {\n            writeByte(Network.UdpProxy.LISTEN_OP.toByte())\n            log(\"UDP: Listen\")\n        }.toBytes())\n\n        return UdpSocketProxy(port)\n    }\n\n    inner class UdpSocketProxy(requestedPort: Int) : Network.UdpSocket {\n        override val serverPort = requestedPort // TODO: this is probably wrong\n\n        override fun sendUdp(toAddress: Network.Address, port: Int, bytes: ByteArray) {\n            if (toAddress !is UdpProxyAddress) {\n                throw IllegalArgumentException(\"UDP proxy can't send to $toAddress!\")\n            }\n\n            tcpConnectionSend(ByteArrayWriter().apply {\n                writeByte(Network.UdpProxy.SEND_OP.toByte())\n                writeBytes(toAddress.bytes)\n                writeInt(port)\n                writeBytes(bytes)\n                log(\"UDP: Sent ${bytes.size} bytes ${msgId(bytes)} to $toAddress:$port\")\n            }.toBytes())\n        }\n\n        override fun broadcastUdp(port: Int, bytes: ByteArray) {\n            tcpConnectionSend(ByteArrayWriter().apply {\n                writeByte(Network.UdpProxy.BROADCAST_OP.toByte())\n                writeInt(port)\n                writeBytes(bytes)\n                log(\"UDP: Broadcast ${bytes.size} bytes ${msgId(bytes)} to *:$port\")\n            }.toBytes())\n        }\n\n    }\n\n    private fun tcpConnectionSend(bytes: ByteArray) {\n        if (connected) {\n            tcpConnection.send(bytes)\n        } else {\n            toSend.add(bytes)\n        }\n    }\n\n    private fun log(s: String) {\n        println(\"[${getTimeMillis()}] $s\")\n    }\n\n    private fun msgId(data: ByteArray): String {\n        return \"msgId=${((data[0].toInt() and 0xff) * 256) or (data[1].toInt() and 0xff)}\"\n    }\n\n    private data class UdpProxyAddress(val bytes: ByteArray) : Network.Address {\n        override fun toString(): String {\n            return bytes.joinToString(\".\") { it.toInt().and(0xff).toString() }\n        }\n\n        override fun equals(other: Any?): Boolean {\n            if (this === other) return true\n            if (other == null || this::class.js != other::class.js) return false\n\n            other as UdpProxyAddress\n\n            if (!bytes.contentEquals(other.bytes)) return false\n\n            return true\n        }\n\n        override fun hashCode(): Int {\n            return bytes.contentHashCode()\n        }\n    }\n\n    companion object {\n        val logger = Logger(\"BrowserUdpProxy\")\n    }\n}","package baaahs.sim\n\nimport baaahs.BeatData\nimport baaahs.BeatSource\nimport baaahs.Logger\nimport baaahs.SoundAnalyzer\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\nimport org.w3c.dom.WebSocket\nimport kotlin.browser.window\n\nclass BridgeClient(private val url: String) {\n    private val logger = Logger(\"BridgedBeatSource\")\n    private val json = Json(JsonConfiguration.Stable)\n    private val defaultBpm = BeatData(0.0, 500, confidence = 1f)\n    private val l = window.location\n    private lateinit var webSocket: WebSocket\n    private var everConnected = false\n    private var beatData = BeatData(0.0, 0, confidence = 0f)\n\n    private var soundAnalysisFrequences: FloatArray = floatArrayOf()\n\n    val beatSource = BridgedBeatSource()\n    val soundAnalyzer = BridgedSoundAnalyzer()\n\n    inner class BridgedBeatSource : BeatSource {\n        override fun getBeatData(): BeatData = beatData\n    }\n\n    inner class BridgedSoundAnalyzer : SoundAnalyzer {\n        val listeners = mutableListOf<SoundAnalyzer.AnalysisListener>()\n\n        override val frequencies: FloatArray\n            get() = soundAnalysisFrequences\n\n        override fun listen(analysisListener: SoundAnalyzer.AnalysisListener) {\n            listeners.add(analysisListener)\n        }\n\n        override fun unlisten(analysisListener: SoundAnalyzer.AnalysisListener) {\n            listeners.remove(analysisListener)\n        }\n    }\n\n    init {\n        connect()\n    }\n\n    private fun connect() {\n        webSocket = WebSocket(\"${if (l.protocol == \"https:\") \"wss:\" else \"ws:\"}//$url/bridge\")\n\n        webSocket.onopen = {\n            everConnected = true\n            logger.info { \"Connected to simulator bridge.\" }\n        }\n\n        webSocket.onmessage = {\n            val buf = it.data as String\n//            logger.debug { \"Received $buf\" }\n            val jsonCmd = json.parseJson(buf)\n            val command = jsonCmd.jsonArray[0].primitive.content\n            val arg = jsonCmd.jsonArray[1]\n            when (command) {\n                \"soundFrequencies\" -> soundAnalysisFrequences = arg.jsonArray.map { it.primitive.float }.toFloatArray()\n                \"soundMagnitudes\" -> {\n                    val magnitudes = arg.jsonArray.map { it.primitive.float }.toFloatArray()\n                    val analysis = SoundAnalyzer.Analysis(soundAnalysisFrequences, magnitudes)\n                    soundAnalyzer.listeners.forEach {\n                        it.onSample(analysis)\n                    }\n                }\n                \"beatData\" -> beatData = json.fromJson(BeatData.serializer(), arg)\n                else -> throw IllegalArgumentException(\"unknown command \\\"$command\\\"\")\n            }\n\n            null\n        }\n\n        webSocket.onerror = {\n            if (!everConnected) {\n                logger.error { \"Couldn't connect to simulator bridge; falling back to 120bpm: $it\" }\n                beatData = defaultBpm\n            } else {\n                logger.error { \"WebSocket error: $it\" }\n            }\n        }\n\n        webSocket.onclose = {\n            if (everConnected) {\n                logger.error { \"Lost connection to simulator bridge; falling back to 120bpm: $it\" }\n                beatData = defaultBpm\n\n                GlobalScope.launch {\n                    delay(1000)\n                    logger.info { \"Attempting to reconnect to simulator bridge...\" }\n                    connect()\n                }\n            }\n        }\n    }\n}\n","package baaahs.sim\n\nimport baaahs.MediaDevices\nimport baaahs.imaging.Image\nimport baaahs.imaging.ImageBitmapImage\nimport baaahs.visualizer.Visualizer\nimport info.laht.threekt.cameras.Camera\nimport info.laht.threekt.cameras.PerspectiveCamera\nimport info.laht.threekt.renderers.WebGLRenderer\nimport info.laht.threekt.scenes.Scene\nimport org.khronos.webgl.Uint8Array\nimport org.khronos.webgl.Uint8ClampedArray\nimport org.w3c.dom.*\nimport kotlin.browser.window\n\nclass FakeMediaDevices(private val visualizer: Visualizer) : MediaDevices {\n    var currentCam: MediaDevices.Camera? = null\n\n    @JsName(\"getCurrentCam\")\n    fun getCurrentCam() = currentCam\n\n    override fun getCamera(): MediaDevices.Camera {\n        return FakeCamera(640, 480).also {\n            visualizer.addFrameListener(it)\n        }\n    }\n\n    inner class FakeCamera(val width: Int, val height: Int) : MediaDevices.Camera, Visualizer.FrameListener {\n        // offscreen renderer for virtual camera:\n        var camRenderer = WebGLRenderer(js(\"{preserveDrawingBuffer: true}\")).apply {\n            setSize(width, height)\n        }\n\n        private val camCtx = (camRenderer.domElement as HTMLCanvasElement).getContext(\"webgl\")!!\n        private val altCamera = PerspectiveCamera(45, 1.0, 1, 10000)\n        private val pixelBuffer = Uint8ClampedArray(width * height * 4)\n        private val imageData = ImageData(pixelBuffer, width, height)\n\n        override fun onFrameReady(scene: Scene, camera: Camera) {\n            altCamera.copy(camera, true)\n            altCamera.aspect = width.toDouble() / height\n            altCamera.updateProjectionMatrix()\n            camRenderer.render(scene, altCamera)\n\n            camCtx.asDynamic().readPixels(\n                0, 0, width, height, camCtx.asDynamic().RGBA, camCtx.asDynamic().UNSIGNED_BYTE,\n                Uint8Array(pixelBuffer.buffer)\n            )\n\n            window.createImageBitmap(imageData, ImageBitmapOptions().apply {\n                imageOrientation = ImageOrientation.Companion.FLIPY\n            }).then { onImage.invoke(ImageBitmapImage(it)) }\n        }\n\n        override var onImage: (image: Image) -> Unit = { _ -> }\n\n        override fun close() {\n            onImage = { _ -> }\n            visualizer.removeFrameListener(this)\n        }\n    }\n}\n","import org.w3c.dom.Location\n\nexternal fun decodeURIComponent(encodedURI: String): String\n\n\nfun decodeQueryParams(location: Location): Map<String, String> {\n    val query = location.search\n    if (query.startsWith(\"?\")) {\n        return query.substring(1).decodeQueryParams()\n    } else {\n        return emptyMap()\n    }\n}\n\nfun decodeHashParams(location: Location): Map<String, String> {\n    val hash = location.hash\n    if (hash.startsWith(\"#\")) {\n        return hash.substring(1).decodeQueryParams()\n    } else {\n        return emptyMap()\n    }\n}\n\nfun String.decodeQueryParams(): Map<String, String> {\n    return replace('+', ' ').split(\"&\").map {\n        val (k, v) = it.split(\"=\", limit = 2)\n        decodeURIComponent(k) to decodeURIComponent(v)\n    }.toMap()\n}\n","package baaahs.visualizer\n\nimport baaahs.SparkleMotion\nimport info.laht.threekt.core.Face3\nimport info.laht.threekt.core.Geometry\nimport info.laht.threekt.math.Line3\nimport info.laht.threekt.math.Quaternion\nimport info.laht.threekt.math.Vector3\nimport three.Matrix4\nimport kotlin.math.*\nimport kotlin.random.Random\n\nclass SwirlyPixelArranger(private val pixelDensity: Float = 0.2f, private val pixelSpacing : Float = 2f) {\n\n    fun arrangePixels(vizSurface: VizSurface): Array<Vector3> = PanelArranger(vizSurface).arrangePixels()\n\n    inner class PanelArranger(vizSurface: VizSurface) {\n        private val pixelCount = min(SparkleMotion.MAX_PIXEL_COUNT, floor(vizSurface.area * pixelDensity).toInt())\n        private val panelGeometry = vizSurface.geometry.clone()\n        private val vertices = panelGeometry.vertices\n        private val isMultiFaced = vizSurface.isMultiFaced\n        private val edgeNeighbors = vizSurface.edgeNeighbors\n\n        fun arrangePixels(): Array<Vector3> {\n            panelGeometry.computeFaceNormals()\n\n            val pixelsGeometry = Geometry()\n\n            val quaternion = Quaternion()\n\n            val panelFaces = panelGeometry.faces\n            var curFace = panelFaces[0]\n            var revertToNormal = curFace.normal!!.clone()\n            val straightOnNormal = Vector3(0, 0, 1)\n            quaternion.setFromUnitVectors(curFace.normal!!, straightOnNormal)\n            val matrix = Matrix4()\n            matrix.makeRotationFromQuaternion(quaternion)\n            panelGeometry.applyMatrix(matrix)\n            pixelsGeometry.applyMatrix(matrix)\n\n            val pos = randomLocation(curFace, vertices)\n            val nextPos = Vector3()\n\n            pixelsGeometry.vertices.asDynamic().push(pos.clone())\n\n            var tries = 1000\n            var angleRad = Random.nextFloat() * 2 * PI\n            var angleRadDelta = Random.nextFloat() * 0.5 - 0.5\n            var pixelsSinceEdge = 0\n            var pixelI = 1\n            while (pixelI < pixelCount) {\n                nextPos.x = pos.x + pixelSpacing * sin(angleRad)\n                nextPos.y = pos.y + pixelSpacing * cos(angleRad)\n                nextPos.z = pos.z\n\n                // console.log(\"cur face: \", this.faceVs(curFace, panelGeometry))\n\n                if (!isInsideFace(curFace, nextPos)) {\n                    val newFace = getFaceForPoint(curFace, nextPos)\n                    if (newFace != null) {\n                        // console.log(\"moving from\", curFace, \"to\", newFace)\n                        // console.log(\"prior face vs:\", this.faceVs(curFace, panelGeometry))\n\n                        quaternion.setFromUnitVectors(straightOnNormal, revertToNormal)\n                        matrix.makeRotationFromQuaternion(quaternion)\n                        panelGeometry.applyMatrix(matrix)\n                        pixelsGeometry.applyMatrix(matrix)\n                        nextPos.applyMatrix4(matrix)\n\n                        curFace = newFace\n                        revertToNormal = curFace.normal!!.clone()\n                        quaternion.setFromUnitVectors(curFace.normal!!, straightOnNormal)\n                        matrix.makeRotationFromQuaternion(quaternion)\n                        panelGeometry.applyMatrix(matrix)\n                        pixelsGeometry.applyMatrix(matrix)\n                        // console.log(\"pos was\", nextPos)\n                        nextPos.applyMatrix4(matrix)\n                        // console.log(\"pos is now\", nextPos)\n                        // console.log(\"new face vs:\", this.faceVs(newFace, panelGeometry))\n                        nextPos.z = panelGeometry.vertices[newFace.a].z\n                        if (!isInsideFace(curFace, nextPos)) {\n                            // console.log(nextPos, \"is not in\", this.faceVs(curFace, panelGeometry))\n                            nextPos.copy(randomLocation(curFace, vertices))\n                        } else {\n                            // console.log(\"AWESOME\", nextPos, \"is in\", this.faceVs(curFace, panelGeometry))\n                        }\n                    } else {\n                        angleRad = Random.nextFloat() * 2 * PI\n                        if (tries-- < 0) break\n                        pixelsSinceEdge = 0\n                        continue\n                    }\n                }\n\n                // console.log(\"pixel z = \", nextPos.z)\n                pixelsGeometry.vertices.asDynamic().push(nextPos.clone())\n\n                angleRad += angleRadDelta\n                angleRadDelta *= 1 - Random.nextFloat() * 0.2 + 0.1\n\n                // occasional disruption just in case we're in a tight loop...\n                if (pixelsSinceEdge > pixelCount / 10) {\n                    angleRad = Random.nextFloat() * 2 * PI\n                    angleRadDelta = Random.nextFloat() * 0.5 - 0.5\n                    pixelsSinceEdge = 0\n                }\n                pos.copy(nextPos)\n                pixelsSinceEdge++\n\n                pixelI++;\n            }\n\n            quaternion.setFromUnitVectors(straightOnNormal, revertToNormal)\n            matrix.makeRotationFromQuaternion(quaternion)\n            panelGeometry.applyMatrix(matrix)\n            pixelsGeometry.applyMatrix(matrix)\n\n            return pixelsGeometry.vertices\n        }\n\n\n        fun randomLocation(face: Face3, vertices: Array<Vector3>): Vector3 {\n            val v = Vector3().copy(vertices[face.a])\n            v.addScaledVector(Vector3().copy(vertices[face.b]).sub(v), Random.nextFloat())\n            v.addScaledVector(Vector3().copy(vertices[face.c]).sub(v), Random.nextFloat())\n            return v\n        }\n\n        fun isInsideFace(curFace: Face3, v: Vector3): Boolean {\n            val vertices = panelGeometry.vertices\n\n            return isInside(\n                xy(v),\n                arrayOf(\n                    xy(vertices[curFace.a]),\n                    xy(vertices[curFace.b]),\n                    xy(vertices[curFace.c])\n                )\n            )\n        }\n\n        fun isInside(point: VizSurface.Point2, vs: Array<VizSurface.Point2>): Boolean {\n            // ray-casting algorithm based on\n            // https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html\n\n            val (x, y) = point\n\n            var inside = false\n\n            var i = 0\n            var j = vs.size - 1\n            while (i < vs.size) {\n                val xi = vs[i].x\n                val yi = vs[i].y\n                val xj = vs[j].x\n                val yj = vs[j].y\n\n                val intersect = ((yi > y) != (yj > y))\n                        && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)\n                if (intersect) {\n                    inside = !inside\n                }\n\n                j = i++\n            }\n\n            return inside\n        }\n\n        fun xy(v: Vector3) = VizSurface.Point2(v.x.toFloat(), v.y.toFloat())\n\n        // we've tried to add a pixel that's not inside curFace; figure out which face it corresponds to...\n        internal fun getFaceForPoint(curFace: Face3, v: Vector3): Face3? {\n            if (isMultiFaced) {\n                val vertices = panelGeometry.vertices\n\n                // find the edge closest to v...\n                var closestEdge = arrayOf(-1, -1)\n                var bestDistance = Float.POSITIVE_INFINITY\n                curFace.segments().forEach { edgeVs ->\n                    val closestPointOnEdge = Vector3()\n                    val v0 = edgeVs[0]\n                    val v1 = edgeVs[1]\n                    Line3(vertices[v0], vertices[v1]).closestPointToPoint(v, true, closestPointOnEdge)\n                    val thisDistance = closestPointOnEdge.distanceTo(v).toFloat()\n                    if (thisDistance < bestDistance) {\n                        closestEdge = edgeVs\n                        bestDistance = thisDistance\n                    }\n                }\n\n                val edgeId = closestEdge.asKey()\n                // console.log(\"Closest edge to\", v, \"is\", edgeId, this.edgeNeighbors[edgeId])\n\n                val neighbors = edgeNeighbors[edgeId]\n                val neighbor = neighbors?.filter { f -> f !== curFace } ?: emptyList()\n                if (neighbor.size == 0) {\n                    return null\n                } else if (neighbor.size > 1) {\n//                console.warn(\"Found multiple neighbors for \", this.panel.name, \" edge \", edgeId, \": \", neighbors)\n                }\n\n                // console.log(\"Face for \", v, \"is\", edgeId, neighbor[0])\n                return neighbor[0]\n            }\n            return null\n        }\n    }\n}","package baaahs.visualizer\n\nimport baaahs.*\nimport baaahs.dmx.LixadaMiniMovingHead\nimport baaahs.sim.FakeDmxUniverse\nimport info.laht.threekt.cameras.Camera\nimport info.laht.threekt.cameras.PerspectiveCamera\nimport info.laht.threekt.core.Geometry\nimport info.laht.threekt.core.Object3D\nimport info.laht.threekt.geometries.ConeBufferGeometry\nimport info.laht.threekt.geometries.SphereBufferGeometry\nimport info.laht.threekt.materials.LineBasicMaterial\nimport info.laht.threekt.materials.Material\nimport info.laht.threekt.materials.MeshBasicMaterial\nimport info.laht.threekt.materials.PointsMaterial\nimport info.laht.threekt.math.Vector2\nimport info.laht.threekt.math.Vector3\nimport info.laht.threekt.objects.Mesh\nimport info.laht.threekt.objects.Points\nimport info.laht.threekt.renderers.WebGLRenderer\nimport info.laht.threekt.scenes.Scene\nimport org.w3c.dom.HTMLDivElement\nimport org.w3c.dom.HTMLInputElement\nimport org.w3c.dom.events.MouseEvent\nimport three.Matrix4\nimport three.OrbitControls\nimport kotlin.browser.window\nimport kotlin.math.PI\nimport kotlin.math.cos\nimport kotlin.math.sin\n\nclass Visualizer(\n    model: Model<*>,\n    private val display: VisualizerDisplay,\n    private val container: HTMLDivElement,\n    private val selectionInfo: HTMLDivElement? = null\n): JsMapperUi.StatusListener {\n\n    var stopRendering: Boolean = false\n    var rotate: Boolean = false\n\n    var mapperIsRunning = false\n        set(isRunning) {\n            field = isRunning\n\n            vizPanels.forEach { panel -> panel.faceMaterial.transparent = !isRunning }\n\n            if (isRunning) {\n                rotate = false\n            }\n        }\n\n    private val frameListeners = mutableListOf<FrameListener>()\n\n    private val controls: OrbitControls\n    private val camera: PerspectiveCamera\n    private val scene: Scene\n    private val renderer: WebGLRenderer\n    private val geom: Geometry\n\n    private var obj: Object3D = Object3D()\n    private val pointMaterial: Material\n    private val lineMaterial: Material\n    private val panelMaterial: Material\n\n    private val raycaster: three.Raycaster\n    private var mouse: Vector2? = null\n    private val sphere: Mesh\n\n    private val rendererListeners = mutableListOf<() -> Unit>()\n\n    private var vizPanels = mutableListOf<VizSurface>()\n\n    init {\n        container.addEventListener(\"mousedown\", { event -> onMouseDown(event as MouseEvent) }, false)\n        camera = PerspectiveCamera(45, container.offsetWidth.toDouble() / container.offsetHeight, 1, 10000)\n        camera.position.z = 1000.0\n        controls = OrbitControls(camera, container)\n        controls.minPolarAngle = PI / 2 - .25 // radians\n        controls.maxPolarAngle = PI / 2 + .25 // radians\n\n        scene = Scene()\n        pointMaterial = PointsMaterial().apply { color.set(0xffffff) }\n        lineMaterial = LineBasicMaterial().apply { color.set(0xaaaaaa) }\n        panelMaterial = LineBasicMaterial().apply { color.set(0xaaaaaa); linewidth = 3.0 }\n        scene.add(camera)\n        renderer = WebGLRenderer()\n        renderer.setPixelRatio(window.devicePixelRatio)\n        resize()\n\n        container.appendChild(renderer.domElement)\n        geom = Geometry()\n        raycaster = three.Raycaster()\n        raycaster.asDynamic().params.Points.threshold = 1\n        sphere = Mesh(\n            SphereBufferGeometry(1, 32, 32),\n            MeshBasicMaterial().apply { color.set(0xff0000) }\n        )\n        scene.add(sphere)\n\n        // convert from SheepModel to THREE\n        model.geomVertices.forEach { v ->\n            geom.vertices.asDynamic().push(Vector3(v.x, v.y, v.z))\n        }\n\n        startRender()\n\n        var resizeTaskId: Int? = null\n        window.addEventListener(\"resize\", {\n            if (resizeTaskId !== null) {\n                window.clearTimeout(resizeTaskId!!)\n            }\n\n            resizeTaskId = window.setTimeout({\n                resizeTaskId = null\n                resize()\n            }, resizeDelay)\n        })\n    }\n\n    fun addFrameListener(frameListener: FrameListener) {\n        frameListeners.add(frameListener)\n    }\n\n    fun removeFrameListener(frameListener: FrameListener) {\n        frameListeners.remove(frameListener)\n    }\n\n    fun onMouseDown(event: MouseEvent) {\n        mouse = Vector2(\n            (event.clientX.toDouble() / container.offsetWidth) * 2 - 1,\n            -(event.clientY.toDouble() / container.offsetHeight) * 2 + 1\n        )\n    }\n\n    fun addSurface(p: Model.Surface): VizSurface {\n        // if (p.name !== '15R') return\n        // if (omitPanels.includes(p.name)) return\n\n        val vizPanel = VizSurface(p, geom, scene)\n        vizPanels.add(vizPanel)\n        return vizPanel\n    }\n\n    fun addMovingHead(movingHead: MovingHead, dmxUniverse: FakeDmxUniverse): VizMovingHead {\n        return VizMovingHead(movingHead, dmxUniverse)\n    }\n\n    inner class VizMovingHead(movingHead: MovingHead, dmxUniverse: FakeDmxUniverse) {\n        private val baseChannel = Config.DMX_DEVICES[movingHead.name]!!\n        private val device = LixadaMiniMovingHead(dmxUniverse.reader(baseChannel, 16) { receivedDmxFrame() })\n        private val geometry = ConeBufferGeometry(50, 1000)\n        private val material = MeshBasicMaterial().apply { color.set(0xffff00) }\n        private val cone = Mesh(geometry, material)\n        private val baseXRotation = PI\n        private val baseYRotation = 0.0\n        private val baseZRotation = 0.0\n\n        init {\n            geometry.applyMatrix(Matrix4().makeTranslation(0.0, -500.0, 0.0))\n            material.transparent = true\n            material.opacity = .75\n            cone.position.set(movingHead.origin.x, movingHead.origin.y, movingHead.origin.z)\n            cone.rotation.x = baseXRotation\n            cone.rotation.y = baseYRotation\n            cone.rotation.z = baseZRotation\n            scene.add(cone)\n        }\n\n        private fun receivedDmxFrame() {\n            material.color.set(device.color.rgb)\n            material.visible = device.dimmer > .1\n\n            cone.rotation.x = baseXRotation + device.tilt\n            cone.rotation.y = baseYRotation\n            cone.rotation.z = baseZRotation\n        }\n    }\n\n    private fun startRender() {\n        geom.computeBoundingSphere()\n        this.obj = Points().apply { geometry = geom; material = pointMaterial }\n        scene.add(obj)\n        val target = geom.boundingSphere.asDynamic().center.clone()\n        controls.target = target\n        camera.lookAt(target)\n\n        render()\n    }\n\n    private val REFRESH_DELAY = 50 // ms\n\n    fun render() {\n        if (stopRendering) return\n\n        window.setTimeout(fun() {\n            window.requestAnimationFrame { render() }\n        }, REFRESH_DELAY)\n\n        mouse?.let { mouseClick ->\n            mouse = null\n            raycaster.setFromCamera(mouseClick, camera)\n            val intersections = raycaster.intersectObjects(scene.children, false)\n            intersections.forEach { intersection ->\n                val intersectedObject = intersection.`object`\n                val vizPanel = VizSurface.getFromObject(intersectedObject)\n                vizPanel?.let {\n                    selectionInfo?.innerText = \"Selected: \" + vizPanel.name\n                    return@forEach\n                }\n            }\n        }\n\n        if (!mapperIsRunning && rotate) {\n            val rotSpeed = .01\n            val x = camera.position.x\n            val z = camera.position.z\n            camera.position.x = x * cos(rotSpeed) + z * sin(rotSpeed)\n            camera.position.z = z * cos(rotSpeed * 2) - x * sin(rotSpeed * 2)\n            camera.lookAt(scene.position)\n        }\n\n        controls.update()\n\n        val startMs = getTimeMillis()\n        renderer.render(scene, camera)\n        display.renderMs = (getTimeMillis() - startMs).toInt()\n\n        frameListeners.forEach { f -> f.onFrameReady(scene, camera) }\n        rendererListeners.forEach { value -> value() }\n    }\n\n// vector.applyMatrix(object.matrixWorld).project(camera) to get 2d x,y coord\n\n    private val resizeDelay = 100\n\n    fun resize() {\n        camera.aspect = container.offsetWidth.toDouble() / container.offsetHeight\n        camera.updateProjectionMatrix()\n        renderer.setSize(container.offsetWidth, container.offsetHeight)\n    }\n\n    override fun mapperStatusChanged(isRunning: Boolean) {\n        mapperIsRunning = isRunning\n    }\n\n    interface FrameListener {\n        @JsName(\"onFrameReady\")\n        fun onFrameReady(scene: Scene, camera: Camera)\n    }\n}\n","package baaahs.visualizer\n\nimport baaahs.Color\nimport baaahs.Logger\nimport baaahs.Model\nimport baaahs.geom.Vector3F\nimport baaahs.io.ByteArrayReader\nimport baaahs.net.Network\nimport baaahs.proto.Ports\nimport info.laht.threekt.math.Vector3\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.MainScope\nimport kotlin.math.min\n\nclass VisualizerListenerClient(\n    link: Network.Link,\n    address: Network.Address,\n    private val visualizer: Visualizer,\n    model: Model<*>\n) :\n    Network.WebSocketListener, CoroutineScope by MainScope() {\n\n    private val vizSurfaces = model.allSurfaces.associate { surface ->\n        surface.name to visualizer.addSurface(surface)\n    }\n\n    private lateinit var tcpConnection: Network.TcpConnection\n\n    init {\n        link.connectWebSocket(address, Ports.PINKY_UI_TCP, \"/ws/visualizer\", this)\n\n    }\n\n    override fun connected(tcpConnection: Network.TcpConnection) {\n        this.tcpConnection = tcpConnection\n    }\n\n    override fun receive(tcpConnection: Network.TcpConnection, bytes: ByteArray) {\n        val reader = ByteArrayReader(bytes)\n        val op = reader.readByte().toInt()\n        when (op) {\n            0 -> { // Pixel locations.\n                val surfaceName = reader.readString()\n                val pixelCount = reader.readInt()\n                vizSurfaces[surfaceName]?.let { vizSurface ->\n                    val pixelLocations = (0 until pixelCount).map {\n                        Vector3F.parse(reader).let { Vector3(it.x, it.y, it.z) }\n                    }.toTypedArray()\n                    vizSurface.vizPixels = VizSurface.VizPixels(vizSurface, pixelLocations)\n                }\n            }\n\n            1 -> { // Pixel colors.\n                val surfaceName = reader.readString()\n                val pixelCount = reader.readInt()\n                vizSurfaces[surfaceName]?.let { vizSurface ->\n                    val vizPixels = vizSurface.vizPixels\n                    vizPixels?.let {\n                        val minPixCount = min(vizPixels.size, pixelCount)\n                        var byteOff = 0\n                        for (i in 0 until minPixCount) {\n                            vizPixels[i] = Color.parseWithoutAlpha(reader)\n                        }\n                    }\n                }\n            }\n            else -> throw UnsupportedOperationException(\"huh?\")\n        }\n    }\n\n    override fun reset(tcpConnection: Network.TcpConnection) {\n        logger.info { \"Visualizer disconnected from Pinky!\" }\n    }\n\n    fun close() {\n//        tcpConnection.close()\n    }\n\n    companion object {\n        val logger = Logger(\"VisualizerListenerClient\")\n    }\n}","package baaahs.visualizer\n\nimport baaahs.Color\nimport baaahs.Model\nimport baaahs.Pixels\nimport baaahs.geom.Vector2\nimport baaahs.resourcesBase\nimport info.laht.threekt.THREE.AdditiveBlending\nimport info.laht.threekt.THREE.FrontSide\nimport info.laht.threekt.THREE.VertexColors\nimport info.laht.threekt.core.BufferGeometry\nimport info.laht.threekt.core.Face3\nimport info.laht.threekt.core.Geometry\nimport info.laht.threekt.core.Object3D\nimport info.laht.threekt.geometries.PlaneBufferGeometry\nimport info.laht.threekt.loaders.TextureLoader\nimport info.laht.threekt.materials.LineBasicMaterial\nimport info.laht.threekt.materials.MeshBasicMaterial\nimport info.laht.threekt.math.Triangle\nimport info.laht.threekt.math.Vector3\nimport info.laht.threekt.math.minus\nimport info.laht.threekt.objects.Line\nimport info.laht.threekt.objects.Mesh\nimport info.laht.threekt.scenes.Scene\nimport org.khronos.webgl.Float32Array\nimport org.khronos.webgl.get\nimport org.khronos.webgl.set\nimport org.w3c.dom.get\nimport three.BufferGeometryUtils\nimport three.Float32BufferAttribute\nimport three.Matrix4\nimport kotlin.browser.document\nimport kotlin.math.max\nimport kotlin.math.min\nimport kotlin.random.Random\n\nclass VizSurface(panel: Model.Surface, private val geom: Geometry, private val scene: Scene) {\n    companion object {\n        private val roundLightTx = TextureLoader().load(\n            \"${resourcesBase}/visualizer/textures/round.png\",\n            { println(\"loaded!\") },\n            { println(\"progress!\") },\n            { println(\"error!\") }\n        )\n\n        fun getFromObject(object3D: Object3D): VizSurface? =\n            object3D.userData.asDynamic()[\"VizPanel\"] as VizSurface?\n    }\n\n    val name = panel.name\n    internal val geometry = Geometry()\n    var area = 0.0f\n    private var panelNormal: Vector3\n    val isMultiFaced: Boolean\n    internal var edgeNeighbors: Map<String, List<Face3>>\n    private val lineMaterial = LineBasicMaterial().apply { color.set(0xaaaaaa) }\n    internal var faceMaterial: MeshBasicMaterial\n    private var mesh: Mesh\n    private var lines: List<Line>\n    var vizPixels: VizPixels? = null\n        set(value) {\n            field?.removeFromScene(scene)\n            value?.addToScene(scene)\n\n            field = value\n        }\n\n    init {\n        val panelGeometry = this.geometry\n        val panelVertices = panelGeometry.vertices\n\n        val triangle = Triangle() // for computing area...\n\n        val faceAreas = mutableListOf<Float>()\n        panelGeometry.faces = panel.faces.map { face ->\n            val localVerts = face.vertexIds.map { vi ->\n                val v = geom.vertices[vi]\n                var lvi = panelVertices.indexOf(v)\n                if (lvi == -1) {\n                    lvi = panelVertices.size\n                    panelVertices.asDynamic().push(v)\n                }\n                lvi\n            }\n\n            triangle.set(\n                panelVertices[localVerts[0]],\n                panelVertices[localVerts[1]],\n                panelVertices[localVerts[2]]\n            )\n\n            val faceArea = triangle.asDynamic().getArea() as Float\n            faceAreas.add(faceArea)\n            this.area += faceArea\n\n            val normal: Vector3 = document[\"non-existant-key\"]\n            Face3(localVerts[0], localVerts[1], localVerts[2], normal)\n        }.toTypedArray()\n\n        isMultiFaced = panelGeometry.faces.size > 1\n\n        panelGeometry.computeFaceNormals()\n        val faceNormalSum = Vector3()\n        panelGeometry.faces.forEachIndexed { index, face ->\n            val faceArea = faceAreas[index]\n            faceNormalSum.addScaledVector(face.normal!!, faceArea)\n        }\n        panelNormal = faceNormalSum.divideScalar(area.toDouble())\n\n        val edgeNeighbors = mutableMapOf<String, MutableList<Face3>>()\n        panelGeometry.faces.forEach { face ->\n            face.segments().forEach { vs ->\n                val vsKey = vs.asKey()\n                val neighbors = edgeNeighbors.getOrPut(vsKey) { mutableListOf() }\n                neighbors.add(face)\n            }\n        }\n        this.edgeNeighbors = edgeNeighbors\n\n        geom.computeVertexNormals() // todo: why is this here?\n\n        val lines = panel.lines.map { line ->\n            val lineGeo = Geometry()\n            lineGeo.vertices = line.vertices.map { pt -> Vector3(pt.x, pt.y, pt.z) }.toTypedArray()\n            lineGeo\n        }\n\n        this.faceMaterial = MeshBasicMaterial().apply { color.set(0x222222) }\n        this.faceMaterial.side = FrontSide\n        this.faceMaterial.transparent = false\n\n        this.mesh = Mesh(panelGeometry, this.faceMaterial)\n        mesh.asDynamic().name = \"Surface: $name\"\n\n        // so we can get back to the VizPanel from a raycaster intersection:\n        this.mesh.userData.asDynamic()[\"VizPanel\"] = this\n\n        scene.add(this.mesh)\n\n        this.lines = lines.map { line -> Line(line.asDynamic(), lineMaterial) }\n\n        this.lines.forEach { line ->\n            scene.add(line)\n        }\n    }\n\n    class Point2(val x: Float, val y: Float) {\n        operator fun component1() = x\n        operator fun component2() = y\n    }\n\n\n    class VizPixels(vizSurface: VizSurface, val positions: Array<Vector3>) : Pixels {\n        override val size = positions.size\n        private val pixGeometry = BufferGeometry()\n        private val planeGeometry: BufferGeometry\n        private val vertexColorBufferAttr: Float32BufferAttribute\n        private val colorsAsInts = IntArray(size) // store colors as an int array too for Pixels.get()\n\n        init {\n            val positionsArray = Float32Array(size * 3)\n            positions.forEachIndexed { i, v ->\n                positionsArray[i * 3] = v.x.toFloat()\n                positionsArray[i * 3 + 1] = v.y.toFloat()\n                positionsArray[i * 3 + 2] = v.z.toFloat()\n            }\n\n            val positionsBufferAttr = Float32BufferAttribute(positionsArray, 3)\n            pixGeometry.addAttribute(\"position\", positionsBufferAttr)\n\n            vertexColorBufferAttr = Float32BufferAttribute(Float32Array(size * 3 * 4), 3)\n            vertexColorBufferAttr.dynamic = true\n\n            val rotator = Rotator(Vector3(0, 0, 1), vizSurface.panelNormal)\n            planeGeometry = BufferGeometryUtils.mergeBufferGeometries(positions.map { position ->\n                val geometry = PlaneBufferGeometry(2 + Random.nextFloat() * 8, 2 + Random.nextFloat() * 8)\n                rotator.rotate(geometry)\n                geometry.translate(position.x, position.y, position.z)\n                geometry\n            }.toTypedArray())\n            planeGeometry.addAttribute(\"color\", vertexColorBufferAttr)\n        }\n\n        private val pixelsMesh = Mesh(planeGeometry, MeshBasicMaterial().apply {\n            side = FrontSide\n            transparent = true\n            blending = AdditiveBlending\n//            depthFunc = AlwaysDepth\n            depthTest = false\n            depthWrite = false\n            vertexColors = VertexColors\n\n            map = roundLightTx\n        })\n\n        fun addToScene(scene: Scene) {\n            scene.add(pixelsMesh)\n        }\n\n        fun removeFromScene(scene: Scene) {\n            scene.remove(pixelsMesh)\n        }\n\n        override fun get(i: Int): Color {\n            return Color(colorsAsInts[i])\n        }\n\n        override fun set(i: Int, color: Color) {\n            colorsAsInts[i] = color.argb\n\n            val redF = color.redF / 2\n            val greenF = color.greenF / 2\n            val blueF = color.blueF / 2\n\n            val rgb3Buf = vertexColorBufferAttr\n            rgb3Buf.setXYZ(i * 4, redF, greenF, blueF)\n            rgb3Buf.setXYZ(i * 4 + 1, redF, greenF, blueF)\n            rgb3Buf.setXYZ(i * 4 + 2, redF, greenF, blueF)\n            rgb3Buf.setXYZ(i * 4 + 3, redF, greenF, blueF)\n            vertexColorBufferAttr.needsUpdate = true\n        }\n\n        override fun set(colors: Array<Color>) {\n            val maxCount = min(this.size, colors.size)\n            val rgbBuf = vertexColorBufferAttr.array\n            for (i in 0 until maxCount) {\n                colorsAsInts[i] = colors[i].argb\n\n                val pColor = colors[i]\n                rgbBuf[i * 3] = pColor.redF / 2\n                rgbBuf[i * 3 + 1] = pColor.greenF / 2\n                rgbBuf[i * 3 + 2] = pColor.blueF / 2\n            }\n            vertexColorBufferAttr.needsUpdate = true\n        }\n\n        fun getPixelLocationsInModelSpace(vizSurface: VizSurface): Array<Vector3> = positions\n\n        fun getPixelLocationsInPanelSpace(vizSurface: VizSurface): Array<Vector2> {\n            val panelGeom = vizSurface.geometry.clone()\n            val pixGeom = pixGeometry.clone()\n\n            val straightOnNormal = Vector3(0, 0, 1)\n\n            // Rotate to straight on.\n            val rotator = Rotator(vizSurface.panelNormal, straightOnNormal)\n            rotator.rotate(panelGeom)\n            rotator.rotate(pixGeom)\n\n            // Translate and scale pixels to panel space (0f..1f)\n            panelGeom.computeBoundingBox()\n            val boundingBox = panelGeom.boundingBox!!\n            val min = boundingBox.min\n            val size = boundingBox.max - boundingBox.min\n\n            val translate = Matrix4().makeTranslation(-min.x, -min.y, -min.z)\n            panelGeom.applyMatrix(translate)\n            pixGeom.applyMatrix(translate)\n\n            val scale = Matrix4().makeScale(1.0 / size.x, 1.0 / size.y, 1.0)\n            panelGeom.applyMatrix(scale)\n            pixGeom.applyMatrix(scale)\n\n            val pixelVs = mutableListOf<Vector2>()\n            val pixelPositions = pixGeom.getAttribute(\"position\")\n            val array = pixelPositions.array as Float32Array\n            for (i in 0 until pixelPositions.count * 3 step 3) {\n                val v = Vector2(clamp(array[i]).toDouble(), clamp(array[i + 1]).toDouble())\n                pixelVs.add(v)\n            }\n\n            return pixelVs.toTypedArray()\n        }\n\n        fun clamp(f: Float): Float = min(1f, max(f, 0f))\n    }\n\n    fun getPixelLocationsInPanelSpace(): Array<Vector2>? {\n        return vizPixels?.getPixelLocationsInPanelSpace(this)\n    }\n\n    fun getPixelLocationsInModelSpace(): Array<Vector3>? {\n        return vizPixels?.getPixelLocationsInModelSpace(this)\n    }\n}\n","package baaahs.visualizer\n\nimport info.laht.threekt.core.BufferGeometry\nimport info.laht.threekt.core.Face3\nimport info.laht.threekt.core.Geometry\nimport info.laht.threekt.math.Quaternion\nimport info.laht.threekt.math.Vector3\nimport three.Matrix4\n\nfun Face3.segments() = arrayOf(arrayOf(a, b), arrayOf(b, c), arrayOf(c, a))\nfun Array<Int>.asKey() = sorted().joinToString(\"-\")\n\nclass Rotator(val from: Vector3, val to: Vector3) {\n    private val quaternion = Quaternion()\n    private val matrix = Matrix4()\n\n    init {\n        quaternion.setFromUnitVectors(from, to)\n        matrix.makeRotationFromQuaternion(quaternion)\n    }\n\n    fun rotate(vararg geoms: Geometry) {\n        geoms.forEach { it.applyMatrix(matrix) }\n    }\n\n    fun rotate(vararg geoms: BufferGeometry) {\n        geoms.forEach { it.applyMatrix(matrix) }\n    }\n\n    fun rotate(vararg vectors: Vector3) {\n        vectors.forEach { it.applyMatrix4(matrix) }\n    }\n\n    fun invert(): Rotator = Rotator(to, from)\n}"],"names":[],"mappings":";;;;;;;;;;;;;eAcA,I;;;;;WCGqD,gB;cAkDnC,yB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2BCflB,mD;qBCqCA,8C;uBCLA,+C;oBCtEA,qC;;;;;2BFmDA,oD;gCG++BA,yD;oBAAA,6C;sBAAA,0C;6BAAA,mD;;cC/zBsB,yB;;;;;;;;;YAiGI,uB;aAwBA,wB;cASA,yB;WA6BJ,e;YA2JS,uB;YA2BjB,uB;;eAQQ,0B;;;;;;;WAkKJ,sB;;;;;yBDkmBlB,gD;2BA+BA,oD;mBAmLA,oC;2BAAA,oD;mBA5mBA,4C;qBEv0BA,mB;mBCpGA,wB;;;;;;qBPwDA,6C;iCQ9CA,iC;;;;;;;;;;;;;;;;eJ4tCA,wC;aKhoCA,+B;iBCxCA,mC;;;;;;;;;;;;;;;;;YTwJA,6B;;;;;;;;;;;mBU3J4C,8B;;;;kBC6jB5C,mC;;;;;;;;;eRrKA,wC;;;;oBSjcuC,sB;;;;;;;sBCslDvC,6C;iBAAA,qC;sBA6yVA,+C;;;;;;gBCr5YA,K;;;;;;;;;mBC0B8C,8B;;mBlBq6B9C,qC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBmBvxBA,4D;iBAAA,wC;4BCvGA,gE;oBDgYA,2C;mBEzPA,kE;0BAAA,4D;gBAAA,uC;iBDzIA,qD;gBCuJA,uC;gBAlLA,uC;mBC+iBA,0C;2BAAA,gB;eCtaA,sC;oBAyMA,2C;oBA8HA,2C;oBAtXA,2C;;;gBCnBkB,2B;;;;;;0BCpDlB,qG;mBAAA,iF;yBA9DA,8C;;4BHqGA,iB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EIlGmB,iF;;IAMf,+B;MAAA,kBAA2B,C;IAE3B,0B;MAAA,aAAwB,G;IAPxB,wC;IAGA,oC;IAEA,sC;IAEA,4B;G;;SAEoC,Y;MAAQ,6BAAiB,M;K;;;SAGzD,Y;MACI,IAAI,wBAAkB,CAAtB,C;QAAy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/C,iBAA2B,I;IAC3B,iBAA2B,I;IAE3B,mBAAkB,6D;IAKf,gBAJqB,gBAAY,8E;IGjsBxC,SHssBQ,SAAQ,CAAR,IAAa,6BAAM,M;IGtsB3B,SHusBQ,SAAQ,CAAR,IAAa,6BAAM,M;IGvsB3B,SHwsBQ,gBAAO,CAAP,C;IAPJ,yBGhsBG,S;G;;SH+qBM,Y;MAAQ,W;K;;;SAIb,Y;MAAQ,Q;MAAA,yDAAsB,I;K;;8CAuBlC,yB;IACI,uBAAU,iBAAQ,YAAR,EAAiB,IAAjB,EAA8B,eAA9B,C;EACd,C;EAZiD,6D;IAC7C,4BAA0B,I;G;;SAA1B,Y;MAAA,gC;K;;yEAEA,Y;IAAkC,uB;G;;;;;;;;;;EAYxB,gE;IAAC,0C;IAA4C,oC;G;;;;;;EAE/D,yB;IACI,aJrsB8C,c;IIssB9C,4BAAsB,C;G;;SAAtB,Y;MAAA,gC;K;SAAA,sB;MAAA,sC;K;;yCAGA,sB;IACQ,Q;IAAA,gBAAJ,U;IJ/cD,U;IADP,cAAY,oBIgdS,GJhdT,C;IACL,IAAI,eAAJ,C;MACH,aI8cwB,6B;MJ7cxB,sBI6ciB,GJ7cjB,EAAS,MAAT,C;MACA,e;;MAEA,gB;;II0cQ,OJ/cZ,M;II+cQ,+B;IACA,yC;EACJ,C;oCAEA,Y;IAAyB,OAAA,UAAI,U;G;EAGY,yC;IAAE,OAAA,EAAG,M;EAAM,C;mCADpD,Y;IACI,OAAkD,MD6InD,WC7IQ,UAAI,OD6IZ,+BEt0BI,2BDyrBkC,2BCzrBlC,CFs0BJ,EC7ImD,CAAQ,K;EAC9D,C;EAI4B,2C;IAAE,IAAI,IJ5gB0B,O;II4gBpB,OAAA,CAAE,M;EAAM,C;sCAFhD,Y;IAGS,gBDuIN,WCzIQ,UAAI,QDyIZ,+BEt0BI,2BD8rBqB,8BC9rBrB,CFs0BJ,E;IAiZA,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MC9lBgB,QD8lBU,IHxnCkC,I;MI0hBzC,QD8lBO,IH3mCkC,M;MG2mChD,YAAZ,WAAY,EC9lBe,CAAF,SAAM,CAAE,MD8lBrB,C;;IChmBR,OAGK,aD8lBN,WC9lBM,EAAa,IAAb,C;EACT,C;EAEqB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jCmkCY,Q;MAAA,OiClkCR,2BjCkkCQ,W;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;QAAa,OiCjkCd,mC;;KAGf,C;EAEA,2B;IAAA,+B;IACI,cAAa,WAAO,OAAP,C;G;;;;;;;EADjB,uC;IAAA,sC;MAAA,qB;KAAA,+B;G;EA/dwB,8C;IAAA,4B;MAA+B,CAA7B,wBAAoB,oBAApB,CAA6B,kBAAS,SAAT,C;MAAe,W;IAAA,C;G;EAD5B,uC;IAAA,qB;MAClC,2BAAgB,oCAAhB,C;IACJ,C;G;EAE6C,yC;IAAA,qB;MAAE,gD;IAAsB,C;G;EAEE,iC;IAAC,W;EAAA,C;EACC,yC;IAAA,+B;MACrE,qB;MAA0B,gBAAN,gB;MjC+ErB,sB;;QAqFS,U;QAAA,6B;QAAhB,OAAgB,gBAAhB,C;UAAgB,2B;UAAM,IiCpKmB,OjCoKL,OiCpKQ,KAAH,ejCoKnB,C;YAAwB,qBAAO,O;YAAP,uB;;QAC9C,qBAAO,I;;;MiCrKC,sBAAoB,cjC+E5B,kBiC/E4B,C;MACxB,W;IAAA,C;G;;;;;;EA4dU,uB;IAAC,gB;G;;;;;;iCAAnB,Y;IAAmB,gB;G;mCAAnB,gB;IAAA,mBAAmB,kCAAnB,C;G;+BAAA,Y;IAAA,OAAmB,4CAAnB,M;G;+BAAA,Y;IAAA,c;IAAmB,qD;IAAnB,a;G;6BAAA,iB;IAAA,2IAAmB,oCAAnB,G;G;EAEe,0G;IAOX,4B;MAAA,eAA4B,K;IAN5B,sB;IACA,sB;IACA,sB;IACA,sC;IACA,4B;IACA,sC;IACA,gC;G;;;;;;ECvjBJ,sB;IAAA,0B;IACI,oBACyB,Q;G;mCAEzB,gB;IAEiB,IAAN,I;IAAA,QAAM,IAAN,C;WACH,W;QAAe,2B;QAAf,K;WACA,Y;QAAgB,4B;QAAhB,K;WACA,Q;QAAY,uB;QAAZ,K;cACQ,MAAM,8BAAyB,yBAAkB,IAAlB,MAAzB,C;;IAChB,oB;I9BmEN,S8BnEc,O;IALV,O9ByEG,S;E8BnEP,C;;;;;;;EAZJ,kC;IAAA,iC;MAAA,gB;KAAA,0B;G;ECYA,kB;IAEI,8B;G;EAAA,4B;IAAA,gC;IASI,cAAa,WAAO,QAAP,C;G;8CARb,sB;IACI,OAAO,kBA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C;G;oDAEhB,Y;IAAkC,kBAAI,qB;G;iDAEtC,Y;IAAiC,gB;IAAA,yD;IAAJ,2C;G;;;;;8BANrC,Y;IACI,8C;EAOJ,C;;;;;;EErHJ,iB;IAOI,0CAAiD,KAAK,oCAAL,C;IAKjD,6BAAmB,KAAK,8BAAL,C;IAMnB,6BAAmB,KAAK,8BAAL,C;IAInB,8BAAoB,KAAK,+BAAL,C;IAKpB,6BAAmB,KAAK,8BAAL,C;G;;SApBnB,Y;aD2BwF,6C;K;;6CCzBxF,gB;IACI,Q;IAAA,iDAAkB,IAAlB,C;IAAA,iB;MAA2B,MAAM,sBAAiB,2BAAwB,IAAzC,C;KAAjC,W;G;;SAEJ,Y;aDsBwF,gC;K;;;SChBxF,Y;aDgBwF,gC;K;;;SCZxF,Y;aDYwF,iC;K;;;SCPxF,Y;aDOwF,gC;K;;;;;;;;;ECOzE,8B;IAAC,wB;G;;;;;;oCAAhB,Y;IAAgB,oB;G;sCAAhB,oB;IAAA,sBAAgB,8CAAhB,C;G;kCAAA,Y;IAAA,OAAgB,iDAAhB,M;G;kCAAA,Y;IAAA,c;IAAgB,yD;IAAhB,a;G;gCAAA,iB;IAAA,2IAAgB,4CAAhB,G;G;EAEU,+B;IAAC,0B;G;;;;;;EApC2C,oD;IAAA,mB;MAAc,gBAAZ,sB;MtC0jCxD,eAAwD,cAAzC,YAAY,mCAAwB,EAAxB,CAAZ,CAAyC,EAAc,EAAd,C;MACjD,kBAAc,qBAAoB,QAApB,C;MA2BL,Q;MAAA,2B;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;QACZ,WAAY,aAAgB,OsCvlCqD,KtCulCrE,EAA0B,OAA1B,C;;MsCvlCwC,OtCylCjD,W;IsCzlCqF,C;G;EAKpE,8C;IAAA,mB;MACpB,kB1CkDwC,c;M0CjD5B,gBAAZ,sB;MtCwzCG,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;MAqEA,Q;MAAA,2B;MAAb,OAAa,cAAb,C;QAAa,sB;QACT,WAAY,WsC93CkB,2BtC83CJ,IsC93Cc,cAAV,CtC83ClB,C;;MsC/3CZ,OAEA,W;IACJ,C;G;EAEwB,8C;IAAA,mB;MACpB,mBAAY,sBAAZ,C;IACJ,C;G;EAEyB,+C;IAAA,mB;iBACJ,sB;MAAjB,IAAK,uBAAL;QAAU,uB;MAAV,OACA,kBAAM,GAAN,C;IACJ,C;G;EAEwB,8C;IAAA,mB;MACpB,cAAO,sBAAP,C;IACJ,C;G;;;;;;EAiBJ,0B;IAAuB,oBAAwB,uBAAxB,C;IACnB,sBAA4B,W;IAC5B,qCAAkD,KAAK,+CAAL,C;G;;SADlD,Y;MAAA,0B;K;;;SACA,Y;aDdwF,wC;K;;mDCgBxF,8B;IACI,OAAkB,qBAAM,IAAN,EAAY,GAAZ,EAAqB,KAArB,EAA4B,KAA5B,C;EACtB,C;EAJuD,wE;IAAA,mB;MAAE,yCAA6B,mBAA7B,C;IAAmC,C;G;;;;;;EAOhG,2B;IAAwB,oBAAwB,iBAAxB,C;IACpB,sBAA4B,W;IAC5B,qCAAkD,KAAK,gDAAL,C;G;;SADlD,Y;MAAA,0B;K;;;SACA,Y;aDvBwF,wC;K;;oDCyBxF,8B;IACI,OAAkB,qBAAM,IAAN,EAAY,GAAZ,EAAqB,KAArB,EAA4B,KAA5B,C;EACtB,C;EAJuD,0E;IAAA,mB;MAAE,yCAA6B,oBAA7B,C;IAAmC,C;G;;;;;;EAOhG,sB;IAAmB,oBAA2B,kBAA3B,C;IACf,sBAA4B,Q;IAC5B,qCAAkD,KAAK,2CAAL,C;IAClD,wBzCoBkD,c;G;;SyCtBlD,Y;MAAA,0B;K;;;SACA,Y;aDhCwF,wC;K;;8BCmCxF,Y;IAGS,gBADA,MADL,YAAY,uBAAZ,CACK,GAAM,IAAN,E;ItC+vCF,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;MACT,WAAY,WsCp0CQ,WAAM,MAAN,CjC0qC6D,eL0JvD,IK1JuD,EAAzB,CAAyB,CL0JrE,C;;IAoNA,U;IAAA,SAnNT,WAmNS,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MsCvhDG,uC;MAAA,UtCuhDU,OsCvhDK,aAAG,CAAH,C;MAAf,YAA8B,QtCuhDpB,OsCvhDc,aAAG,CAAH,CAAM,CAAN,GAAgB,EAAhB,I;MzC6J3C,wBAAI,GAAJ,EAAS,KAAT,C;;IyC3JU,kC;EACV,C;EASoB,uD;IAAA,mB;MAAE,qCAA2B,Y;IAAM,C;G;+CAPvD,8B;IAKI,yBAAyB,gCAAe,IAAf,C;IACzB,IAAI,0BAAJ,C;MACI,uCAAO,cAAK,qCAAL,C;KAEX,OAAO,qBAAM,IAAN,EAAY,kBAAZ,EAAgC,KAAhC,EAAuC,KAAvC,C;EACX,C;EAEW,kE;IAEP,kC;MAAA,qBAAwC,I;IACxC,qB;MAAA,QxCpBkC,W;KwCqBlC,qB;MAAA,QxCrBkC,W;KwCkBlC,0B;IACA,sD;IACA,4B;IACA,4B;IAQA,6BAAmC,WAAQ,S;G;;SAX3C,Y;MAAA,0B;K;;;SACA,Y;MAAA,wC;K;;;SACA,Y;MAAA,2B;K;;;SACA,Y;MAAA,2B;K;;2CAEA,Y;IACI,e1ClCoC,c;I0CmCd,gBAAN,U;ItCqoCjB,kBAAU,gB;IAOD,Q;IAAA,2B;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MACZ,WAAqB,OsC7oCkB,S;MtC8oC3B,OAAZ,WAAY,EAAO,IAAP,C;;IsC9oCR,QAAS,gBtCgpCV,WsChpCU,C;IACT,OAAO,Q;EACX,C;;SAEA,Y;MAAA,iC;K;;sCACA,iB;IAA4C,iDAAkB,kBAAQ,KAAM,KAAd,C;G;wCAC9D,Y;IAA+B,OAAK,SAAL,SAAK,C;G;;;;;;EAtCe,gE;IAAA,mB;MAAE,8CAAkC,eAAlC,C;IAAwC,C;G;;;;;;EA0C3D,mC;IA8GtC,gC;IA9GsE,gB;IAA/B,sC;IAEvC,iD;IACA,6C;IAEA,yC;IASA,iE;IACA,gCzC3DwD,oB;G;;SyC6Cd,Y;MAAQ,oB;K;;;SAClD,Y;;;MAAA,8B;K;SAAA,oB;MAAA,kC;K;;;SACA,Y;;;MAAA,4B;K;SAAA,kB;MAAA,8B;K;;;SAEA,Y;;;MAAA,0B;K;SAAA,gB;MAAA,0B;K;;;SAGI,Y;MAAQ,kB;K;;;SAER,Y;MAAe,gBAAP,W;MtCgkBL,kBAAS,gB;MAyEA,Q;MAAA,2B;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;QAAM,IsCzoBe,WAAM,IAAN,CAAY,iBtCyoBb,OsCzoB2B,KAAd,CtCyoB3B,C;UAAwB,WAAY,WAAI,OAAJ,C;;MsCzoB9C,OtC0oBL,W;K;;;SsCxoBoC,Y;MAAQ,gB;K;;;SAC1B,Y;MAAQ,qB;K;;;SACjC,Y;;;MAAA,sC;K;SAAA,4B;MAAA,kD;K;;EAmBI,sH;IAAA,mB;MACI,Q;MAAA,2C;QAAiB,mC;QAAA,mC;QAAA,mC;QAAA,qC;QAAA,+C;QACb,cAAc,4CAAkB,iBAAlB,EAAyB,iBAAzB,C;QACd,gBAAO,WAAI,OAAJ,C;QACP,wCzCqFZ,mByCrFiC,OzCqFjC,C;QyCnFY,0BAAc,I;QACd,oBxCnEwC,gB;QwCoExC,oBxCpEwC,gB;OwCsEhD,C;G;EAEa,6C;IAAA,mB;MAAE,oCAA0B,6BAA1B,Q;IAA8C,C;G;EA2ChD,iF;IAAA,mB;MAAE,kBAAe,+BAAZ,aAAY,YAAf,cAAiC,cAAO,KAAxC,oBAA2D,gBAAS,KAApE,c;IAAoF,C;G;EAInG,kG;IAAA,0B;MACW,gC;MAAA,U;MAAA,6CAAe,OAAQ,KAAvB,W;QtC8hCR,kBAAU,gB;QAOD,U;QAAA,wB;QAAhB,OAAgB,gBAAhB,C;UAAgB,2B;UsCpiCQ,kB;UtCqiCpB,WsCriCoB,qDtCqiCC,OsCriCD,yDAAgC,W;UtCsiCxC,OAAZ,WAAY,EAAO,IAAP,C;;QsCviCD,StCyiCR,W;;QsCziCQ,a;MAAA,U;MAAA,8B;QtC6eR,oBAAS,gB;QAyEA,U;QAAA,0B;QAAhB,OAAgB,gBAAhB,C;UAAgB,6B;UAAM,IsCpjBC,QtCojBa,SsCpjBb,EAAc,YAAd,CtCojBD,C;YAAwB,aAAY,WAAI,SAAJ,C;;QsCtjB3C,StCujBR,a;;QsCvjBQ,a;MAAA,U;MAAA,8B;QtC6nCR,oBAAM,iBAAa,gCAAwB,EAAxB,CAAb,C;QAqEA,W;QAAA,2B;QAAb,OAAa,iBAAb,C;UAAa,yB;UACT,aAAY,WsChsCI,+DtCgsCU,IsChsCV,EtCgsCJ,C;;QsCnsCD,StCosCR,a;;QsCpsCQ,a;MAAP,OAAO,qCAIA,W;IACX,C;G;4BA3EJ,Y;IACI,exCnDgD,gB;IwCoDhD,axCpDgD,gB;IwCqDhD,sBAA2B,IAA3B,C;IACA,gBxCtDgD,gBwCsDhD,C;IACA,gBxCvDgD,gBwCuDhD,C;IAEA,qBzC1EoD,oB;IyC2EpD,qBzC3EoD,oB;IyC6EpD,sF;IAYA,uCAAO,eAAM,0BAAN,C;IAGF,gBADA,MADL,YAAY,oBAAZ,CACK,G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IAAA,iC;IAAA,8C;G;;EACA,kD;IAAA,iC;IAAA,0C;G;EAEA,0C;IAAA,8C;IACI,cAAa,6B;G;yDACb,a;IAAmB,mBAAS,CAAT,C;G;;;;;;;EAFvB,sD;IAAA,iC;IAAA,qD;MAAA,oC;KAAA,8C;G;;;;;;EAjBJ,uC;IAAA,gpB;G;;EAAA,4C;IAAA,a;MAAA,W;QAAA,6C;MAAA,c;QAAA,gD;MAAA,kB;QAAA,oD;MAAA,kB;QAAA,oD;MAAA,mB;QAAA,qD;MAAA,gB;QAAA,kD;MAAA,Y;QAAA,8C;MAAA,c;QAAA,gD;MAAA,e;QAAA,iD;MAAA,Y;QAAA,8C;MAAA,Y;QAAA,8C;MAAA,Y;QAAA,8C;MAAA,W;QAAA,6C;MAAA,iB;QAAA,mD;MAAA,a;QAAA,+C;MAAA,QAAA,oE;;G;;EAuBA,0C;IAAA,e;IAAA,iB;IAAA,uB;IA4BI,wBAAsB,Y;G;EA5B1B,wC;IAAA,2C;K;IACI,gF;IACA,wE;IACA,sE;IACA,8E;IACA,oE;IACA,sF;IACA,oE;IACA,oE;IACA,oE;IACA,gE;IACA,2E;IACA,mE;IACA,6E;IACA,uF;IACA,qE;IACA,mF;IACA,qE;IACA,6F;IACA,mG;IACA,2F;IAGA,yC;G;;EAtBA,qD;IAAA,8B;IAAA,6C;G;;EACA,iD;IAAA,8B;IAAA,yC;G;;EACA,gD;IAAA,8B;IAAA,wC;G;;EACA,oD;IAAA,8B;IAAA,4C;G;;EACA,+C;IAAA,8B;IAAA,uC;G;;EACA,wD;IAAA,8B;IAAA,gD;G;;EACA,+C;IAAA,8B;IAAA,uC;G;;EACA,+C;IAAA,8B;IAAA,uC;G;;EACA,+C;IAAA,8B;IAAA,uC;G;;EACA,6C;IAAA,8B;IAAA,qC;G;;EACA,kD;IAAA,8B;IAAA,0C;G;;EACA,8C;IAAA,8B;IAAA,sC;G;;EACA,mD;IAAA,8B;IAAA,2C;G;;EACA,wD;IAAA,8B;IAAA,gD;G;;EACA,+C;IAAA,8B;IAAA,uC;G;;EACA,sD;IAAA,8B;IAAA,8C;G;;EACA,+C;IAAA,8B;IAAA,uC;G;;EACA,2D;IAAA,8B;IAAA,mD;G;;EACA,8D;IAAA,8B;IAAA,sD;G;;EACA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AyB,+BAAiB,WAAjB,C;UACe,gB5E0kD3B,S4E1kDoB,O;U5EgzC1C,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;UAqEA,U;UAAA,6B;UAAb,OAAa,gBAAb,C;YAAa,wB;YACT,WAAY,WAAc,I4Et3CgC,W5Es3ChC,I4Et3CgC,qB5Es3C9C,C;;U4Et3CA,qB5Eu3CT,W;U4Er3CS,gC;UAAA,YAAoC,wBAAK,YAAL,EAAmB,cAAnB,C;U/E8MpD,wB+E9M0B,O/E8M1B,EAAS,KAAT,C;;U+E7Mc,gC;YACE,sDAAO,cAAK,CAAL,EAAQ,4DAAR,C;;YANX,O;;;;G;oDAYZ,mB;IAA+D,gCAAU,OAAV,C;G;oDAE/D,uB;IAC4B,gBAAjB,cAAU,O;I5EwHd,sB;;MAqFS,Q;MAAA,2B;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;QAAM,I4E7Ma,O5E6MC,O4E7ME,QAAQ,KAAX,c5E6Mb,C;UAAwB,qBAAO,O;UAAP,uB;;MAC9C,qBAAO,I;;;I4E9MH,O5EwHJ,kB;E4EvHA,C;EAEA,2C;IAAA,+C;IACI,gBAAqB,WAAO,uBAAP,C;G;;;;;;;EADzB,uD;IAAA,sD;MAAA,qC;KAAA,+C;G;EAZ+B,8E;IAAA,mB;MAAE,qBAAW,mB;IAAa,C;G;;;;;;EC1BpC,+F;;IAKrB,uB;MAAA,UAAmB,C;IACnB,uB;MAAA,UAAsB,kBAAS,U;IAC/B,qB;MAAA,QAAqB,I;IANrB,0B;IACA,wB;IACA,gC;IACA,0B;IACA,sB;IACA,sB;IACA,kB;G;;SAEgC,Y;MAAQ,oBAAS,cAAT,C;K;;EAGlB,+G;;IAClB,sB;IACA,0B;IACA,oB;IACA,4B;IACA,gD;IACA,8B;G;;SAEwB,Y;MAAQ,qB;K;;EAGZ,yF;;IAChB,kC;IACA,oC;IACA,4B;G;EAJJ,0D;;G;wEAAA,Y;;G;;;;;;;;;;;;EAAA,4D;;;;;;G;;SAAA,Y;MAAA,gC;K;;iFAAA,0B;;;;;;G;mFAAA,mB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;G;gFAAA,Y;;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DAAA,Y;IAEI,yB;G;8DAFJ,Y;IAGI,0B;G;8DAHJ,Y;IAI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,OAAO,6CAAe,EAAf,EAAmB,OAAnB,C;EACX,C;EAE0B,iE;IAA1B,oB;IAA2B,c;IAAqB,wB;IAC5C,8BAAoC,qC;IAEpC,8BAA6C,I;G;;SAF7C,Y;MAAA,kC;K;;EAKoC,qF;IAAA,mB;MAAE,OAAA,+BAAQ,cAAK,6BAAL,EAAc,kBAAd,C;IAAkC,C;G;8DADhF,Y;IAC8B,gBAAH,S;IpClC/B,aoCkCwC,4DpClCxB,E;IAChB,0B;IoCiCQ,8BpChCD,M;EoCiCH,C;2DAEA,Y;IACI,yBAAyB,yBAAc,YAAY,O;IACnD,yBAAyB,gCAAqB,uBAArB,C;IAEzB,cAAc,2B;IACd,IAAI,mBAAmB,2BAAc,OAAd,KAAsB,kBAA7C,C;MACI,OAAO,I;;MAEP,OAAO,2DAAc,OAAd,C;;EAEf,C;EAEyB,2E;IAAzB,oB;IAC6B,gBAAH,gB;IpClD9B,aoCkDuC,4EpClDvB,E;IAChB,0B;IoCiDQ,iBpChDD,M;IoCiDC,mBAAwB,qBAAQ,kB;IAG5B,gDAA2B,C;IAC3B,oCAAgB,aAAI,kCAAJ,C;IAEb,kBAAH,gB;IpCzDZ,eoCyDqB,kHpCzDL,E;IAChB,4B;IoCyDe,kBAAH,gB;IpC1DZ,eoC0DqB,oHpC1DL,E;IAChB,4B;IoC0De,kBAAH,gB;IpC3DZ,eoC2DqB,8GpC3DL,E;IAChB,4B;IoC2De,kBAAH,gB;IpC5DZ,eoC4DqB,8GpC5DL,E;IAChB,4B;IoC4De,kBAAH,gB;IpC7DZ,eoC6DqB,kIpC7DL,E;IAChB,4B;IoCmEY,OAAQ,aAAI,gBAAJ,C;G;EAIC,kH;IAAA,mB;MAAE,wBAAG,uBAAc,4BAAd,C;MAAuB,W;IAAA,C;G;uEADzC,Y;IACO,gBAAH,gB;IpCxEZ,aoCwEqB,kFpCxEL,E;IAChB,0B;EoCwEQ,C;EAvB+B,8F;IAAA,mB;MAAE,OAAA,wBAAG,gB;IAAgB,C;G;EAOvC,kJ;IAAA,mB;MAAE,wBAAG,uBAAc,QAAc,8BAAd,IAAd,C;MAAuC,W;IAAA,C;G;EAC5C,oJ;IAAA,mB;MAAE,wBAAG,qBAAY,IAAZ,EAA2B,4BAA3B,C;MAAoC,W;IAAA,C;G;EACzC,gI;IAAA,mB;MAAE,w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/jD8C,U;M/F+jDjC,O+FjkDJ,kBAAb,SAAuC,gBAAY,M;M/FikDlC,O+FhkDJ,qBAAb,SAA0C,6BAAM,M;M/FgkD/B,O+F/jDJ,qBAAb,SAA0C,SAAQ,YAAR,EAAQ,oBAAR,S;M/F+jDzB,O+F9jDJ,uBAAb,yC;M/F8jDiB,O+F7jDJ,uBAAb,QAA2C,G;;I/F6jDvC,U;IAAA,S+F1jDR,wB/F0jDQ,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,6B;MAAa,S+FzjDjB,SAAY,gBAAY,M;M/FyjDP,S+FxjDjB,OAAa,OAAH,GAAe,C;M/FwjDR,S+FvjDjB,QAAW,QAAQ,C;;EAE3B,C;iFAEA,wC;I/FmjDY,Q;IAAA,O+FljDR,e/FkjDQ,W;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;M+FljDkB,iBAAW,c/FkjDhB,O+FljDgB,C;;I/FkjD7B,U;IAAA,S+FjjDR,W/FijDQ,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,6B;M+FjjDc,iC;MAAA,YAAiB,qB/FijDlB,S+FjjDkB,C;MlGuL/C,sBG03C6B,SH13C7B,EAAS,KAAT,C;;EkGtLI,C;;;;;mDA7CJ,6B;IAAuE,iE;G;EAgDvD,mG;IACZ,0C;IACA,gD;IACA,oD;G;;;;;;;;;;;;EApDR,qC;IAAA,oC;MAAA,mB;KAAA,6B;G;ECFA,8B;IAAA,kC;IAA4B,gBAAK,iBAAL,C;G;EAWb,qG;IAAA,8C;IAAA,kD;IACH,SAAa,C;G;wEAEb,Y;IACI,YAAY,wBAAY,M;IhGilDpB,Q;IAAA,OgG/kDJ,0BhG+kDI,W;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MAAa,OgG9kDV,QAAH,CAAW,CAAX,S;MhG8kDa,OgG7kDV,gBAAO,CAAP,C;MhG6kDU,OgG5kDb,aAAG,ShG4kDU,OgG5kDH,OAAO,KAAjB,EAAyB,CAAzB,C;;IAEJ,uB;EACJ,C;;;;;wDAtBR,6B;IACI,kBAAkB,UAAW,mBAAU,OAAV,EAAmB,gBAAY,OAAZ,CAAnB,C;IAE7B,aAAa,6D;IAC8B,gBAAvB,UAAW,Y;IhGi0C5B,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MgGt4C2C,kBAA5B,mChGs4CW,IgGt4CX,S;M5FmEnB,W4FlEY,SAAQ,CAAR,IAAa,6BAAM,M;MhGq4Cf,YAAZ,WAAY,EIl0CT,WJk0CS,C;;IgGv4CZ,oBhGw4CG,W;IgGl4CH,sF;EAcJ,C;;;;;;;EAzBJ,0C;IAAA,yC;MAAA,wB;KAAA,kC;G;ECDuB,wB;IAAiB,gBAAK,IAAL,C;G;EASzB,8H;IAAA,sC;IAAA,wD;IAAA,4C;IAAA,oC;G;8DACH,Y;IACmB,gBAAf,oBAAQ,O;;IjGslDJ,Q;IAAA,2B;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MiGrlDoC,+C;MjG2zC7C,kBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,+B;MAAb,OAAa,gBAAb,C;QAAa,wB;QACT,WAAY,WAAc,IiGj4C+B,WjGi4C7C,C;;MiGj4CA,mBjGk4CT,W;MAmNsB,OiGplDN,gBAAO,YAAP,C;;EAEf,C;4EAEA,wC;;IjGglDQ,Q;IAAA,OiG/kDJ,ejG+kDI,W;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MiG/kD8B,kCjG+kDjB,OiG/kDiB,C;;;;;IjG+kD9B,U;IAAA,SiG9kDJ,WjG8kDI,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,6B;MiG9kDgB,gD;MAAA,wC;MAAE,oC;MAAA,YAAc,kBAAW,yBjG8kD9B,SiG9kD8B,EAAoB,cAApB,C;MpGoN3D,sBG03C6B,SH13C7B,EAAS,KAAT,C;;EoGnNQ,C;;;;;8CAjBR,6B;IACI,aAAa,eAAW,YAAX,EAAoB,KAAM,oBAA1B,C;IAEyB,gBAAf,YAAQ,O;IjGi0C5B,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;MACT,WAAY,WiGv4CmC,8BjGu4CrB,IiGv4CqB,ajGu4CnC,C;;IiGv4CZ,uBjGw4CG,W;IiGv4CsB,aAAX,UAAW,Y;IAAY,oBpGiFS,c;IGqkClC,U;IAAA,0B;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MACZ,aAAY,aAAI,OAAJ,EiGvpCmE,mCjGupCxC,OiGvpCwC,SjGupCnE,C;;IiGvpCZ,cjGypCG,a;IiGvpCH,+F;EAaJ,C;gDAEA,iC;IAE2C,UAML,MANK,EAMZ,MANY,EAOT,MAPS,EAOhB,MAPgB,EAQT,MARS,EAQhB,MARgB,EAEhC,M;IAHP,aAAa,gB;IACb,WAAW,CAA4B,OAA5B,MAAO,sBAAa,MAAb,CAAqB,cAA5B,mBAA6C,iB;IAEjD,QAAM,oBAAN,C;WACH,Q;QACI,uCAAiB,UAAW,mBAAU,UAAQ,iBAAlB,EAA6B,WACrD,IADqD,EAEtC,WAAO,SAAP,MAAO,4BAAmB,cAAnB,CAAP,oDAAoD,GAFd,EAG1C,WAAO,SAAP,MAAO,4BAAmB,UAAnB,CAAP,oDAAgD,GAHN,EAI1C,WAAO,SAAP,MAAO,4BAAmB,UAAnB,CAAP,oDAAgD,GAJN,CAA7B,CAA5B,C;QADJ,K;WAQA,a;QACI,uCAAiB,UAAW,mBAAU,UAAQ,iBAAlB,EAA6B,gBAAY,IAAZ,CAA7B,CAA5B,C;QADJ,K;WAGA,M;QACI,qCAAe,UAAW,gBAAgB,cAA1C,EAAyD,UAAW,cAApE,C;QADJ,K;WAGA,gB;QACI,+CAAyB,UAAW,gBAAgB,cAApD,EAAmE,UAAW,cAA9E,C;QADJ,K;cAGQ,MAAM,8BAAyB,oBAAkB,oBAA3C,C;;IAlBlB,a;EAoBJ,C;;;;;;;;EAMsB,2C;IAAC,oB;G;iDACnB,Y;IACiB,UAAN,M;IAAM,kB;IACT,gC;MAAoB,SAAP,WAAO,M;SACpB,qC;MAAyB,SAAP,WAAO,M;;MACjB,MAAM,8BAAyB,wBAAqB,WAA9C,C;IAHlB,a;EAKJ,C;;;;;;EAGgB,kD;IAAC,wB;IAAwB,kB;G;+CACzC,Y;IACI,OAAO,aAAS,8BAAqB,UAArB,C;EACpB,C;;;;;;EAG0B,4D;IAAC,wB;IAAwB,kB;G;yDACnD,Y;IACI,OAAO,aAAS,iCAAwB,UAAxB,C;EACpB,C;;;;;;;;;;;ECvER,0B;IAAA,8B;IAAwB,gBAAK,YAAL,C;G;EAIT,yE;IAAA,4C;IACiC,gBAAvB,kBAAW,Y;IlGgrBzB,kBAAS,gB;IAyEA,Q;IAAA,2B;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MAAM,IkGzvB+B,clGyvBjB,OkGzvBiB,wBAA8B,gDlGyvB/C,OkGzvB+C,CAAH,KAAa,ClGyvBvE,C;QAAwB,WAAY,WAAI,OAAJ,C;;IAukBnD,oBAAM,iBAAa,wBAtkBnB,WAskBmB,EAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,SA3oBN,WA2oBM,W;IAAb,OAAa,gBAAb,C;MAAa,wB;MACT,aAAY,WkGr4Cc,2ClGq4CA,IkGr4CA,EAAoB,iBAApB,ClGq4Cd,C;;IkGt4CR,clGu4CD,a;IkGr4CC,uBAAsB,kBAAW,mBAAU,WAAV,EAAuB,WAAO,YAAP,EAAqB,IAArB,CAAvB,C;IACjC,kBAAiB,kBAAW,mBAAU,YAAV,EAAwB,WAAO,aAAP,EAAsB,GAAtB,CAAxB,C;IAC5B,YAAW,kBAAW,mBAAU,MAAV,EAAkB,WAAO,UAAP,EAAmB,GAAnB,CAAlB,C;IACtB,YAAW,kBAAW,mBAAU,MAAV,EAAkB,WAAO,UAAP,EAAmB,IAAnB,CAAlB,C;IAC2B,kBAA7B,kBAAW,kB;IlG0zChC,oBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;MACT,aAAY,WkGh4C0D,2ClGg4C5C,MkGh4C4C,EAAoB,iBAApB,ClGg4C1D,C;;IkGh4CR,qBlGi4CD,a;G;oEkG/3CC,Y;IAG4C,UAAR,M;IAFhC,kBAAkB,uBAAW,Y;IAC7B,YAAa,cAAc,GAAf,GAAsB,G;IACF,SAAhB,oBAAgB,M;IAAQ,IAAI,QAAQ,GAAR,IAAe,QAAQ,GAA3B,C;MACvB,QAAI,QAAQ,C;MAAzB,aAAkC,CAA3B,MxGkUuB,MAAW,KAAI,CAAJ,CwGlUP,IAAH,C;WAC5B,IAAI,QAAQ,GAAR,IAAgB,QAAQ,GAA5B,C;MACH,IAAI,QAAQ,GAAZ,C;QAAkB,SAAS,C;MAC3B,aAA8B,CAAvB,MxG+TuB,MAAW,KwG/TxB,KxG+TwB,CwG/TX,IAAH,C;;MAE3B,U;;IANJ,gBAAgB,a;IlG+kDZ,U;IAAA,SkGtkDJ,WlGskDI,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MAAa,OkGrkDb,sB;MlGqkDa,OkGpkDb,cAAgB,eAAW,M;MlGokDd,OkGnkDb,QAAU,SAAK,M;MlGmkDF,OkGlkDb,QAAU,SAAK,M;;IlGkkDf,U;IAAA,SkG/jDJ,kBlG+jDI,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,6B;MkG9jDW,0BAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,C;MACD,0BAAM,IAAN,EAAY,GAAZ,EAAiB,GAAjB,C;MAAoD,UAAzB,cAAc,GAAd,GAAqB,O;MlG6jD7C,SkG9jDb,SACK,4BxGvByB,MAAW,KAAI,GAAJ,CwGuBpC,C;;EAEb,C;;;;;oDAnCR,6B;IACI,Q;IAAA,2D;IAEA,kE;EAkCJ,C;gDAGI,qB;IAAsB,UAAd,MAAc,EAAd,M;IAAA,4BAAc,OAAd,WAAM,MAAN,CAAc,cAAK,cAAL,CAAd,oFAA4C,E;G;;;;;;;EAzC5D,sC;IAAA,qC;MAAA,oB;KAAA,8B;G;ECHA,qB;IAAA,yB;IAAmB,gBAAK,OAAL,C;G;EAcX,2D;IAAA,4B;MAAmC,OAAA,aAAM,qBAAY,SAAZ,C;K;G;EACzC,qE;IAAA,4B;MAAoC,OAAA,sBAAe,gBAAS,SAAT,C;K;G;EACnD,+F;IAAA,4B;MAAuD,kBAAZ,4B;MnGwqBxC,kBAAS,gB;MAyEA,Q;MAAA,6B;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;QAAM,ImGjvB6D,sCnGivB/C,OmGjvB+C,CnGivB7D,C;UAAwB,WAAY,WAAI,OAAJ,C;;MmGjvBX,OnGkvBxC,WAwxBA,K;K;G;EmGxgDI,2N;IAAA,8C;IAAA,gD;IAAA,oD;IAAA,kC;IAAA,4C;IAAA,0D;IAAA,0C;IAAA,kD;G;+DACH,Y;IACI,YAAY,e;IACZ,iBAAmD,uBAAjC,CAAC,MAAK,wBAAY,MAAlB,IAA2B,IAAM,C;IACnD,IAAI,sBAAQ,gCAAe,UAAf,CAAR,KAAJ,C;MACI,IAAI,2BAAe,UAAnB,C;QACI,sC;QAAsC,gBAAhB,kBAAM,U;QnGgqBzC,kBAAS,gB;QAyEA,U;QAAA,6B;QAAhB,OAAgB,gBAAhB,C;UAAgB,2B;UAAM,ImGzuB6C,cAAO,YAAP,GAAqB,GnGyuBlE,C;YAAwB,WAAY,WAAI,OAAJ,C;;QmGzuBvB,oBnG0uB5B,WmG1uB4B,C;;QAEf,wBrGyDgC,gB;QqGxDjB,kBAAf,2B;;;;QnGukDJ,U;QAAA,+B;QAAhB,OAAgB,gBAAhB,C;UAAgB,6B;UmGvkD2B,gD;UAAA,8D;UAAA,8C;UACnB,aAAmB,mBnGskDd,SmGtkDc,C;UAEnB,wBAA8B,0BnGokDzB,SmGpkDyB,C;UAC9B,IAAI,MAAJ,C;YACI,IAAI,oBAAoB,CAApB,IAAyB,oBAAoB,CAAjD,C;cACI,SAAS,K;cAGT,IAAI,sBAAqB,CAAzB,C;gBACI,qBAAuC,SAAZ,kBnG6jDlC,SmG7jDkC,CAAY,C;gBACvC,2B;kBAAwC,4BAAxC,cAAwC,C;iBACxC,SAAS,K;;YAIjB,IAAI,sBAAqB,CAArB,IAA0B,sBAAqB,CAAnD,C;cACI,SAAS,I;;UAKjB,IAAI,cAAO,YAAP,GAAqB,GAAzB,C;YACI,SAAS,CAAC,M;WAGd,IAAI,MAAJ,C;YACsB,4BnG4iDjB,SmG5iDiB,C;;QAG1B,2BAAe,Q;QACf,2BAAe,gBAAO,iBAAP,C;;MAGnB,8BAAe,K;KAGL,kBAAd,0B;;IvE+EI,U;IAAA,SAAA,W/BoNoE,QAAQ,W;I+BpN5F,OAAgB,gBAAhB,C;MAAgB,6B;MuE/EkB,wD;MAAG,cvE+ER,S/BuImC,I;MsGtNlB,avE+EjB,S/BoJmC,M;MsGlOhD,eACQ,6CACkB,SAAf,sBAAe,EAAS,OAAQ,aAAjB,CADtB,GACsD,6BAAM,MAD5D,GACuE,6BAAM,M;;EAEzF,C;;;;;+CApER,6B;IACI,Q;IAAA,2D;IAEA,kBAAkB,UAAW,mBAAU,OAAV,EAAmB,WAAO,OAAP,EAAgB,IAAhB,CAAnB,C;IAE7B,aAAa,iB;IAC8B,gBAAvB,UAAW,Y;InGyoCnC,aAAa,qBAA6D,cAAzC,YAAY,mCAAwB,EAAxB,CAAZ,CAAyC,EAAc,EAAd,CAA7D,C;IAcG,U;IAAA,6B;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;mBAbO,M;MmGzoCwB,kBAA5B,mCnGupCwB,OmGvpCxB,S;M/FmEnB,W+FnEuD,SAAQ,6BAAM,M;MnGupCrD,YAdO,MAcP,EAAI,OAAJ,EInlCT,WJmlCS,C;;ImGxpCZ,oBnG0oCmB,M;ImGtoCnB,qBrGwEgD,gB;IqGvEhD,0B;IAEA,yD;IACA,oE;IACA,6F;IAEA,4J;EAqDJ,C;;;;;;;EAvEJ,iC;IAAA,gC;MAAA,e;KAAA,yB;G;EvFGA,0B;IAAA,8B;IAAwB,gBAAK,gBAAL,C;G;EAUT,gG;IACH,qBAAoB,kBAAW,mBAAU,SAAV,EAAqB,kBAAc,SAAd,EAAyB,qBAAzB,CAArB,C;IAC/B,cAAa,kBAAW,mBAAU,aAAV,EAAyB,WAAO,aAAP,EAAsB,IAAtB,EAA4B,GAA5B,EAAgC,GAAhC,EAAoC,IAApC,CAAzB,C;IAExB,mBAAkB,iB;IAClB,qBAAoB,mB;IAEuB,gBAAvB,kBAAW,Y;IZozChC,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MYz3CQ,wBAAmC,2CZy3CjB,IYz3CiB,EAAyB,gBAAzB,C;MACnC,0BAAqC,2CZw3CnB,IYx3CmB,EAAyB,kBAAzB,C;MACrC,6BAAwC,+CZu3CtB,IYv3CsB,EAC3B,iBAD2B,EACR,mBADQ,qCACkC,GADlC,C;MZu3CpC,YAAZ,WAAY,EYn3CJ,2BAAQ,iBAAR,EAA2B,mBAA3B,EAAgD,sBAAhD,CZm3CI,C;;IY13CR,qBZ23CD,W;IYl3CC,kBAAiB,G;G;oEAEjB,Y;IACI,UAAU,eAAgB,gBAAe,Q;IACzC,aAAa,kBAAc,O;IZ2kD1B,gB;IADb,YAAY,C;IACC,OY1kDD,kBZ0kDC,W;IAAb,OAAa,cAAb,C;MAAa,sB;MYzkDG,iBAAiB,CAAC,OAAM,eAAN,QZykDR,oBAAmB,cAAnB,EAAmB,sBAAnB,UYzkDQ,IAAD,IAAqC,W;MACtD,iBAAiB,mBAAO,UAAP,C;MACjB,eAAe,mBAAO,CAAC,aAAa,CAAb,IAAD,IAA0B,WAAjC,C;MACf,mBAAmB,UAAW,cAAK,QAAL,EAAgB,MAAM,eAAP,GAAgC,eAA/C,C;MZskDS,IYnkDnC,iC;MZmkDmC,IYjkDnC,uBAAsB,6BAAM,M;MZikDO,IYhkDnC,6BAA4B,WAAO,MAAP,GAAe,C;;EAGvD,C;;;;;oDA3CR,6B;IACI,oBAAoB,QAChB,6BAAM,YAAK,SAAL,CADU,EAEhB,6BAAM,YAAK,SAAL,CAFU,EAGhB,6BAAM,YAAK,SAAL,CAHU,EAIhB,6BAAM,YAAK,SAAL,CAJU,EAKhB,6BAAM,YAAK,SAAL,CALU,E;IAQpB,iF;EAoCJ,C;EAEa,8E;IACT,8B;IACA,kC;IACA,wC;G;;;;;;;;;;;;EAnDR,sC;IAAA,qC;MAAA,oB;KAAA,8B;G;EwFJA,0B;IAAA,8B;IAAwB,gBAAK,gBAAL,C;G;EAUT,6F;IAAA,4C;IACwC,gBAAvB,kBAAW,Y;IpG8zChC,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;MACT,WAAY,WoGn4CO,2CpGm4CO,IoGn4CP,EAAyB,iBAAzB,CpGm4CP,C;;IoGp4CR,qBpGq4CD,W;IoGl4CC,kBAAiB,I;G;oEAEjB,Y;IACI,UAAU,eAAgB,gBAAe,Q;IAC3B,gBAAd,kB;;IpG2lDC,gB;IADb,YAAY,C;IACC,2B;IAAb,OAAa,cAAb,C;MAAa,sB;MoG3lD4B,gD;MACzB,iBAAiB,CAAC,OAAM,eAAN,QpG0lDR,oBAAmB,cAAnB,EAAmB,sBAAnB,UoG1lDQ,IAAD,IAAyB,kBAAW,O;MACrD,iBAAiB,mBAAW,UAAX,C;MACjB,eAAe,mBAAW,CAAC,aAAa,CAAb,IAAD,IAAmB,kBAAW,OAAzC,C;MAEf,apGslDuC,IoGtlDnB,O;MpGslDvB,oB;MADb,cAAY,C;MACC,SoGrlDG,MpGqlDH,W;MAAb,OAAa,gBAAb,C;QAAa,0B;QAAM,cAAO,oBAAmB,kBAAnB,EAAmB,0BAAnB,Y;QoGplDN,IAAI,cAAO,YAAP,GAAqB,GAAzB,C;UACI,mBAAO,OAAP,EAAgB,6BAAM,MAAtB,C;;UAEA,mBACe,kCAAgB,CAAC,MAAM,OAAN,IAAD,IAAgB,eAAjB,GAA0C,eAAzD,C;UACf,mBAAO,OAAP,EAAgB,YAAhB,C;;;;EAIhB,C;;;;;oDAjCR,6B;IACI,iBAAiB,CACb,6BAAM,YAAK,SAAL,CADO,EAEb,6BAAM,YAAK,SAAL,CAFO,EAGb,6BAAM,YAAK,SAAL,CAHO,EAIb,6BAAM,YAAK,SAAL,CAJO,EAKb,6BAAM,YAAK,SAAL,CALO,C;IAQjB,8E;EA0BJ,C;;;;;;;EApCJ,sC;IAAA,qC;MAAA,oB;KAAA,8B;G;ECIA,sB;IAAA,0B;IAAoB,gBAAK,QAAL,C;G;EACuD,oF;IAExC,gBAAvB,kBAAW,Y;IrGk0CZ,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;MACT,WAAY,WqGx4C2C,2CrGw4C7B,IqGx4C6B,EAAyB,kBAAzB,CrGw4C3C,C;;IqGr4C8B,kBAAlB,aAAM,Y;IrG+zC3B,oBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;MACT,aAAY,WqGr4C+C,+CrGq4CjC,MqGr4CiC,CrGq4C/C,C;;IqGr4CZ,yBrGs4CG,a;G;gEqGp4CH,Y;IrGulDY,Q;IAAA,OqGtlDR,sBrGslDQ,W;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MAAa,OqGrlDjB,SAAkB,6BAAM,S;MrGqlDP,OqGplDjB,OAAgB,cAAO,YAAP,GAAqB,iCAAU,SAAS,a;MrGolDvC,OqGnlDjB,QAAiB,cAAO,YAAP,GAAqB,iCAAU,UAAU,a;;EAElE,C;;;;;gDAbJ,6B;IAAuE,qE;G;;;;;;;EAD3E,kC;IAAA,iC;MAAA,gB;KAAA,0B;G;ECDA,6B;IAAA,iC;IAA2B,gBAAK,SAAL,C;G;EAYZ,wK;IAAA,kD;IAAA,8C;IAAA,kD;IAAA,kD;IAAA,gD;G;uEACH,Y;IACkB,gBAAd,0B;;;;;ItGklDI,Q;IAAA,2B;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MsGllDkB,kD;MAAA,sD;MAAA,sD;MAAA,oD;MtGklDL,OsGjlDb,SAAW,mBAAY,M;MtGilDV,OsGhlDb,WAAa,qBAAc,M;MtGglDd,OsG/kDb,WAAa,qBAAc,M;MtG+kDd,OsG9kDb,UAAY,oBAAa,M;;EAEjC,C;;;;;uDAnBR,6B;IACI,kBAAkB,UAAW,mBAAU,OAAV,EAAmB,gBAAY,OAAZ,CAAnB,C;IAC7B,oBAAoB,UAAW,mBAAU,SAAV,EAAqB,WAAO,UAAP,EAAmB,GAAnB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,IAAjC,CAArB,C;IAC/B,oBAAoB,UAAW,mBAAU,SAAV,EAAqB,WAAO,UAAP,EAAmB,GAAnB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,IAAjC,CAArB,C;IAC/B,mBAAmB,UAAW,mBAAU,QAAV,EAAoB,WAAO,QAAP,EAAiB,IAAjB,EAAwB,GAAxB,EAA4B,GAA5B,EAAgC,IAAhC,CAApB,C;IAE9B,aAAa,yB;IAC8B,gBAAvB,UAAW,Y;ItG8zC5B,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;MACT,WAAY,WsGn4CG,mCtGm4CW,IsGn4CX,StGm4CH,C;;IsGp4CZ,oBtGq4CG,W;IsGj4CH,iI;EAUJ,C;;;;;;;EAtBJ,yC;IAAA,wC;MAAA,uB;KAAA,iC;G;ECCA,0B;IAAA,8B;IAAwB,gBAAK,aAAL,C;G;EAaT,mK;IAAA,8C;IAAA,kD;IAAA,wD;IAAA,wD;IAAA,gC;G;oEACH,Y;IACI,gBAAY,wBAAY,MAAxB,C;IACc,gBAAd,0B;;;IvG+kDI,Q;IAAA,2B;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MuG/kDkB,4D;MAAA,4D;MvG+kDL,OuG9kDb,SAAW,OAAM,wBAAe,wBAAiB,MAAhC,CAAuC,wBAAe,wBAAiB,MAAhC,C;;IvG8kDxD,U;IAAA,SuG5kDJ,iBvG4kDI,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,6B;MAAa,SuG5kDF,SAAW,O;;EAC9B,C;;;;;oDAnBR,6B;IACI,kBAAkB,UAAW,mBAAU,OAAV,EAAmB,gBAAY,OAAZ,CAAnB,C;IAC7B,uBAAuB,UAAW,mBAAU,eAAV,EAA2B,WAAO,YAAP,CAA3B,C;IAClC,uBAAuB,UAAW,mBAAU,eAAV,EAA2B,WAAO,YAAP,CAA3B,C;IAElC,aAAa,iB;IAC8B,gBAAvB,UAAW,Y;IvG8zC5B,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MuGn4C2C,kBAA5B,mCvGm4CW,IuGn4CX,S;MnGgEnB,WmGhEuD,SAAQ,6BAAM,O;MvGm4CrD,YAAZ,WAAY,EIl0CT,WJk0CS,C;;IuGp4CZ,oBvGq4CG,W;IuGj4C0B,kBAAlB,KAAM,Y;IvG0zCd,oBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;MACT,aAAY,WuGh4CyC,uCvGg4C3B,MuGh4C2B,CvGg4CzC,C;;IuGh4CZ,WvGi4CG,a;IuG/3CH,4H;EASJ,C;;;;;;;EAtBJ,sC;IAAA,qC;MAAA,oB;KAAA,8B;G;ECDA,wB;IAAA,4B;IAAsB,gBAAK,cAAL,C;G;EACqD,sF;IACnE,mBAAkB,kBAAW,mBAAU,OAAV,EAAmB,gBAAY,OAAZ,CAAnB,C;IAC7B,mBAAkB,iB;IAGS,gBAAvB,kBAAW,Y;IxGg0CZ,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;MACT,WAAY,WwGt4C2C,2CxGs4C7B,IwGt4C6B,EAAyB,gBAAzB,CxGs4C3C,C;;IwGv4CZ,0BxGw4CG,W;IwGt4CiC,kBAAlB,aAAM,Y;IxG+zCrB,oBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;MACT,aAAY,WwGr4CyC,+CxGq4C3B,MwGr4C2B,CxGq4CzC,C;;IwGr4CZ,mBxGs4CG,a;G;EwGh4CC,+F;IAAA,4B;MACoC,QAA5B,wBAAc,yBAAM,M;MAAxB,O9GFkC,MAAW,KAAI,CAAJ,C;K;G;E8GIjD,oH;IAC2C,QAAI,IAAK,Y;IAAhD,OAAO,iCAAe,iB9G00BU,MAA6B,KAAZ,CAAY,C8G10BtD,C;EACX,C;kEATJ,Y;IACI,WAAW,SAAO,CAAP,C;IACX,UAAU,e;IAEV,wG;IAGA,qG;IxGglDQ,Q;IAAA,OwG5kDR,uBxG4kDQ,W;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MwGxkDmB,U;MAHvB,qBAA0B,gB;MAC1B,iBAA0B,0BAAL,GAA8B,GAAlC,GAAuC,6BAAM,SAA7C,GAA2D,gBAAY,M;MAEjE,SxGwkDN,OwGxkDM,O;MAAvB,uC;QxGwkDiB,OwGvkDA,OAAb,aAAoB,CAApB,EAAoC,sBAAX,UAAW,EAAsB,cAAtB,OAApC,C;;;IxGukDA,U;IAAA,SwGnkDR,gBxGmkDQ,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,6B;MAAa,SwGlkDjB,SAAY,gBAAY,M;MxGkkDP,SwGjkDjB,OxGikDiB,SwGjkDb,IAAJ,GAAW,CAAM,0BAAL,GAA8B,GAA/B,IAAsC,C;MxGikDhC,SwGhkDjB,QxGgkDiB,SwGhkDb,KAAJ,GAAY,CAAM,0BAAL,GAA8B,GAA/B,IAAsC,C;;EAE1D,C;;;;;kDAjCJ,6B;IAAuE,uE;G;;;;;;;EAD3E,oC;IAAA,mC;MAAA,kB;KAAA,4B;G;ECKA,qB;IAAA,yB;IAAmB,gBAAK,OAAL,C;G;EACwD,mF;IAAA,4C;IACnE,oBAAyB,kBAAW,gB;IACpC,mBAAkB,kBAAW,mBAAU,OAAV,EAAmB,gBAAY,OAAZ,CAAnB,C;IAE7B,mBAAkB,iB;IAClB,sBAAqB,oB;IACrB,wBAAuB,qBAAiB,gBAAjB,EAA8B,mBAA9B,C;IAEyB,gBAAvB,kBAAW,Y;IzGwzCjC,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MyG73CI,wBAAmC,2CzG63Cb,IyG73Ca,EAAyB,gBAAzB,C;MAE4C,kBAAzC,2CzG23ChB,IyG33CgB,EAAyB,mBAAzB,C;MrGwD9C,WqGvDY,WAAU,cAAO,YAAP,GAAqB,E;MADnC,2BrGyDD,W;MqGrDC,6BACe,+CzGs3CO,IyGt3CP,EAA6B,iBAA7B,EAAgD,oBAAhD,qCAA2F,GAA3F,C;MzGs3CP,YAAZ,WAAY,EyGp3CR,yBAAW,iBAAX,EAA8B,oBAA9B,EAAoD,sBAApD,CzGo3CQ,C;;IyG93CZ,oBzG+3CG,W;IyGl3C+C,kBAAlB,aAAM,Y;IzG2yCnC,oBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;MACT,aAAY,WyGj3CuD,+CzGi3CzC,MyGj3CyC,CzGi3CvD,C;;IyGj3CZ,2BzGk3CG,a;G;+DyG52CH,Y;IAEI,WAAW,uBAAW,Y;IAEtB,QAAQ,C;IACR,gBAAuB,6BAAM,MAAM,cAAK,gBAAY,MAAjB,EAAwB,OAAO,CAA/B,C;IzG0jD3B,Q;IAAA,OyGxjDR,iBzGwjDQ,W;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MAAa,OyGvjDJ,kBAAb,kB;MzGujDiB,OyGtjDJ,qBAAb,kB;MzGsjDiB,OyGpjDJ,uBAAb,yC;MzGojDiB,OyGnjDJ,uBAAb,QAA2C,G;;IzGmjDvC,U;IAAA,SyGhjDR,wBzGgjDQ,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,6B;MAAa,SyG/iDjB,kB;MzG+iDiB,SyG9iDjB,O/G65B8C,gB+G75BpC,GAA8B,C;MzG8iDvB,SyG7iDjB,Q/G45B8C,gB+G55BnC,GAA8B,C;;EAEjD,C;;;;;+CA/CJ,6B;IAAuE,oE;G;EAkDvD,+F;IACZ,0C;IACA,gD;IACA,oD;G;;;;;;;;;;;;EAtDR,iC;IAAA,gC;MAAA,e;KAAA,yB;G;ECVA,2B;IAAwB,uB;IACpB,qBAA0B,cAAU,GAAV,C;IAC1B,oBAAyB,cAAU,GAAV,C;IACzB,mB5GmFoD,gB;G;6C4GjFpD,qC;IACI,OAAI,eAAO,kBAAP,EAAoB,WAApB,EAAiC,YAAjC,C;G;6CAER,+C;IACI,gBAAU,WAAI,QAAJ,C;IACV,OAAW,eAAO,iBAAP,EAAmB,WAAnB,EAAgC,YAAhC,C;EACf,C;wCAEA,Y;IACgB,gBAAZ,kB;IlGuiBJ,UAAU,SAAV,EkGviByB,iBlGuiBzB,EADyF,CACzF,EAD8G,CAC9G,EADiI,gBACjI,C;IkGtiBI,wB;EACJ,C;qCAEA,Y;IACI,aAAU,CAAV,MAAkB,GAAlB,M;MAAuB,kBAAW,CAAX,IAAgB,C;IACvC,wB;EACJ,C;gDAEA,Y;I1G8kDgB,Q;IAAA,O0G7kDZ,gB1G6kDY,W;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MAAa,O0G7kDL,E;;EACxB,C;;;;;;ECxBJ,kB;IA6BI,8B;IA5BA,e9GmEwD,oB;G;E8GhEvC,+C;IAAA,mB;MAAE,6BAAmB,YAAnB,M;IAA0B,C;G;uCAD7C,gB;IACI,qCAAO,eAAM,6BAAN,C;IACW,gBAAX,YAAM,K;I3GqrBV,kBAAS,gB;IAyEA,Q;IAAA,2B;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MAAM,I2G9vBY,W3G8vBE,O2G9vBF,EAAW,UAAX,C3G8vBZ,C;QAAwB,WAAY,WAAI,OAAJ,C;;I2G9vBtD,O3G+vBG,W;E2G9vBP,C;EAGiB,8C;IAAA,mB;MAAE,4BAAkB,YAAlB,M;IAAyB,C;G;sCAD5C,gB;IAEW,Q;IADP,qCAAO,eAAM,4BAAN,C;IACP,OAAO,+BAAM,IAAN,wC;EACX,C;EAGiB,iE;IAAA,mB;MAAE,8BAAoB,YAApB,aAA+B,eAAQ,OAAvC,W;IAAoD,C;G;gDADvE,yC;IACI,qCAAO,eAAM,uCAAN,C;IACP,eAAQ,IAAR,EAAc,OAAd,C;EACJ,C;gDAEA,yC;IACI,wBAAW,IAAX,EAAyB,kBAAR,OAAQ,CAAzB,EAA8C,cAA9C,C;EACJ,C;+BAEA,yB;IACI,IAAI,YAAM,mBAAY,IAAZ,CAAV,C;MACI,MAAM,eAAY,IAAF,oBAAV,C;KAEV,Y9GgNJ,a8GhNU,I9GgNV,E8GhNkB,O9GgNlB,C;E8G/MA,C;EAEA,4B;IAAA,gC;IACI,cAAa,WAAO,QAAP,C;G;;;;;;;EADjB,wC;IAAA,uC;MAAA,sB;KAAA,gC;G;;;;;;ECtBa,8D;IA0Kb,mC;IAzKA,4B;MAAA,eAAgC,C;IAChC,uB;MAAA,UAAuC,I;IACvC,gC;MAAA,mBAAqC,kC;IAFrC,kC;IACA,wB;IAGA,sF;IAGA,qBAA0B,K;IAC1B,sB/G2EkD,c;I+G1ElD,4B/G0EkD,c;I+GxElD,2B/GwEkD,c;G;+B+GrElD,Y;IAC8B,Q;IAA1B,cAAc,6BAAY,yBAAZ,EAAY,iCAAZ,Q;IACd,OAAO,+BAAS,OAAT,C;EACX,C;8CAEA,Y;IAAkC,OAAA,cAAO,YAAP,GAAqB,0BAAmB,C;G;iDAC1E,Y;IAAqC,OAAA,cAAO,YAAP,GAAqB,0BAAmB,C;G;2CAC7E,Y;IAA+B,gB;IAAA,kGAA2B,G;G;EAEtC,iD;IAApB,oB;IAAqB,oC;IACjB,wBAAsB,I;IACtB,2BAAgC,K;IAChC,0B9GmDgD,gB;I8GlDhD,sB9GkDgD,gB;G;;S8GtD/B,Y;MAAA,+B;K;;;SACjB,Y;MAAA,4B;K;;qDAKA,6B;IACoC,Q;IAAhC,iBAAqB,SAAQ,CAAZ,IAAe,+BAAf,EAAe,uCAAf,UAAwC,I;IACzD,0BAAa,aAAI,SAAK,cAAL,EAAgB,UAAhB,CAAJ,EAAiC,WAAjC,C;IAC0B,gBAAnB,gC;I/G8SrB,U;IADP,YAAY,oB+G7S4C,U/G6S5C,C;IACL,IAAI,aAAJ,C;MACH,aClQgD,gB;MDmQhD,sB+GhToD,U/GgTpD,EAAS,MAAT,C;MACA,e;;MAEA,c;;I+GnTI,oB/G8SR,M;I+G7SQ,aAAc,WAAI,WAAJ,C;IACd,OAAO,6CAAc,UAAd,C;EACX,C;2DAEA,gB;IACI,qBAAqB,8CAAe,IAAf,C;IACrB,+C;IAAA,UAAkB,mBAAa,IAAb,C;I/G2L1B,sBAAI,GAAJ,E+G3L+C,c/G2L/C,C;I+G1LQ,OAAO,c;EACX,C;EAYoB,qG;IAAA,mB;MAAE,8BAAoB,iBAApB,SAA+B,YAA/B,aAAyC,Y;IAAM,C;G;EAMvC,gL;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,gD;IAAA,kE;IAAA,oD;EAGtB,C;;;;;;;;8EAHsB,Y;;;;;YAClB,gB;4BAAA,gD;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,OACA,oCAAkB,eAAM,6BAAN,CADlB,M;;;;;;;;;;;;;;EAEJ,C;EAHsB,+H;IAAA,yD;qBAAA,oK;UAAA,S;eAAA,Q;;eAAA,uB;IAGtB,C;G;EAIY,uG;IAAA,mB;MAAE,qCAA2B,iBAA3B,SAAsC,YAAtC,GAA2C,Y;IAAM,C;G;EAIyB,sF;IAAA,mB;MACxF,kH;IACJ,C;G;EAIqF,sF;IAAA,mB;MACjF,mC;IACJ,C;G;EAEsB,4L;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,gD;IAAA,kE;IAAA,wE;EAGtB,C;;;;;;;;gFAHsB,Y;;;;;YAClB,gB;4BAAA,gD;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,OACA,oCAAkB,mBAAU,iIAAV,CADlB,M;;;;;;;;;;;;;;EAEJ,C;EAHsB,yI;IAAA,yD;qBAAA,gL;UAAA,S;eAAA,Q;;eAAA,uB;IAGtB,C;G;EAEsB,yL;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,gD;IAAA,4D;IAAA,wE;EAGtB,C;;;;;;;;gFAHsB,Y;;;;;YAClB,gB;4BAAA,gD;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,OACA,iCAAe,mBAAU,uCAAV,CADf,M;;;;;;;;;;;;;;EAEJ,C;EAHsB,sI;IAAA,yD;qBAAA,6K;UAAA,S;eAAA,Q;;eAAA,uB;IAGtB,C;G;4DA7CJ,oD;IAa4B,Q;IAPxB,uBAAmB,WAAI,iBAAJ,C;IAEnB,qBAAqB,0CAAkB,cAAa,IAAb,CAAlB,C;IACrB,IAAI,sBAAJ,C;MACI,0CAAO,cAAK,mEAAL,C;KAGX,wBAAwB,oGAAwC,IAAxC,Q;IACxB,IAAI,yBAAJ,C;MACI,iBAAiB,iDAAkB,cAAlB,EAA6B,SAA7B,EAAwC,IAAxC,EAA8C,IAA9C,C;MACF,OAAf,4BAAe,kBAAO,0FAAP,C;MAIf,mBAAe,WAAI,UAAJ,C;MACf,OAAO,U;;MAEP,0CAAO,cAAK,qEAAL,C;;IAGX,oC;IACA,2BAA2B,iDAAkB,cAAlB,EAA6B,SAA7B,EAAwC,IAAxC,EAA8C,iBAA9C,EAAiE,oEAAjE,C;IAI3B,qBAAqB,kBAAkB,oBAAlB,C;IAErB,yBAAuB,iDAAkB,cAAlB,EAA6B,SAA7B,EAAwC,IAAxC,EAA8C,cAA9C,EAA8D,oEAA9D,C;IAIR,OAAf,4BAAe,kBAAO,oGAAP,C;IAKA,OAAf,4BAAe,kBAAO,iGAAP,C;IAIf,mBAAe,WAAI,2FAAJ,C;IACf,OAAO,2F;EACX,C;EAE6B,wH;IAA7B,oB;IAII,iC;MAAA,oBAA4D,I;IAC5D,6B;MAAA,gBAA4D,I;IAJ5D,wC;IACA,oC;IACA,0B;IACA,4C;IACA,oC;G;;SAJA,Y;MAAA,iC;K;;;SACA,Y;MAAA,+B;K;;;SACA,Y;MAAA,0B;K;;EAK0B,0J;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,4D;IAAA,0C;EAEtB,C;;;;;;;;oFAFsB,Y;;;;;YAClB,Q;YAAA,sGAA2B,kEAA3B,EAA8C,wBAA9C,e;;;;;;;;;;;;;;;;EACJ,C;EAFsB,uG;IAAA,yD;qBAAA,8I;UAAA,S;eAAA,Q;;eAAA,uB;IAEtB,C;G;kEAHJ,iB;IACmB,OAAf,mCAAe,kBAAO,+DAAP,C;EAGnB,C;;;;;;EAG6B,gE;IAAjC,oB;IAAkC,sC;G;;SAAA,Y;MAAA,gC;K;;iEAC9B,kC;IAEQ,Q;IADJ,IAAI,CAAC,wCAAL,C;MACI,mF;MACA,M;KAGJ,eAAe,4CAAa,SAAK,SAAL,EAAgB,IAAhB,CAAb,C;IACf,IAAI,gBAAJ,C;MAAsB,mBAAY,qBAAZ,EAAuB,eAAvB,EAAmC,QAAnC,EAA6C,KAA7C,C;EAC1B,C;sEAEA,uB;IAEQ,UAIJ,M;IALA,IAAI,CAAC,wCAAL,C;MACI,mF;MACA,M;KAGJ,gEAAmB,IAAnB,W;;M5Gg+CI,U;MAAA,0B;MAAhB,OAAgB,gBAAhB,C;QAAgB,2B;Q4G/9CA,mBAAY,qBAAZ,EAAuB,eAAvB,E5G+9Ca,O4G/9Cb,Q;;KAER,C;EAQ0B,yN;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,gD;IAAA,sD;IAAA,sD;IAAA,gD;IAAA,0C;EAStB,C;;;;;;;;uFATsB,Y;;;;;YAId,UAEA,M;YALJ,gB;4BAAA,gD;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAEA,IAAI,CAAC,oDAAL,C;cAFA,OAGI,4F;;cAEA,iG;cALJ,OAMI,8BAAY,iBAAQ,8BAAR,EAAqB,2BAArB,EAA+B,wBAA/B,CANhB,M;;;;;;;;;;;;;;;;;;EAQJ,C;EATsB,sK;IAAA,yD;qBAAA,6M;UAAA,S;eAAA,Q;;eAAA,uB;IAStB,C;G;+DAfJ,qD;IAMmB,OAAf,mCAAe,kBAAO,oHAAP,C;EAUnB,C;;;;;;EAG+B,2D;IAAnC,oB;IAAoC,gB;IAChC,0B/GzFgD,oB;G;0E+G4FhD,2B;IAII,uB/GsEZ,a+GtE+B,I/GsE/B,E+GtEuC,S/GsEvC,C;E+GrEQ,C;;;;;;;;;;;EAIR,yD;IAAA,wC;IAAA,yB;IAAA,kB;EAEA,C;;;;;;;;gDAFA,Y;;;;;YACI,IAAI,8BAAgB,CAApB,C;cAAuB,gB;8BAAA,MAAmB,oBAAb,yBAAa,CAAnB,O;kBAAA,qC;uBAAA,mB;cAAA,Q;;cAAvB,gB;;;;;;;YAAA,gB;;;;;;;;;;;;;;;;;EACJ,C;yCAFA,qC;mBAAA,kD;QAAA,S;aAAA,Q;;aAAA,uB;EAEA,C;EAE8B,qC;IAAC,Y;G;+CAC3B,Y;IAAkC,aAAO,SAAH,OAAG,EAAS,EAAT,C;G;;;;;;iDAD7C,Y;IAA+B,c;G;mDAA/B,c;IAAA,mCAA+B,4BAA/B,C;G;+CAAA,Y;IAAA,c;IAA+B,mD;IAA/B,a;G;6CAAA,iB;IAAA,2IAA+B,gCAA/B,G;G;EAIA,iC;IAAA,qC;IACI,cAAa,WAAO,aAAP,C;G;;;;;;;EADjB,6C;IAAA,4C;MAAA,2B;KAAA,qC;G;EArK6C,4E;IAAA,wD;G;;SACO,Y;MAAQ,oC;K;;;;;;;;;;;ECRhE,6B;IAA+B,OAAI,iBAAO,CAAX,GAAc,sBAAI,cAAO,iBAAQ,cAAR,CAAX,CAAd,GAA6C,I;G;EAE5E,qC;IAA6C,OAAI,iBAAO,CAAX,GAAc,sBAAI,MAAO,iBAAQ,cAAR,CAAX,CAAd,GAA6C,I;G;EAE1F,sC;IAA2B,2B;MAAA,cAAsB,M;IAC7C,IAAI,mBAAQ,CAAZ,C;MAAe,MAAM,8BAAyB,kBAAe,WAAf,gBAAmC,cAAnC,UAA0C,SAAnE,C;;MAChB,OAAO,oBAAW,O;EAC3B,C;EAEA,4B;IAAgC,OAAC,UAAU,OAAU,GAAL,G;G;EAEhD,8C;IACW,QnHs2B+C,MAAW,KmHt2BlD,KnHs2BkD,EmHt2B3C,QnHs2B2C,C;ImHt2BjE,OnH+2BsD,MAAW,KAAI,CAAJ,EmH/2BhC,QnH+2BgC,C;EmH92BrE,C;EAEA,yD;IAAA,wC;IAAA,yB;IAAA,4B;EAEA,C;;;;;;;;6CAFA,Y;;;;;YACI,gB;4BAAA,MAA6B,oBAAvB,cAAO,iBAAQ,iBAAR,CAAgB,CAA7B,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;;;;;;;;;;;;;;;EACJ,C;EAFA,0D;mBAAA,mD;QAAA,S;aAAA,Q;;aAAA,uB;EAEA,C;EAIY,oB;IA6BR,8B;IA7BS,Y;G;mCACT,mB;IACI,IAAI,OAAJ,EAAQ,OAAR,EAAiB,OAAQ,EAAzB,C;EACJ,C;kCAEA,mB;IACI,IAAI,OAAJ,EAAQ,MAAR,EAAgB,OAAQ,EAAxB,C;EACJ,C;kCAEA,mB;IACI,IAAI,OAAJ,EAAQ,MAAR,EAAgB,OAAQ,EAAxB,C;EACJ,C;kCAEA,8B;IACI,IAAI,OAAJ,EAAQ,MAAR,EAAgB,OAAQ,EAAxB,EAAkC,SAAlC,C;EACJ,C;mCAEA,mB;IACI,IAAI,OAAJ,EAAQ,OAAR,EAAiB,OAAQ,EAAzB,C;EACJ,C;mCAEA,8B;IACI,IAAI,OAAJ,EAAQ,OAAR,EAAiB,OAAjB,EAA0B,SAA1B,C;EACJ,C;mCAEA,8B;IACI,IAAI,OAAJ,EAAQ,OAAR,EAAiB,OAAQ,EAAzB,EAAmC,SAAnC,C;EACJ,C;EAEA,4B;IAAA,gC;IACI,wBAAsB,KAAK,8BAAL,C;G;;SAAtB,Y;axElBoF,2B;K;;kCwEoBpF,Y;IACI,OAAO,kBAAS,MAAM,gBAAO,aAAP,C;EAC1B,C;EAJ2B,0C;IAAE,2CAAW,yBAAX,C;EAAsC,C;;;;;;;EADvE,wC;IAAA,uC;MAAA,sB;KAAA,gC;G;;;;;;EAkBJ,oD;IAAA,wC;IAAA,yB;IAAA,uB;IAAA,gC;EAIA,C;;;;;;;;sCAJA,Y;;;;;6BACc,e;YACD,gB;4BAAT,mBAAS,M;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YACT,OAAO,yBAAkB,cAAlB,C;;;;;;;;;;;;;;EACX,C;EAJA,qD;mBAAA,8C;QAAA,S;aAAA,Q;;aAAA,uB;EAIA,C;EAEA,8B;IACI,UAAU,e;IACV,UAAS,E;IACT,OAAQ,yBAAkB,GAAlB,CAAuB,Q;EACnC,C;EC5Ea,wC;IACT,oBAAyB,OAAQ,O;IACT,IAAS,I;IAAjC,mBAAwB,cAAS,OAAT,QAAS,eAAc,KAAd,CAAT,qC;IACxB,eAAoB,oB;IACpB,oBAAyB,eAAW,YAAX,EAAkB,2CAAlB,EAAyC,gBAAzC,C;IACzB,kCAAuC,6BAAyB,iBAAzB,EAAqC,YAArC,EAAmD,iBAAnD,EAA+D,YAA/D,C;IAGnC,6BAAsB,+B;IACtB,iBAAW,S;G;6BAGf,Y;IAC0C,uC;ICtB1C,UAAa,E;IACN,GDsBC,gBAAoB,gB;ICtBrB,GDuBC,cAA+B,iB;IAFnC,OAAO,oBCrBJ,GDqBI,C;EAIX,C;8BAEA,Y;IACI,kCAA2B,I;IAC3B,+BAAyB,Q;EAC7B,C;oCAEA,Y;IACI,OAAA,wBAAW,WAAU,wBAAW,aAArB,C;G;EAEf,yC;IAAA,6C;G;;SAEQ,Y;MAAQ,Q;K;SACR,iB;IAAY,C;;;;;;;;EAHpB,qD;IAAA,oD;MAAA,mC;KAAA,6C;G;;;;;;EExBJ,qB;G;mCACI,Y;IAA4C,4BAAiB,QAAjB,C;G;iCAE5C,Y;IACI,0BAAe,cAAA,QAAS,gBAAe,WAAf,CAAT,CAAf,C;G;iCAEJ,Y;IACI,0BACI,cAAA,QAAS,gBAAe,YAAf,CAAT,CADJ,EAEI,cAAA,QAAS,gBAAe,cAAf,CAAT,CAFJ,C;G;sCAKJ,Y;IAAkD,gC;G;;;;;;EAGhC,oC;IACkE,gBAAnD,cAAA,QAAS,gBAAe,uBAAf,CAAT,C;I5GmDjC,S4GlDI,kBAAiB,OAAjB,EAA0B,uDAA1B,C;IADJ,4B5GoDO,S;I4G5CP,gCAAqC,I;IAQjC,sBAAiB,G;IAGrB,6BAAkC,cAAA,QAAS,gBAAe,wBAAf,CAAT,C;IAClC,4BAAiC,cAAA,QAAS,gBAAe,uBAAf,CAAT,C;IAEjC,yBAA8B,C;IAC9B,wBAA6B,C;G;;SAf7B,Y;MAAA,oC;K;SACI,iB;MACI,wCAAkD,YAAb,QAAQ,GAAK,CAAjB,iB;MACjC,gCAAQ,K;IACZ,C;;8CAaJ,Y;IACsC,Q;IAAlC,yCAAoD,CAAlB,6BAAkB,EAAlB,qCAAkB,kB;EACxD,C;6CAEA,Y;IACqC,Q;IAAjC,wCAAkD,CAAjB,4BAAiB,EAAjB,oCAAiB,kB;EACtD,C;EA9B8B,kF;IAAA,qB;MACtB,uC1G+CuC,S0G/CtB,cAAe,MAAO,QACnC,uBADmC,EACgB,YAAtB,uCAAiB,GAAK,CAA1B,WADU,CAAtB,C1G+CsB,C0G/CtB,GAED,G;MACpB,W;IAAA,C;G;;;;;;EA6BY,iC;IAChB,8BAA0C,kC;IAC1C,8BAAmC,I;IASnC,6BAAgC,C;IAOhC,uBAA0C,I;IAM1C,2B;IACA,mB;IACA,mB;IACA,mB;IACA,mB;IACA,mB;IACA,qB;IACA,mC;IACA,kBAAuB,W;IACvB,2B;IACA,uBAAqC,cAAA,QAAS,gBAAe,eAAf,CAAT,C;IACrC,uBAAqC,cAAA,QAAS,gBAAe,eAAf,CAAT,C;IACrC,uB;IAIoB,IAAQ,I;IADhB,WAAR,OAAQ,EAAW,gBAAX,C;IACR,uBAAgB,cAAQ,qBAAR,OAAQ,EAAc,QAAd,EAAwB,0BAAxB,CAAR,wC;IAChB,gCAAyB,kC;IAKjB,cAAR,OAAQ,EAAc,IAAd,EAAoB,4BAApB,C;IACA,WAAR,OAAQ,EAAW,iBAAX,C;IACR,uBAAwB,cAAR,OAAQ,EAAc,MAAd,EAAsB,4BAAtB,C;IAExB,eAAuB,cAAR,OAAQ,EAAc,KAAd,EAAqB,4BAArB,C;IAIvB,+BAAiC,cAAT,QAAS,EAAc,MAAd,EAAsB,4BAAtB,C;IAGxB,cAAT,QAAS,EAAc,IAAd,EAAoB,4BAApB,C;IACT,eAAiB,cAAT,QAAS,EAAc,KAAd,EAAqB,4BAArB,C;IACjB,eAAiB,cAAT,QAAS,EAAc,KAAd,EAAqB,4BAArB,C;IACjB,eAAiB,cAAT,QAAS,EAAc,KAAd,EAAqB,4BAArB,C;IACjB,eAAiB,cAAT,QAAS,EAAc,KAAd,EAAqB,4BAArB,C;IACjB,eAAQ,QAAO,YAAP,EAAc,YAAd,EAAqB,YAArB,EAA4B,YAA5B,E;IAER,iBAAmB,cAAT,QAAS,EAAc,MAAd,EAAsB,6BAAtB,C;IACnB,cAAQ,UAAU,KAAI,oBAAJ,C;IAEV,cAAR,OAAQ,EAAc,IAAd,EAAoB,6BAApB,C;IACA,cAAR,OAAQ,EAAc,GAAd,EAAmB,6BAAnB,C;IACA,cAAR,OAAQ,EAAc,IAAd,EAAoB,6BAApB,C;IACR,mBAAoB,cAAR,OAAQ,EAAc,MAAd,EAAsB,6BAAtB,C;IAWxB,4BAA+B,C;IAO/B,sBAAyB,C;IAsBzB,qBAA0B,G;IAM1B,gCAAqC,G;G;;SAnHrC,Y;MAAA,kC;K;SAAA,wB;MAAA,0C;K;;;SACA,Y;MAAA,kC;K;SACI,iB;MAG8B,UAClB,M;MAHR,8BAAQ,K;MACR,cAAc,oBAAc,Q;MACF,OAAR,OAAQ,O;MAA1B,aAAU,CAAV,gB;QACI,IAAI,iBAAA,OCi9IkD,CDj9I1C,CCi9I0C,CDj9IlD,uCAA2B,iCAA3B,CAAJ,C;UAA4C,qCAA8B,C;;IAElF,C;;;SAEJ,Y;MAAA,iC;K;SACI,iB;MACI,6BAAQ,K;MACR,mCAA4B,CAAG,OAAO,KAAP,IAAH,oB;MAC5B,mCAA+B,KAAH,kB;IAChC,C;;;SAEJ,Y;MAAA,2B;K;SACI,iB;MAE4B,Q;MADxB,uBAAQ,K;MACR,+BAAwB,wBAAA,KAAe,UAAF,4BAAb,KAAkC,YAArB,uBAAb,0BAAsE,G;IAClG,C;;EAuD0C,4D;IAAA,4B;MAAE,sBAAW,UAAG,KAAd,C;MAAoB,W;IAAA,C;G;+CAJpE,iB;IACkB,MAAd,oBAAc,C;IACd,kBAAW,K;IhH69CC,Q;IAAA,OgH59CZ,KhH49CY,W;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MgH39CM,cAAd,oBAAc,EAAc,QAAd,EAAwB,uChH29CjB,OgH39CiB,CAAxB,C;;EAEtB,C;;SAEA,Y;MAAA,gC;K;SACI,iB;MACkB,MAAd,oBAAc,C;MACA,WAAd,oBAAc,EAAW,KAAM,WAAjB,C;MACd,4BAAQ,K;IACZ,C;;;SAEJ,Y;MAAA,0B;K;SACI,iB;MACI,IAAI,QAAQ,CAAR,IAAa,QAAQ,CAAzB,C;QAA4B,M;;QAGD,QAAvB,yBAAM,mBAAN,CAAa,UAAU,C;QACvB,yBAAM,KAAN,CAAa,UAAU,KAAI,UAAJ,C;QACvB,IAAI,QAAQ,CAAR,KAAa,CAAjB,C;UACI,cAAQ,UAAU,KAAI,mBAAJ,C;;UAElB,cAAQ,UAAU,QAAO,mBAAP,C;;;QAExB,gC;UACE,QAAQ,iBAAc,CAAtB,C;;UATJ,O;;MAYA,sBAAQ,K;IACZ,C;;4CAEJ,6B;IAAyC,IAAiB,I;IAAjB,eAAiB,OAAZ,SAAY,SAAQ,MAAR,CAAjB,kC;G;4CACzC,6B;IAAwC,IAAiB,I;IAAjB,eAAiB,OAAZ,SAAY,SAAQ,MAAR,CAAjB,kC;G;;SAExC,Y;MAAA,yB;K;SACI,iB;MACI,6BAA+B,oBAAN,KAAM,EAAO,CAAP,CAAT,S;MACtB,qBAAQ,K;IACZ,C;;;SAEJ,Y;MAAA,oC;K;SACI,iB;MACI,2CAAoC,kBAAgB,QAAQ,GAAxB,O;MACpC,gCAAQ,K;IACZ,C;;EAvHsC,8C;IAAC,W;EAAA,C;EAuCS,+C;IAAE,sBAAY,U;IAAW,W;EAAA,C;EAChD,2D;IAAA,qB;;MACG,gBAAT,8B;MhHyDhB,sB;;QAqFS,U;QAAA,6B;QAAhB,OAAgB,gBAAhB,C;UAAgB,2B;UgH9IkC,U;UhH8I5B,IgH9IiB,OhH8IH,OgH9IM,KAAH,EAAW,UAAA,mCAAc,gBC86IE,CD96Ic,CC86Id,CD96IhB,qCAAX,ChH8IjB,C;YAAwB,qBAAO,O;YAAP,uB;;QAC9C,qBAAO,I;;;MgH/IC,oBhHyDR,kB;MgHxDQ,gCAAa,E;MACjB,W;IAAA,C;G;EAE4B,iD;IAAE,W;EAAA,C;EAEgB,iD;IAAC,W;EAAA,C;EAIxB,sD;IAAE,sBAAW,SAAX,C;IAAsB,W;EAAA,C;EAFH,iD;IACxC,eAAK,U;IACL,yBAAc,GAAd,EAAmB,iCAAnB,C;IACJ,W;EAAA,C;EACuD,iD;IACnD,sBAAW,iBAAX,C;IACJ,W;EAAA,C;EAC6B,iD;IAAC,W;EAAA,C;EACQ,iD;IAAE,sBAAW,GAAX,C;IAAgB,W;EAAA,C;EAClB,iD;IAAE,sBAAW,GAAX,C;IAAgB,W;EAAA,C;EAClB,iD;IAAE,sBAAW,GAAX,C;IAAgB,W;EAAA,C;EAClB,iD;IAAE,sBAAW,GAAX,C;IAAgB,W;EAAA,C;EAGf,kD;IAAE,sBAAW,WAAX,C;IAAmB,W;EAAA,C;EAGlC,kD;IAAE,W;EAAA,C;EACH,kD;IAAE,sBAAW,iBAAX,C;IAA8B,W;EAAA,C;EAC/B,kD;IAAE,W;EAAA,C;EACY,kD;IAAC,W;EAAA,C;;;;;;EAqD/B,qD;IAChB,oBAA2B,I;IAC3B,yBAAiC,I;IACjC,yBAA2C,6B;IAE3C,eAA8B,cAAV,SAAU,EAAc,KAAd,EAAqB,mDAArB,C;G;;SAJ9B,Y;MAAA,wB;K;SAAA,c;MAAA,sB;K;;;SACA,Y;MAAA,6B;K;SAAA,mB;MAAA,gC;K;;;SACA,Y;MAAA,6B;K;SAAA,mB;MAAA,gC;K;;8CAiBA,gB;IACI,YAAM,UAAU,QAAO,eAAP,C;IAChB,YAAM,UAAU,KAAI,YAAJ,C;EACpB,C;EApB2C,iE;IAAA,wC;IAAA,yB;EAAC,C;;;;;;;;+DAAD,Y;;;;;YAAC,W;;;;;;;;;;;;;;;;EAAA,C;EAAD,kE;mBAAA,2D;QAAA,S;aAAA,Q;;aAAA,uB;EAAC,C;EAIY,6H;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,sD;EAAY,C;;;;;;;;2EAAZ,Y;;;;;YAAE,gB;4BAAA,4C;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,oB;;;;;;;;;;;;;;EAAU,C;EAAZ,0E;IAAA,yD;qBAAA,iH;UAAA,S;eAAA,Q;;eAAA,uB;IAAY,C;G;EAAjC,iE;IAAA,qB;MAAc,OAAZ,sBAAY,kBAAO,8DAAP,C;MAAqB,W;IAAA,C;G;EAGzB,gE;IAAC,W;EAAA,C;EACF,0E;IAAA,4B;MAChC,sBAAW,sBAAS,mBAAoB,GAA7B,CAAX,C;MACJ,W;IAAA,C;G;EACsC,0E;IAAA,4B;MACX,Q;MAAvB,sBAAW,yBAAY,qEAAZ,CAAX,C;MACJ,W;IAAA,C;G;EAR+B,6F;IAAA,qB;MACd,MAAjB,wBAAiB,C;MACA,cAAjB,wBAAiB,EAAc,IAAd,EAAoB,2CAApB,C;MACA,cAAjB,wBAAiB,EAAc,GAAd,EAAmB,gEAAnB,C;MAGA,cAAjB,wBAAiB,EAAc,KAAd,EAAqB,gEAArB,C;MAGrB,W;IAAA,C;G;EAZ+C,oF;IAAA,4B;MAC/C,qBAAS,WAAT,EAAsB,eAAtB,E;MACA,SAAK,kBAAiB,OAAjB,EAA0B,uDAA1B,C;MACL,SAAK,kBAAiB,WAAjB,EAA8B,mFAA9B,C;MAUT,W;IAAA,C;G;;;;;;EAQJ,+B;IACI,6BAA2C,cAAA,QAAS,gBAAe,qBAAf,CAAT,C;IAC3C,6BAA2C,cAAA,QAAS,gBAAe,qBAAf,CAAT,C;IAE3C,0BAA6B,C;G;;SAA7B,Y;MAAA,8B;K;SACI,iB;MACI,0BAAQ,K;MACR,yCAAkC,CAAG,OAAO,KAAP,IAAH,oB;MAClC,yCAAqC,KAAH,kB;IACtC,C;;;;;;;EEnM4B,8B;IAAE,2B;EAAiB,C;EAfvD,oB;IACe,UA4BF,MA5BE,EA4BF,M;IA5BT,WAAW,QAAA,QDk2JkD,CCl2JzC,mBDk2JyC,CCl2JlD,mBAAiC,M;IAC5C,QAAQ,YAAS,IAAT,iBAAuB,IAAvB,WAAR,C;IAEA,mBAAmB,kCAAe,eAAf,C;IACnB,cAAc,mBAAe,YAAf,EAA6B,IAA7B,C;IACd,iBAAiB,QAAS,gBAAe,SAAf,C;IAE1B,QAAM,IAAN,C;WACI,W;QHnBJ,UAAa,E;QACN,GGwBK,qBAAoB,kB;QADxB,YHvBD,G;QG0BC,kBAAkB,QAAS,gBAAe,KAAf,C;QAC3B,OAAO,cAA8B,2BAA9B,EAAkC,KAAlC,CAAP,EAAiD,WAAjD,C;QATJ,K;WAYA,O;QACI,eAAe,YAAQ,OAAR,EAAiB,YAAjB,C;QACf,OAAO,QAAS,SAAhB,EAA0B,UAA1B,C;QAFJ,K;WAKA,Q;QAEI,YAAY,wBAAW,WAAU,wBAAW,aAArB,C;QACvB,CAAC,gEAAD,wC;QAEA,eAAe,gB;QACf,mBAAmB,sB;QACnB,aAAa,WAAO,OAAP,EAAgB,KAAhB,EAAuB,QAAvB,EAAiC,YAAjC,EAA+C,YAA/C,C;QACb,OAAO,QAAS,SAAhB,EAA0B,UAA1B,C;QACA,MAAO,Q;QATX,K;WAYA,I;QACI,YAAY,UAAM,OAAN,EAAe,YAAf,C;QACZ,OAAO,KAAM,SAAb,EAAuB,UAAvB,C;QAFJ,K;WAKA,M;QAAA,K;cAEQ,MAAM,mCAA8B,kBAAe,IAAf,WAA9B,C;;EAEtB,C;EAEA,yB;IACI,QAAQ,MAAO,S;IACf,YAAgB,CAAE,SAAF,KAAe,QAAnB,GAA6B,MAA7B,GAAyC,K;IACrD,OAAS,KAAF,UAAW,CAAE,KAAb,M;EACX,C;EpGawC,gD;IAAA,4B;MAAE,wB;MAAQ,W;K;G;ED0GsD,+B;IAAC,W;G;EC1GjE,kD;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EDmY4D,kC;IAAC,W;G;ECtYtC,qC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EC6IqB,8B;IAAC,W;G;ED7IhC,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EC2JJ,8B;IAAC,W;G;ED3JP,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;ECvBD,8B;IAAC,W;G;ED0B3C,kD;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EEqhBgE,iC;IAAC,W;G;EFxhB1C,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EGkHa,6B;IAAC,W;G;EHlHxB,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EG2TsK,kC;IAAC,W;G;EH3TjL,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EGyboC,kC;IAAC,W;G;EHzb/C,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EqGzBO,iC;IAAC,W;G;ErGyBlB,uC;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EGmEuB,kC;IAAC,W;G;EmGhG3F,oC;IAAC,8B;MAAA,iBAA8C,I;IAA9C,sC;IACb,iD;IAMA,eAAoB,G;IACpB,gBAAqB,G;IAErB,iBAAsB,G;IACtB,kBAAuB,G;IAEvB,2BAAgC,K;IAChC,kBAAuB,C;IACvB,mBAAwB,C;IAExB,eAAoB,W;IAEpB,oBACyB,uBAAc,QAAnC,IAAmC,CAAd,C;IACzB,iBAAsB,W;IACtB,kBAAuB,2BAAkB,EAAlB,EAA4B,YAAN,GAAmB,aAAzC,EAAiD,CAAjD,EAAoD,KAApD,C;IACvB,wB;IACA,mBAAwB,c;IAExB,0BtHiBoD,gB;IsHhBpD,kBAAgC,K;IAEK,gBAAP,WAAT,QAAS,C;IAA9B,gBtGGM,oBD0GwG,aAAI,gBAAgB,OAAhB,EuG7GzE,iBvG6GyE,CAAJ,EAAuC,SAAvC,CC1GxG,ED0GsK,SC1GtK,EAA8B,wBsGHwB,8BtGGxB,CAA9B,C;IsG0CN,oBAAgC,QAAP,aAAO,EAAyB,oBAAzB,C;IAChC,iBAAiC,UAAX,iBAAW,C;IAEjC,iBAA6B,QAAP,aAAO,EAAyB,iBAAzB,C;IACJ,IAAW,IAAX,EA0BrB,M;IA1BJ,oBAAyB,cAAW,OAAX,iBAAW,WAAX,wC;IAEzB,oBAAgC,QAAP,aAAO,EAAyB,sBAAzB,C;IAChC,iBAAiC,UAAX,iBAAW,C;IAEjC,sBAAkC,QAAP,aAAO,EAAyB,wBAAzB,C;IAClC,qBAAiC,QAAP,aAAO,EAAyB,uBAAzB,C;IAEjC,kBAA8B,QAAP,aAAO,EAAsB,gBAAtB,C;IAC9B,oBAAgC,QAAP,aAAO,EAAsB,kBAAtB,C;IAChC,qBAAiC,QAAP,aAAO,EAAsB,mBAAtB,C;IACjC,eAA2B,QAAP,aAAO,EAAsB,gBAAtB,C;IAC3B,yBAAqC,QAAP,aAAO,EAAyB,0BAAzB,C;IAErC,oBAAgC,QAAP,aAAO,EAAyB,SAAzB,C;IAChC,qBAAiC,QAAP,aAAO,EAAyB,UAAzB,C;IACjC,oBAAgC,QAAP,aAAO,EAAyB,SAAzB,C;IAEhC,2BvHtEwD,oB;IuHwExD,yBAA8B,E;IAC9B,yBAA8B,G;IAE9B,gBAAoC,I;IAGhC,+EAAoC,IAApC,e;IAEA,cAAQ,aAAY,iBAAZ,C;IAER,eAAS,SAAT,KAAsB,M;IACtB,cAAQ,KAAI,eAAJ,C;IAER,oBAAa,WAAY,sBAAqB,eAArB,EAA+B,iBAAW,WAA1C,C;IAEzB,aAAO,Q;IACP,aAAO,kBAAiB,SAAjB,EAA4B,4BAA5B,C;IAEP,2B;IAmGJ,yBAA8B,IAAI,G;G;;SAtNlC,Y;;;MAAA,8B;K;SAAA,oB;MAAA,kC;K;;wCAEA,oB;IACI,kBAAgB,Q;EACpB,C;yCAkHA,iB;IACI,IAAI,OAAA,KAAM,KAAN,EAAc,OAAd,CAAJ,C;MACmC,gBAAhB,sB;M/GjDgB,Q;M+GiD/B,sB/GjDqD,KAAtB,2DAAsB,CAAO,W+GiD5D,C;MACA,yBAAkB,E;WACf,IAAI,OAAA,KAAM,KAAN,EAAc,WAAd,CAAJ,C;MACH,IAAI,sB/GsEuC,UAAS,C+GtEpD,C;QACI,yBAAkC,UAAhB,sBAAgB,EAAU,gBAAI,sBAAgB,OAAhB,GAAyB,CAAzB,IAAJ,CAAV,C;OAEtC,sB;;MACG,IAAI,sB/G0DiC,YAAU,C+G1D3C,IAA6B,OAAA,KAAM,KAAN,EAAc,MAAd,CAAjC,C;QACH,4BAAyB,KAAM,SAAV,GAAoB,KAApB,GAAgC,GAArD,C;;QACG,IAAI,sB/GwDiC,YAAU,C+GxD3C,IAA6B,OAAA,KAAM,KAAN,EAAc,MAAd,CAAjC,C;UACH,4BAAyB,KAAM,SAAV,GAAoB,CAAC,KAArB,GAAiC,CAAC,GAAvD,C;;UACG,IAAI,sB/GsDiC,YAAU,C+GtD3C,IAA6B,OAAA,KAAM,KAAN,EAAc,QAAd,CAAjC,C;YACH,yBAAkB,G;iBACf,IAAI,KAAM,IAAI,OAAV,KAAoB,CAAxB,C;YACH,0BAAmB,KAAM,I;YACzB,sB;;;;IAEJ,0BAAa,sBAAb,C;EACJ,C;yCAEA,Y;IACI,IAAoB,WAAhB,sBAAgB,EAAW,GAAX,CAAhB,IAAmC,sBAAgB,OAAhB,GAAyB,CAAhE,C;MACI,8BAAuB,sB9FK8C,W8FLpB,C9FKoB,C8FLrE,C;KAER,C;EAI+B,4D;IAAA,4B;MAAE,kBAAQ,Y;MAAM,kBAAQ,Y;MAAK,W;IAAA,C;G;oDAF5D,gB;IACI,iC;IACoB,gBAAP,WAAT,QAAS,C;IAAO,atGrHlB,oBDmY8G,gBAAO,gBAAgB,OAAhB,EAA/D,IAA+D,CAAP,EAA0C,SAA1C,CCnY9G,EDmY+K,SCnY/K,EAA8B,0BsGqHL,0CtGrHK,CAA9B,C;IsGsHsC,kBAAT,OAA3B,sBAAgB,WAAW,C;IpHjC5B,sB;;MAqFS,U;MAAA,+B;MAAhB,OAAgB,gBAAhB,C;QAAgB,2B;QoHpDoC,U;QpHoD9B,IoHpD6B,iBAA0B,CAAzB,uBpHoDhB,OoHpDgB,0CAAyB,OAA1B,WpHoD7B,C;UAAwB,qBAAO,O;UAAP,uB;;MAC9C,qBAAO,I;;;IoHvDa,0BpH/BpB,kBoH+BoB,C;EAIpB,C;+CAEA,Y;IACI,yBAAkB,G;IAClB,4BAAqB,GAArB,C;EACJ,C;gDAEA,iB;IACI,0BAAmB,K;IACnB,eAAS,GAAG,KAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,C;IACZ,eAAS,GAAG,cAAuB,CAAV,aAAU,gBAA8B,sBAA9B,CAAvB,C;EAChB,C;kDAEA,mB;IpHq5CgB,Q;IAAA,OoHp5CZ,uBpHo5CY,W;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MAAa,OoHp5CK,W;;IAC9B,uBAAiB,Q;IACjB,oC;IAAiD,gBAAzB,wBAAkB,O;IpHwevC,kBAAS,gB;IAyEA,U;IAAA,6B;IAAhB,OAAgB,gBAAhB,C;MAAgB,6B;MAAM,IoHjjBgD,WpHijBlC,SoHjjB6B,KAAK,WAAkB,IAAlB,CpHijBhD,C;QAAwB,WAAY,WAAI,SAAJ,C;;IoHjjBrC,sBpHkjBd,WoHljBc,C;IpHk5CL,U;IAAA,SoHj5CZ,uBpHi5CY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,6B;MAAa,SoHj5CK,S;;EAClC,C;0CAEA,mB;IACI,OAAQ,KAAI,OAAJ,C;IAER,IAAY,WAAR,OAAQ,EAAW,GAAX,EAA6B,IAA7B,CAAR,IAAsD,WAAR,OAAQ,EAAW,GAAX,CAA1D,C;MAC2C,gBAArB,O9F5BmD,W8F4BjC,C9F5BiC,C;MjB5EtC,Q;M+GwG/B,kB/GxGqD,KAAtB,2DAAsB,CAAO,W;M+GyG5D,mBAAY,W9FpD4C,c8FoDxD,C;KAER,C;EAQiC,+D;IAAA,qB;MAAE,sC;MAAqB,W;IAAA,C;G;8CANxD,Y;IACI,IAAI,CAAC,eAAL,C;MACI,iBAAW,QAAO,YAAM,WAAb,C;KAEf,iBAAW,QAAO,cAAP,EAAgB,eAAhB,C;IAEX,MAAO,uBAAsB,0CAAtB,C;EACX,C;gCAEA,Y;IAC4C,yC;IL3O5C,UAAa,E;IACN,GK2OC,sCAAS,iC;;KAAT,kB;IADJ,OAAO,oBL1OJ,GK0OI,C;EAGX,C;EAM0B,0E;IAAA,qB;MAClB,2BAAS,kBAAW,YAApB,EAAiC,uCAAqB,kBAArB,CAAjC,C;MACJ,W;IAAA,C;G;qCANJ,sB;IACI,UAAW,aAAY,aAAZ,C;IACX,gBAAS,UAAW,YAApB,EAAiC,4BAAqB,UAArB,CAAjC,C;IAEA,sBAAsB,6C;EAG1B,C;gDAEA,sB;IACI,OAAW,UAAW,aAAX,KAA2B,CAA/B,GAAkC,MAAO,YAAzC,GAA0D,UAAW,a;EAChF,C;iCAEA,Y;IACI,Q;IAAA,2EAAoC,KAApC,e;IAEA,eAAS,U;EACb,C;oCAIA,yB;IACI,eAAa,K;IACb,gBAAc,M;IAEd,IAAI,CAAC,wBAAL,C;MACI,kBAAW,K;MACX,mBAAY,M;KAGI,QAAI,CAAC,KAAY,GAAJ,EAAI,IAAb,IAAyB,e;IAA7B,QAAuC,CAAC,MAAa,GAAJ,EAAI,IAAd,IAA0B,gB;IAAzE,U1H2mBsC,MAAW,KAAI,CAAJ,EAAO,CAAP,C;I0H3mB7D,Y1H2mBkD,MAAW,K0H3mB7C,G1H2mB6C,EAAO,GAAP,C;I0H1mB7D,iBAAU,kBAAW,EAAX,I;IACV,kBAAW,mBAAY,EAAZ,I;IAEX,yBAA0B,cAAR,GAAqB,e;IACvC,eAAS,yB;IAET,iBAAW,SAAQ,cAAR,EAAiB,eAAjB,EAA2B,IAA3B,C;IACX,0BAAmB,c;IACnB,2BAAoB,e;IAEpB,0BAAmB,c;IACnB,2BAAoB,e;IACpB,iBAAW,MAAX,aAA6B,WAAS,KAAT,M;IAE7B,0BAA+C,YAA3B,iBAAU,sBAAiB,C;IAC/C,2BAAiD,YAA5B,kBAAW,sBAAiB,C;IACjD,4BAAiD,YAA3B,iBAAU,sBAAiB,C;IACjD,6BAAmD,YAA5B,kBAAW,sBAAiB,C;IACnD,2BAAgD,YAA3B,iBAAU,sBAAiB,C;IAChD,4BAAkD,YAA5B,kBAAW,sBAAiB,C;EACtD,C;6CAEA,iB;IACsC,gBAAnB,KAAM,a;IpHsiClB,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,2B;IAAb,OAAa,cAAb,C;MAAa,sB;MACT,WAAY,WoH5mCiC,YpH4mCnB,IoH5mC6B,EAAV,EpH4mCnB,IoH5mCkC,EAAf,EpH4mCnB,IoH5mCuC,EAApB,CpH4mCjC,C;;IoH5mCZ,erH1R8D,YCu4C3D,WDv4C2D,C;IC0lDlD,U;IAAA,SoH/zCZ,KAAM,YpH+zCM,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MoH9zCR,WAAW,c;MACX,etHlN4C,gB;MsHmN5C,wB;MAEA,iBtHrN4C,gB;MsHsN5C,oBAAoB,a;MpHyzCZ,U;MAAA,SAAa,OoHxzCb,MpHwzCA,W;MAAhB,OAAgB,gBAAhB,C;QAAgB,6B;QoHvzCJ,YAAY,epHuzCK,SoHvzCM,UAAL,aAAe,CAAf,CAAN,EpHuzCK,SoHvzCyB,UAAL,aAAe,CAAf,CAAzB,EpHuzCK,SoHvzC4C,UAAL,aAAe,CAAf,CAA5C,EAA+D,YAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,CAA/D,C;QACH,mBAAI,KAAJ,C;QACE,qBAAI,KAAJ,C;QAGX,aAAa,CAAQ,KAAR,C;QACR,yB;QACS,kBAAI,cAAA,KAAM,OAAN,CAAJ,C;;MAElB,oBAAoB,aAAc,cpH8yCb,OoH9yCkC,MAAW,KAAhC,C;MAEM,kBAApB,uB;MhH3O5B,WgH2OwD,SAAQ,eAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,C;MAAxD,oBhH1OD,W;MgH2OC,WAAW,cAAK,IAAL,EAAW,aAAX,C;MACN,IAAL,QpH0yCqB,OoH1yCW,K;MAChC,cAAQ,KAAI,IAAJ,C;MAE+B,kBAApB,uB;MhHhP3B,WgHiPY,SAAQ,eAAM,GAAN,EAAU,GAAV,EAAc,GAAd,C;MhHjPpB,WgHkPY,aAAY,G;MAFhB,mBhH/OD,W;MJshDS,U;MAAA,SAAa,OoHjyCb,MpHiyCA,W;MAAhB,OAAgB,gBAAhB,C;QAAgB,6B;QoHhyCJ,eAAe,oB;QACsB,kBpH+xCpB,SoH/xCW,S;QpHqgCjC,oBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;QAqEA,U;QAAA,+B;QAAb,OAAa,gBAAb,C;UAAa,0B;UACT,aAAY,WoH1kCA,mBpH0kCc,MoHzkCP,EADP,EpH0kCc,MoHxkCP,EAFP,EpH0kCc,MoHvkCP,EAHP,iBpH0kCA,C;;QoH3kCJ,QAAS,erH3T6C,YCu4C3D,aDv4C2D,CqH2T7C,C;QAOT,gBAAU,KAAI,cAAK,QAAL,eAAJ,C;;MAGd,arHrU0D,YqHqU7C,QrHrU6C,C;MqHsU1D,IAAK,qB;MACL,IAAK,uB;MAEL,0C;MAAA,YAA6B,cpHixCR,OoHjxC0B,KAAlB,EAAwB,UAAxB,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,YAAhD,C;MvHzGrC,wBG03C6B,OH13C7B,EAAS,KAAT,C;;IuH4GI,cAAQ,KAAI,gBAAJ,C;IAGJ,sCAAqB,CAArB,EAAwB,EAAxB,EAA4B,EAA5B,C;IACoB,kBAApB,uB;IhH7QR,WgH6QoC,SAAQ,eAAM,QAAN,C;IAFxC,mBAAmB,sBhH1QhB,WgH0QgB,C;IAGnB,cAAQ,KAAI,YAAJ,C;IAER,kBAAyB,CAAP,UAAO,gBAAc,gBAAd,C;IACzB,iBAAW,OAAM,WAAN,EAAmB,KAAnB,C;EACf,C;gCAEA,Y;IACI,kBAAW,I;IACX,OAAO,oDAAkB,cAAK,eAAL,C;EAC7B,C;kCAEA,Y;IACI,kBAAW,K;EACf,C;4CAEA,Y;IACI,sBtHtRgD,gB;IsHuRhD,gBAAgB,qB;IAChB,mBAA6B,WAAV,SAAU,C;IAC7B,wBAAwB,oDAAkB,cAAK,eAAL,C;IxF7N9B,Q;IAAA,OwF+NZ,wBvHXgF,QAAQ,W;I+BpN5F,OAAgB,cAAhB,C;MAAgB,yB;MwF+NiB,YxF/NJ,O/BuImC,I;MuHwFxB,gBxF/NX,O/BoJmC,M;MuH4ExD,oBAAoB,SAAU,KAAK,SAAf,CAAwB,SAAU,MAAV,aAAgB,CAAhB,CAAmB,EAA3C,C;MACpB,kBAAkB,eAAS,SAAS,QAAQ,KAAI,aAAJ,C;MAC5C,WAAY,Y;MACZ,YAAY,cAAA,SAAU,MAAV,aAAgB,CAAhB,CAAmB,OAAnB,CAA4B,KAAI,WAAJ,C;MACxC,IAAI,QAAQ,CAAZ,C;QACI,SAAU,KAAK,oB;QAEf,uBAA6C,QAAtB,SAAU,YAAY,EAAQ,eAAR,C;QAC7C,uBAAuB,+BAAwB,gBAAxB,e;QACvB,wBAAwB,gB;QACxB,IAAqB,gBAAY,yBAAjC,C;UACI,aAA0B,wBACC,WAAvB,gBAAiB,IAAI,EAAE,CADD,EAEC,WAAvB,gBAAiB,IAAI,EAAE,CAFD,EAGC,WAAvB,gBAAiB,IAAI,EAAE,CAHD,EAIC,WAAvB,gBAAiB,IAAI,EAAE,CAJD,C;UAMV,0BAAI,oCAAe,KAAf,EAAsB,MAAtB,EAA8B,SAA9B,oBAAJ,C;;IAK5B,OAAO,e;EACX,C;EAE0B,oG;IAA1B,oB;IACI,0C;IACA,wC;IACA,0B;IAGA,gBAAqB,iBAAkB,e;IACvC,cAAmB,c;IACqB,gBAAjB,oB;IhHrU3B,SgHsUQ,SAAQ,eAAM,KAAN,C;IhHtUhB,SgHuUQ,QAAO,C;IAFX,kBhHpUG,S;IgHwU2B,kBAAT,Y;IhHzUzB,WgH0UQ,YAA+B,W;IhH1UvC,WgH2UQ,YAA+B,e;IAFnC,gBhHxUG,W;IgH4UH,gBvHtVoD,oB;G;;SuHuUpD,Y;MAAA,kC;K;;;SACA,Y;MAAA,iC;K;;yDAgBA,4B;IACI,wB;IAAoD,gBAA/B,iDAAa,UAAb,EAAyB,CAAzB,EAA4B,CAA5B,C;IhHhV7B,SgHgVoE,Y;IvHnLpE,iBuHmLe,UvHnLf,EO5JO,SP4JP,C;EuHoLI,C;2EAEA,4B;IACuB,Q;IAAA,+BAAiB,OAAjB,EAA0B,OAA1B,C;IAAA,iB;MAAsC,OAAO,I;KAAhE,mBAAmB,I;IAEnB,YAAY,cAAU,sBAAa,YAAa,MAAM,QAAhC,C;IACtB,OAAQ,KAAI,UAAJ,EAAgB,KAAM,EAAtB,EAAyB,KAAM,EAA/B,EAAkC,KAAM,EAAxC,C;IACR,OAAO,aAAS,KAAQ,EAAjB,EAA4B,KAAQ,EAApC,C;EACX,C;;SAGI,Y;MAEkB,UACK,M;MAFnB,ctHrVwC,gB;MsHsV1B,qBAAY,IAAZ,aAAO,KAAK,CAAZ,C;MAAd,aAAU,CAAV,iB;QACI,eAAe,kCAAO,CAAP,0C;QACf,OAAQ,WAAI,QAAJ,WACJ,aADQ,QACM,EAAd,EADQ,QACsB,EAA9B,EADQ,QACsC,EAA9C,CADI,Q;;MAIZ,OAAO,O;IACX,C;;2DAEJ,gB;IACI,gBAAsB,oB;IACtB,kBAAkB,YACd,IAAI,qBAAJ,GAAc,CAAd,GAAkB,CADJ,EAEd,EAAE,IAAI,sBAAJ,GAAe,CAAf,GAAmB,CAArB,CAFc,C;IAIlB,SAAU,eAAc,WAAd,EAA2B,aAA3B,C;IACV,oBAAoB,SAAU,iBAAgB,cAAU,KAA1B,EAAgC,KAAhC,C;IAC9B,IAAI,a1G8uML,YAAQ,C0G9uMP,C;MACI,gBAAgB,SAAU,iBAAgB,qBAAhB,EAAyB,IAAzB,C;MAC1B,OAAQ,KAAI,4BAA0B,iBAAa,KAAvC,QAAJ,EAAsD,aAAtD,C;KAEZ,I1GkzMD,E0GlzMK,a1G0uML,YAAQ,CAwER,C0GlzMC,C;MACI,OAAqB,QAAd,aAAc,C;;MAErB,OAAO,I;;EAEf,C;mDAEA,Y;IACI,qBAAQ,KAAI,aAAJ,C;EACZ,C;mDAEA,Y;IACI,qBAAQ,QAAO,aAAP,C;EACZ,C;EAEwB,sF;IAAxB,oB;IAAyB,4B;IAAqB,sB;IAAoB,sB;IAC9D,2BAAqC,KAAK,0EAAL,C;IACf,Q;IAAtB,uBAAsB,qD;IAatB,kCAA6C,KAAK,iFAAL,C;G;;SAd7C,Y;a/E1agF,8B;K;;+D+E6ahF,Y;IACI,IAAI,wBAAJ,C;MAEI,OAAO,kBAAK,SAAS,OAAd,GAAqB,eAA5B,C;QACI,kBAAK,SAAL,CAAc,kBAAK,SAAS,OAA5B,IAAoC,YAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,C;;MAGxC,kBAAK,SAAL,CAAc,eAAd,IAA4B,+BAAY,M;KAEhD,C;;SAEA,Y;a/ExbgF,qC;K;;E+E0atC,yG;IAAA,mB;MAAE,8CAAiB,yBAAjB,EAA0B,yBAA1B,C;IAAmC,C;G;EAc7B,gH;IAAA,mB;MAC9C,IAAI,yCAAJ,C;QAAA,OACI,I;;QAEA,6BAAU,sBAAa,iCAAb,C;QAHd,OAII,GAAA,iCAAkB,EAAlB,EAA+B,iCAAkB,EAAjD,C;;IAER,C;G;;;;;;;;;;;EAIoB,4D;IAWxB,oD;IAXyB,0C;IAAgD,8B;G;;SAAhD,Y;MAAA,kC;K;;;SAAgD,Y;MAAA,4B;K;;wDAEzE,Y;IACmD,gBAAxC,2BAAkB,EAAlB,EAAsB,WAAtB,EAA8B,CAA9B,EAAiC,KAAjC,C;IhH/Zf,SgHgaY,OAAO,WAAgC,cAAtB,iBAAa,SAAS,CAAhC,C;IhHhanB,SgHkamB,OAAY,WhHla/B,SgHkayC,SAAV,EhHla/B,SgHkamD,WAApB,EhHla/B,SgHka+D,MAAhC,C;IhHla/B,SgHmaY,oB;IAJJ,OhH9ZD,S;EgHoaH,C;EAEA,kD;IAAA,sD;G;kEACI,kB;IACI,OAAO,iCACS,cAA+C,aAAvC,MAAO,OAAO,SAAQ,SAAR,CAAyB,CAA/C,CADT,EAEH,MAAO,OAFJ,C;EAIX,C;;;;;;;EANJ,8D;IAAA,6D;MAAA,4C;KAAA,sD;G;;;;;;sDAXJ,Y;IAA6B,wB;G;sDAA7B,Y;IAA6E,kB;G;wDAA7E,gC;IAAA,wCAA6B,0DAA7B,EAA6E,wCAA7E,C;G;oDAAA,Y;IAAA,OAA6B,sEAA7B,IAA6E,0CAA7E,O;G;oDAAA,Y;IAAA,c;IAA6B,6D;IAAgD,uD;IAA7E,a;G;kDAAA,iB;IAAA,4IAA6B,oDAA7B,IAA6E,wCAA7E,I;G;EA+BmB,0E;IAAE,4BAAC,OAAD,C;IAAS,W;EAAA,C;EACX,4E;IAAE,4BAAC,eAAD,C;IAAiB,W;EAAA,C;EAFvB,mE;ItGhc6C,SC6IqD,YAAG,mBAAgB,OAAhB,EAApF,IAA6G,sBAA7G,IAA6G,QAAzB,EAA6C,OAA7C,EAA1D,IAA0D,EAAH,EAAmE,kBAAnE,CD7IrD,EAAS,asGiclD,qDtGjckD,CAAT,C;IAAA,SC6IqD,YAAG,mBAAgB,OAAhB,EAApF,IAA6G,sBAA7G,IAA6G,QAAzB,EAA6C,OAA7C,EAA1D,IAA0D,EAAH,EAAmE,kBAAnE,CD7IrD,EAAS,asGkclD,uDtGlckD,CAAT,C;IsGmchD,W;EAAA,C;EAIW,8F;IAAA,4B;MAAE,4BAAC,sBAAe,aAAa,KAA7B,C;MAAkC,W;IAAA,C;G;EACpC,0F;IAAA,4B;MAAE,4BAAG,gBAAF,WAAD,C;MAAa,W;IAAA,C;G;EAFnB,2G;IAAA,4B;MACC,YAAG,oF;MtGvcqC,SC2J4B,YAAG,gBAAgB,OAAhB,EAA1D,IAA0D,CAAH,EAAsC,kBAAtC,CD3J5B,EAAS,eC2JyE,KD3JzE,CAAT,C;MsGwcxC,cAAG,gF;MtGxcqC,SC2J4B,YAAG,gBAAgB,OAAhB,EAA1D,IAA0D,CAAH,EAAsC,kBAAtC,CD3J5B,EAAS,eC2JyE,OD3JzE,CAAT,C;MsGyc5C,W;IAAA,C;G;EAVF,wE;IAAA,4B;MtG/b8C,SCvB+B,YAAG,gBAAgB,OAAhB,EAA1D,IAA0D,CAAH,EAAsC,kBAAtC,CDuB/B,EAAS,esGgctD,8CtGhcsD,CAAT,C;MsGqchD,gC;MAAyB,QAAO,qBAAc,K;MpHwlC1C,U;MAAA,SoHxlCU,qBAAQ,CAAR,E1H8esB,MAAW,K0H9elB,C1H8ekB,EAAO,CAAP,C0H9ejC,CpHwlCV,W;MAAhB,OAAgB,gBAAhB,C;QAAgB,2B;QoHxlC2D,IAAC,iBpHwlC/C,OoHxlC+C,aAAD;UAAiB,WpHwlC/D,OoHxlC+D,a;QtGrchC,SCvB+B,YAAG,gBAAgB,OAAhB,EAA1D,IAA0D,CAAH,EAAsC,kBAAtC,CDuB/B,EAAS,esGsclD,iFtGtckD,CAAT,C;;MsG2cpD,W;IAAA,C;G;EAbS,iE;IAAA,4B;MACT,YAAM,8D;MpGyFyH,Q;MAAA,cAA+C,OFrhBhL,oBEqhBiI,eAAM,gBAAgB,OAAhB,EAA5E,IAA4E,CAAN,YFrhBjI,aAA8B,0BEqhByK,KFrhBzK,CAA9B,CEqhBiI,yC;MoG5EnI,W;IAAA,C;G;gDArBJ,yB;IACI,UAGiC,M;IAHjC,6D;IAEA,iBAA+B,MAAd,aAAc,C;IACiC,CAA/D,cAAgC,SAAhC,UAAW,MAAM,UAAU,KAAK,SAAhC,0CAA+D,OAAhE,KAAgE,CAA/D,cAAgC,SAAhC,UAAW,MAAM,UAAU,KAAK,SAAhC,0CAA+D,OAAM,EAAtE,GAA2E,I;IAErE,MAAN,YAAM,C;IACA,OAAN,YAAM,EAAO,+CAAP,C;EAeV,C;qDAEA,iC;IAKI,gBAAsB,oB;IACtB,kBAAkB,YACZ,CAAF,GAAc,cAAd,GAAwB,CAAxB,GAA4B,CADd,EAEd,EAAI,CAAF,GAAc,eAAd,GAAyB,CAAzB,GAA6B,CAA/B,CAFc,C;IAIlB,SAAU,eAAc,WAAd,EAA2B,eAA3B,C;IACV,oBAAoB,SAAU,iBAAgB,cAAhB,EAAyB,IAAzB,C;IAC9B,I1GgtMG,E0GhtMC,a1GwoMD,YAAQ,CAwER,C0GhtMH,C;MACI,gBAA8B,QAAd,aAAc,C;MpHpY/B,sB;;QAqFS,Q;QAAA,OoHgTD,epHhTC,W;QAAhB,OAAgB,cAAhB,C;UAAgB,yB;UAAM,IoHgTgB,OpHhTF,OoHgTK,aAAa,KAAhB,EAAkC,gBAAS,KAA3C,CpHhThB,C;YAAwB,qBAAO,O;YAAP,uB;;QAC9C,qBAAO,I;;;MoH+SC,OpHrYR,kB;;MoHuYQ,OAAO,I;;EAEf,C;wCAEA,Y;IACI,OAAO,SAAK,YAAQ,CAAR,EAAW,CAAX,CAAL,EAAoB,YAAQ,YAAR,EAAe,aAAf,CAApB,C;EACX,C;mDAEA,6B;IACI,WAA2D,YAA9C,GAAI,IAAI,EAAR,GAAY,YAAa,EAA1B,GAA+B,YAAa,EAAG,C;IAC3D,WAA2D,YAA9C,GAAI,IAAI,EAAR,GAAY,YAAa,EAA1B,GAA+B,YAAa,EAAG,C;IAG3D,WAA4D,YAA/C,CAAC,GAAI,IAAI,EAAT,GAAa,YAAa,EAA3B,GAAgC,YAAa,EAAG,C;IAC5D,WAA4D,YAA/C,CAAC,GAAI,IAAI,EAAT,GAAa,YAAa,EAA3B,GAAgC,YAAa,EAAG,C;IAE5D,OAAO,SAAK,YAAQ,IAAR,EAAc,IAAd,CAAL,EAA0B,YAAQ,IAAR,EAAc,IAAd,CAA1B,C;EACX,C;sDAEA,+B;IACI,IAAI,CAAC,wBAAL,C;MACI,kBAAW,KAAM,M;MACjB,mBAAY,KAAM,O;MAClB,2BAAoB,I;MACpB,gBAAS,YAAT,EAAgB,aAAhB,C;KAGJ,cAAQ,iB;IACiB,CAAzB,iBAAa,iBAAb,CAAyB,oBAAU,KAAV,C;IAEzB,yB;MACI,2BAAoB,G;MACpB,6BAAsB,S;MACtB,cAAQ,YAHZ,YAG0B,GAAd,EAHZ,YAGyC,GAA7B,EAHZ,YAG2D,MAA/C,EAHZ,YAG8E,OAAlE,C;KAEhB,C;uDAEA,qC;IACI,cAAQ,iB;IACR,cAAQ,OAAM,sBAAN,EAAuB,sBAAvB,C;IACiB,CAAzB,iBAAa,iBAAb,CAAyB,oBAAU,WAAY,UAAtB,C;IAEzB,yB;MACI,6BAAsB,S;MACtB,2BAAoB,IAAI,sB;MACxB,cAAQ,YAHZ,YAIW,GADC,EAHZ,YAI0B,GADd,EAEe,kBAFf,EAE+C,mBAF/C,C;KAKhB,C;6CAEA,mB;IACI,8BAAuB,O;IACvB,OAAQ,KAAI,UAAJ,EAAgB,OAAhB,C;EACZ,C;8CAEA,mB;IACI,+BAAwB,O;EAE5B,C;4CAEA,kB;IAEoB,IAAa,IAAb,EAMJ,MANI,EAGG,M;IAJnB,mBAAmC,QAAhB,cAAA,QAAS,KAAT,CAAgB,EAAyB,wBAAzB,C;IACnC,gBAAgB,cAAa,OAAb,YAAa,YAAW,IAAX,CAAb,+C;IAChB,SAAU,iB;IACV,SAAU,OAAM,GAAN,EAAU,GAAV,C;IAEN,kBADqB,MACrB,gB;MAA0B,SAAP,MAAO,e;SAC1B,kBAFqB,MAErB,gB;MAA0B,SAAP,MAAO,e;;MAClB,qE;IAHZ,yB;IAKA,SAAU,WAAU,YAAV,EAAwB,GAAxB,EAA6B,GAA7B,C;EACd,C;2CAEA,kB;IAEmB,IAAY,IAAZ,EAMH,MANG,EAGI,M;IAJnB,kBAAkC,QAAhB,cAAA,QAAS,KAAT,CAAgB,EAAyB,uBAAzB,C;IAClC,eAAe,cAAY,OAAZ,WAAY,YAAW,IAAX,CAAZ,+C;IACf,QAAS,iB;IACT,QAAS,OAAM,GAAN,EAAU,GAAV,C;IAEL,kBADqB,MACrB,gB;MAA0B,SAAP,MAAO,e;SAC1B,kBAFqB,MAErB,gB;MAA0B,SAAP,MAAO,e;;MAClB,qE;IAHZ,yB;IAKA,QAAS,WAAU,YAAV,EAAwB,GAAxB,EAA6B,GAA7B,C;EACb,C;EAO+B,2G;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,oC;EAAO,C;;;;;;;;kEAAP,Y;;;;;YAAE,gB;4BAAA,2B;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,oB;;;;;;;;;;;;;;EAAK,C;EAAP,wD;IAAA,yD;qBAAA,+F;UAAA,S;eAAA,Q;;eAAA,uB;IAAO,C;G;EADrB,gE;IAAA,mB;MACO,OAAZ,sBAAY,kBAAO,4CAAP,C;MACD,0BAAX,4BAAW,EAAQ,KAAR,C;MACf,W;IAAA,C;G;wCAPR,c;IACI,IAAI,UAAJ,C;MACI,gBAAS,I;;MAET,gBAAS,mC;;IAKF,eAAX,iBAAW,EAAQ,UAAR,C;EACf,C;2CAEA,kC;IACI,4BAAqB,iEAA2C,MAA3C,WAAqD,KAArD,sBAAyE,O;EAClG,C;iDAEA,Y;IACI,qB;EACJ,C;uCAEA,Y;IACI,qBAAc,KAAd,C;IACA,eAAS,U;EACb,C;wCAEA,Y;IACI,qBAAc,IAAd,C;IACA,eAAS,U;EACb,C;yCAEA,oB;IACgB,eAAZ,kBAAY,EAAQ,CAAC,QAAT,C;IACD,eAAX,iBAAW,EAAQ,QAAR,C;EACf,C;mCAEA,gC;IACI,0BAAoB,SAAJ,GAAe,GAAf,GAAwB,I;EAC5C,C;uCAEA,Y;IACI,eAAS,S;EACb,C;uCAEA,gB;IACyC,gBAAvB,wBAAkB,K;IpH3gB7B,sB;;MAqFS,Q;MAAA,2B;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;QAAM,IoHsb0B,OpHtbZ,OoHsbe,KAAH,OpHtb1B,C;UAAwB,qBAAO,O;UAAP,uB;;MAC9C,qBAAO,I;;;IoHqbH,cpH3gBJ,kB;IoH4gBI,IAAI,eAAJ,C;MACI,gBAAgB,iDAAkB,OAAlB,E;MAChB,SAAU,KAAK,qB;MACf,oBAAoB,SAAU,O;MAC9B,oBAAoB,SAAU,c;MAE9B,qBAAqB,aAAc,Q;MACnC,cAAe,KAAI,aAAc,QAAQ,gBAAe,GAAf,CAA1B,C;MACf,4B;MACA,iBAAW,WACP,cAAe,EADR,EACW,cAAe,EAD1B,EAC6B,cAAe,EAD5C,EAEP,aAAc,EAFP,EAEU,aAAc,EAFxB,EAE2B,aAAc,EAFzC,EAE4C,IAF5C,C;KAKnB,C;+BAEA,Y;EACA,C;;;;;;;;EAjnByC,wE;IAAA,qB;MAAE,2BAAU,SAAV,KAAA,2BAAU,SAAS,EAAnB,GAAwB,E;MAAG,W;IAAA,C;G;EAAvD,iE;IAAA,4B;MAAE,4BAAC,QAAD,C;MAAM,+BAAkB,8DAAlB,C;MAAiD,W;IAAA,C;G;EAC/B,0E;IAAA,qB;MAAE,2BAAU,SAAV,KAAA,2BAAU,SAAS,EAAnB,GAAwB,E;MAAG,W;IAAA,C;G;EAAvD,mE;IAAA,4B;MAAE,4BAAC,QAAD,C;MAAM,+BAAkB,gEAAlB,C;MAAiD,W;IAAA,C;G;EAET,0E;IAAA,qB;MAAE,+B;MAAc,W;IAAA,C;G;EAAhE,mE;IAAA,4B;MtGP6C,SGkH6C,WAAE,gBAAgB,OAAhB,EmG3G9E,anG2G8E,CAAF,EAAqC,kBAArC,CHlH7C,EAAS,eGkHuB,QHlHvB,CAAT,C;MsGOf,+BAAkB,gEAAlB,C;MAAoC,W;IAAA,C;G;EACjB,0E;IAAA,qB;MAAE,gC;MAAe,W;IAAA,C;G;EAAlE,mE;IAAA,4B;MtGR6C,SGkH6C,WAAE,gBAAgB,OAAhB,EmG1G9E,cnG0G8E,CAAF,EAAqC,kBAArC,CHlH7C,EAAS,eGkHuB,QHlHvB,CAAT,C;MsGQd,+BAAkB,gEAAlB,C;MAAqC,W;IAAA,C;G;EACpB,0E;IAAA,qB;MAAE,Q;MAAA,yD;MAAiB,W;IAAA,C;G;EAAnE,mE;IAAA,4B;MtGT6C,SGkH6C,WAAE,gBAAgB,OAAhB,EmGzG9E,anGyG8E,CAAF,EAAqC,kBAArC,CHlH7C,EAAS,eGkHuB,QHlHvB,CAAT,C;MsGSf,+BAAkB,gEAAlB,C;MAAuC,W;IAAA,C;G;EACrB,0E;IAAA,qB;MAAE,+B;MAAc,W;IAAA,C;G;EAAhE,mE;IAAA,4B;MtGV6C,SGkH6C,WAAE,gBAAgB,OAAhB,EmGxG9E,anGwG8E,CAAF,EAAqC,kBAArC,CHlH7C,EAAS,eGkHuB,QHlHvB,CAAT,C;MsGUf,+BAAkB,gEAAlB,C;MAAoC,W;IAAA,C;G;EAGnD,0E;IAAA,qB;MACd,kBAAkB,MAAO,QAAO,UAAP,C;MACrB,8B;MAAA,S;QAAmC,OAAZ,W/GsJQ,UAAS,C;O+GtJ5C,S;QACI,8BAAY,W9FgFgC,c8FhF5C,C;OAER,W;IAAA,C;G;EAPG,mE;IAAA,4B;MtGX6C,SGkH6C,WAAE,gBAAgB,OAAhB,EmGtGnF,oBnGsGmF,CAAF,EAAqC,kBAArC,CHlH7C,EAAS,eGkHuB,QHlHvB,CAAT,C;MsGahD,+BAAkB,gEAAlB,C;MAMJ,W;IAAA,C;G;EACmC,6D;IAAE,W;EAAA,C;EAjBhB,0D;IAAA,4B;MACrB,YAAO,uD;MtGJ6C,SG2TsM,gBAAO,mBAAgB,aAAhB,EAArL,IAAoN,sBAApN,IAAoN,QAA/B,EAAyD,YAAzD,EAA9I,IAAqN,sBAArN,IAAqN,QAAvE,EAAgG,MAAhG,EAAvH,IAAuH,EAA6G,MAA7G,EAA5F,IAAiN,sBAAjN,IAAiN,QAArH,EAAwI,OAAxI,EAAlE,IAAkE,EAAP,EAAkK,kBAAlK,CH3TtM,EAAS,eG2T+W,KH3T/W,CAAT,C;MsGKpD,cAAO,yD;MtGL6C,SG2TsM,gBAAO,mBAAgB,aAAhB,EAArL,IAAoN,sBAApN,IAAoN,QAA/B,EAAyD,YAAzD,EAA9I,IAAqN,sBAArN,IAAqN,QAAvE,EAAgG,MAAhG,EAAvH,IAAuH,EAA6G,MAA7G,EAA5F,IAAiN,sBAAjN,IAAiN,QAArH,EAAwI,OAAxI,EAAlE,IAAkE,EAAP,EAAkK,kBAAlK,CH3TtM,EAAS,eG2T+W,OH3T/W,CAAT,C;MsGOpD,cAAO,yD;MtGP6C,SG2TsM,gBAAO,mBAAgB,aAAhB,EAArL,IAAoN,sBAApN,IAAoN,QAA/B,EAAyD,YAAzD,EAA9I,IAAqN,sBAArN,IAAqN,QAAvE,EAAgG,MAAhG,EAAvH,IAAuH,EAA6G,MAA7G,EAA5F,IAAiN,sBAAjN,IAAiN,QAArH,EAAwI,OAAxI,EAAlE,IAAkE,EAAP,EAAkK,kBAAlK,CH3TtM,EAAS,eG2T+W,OH3T/W,CAAT,C;MsGQpD,cAAO,yD;MtGR6C,SG2TsM,gBAAO,mBAAgB,aAAhB,EAArL,IAAoN,sBAApN,IAAoN,QAA/B,EAAyD,YAAzD,EAA9I,IAAqN,sBAArN,IAAqN,QAAvE,EAAgG,MAAhG,EAAvH,IAAuH,EAA6G,MAA7G,EAA5F,IAAiN,sBAAjN,IAAiN,QAArH,EAAwI,OAAxI,EAAlE,IAAkE,EAAP,EAAkK,kBAAlK,CH3TtM,EAAS,eG2T+W,OH3T/W,CAAT,C;MsGSpD,cAAO,yD;MtGT6C,SG2TsM,gBAAO,mBAAgB,aAAhB,EAArL,IAAoN,sBAApN,IAAoN,QAA/B,EAAyD,YAAzD,EAA9I,IAAqN,sBAArN,IAAqN,QAAvE,EAAgG,MAAhG,EAAvH,IAAuH,EAA6G,MAA7G,EAA5F,IAAiN,sBAAjN,IAAiN,QAArH,EAAwI,OAAxI,EAAlE,IAAkE,EAAP,EAAkK,kBAAlK,CH3TtM,EAAS,eG2T+W,OH3T/W,CAAT,C;MsGUpD,cAAO,yD;MtGV6C,SG2TsM,gBAAO,mBAAgB,aAAhB,EAArL,IAAoN,sBAApN,IAAoN,QAA/B,EAAyD,YAAzD,EAA9I,IAAqN,sBAArN,IAAqN,QAAvE,EAAgG,MAAhG,EAAvH,IAAuH,EAA6G,MAA7G,EAA5F,IAAiN,sBAAjN,IAAiN,QAArH,EAAwI,OAAxI,EAAlE,IAAkE,EAAP,EAAkK,kBAAlK,CH3TtM,EAAS,eG2T+W,OH3T/W,CAAT,C;MsGWpD,cAAO,yD;MtGX6C,SG2TsM,gBAAO,mBAAgB,aAAhB,EAArL,IAAoN,sBAApN,IAAoN,QAA/B,EAAyD,YAAzD,EAA9I,IAAqN,sBAArN,IAAqN,QAAvE,EAAgG,MAAhG,EAAvH,IAAuH,EAA6G,MAA7G,EAA5F,IAAiN,sBAAjN,IAAiN,QAArH,EAAwI,OAAxI,EAAlE,IAAkE,EAAP,EAAkK,kBAAlK,CH3TtM,EAAS,eG2T+W,OH3T/W,CAAT,C;MAAA,SGyboE,gBAAO,gBAAgB,OAAhB,EmGraxH,0BnGqawH,CAAP,EAA0C,kBAA1C,CHzbpE,EAAS,esGoB1B,wCtGpB0B,CAAT,C;MsGqBxD,W;IAAA,C;G;EACuC,4D;IAAA,4B;MACnC,kBAAQ,eAAgB,QAAM,WAAtB,GAAmC,I;MAC3C,mBAAS,eAAgB,SAAO,WAAvB,GAAoC,I;MACjD,W;IAAA,C;G;EACuB,sD;IAAE,W;EAAA,C;EACgB,4D;IAAA,4B;MACrC,kBAAQ,eAAgB,QAAM,WAAtB,GAAmC,I;MAC3C,mBAAS,eAAgB,SAAO,WAAvB,GAAoC,I;MACjD,W;IAAA,C;G;EAC2C,4D;IAAA,4B;MACvC,kBAAQ,eAAgB,QAAM,WAAtB,GAAmC,I;MAC3C,mBAAS,eAAgB,SAAO,WAAvB,GAAoC,I;MACjD,W;IAAA,C;G;EAC0C,4D;IAAA,4B;MACtC,kBAAQ,eAAgB,QAAM,WAAtB,GAAmC,I;MAC3C,mBAAS,eAAgB,SAAO,WAAvB,GAAoC,I;MACjD,W;IAAA,C;G;EACsB,sD;IAAE,W;EAAA,C;EACA,sD;IAAE,W;EAAA,C;EACD,sD;IAAE,W;EAAA,C;EACL,sD;IAAE,W;EAAA,C;EA1CgC,mD;IAAA,4B;MACxD,wBAAW,IAAX,C;MAEA,cAAI,mB;MAAJ,YAAyB,gD;MtGH+B,SqGzBuC,aAAI,gBAAgB,OAAhB,EAAyB,OAAzB,CAAJ,EAAuC,kBAAvC,CrGyBvC,EAAS,eqGzBqF,KrGyBrF,CAAT,C;MsGsBxD,gBAAiB,oB;MAAjB,cAAuC,kD;MtGtBiB,SGmEuD,gBAAO,gBAAgB,OAAhB,EAAyB,SAAzB,CAAP,EAA0C,kBAA1C,CHnEvD,EAAS,eGmEwG,OHnExG,CAAT,C;MAAA,SqGzBuC,aAAI,gBAAgB,OAAhB,ECmD/F,iBDnD+F,CAAJ,EAAuC,kBAAvC,CrGyBvC,EAAS,esG0B1C,iCtG1B0C,CAAT,C;MsG2BxD,gBAAiB,sB;MAAjB,cAAyC,kD;MtG3Be,SGmEuD,gBAAO,gBAAgB,OAAhB,EAAyB,SAAzB,CAAP,EAA0C,kBAA1C,CHnEvD,EAAS,eGmEwG,OHnExG,CAAT,C;MsG+BxD,gBAAiB,wB;MAAjB,cAA2C,kD;MtG/Ba,SGmEuD,gBAAO,gBAAgB,OAAhB,EAAyB,SAAzB,CAAP,EAA0C,kBAA1C,CHnEvD,EAAS,eGmEwG,OHnExG,CAAT,C;MsGmCxD,gBAAiB,uB;MAAjB,cAA0C,kD;MtGnCc,SGmEuD,gBAAO,gBAAgB,OAAhB,EAAyB,SAAzB,CAAP,EAA0C,kBAA1C,CHnEvD,EAAS,eGmEwG,OHnExG,CAAT,C;MAAA,SqGzBuC,aAAI,gBAAgB,OAAhB,ECgE/F,gBDhE+F,CAAJ,EAAuC,kBAAvC,CrGyBvC,EAAS,esGuC3C,iCtGvC2C,CAAT,C;MAAA,SqGzBuC,aAAI,gBAAgB,OAAhB,ECiE/F,kBDjE+F,CAAJ,EAAuC,kBAAvC,CrGyBvC,EAAS,esGwCzC,iCtGxCyC,CAAT,C;MAAA,SqGzBuC,aAAI,gBAAgB,OAAhB,ECkE/F,mBDlE+F,CAAJ,EAAuC,kBAAvC,CrGyBvC,EAAS,esGyCxC,iCtGzCwC,CAAT,C;MAAA,SqGzBuC,aAAI,gBAAgB,OAAhB,ECmE/F,gBDnE+F,CAAJ,EAAuC,kBAAvC,CrGyBvC,EAAS,esG0C3C,iCtG1C2C,CAAT,C;MsG2C5D,W;IAAA,C;G;EA0CuC,iD;IAAA,wB;MAAyB,gB;MAAA,uE;MAAd,uC;MAAsC,W;IAAA,C;G;;;;;;EAuiB3D,+B;IAAQ,OAAA,aAAI,QAAQ,KAAI,aAAJ,CAAS,cAAa,CAAb,CAAgB,KAAI,aAAJ,C;G;EAE9E,oC;IACI,aAAI,SAAQ,MAAR,C;IACJ,aAAI,SAAQ,MAAR,C;IAGJ,IAAI,aAAI,EAAJ,GAAQ,aAAI,EAAhB,C;MACI,WAAW,aAAI,E;MAAG,kBAAQ,aAAI,E;MAAG,kBAAQ,I;KAE7C,IAAI,aAAI,EAAJ,GAAQ,aAAI,EAAhB,C;MACI,aAAW,aAAI,E;MAAG,kBAAQ,aAAI,E;MAAG,kBAAQ,M;KAE7C,IAAI,aAAI,EAAJ,GAAQ,aAAI,EAAhB,C;MACI,aAAW,aAAI,E;MAAG,kBAAQ,aAAI,E;MAAG,kBAAQ,M;KAG7C,OAAO,S;EACX,C;EAEe,0D;IACX,gB;IACA,kB;IACA,gB;IACA,gB;IACA,gC;IAaA,8BAA0B,KAAK,mCAAL,C;IAU1B,yBAAuB,KAAK,8BAAL,C;IAMvB,mCAAuC,KAAK,wCAAL,C;IASvC,yCAAgD,KAAK,8CAAL,C;IA0BhD,gCAA+B,KAAK,qCAAL,C;IAc/B,mBAAyB,I;G;;SA3ErB,Y;MAEiB,Q;MADb,QxHzqB0C,oB;MwH0qB7B,4B;MAAb,OAAa,cAAb,C;QAAa,sB;QACT,CAAE,WAAI,SAAK,SAAL,CAAc,IAAK,EAAnB,CAAJ,C;QACF,CAAE,WAAI,SAAK,SAAL,CAAc,IAAK,EAAnB,CAAJ,C;QACF,CAAE,WAAI,SAAK,SAAL,CAAc,IAAK,EAAnB,CAAJ,C;;MAEN,OAAO,C;IACX,C;;;SAEJ,Y;a/EnsBwF,iC;K;;;S+E2sBxE,Y;MAAQ,OAAA,iBAAa,Q;K;;;SAErC,Y;a/E7sBwF,4B;K;;gD+E+sBxF,iB;IACI,cAAQ,iBAAO,KAAP,E;IAAe,OAAO,K;EAClC,C;;SAEA,Y;a/EntBwF,sC;K;;;S+E4tBxF,Y;a/E5tBwF,4C;K;;6C+EguBxF,iB;IACI,SAAS,KAAM,Q;IACf,KAAK,6BAAgB,EAAhB,C;IACL,EAAG,KAAI,wBAAkB,IAAtB,C;IACH,EAAG,QAAO,8BAAP,C;IACH,OAAO,E;EACX,C;+BAEA,Y;IACI,iBAAa,MAAb,KAAuB,G;IACvB,iBAAa,MAAb,KAAuB,G;EAC3B,C;iCAEA,Y;IACI,iBAAa,MAAb,KAAuB,G;IACvB,iBAAa,MAAb,KAAuB,G;EAC3B,C;;SAEW,Y;MAAQ,OAAA,gBAAY,Y;K;;;SAEd,Y;MAAQ,OAAA,UAAM,KAAN,GAAa,C;K;;;SAEtC,Y;a/EtvBwF,mC;K;;;S+EkwBtE,Y;MAAQ,OAAA,mBAAe,Q;K;;EA/DV,uD;IAAA,mB;MAEZ,Q;MADf,kBAAkB,U;MACH,yC;MAAf,OAAe,cAAf,C;QAAe,wB;QACX,WAAY,eAAc,MAAd,C;;MAFhB,OAIA,WAAY,WAAU,mBAAK,mBAAf,C;IAChB,C;G;EAI4B,kD;IAAA,mB;MAAE,mBAAQ,4BAAR,EAAuB,YAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,CAAvB,C;IAAyC,C;G;EAM3B,4D;IAAA,mB;MAGzB,Q;MAFf,eAAe,mBAAK,mB;MACpB,kBAAkB,U;MACH,yC;MAAf,OAAe,cAAf,C;QAAe,wB;QACX,WAAY,eAAc,uCAAgB,MAAhB,CAAwB,KAAI,QAAJ,CAAtC,C;;MAHhB,OAKA,W;IACJ,C;G;EAEqD,kE;IAAA,mB;MACjD,OAAA,kCAAkB,IAAI,QAAQ,KAAI,kCAAkB,IAAtB,C;IAClC,C;G;EAwBoC,yD;IAAA,mB;MAGnB,UAE2B,M;MAJxC,oBAAoB,a;MACpB,gBAAgB,G;MACH,sC;MAAb,OAAa,cAAb,C;QAAa,sB;QACT,eAAe,aAAS,mBAAK,SAAL,CAAc,IAAK,EAAnB,CAAT,EAAgC,mBAAK,SAAL,CAAc,IAAK,EAAnB,CAAhC,EAAuD,mBAAK,SAAL,CAAc,IAAK,EAAnB,CAAvD,C;QACf,eAAe,QAAqB,SAAZ,QAAY,UAArB,oC;QACf,aAAc,iBAAgB,cAAA,IAAK,OAAL,CAAhB,EAA+B,QAA/B,C;QACd,aAAa,Q;;MANjB,OAQA,aAAc,cAAuB,SAAvB,C;IAClB,C;G;;;;;;EC7xBU,8B;IAAC,4B;G;EAoBe,wE;IAAA,mB;MAAW,Q;MAAT,CAAS,OAAT,QAAS,KAAT,6BAA2B,oBAA3B,Q;MAAyC,W;IAAA,C;G;EAb7B,2E;IAAA,qB;MAC5B,OAAQ,KAAI,YAAS,YAAb,EAAoB,KAApB,C;MAEyC,gBAA9B,QAAS,eAAc,KAAd,C;MACf,Q;MAAT,CAAS,OAAT,QAAS,KAAT,6BjHwEV,SiHxEU,Q;MADJ,mBjH0EL,S;M2G/FP,UAAa,E;MM0B4C,iC;MAAA,yC;MNzBlD,GM0BS,QAAY,c;MN1BrB,GM2BS,SAAQ,I;MN3BjB,GM4BS,UAAS,G;MN5BlB,GM6BS,gBAAoB,oB;MN7B7B,GM8BS,WAAU,sD;MALd,YNzBL,G;MMgCK,OAAO,cAAsC,mCAAtC,EAA0C,KAA1C,CAAP,EAAyD,YAAzD,C;MACJ,W;IAAA,C;G;EAnBsC,6D;IAAA,4B;MAGrC,Q;MAFD,sBAAW,YAAX,C;MAEA,CAAC,gEAAD,YAAgC,qE;MAiBpC,W;IAAA,C;G;mCAtBJ,0B;IAEW,IAAW,I;IAAlB,OAAO,cAAW,qBAAX,eAAW,EAAc,QAAd,EAAwB,mCAAxB,CAAX,wC;EAqBX,C;;;;;;ElH1BJ,wD;IAAsG,4C;G;EAAtG,+CACI,gB;IAAwC,+BAAW,CAAX,EAAc,CAAd,C;G;EAD5C,oF;EDiFA,yBAOe,yB;IArEf,mE;WAqEe,4B;MAAA,uB;QAAU,eAAsB,gB;QAAtB,OA5Dd,cAAc,SA4DgB,CA5DhB,CAAd,EAA2B,SA4DM,CA5DN,CAA3B,C;O;K;GA4DI,C;EgB/Ef,0B;IAEI,qBAA0B,kBAAkB,cAAA,QAAS,SAAT,CAAlB,C;IAC1B,iBAAsB,e;IACtB,iBAAsB,wBAAsB,cAAQ,aAA9B,C;IACtB,qBAA0B,qB;IAC1B,eAAoB,oB;IAEhB,IAEA,IAFA,EAGA,M;IAJJ,kBAAiB,eACb,YADa,EAEb,cAAQ,gBAFK,EAGb,mCAAA,QAAS,gBAAe,WAAf,CAAT,sCAHa,EAIb,qCAAA,QAAS,gBAAe,eAAf,CAAT,wCAJa,C;IAMjB,YAAiB,Y;IACjB,sBAAyC,iBAAgB,MAAO,SAAS,SAAnB,eAAb,C;IACzC,sBAA2B,cAAQ,W;IAE/B,sBAAS,QAAQ,WAAI,wBAAoB,mBAAa,cAAjC,CAAJ,C;IAErB,aAAmB,gCAAS,S;IAC5B,eAAoB,UAChB,YADgB,EACT,UADS,EACF,cADE,EACO,kBADP,EACoB,mBAAa,WADjC,EAC6C,aAD7C,EACwD,SADxD,EAEhB,6BAFgB,EAEW,mBAFX,EAEyB,mBAAa,cAFtC,EAGE,IAHF,C;IA0FpB,oBAAyB,iBAAe,sBAAY,KAA3B,C;IACzB,oBAAyB,iBAAe,sBAAY,KAA3B,C;IACzB,qBAA0B,iBAAe,sBAAY,KAA3B,C;G;2CAtF1B,Y;IACyB,Q;IAArB,OAAA,wBAAW,WAAU,qCAAY,OAAZ,oBAAwB,wBAAW,aAA7C,C;G;uCAEf,Y;IACqE,gBAA1D,kBAAO,cAAQ,OAAf,EAAuB,YAAM,QAA7B,EAAsC,IAAtC,C;Id8BX,Sc7BQ,iBAAQ,YAAR,C;IADJ,Od+BG,S;G;Ec1Be,sH;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,sD;EAAc,C;;;;;;;;oEAAd,Y;;;;;YAAQ,gB;4BAAN,sCAAM,U;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAN,OAAM,a;;;;;;;;;;;;;;EAAM,C;EAAd,mE;IAAA,yD;qBAAA,0G;UAAA,S;eAAA,Q;;eAAA,uB;IAAc,C;G;EAGT,mE;IAAA,mB;MACnB,iBAAM,6BAAN,EAAe,2BAAM,QAArB,C;IACJ,C;G;EAMuB,wH;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,4C;EAAiB,C;;;;;;;;2EAAjB,Y;;;;;YAAE,OAAA,yBAAO,QAAP,M;;;;;;;;;;;;;;;;EAAe,C;EAAjB,qE;IAAA,yD;qBAAA,4G;UAAA,S;eAAA,Q;;eAAA,uB;IAAiB,C;G;EAJjB,mE;IAAA,mB;MACnB,eAAe,eAAW,8BAAX,C;MACf,mBAAmB,qBAAiB,8BAAjB,C;MACnB,aAAa,WAAO,6BAAP,EAAgB,2BAAhB,EAAuB,QAAvB,EAAiC,YAAjC,EAA+C,2BAAM,QAArD,C;MACD,OAAZ,iCAAY,kBAAO,iDAAP,C;MAHZ,OAKA,Q;IACJ,C;G;EAEyB,mE;IAAA,mB;MACrB,mBAAQ,6BAAR,EAAiB,2BAAM,QAAvB,C;IACJ,C;G;EAyBsB,yH;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,0C;EAAiC,C;;;;;;;;6EAAjC,Y;;;;;YAAE,gB;4BAAA,YAAY,IAAZ,O;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAyB,gB;4BAAN,wBAAM,U;gBAAA,qC;qBAAA,mB;YAAA,Q;;YAAzB,OAAyB,a;;;;;;;;;;;;;;EAAM,C;EAAjC,sE;IAAA,yD;qBAAA,6G;UAAA,S;eAAA,Q;;eAAA,uB;IAAiC,C;G;EAmBzC,wE;IAAA,wC;IAAA,yB;EAEd,C;;;;;;;;sEAFc,Y;;;;;YACV,gB;4BAAA,oB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,oB;;;;;;;;;;;;;;EACJ,C;EAFc,yE;mBAAA,kE;QAAA,S;aAAA,Q;;aAAA,uB;EAEd,C;EAjEwB,sF;IAAA,wC;IAAA,yB;IAAA,sD;IAAA,4B;IAAA,6B;EAkE5B,C;;;;;;;;6DAlE4B,Y;;;;;YACb,OAAX,2CAAW,kBAAO,kEAAP,C;kCAEI,aAAS,cAAA,QAAS,gBAAe,UAAf,CAAT,CAAT,C;mCACf,mBAAS,aAAI,QAAJ,EAAc,oEAAd,C;YAEA,gB;4BAAA,kB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YdmCP,oBcnCuB,Q;YAEzB,mBAAS,aAAI,QAAJ,EAAc,oEAAd,C;YAST,mBAAS,aAAI,UAAJ,EAAgB,oEAAhB,C;YAIsB,gBAAZ,4C;YAAY,UAAU,c;YrB2OgC,Q;YqB3OzE,mBZG2C,STwO8B,4BAAI,GAAJ,USxO9B,GTwO8B,ISxO9B,GYHgB,KZGhB,C;YYFZ,kBAAZ,4C;YAAY,YAAU,c;YrB0OgC,U;YqB1OzE,mBZE2C,STwO8B,gCAAI,KAAJ,USxO9B,GTwO8B,MSxO9B,GYFgB,GZEhB,C;YYD3C,oBAAoB,wBAAoB,YAApB,EAAkC,YAAlC,C;YACpB,sBAAkB,CAAlB,C;YlBmiDS,oB;YADb,YAAY,C;YACC,SA9rBN,WkBn2BH,sCAAM,YlBm2BH,iCEh1BI,qDgBnBoB,qB;qBAAe,c;ahBmBnC,EFg1BJ,EA8rBM,W;YAAb,OAAa,gBAAb,C;cAAa,wB;ckBjiDsD,wD;clBiiDhD,cAAO,oBAAmB,gBAAnB,EAAmB,wBAAnB,Y;ckBjhDiB,U;cAbnC,eAAe,8BAAW,oBlB8hDqB,IkB9hDrB,C;cAC1B,qBAAmC,oCAAc,QAAd,C;cACnC,qBAAgC,yBAAU,QAAV,EAAoB,cAApB,C;cAEhC,gCAAe,cAAe,OAA9B,I;cACA,QAAgD,gBAAxB,sBAAwB,CAAhD,aAAwE,aAAY,W;cAGpB,kBAA3C,cAAA,QAAS,gCAAT,C;cR4hStB,kBAAM,iBAAa,kBAAb,C;cA6UA,U;cAAb,yD;gBAAa,aAAb,mB;gBACI,WAAY,WQz2SJ,aRy2SkB,MQz2SJ,EAAd,ERy2SkB,MQz2SY,EAA9B,ERy2SkB,MQz2S4B,EAA9C,CRy2SI,C;;cQ12SR,qBR22SD,W;cQx2SC,2BAAM,mClBmhDyC,IkBnhDzC,EAAmC,cAAnC,C;cAEN,YAAY,UAAM,YAAS,OAAf,EAAuB,6BAAvB,EAAgC,6BAAQ,WAAxC,EAAoD,CAAS,SAAT,QAAS,UAAT,qBAAsB,uCAA1E,C;cACZ,2BAAM,mCAA0B,YAAQ,KAAM,GAAd,CAA1B,ElBghDyC,IkBhhDzC,C;cACK,OAAX,gCAAW,kBAAO,kDAAP,C;;;YlBqgDH,U;YAAA,SkBlgDZ,sCAAM,YlBkgDM,W;YAAhB,OAAgB,gBAAhB,C;cAAgB,2B;ckBlgDc,0D;cACtB,gCAAW,uBlBigDU,OkBjgDV,EAA0B,mCAA1B,C;;;YAGf,eAAe,4CAAY,WAAI,MAAJ,C;YAC3B,qB;cAAc,0D;cACO,kBAAN,2B;clBuDZ,sB;;gBAqFS,U;gBAAA,+B;gBAAhB,OAAgB,gBAAhB,C;kBAAgB,6B;kBAAM,IkB5IU,OlB4II,SkB5ID,KAAH,WlB4IV,C;oBAAwB,qBAAO,S;oBAAP,uB;;gBAC9C,qBAAO,I;;;ckB7IC,WlBuDR,kB;ckBtDQ,iB;gBACI,6BAAM,2B;gBACN,wD;;YAvDR,OA8DA,cAAc,oCAAd,CA9DA,M;;;;;;;;;;;;;;EAiEJ,C;EAlE4B,4D;IAAA,4C;qBAAA,gF;UAAA,S;eAAA,Q;;eAAA,uB;IAkE5B,C;G;mCAlEA,Y;IAAc,cAAc,iCAAd,C;G;EAoEd,qC;IAAA,yC;IACI,sBAAoB,C;G;;SAApB,Y;MAAA,0B;K;;oDAEA,a;IAAkC,OAAA,6BAAM,M;G;oDACxC,oB;EAAwC,C;oDACxC,kB;EAAwC,C;;;;;;;EAL5C,iD;IAAA,gD;MAAA,+B;KAAA,yC;G;;;;;;EAaJ,mB;G;0BACI,Y;IAA2B,OAAA,IAAK,MAAL,GAAa,M;G;;;;;;EoGrIxC,iC;IAAQ,qCAAa,UAAb,GAA4B,UAA5B,C;G;EACR,wC;IACI,IAAI,KAAJ,C;MACI,uBAAa,UAAb,EAAyB,UAAzB,C;;MAEA,0BAAgB,UAAhB,C;;EAER,C;EAEJ,oC;IACsB,Q;IAAA,uB;IAAlB,aAAU,CAAV,gB;MACI,OAAO,6BAAK,CAAL,EAAP,C;;EAER,C;EAEA,4B;IACI,OAAO,mBAAS,CAAhB,C;MACI,iBAAO,6BAAK,CAAL,EAAP,C;;EAER,C;EAEA,uC;IACkE,Q;IAAD,qBAAC,QAAA,iCAAuB,SAAvB,CL8/II,CK9/I8B,CL8/I9B,CK9/IJ,iEAAD,C;G;EAEjE,8B;IAAoC,Q;IAAA,0CAAA,SAAK,YAAW,IAAX,CAAL,gD;G;ECpBzB,sC;IAAC,wB;IAA8B,kC;G;EAUR,iC;IAAC,W;EAAA,C;2BAR/B,Y;IACI,sBAAsB,cAAQ,O;IACgD,gBAA1D,kBAAO,eAAP,EAAwB,mBAAxB,EAAsC,IAAtC,C;InHqExB,SmHpEQ,iBAAQ,YAAR,C;IADJ,anHsEG,S;ImHlEH,IAAI,MAAS,CAAb,C;MAEI,kBAAc,MAAd,EAAsB,mBAAtB,C;KAGiC,sC;IRnBzC,UAAa,E;IACN,GQmBC,gB;IADJ,OAAO,oBRlBJ,GQkBI,C;EAGX,C;4BAEA,Y;EACA,C;;;;;;EpGwC4G,uC;IAAA,qB;MAAE,sBAAI,kBAAgB,OAAhB,EAAyB,eAAzB,CAAJ,EAAuC,EAAvC,C;K;G;EqG1DnG,0B;oBAA8D,K;IACzE,mBAA8B,W;G;0CAE9B,Y;IACc,Q;IAAV,CAAU,OAAV,gBAAU,QAAV,6BAA+B,UAAM,aAArC,Q;IACA,UAAM,WAAW,S;EACrB,C;6CAEA,Y;IACc,Q;IAAV,CAAU,OAAV,gBAAU,QAAV,6BAA+B,UAAM,aAArC,Q;EACJ,C;sCAEA,qB;IrGf2B,kBAArB,qBA6DsG,aAArE,IAAqE,CA7DtG,C;If2EN,WoH3DU,OAAM,gB;IrGhBhB,wBf4EO,We1EL,SAFF,C;EqGiBA,C;EAEW,mD;IACP,gC;IACA,4B;G;;;;;;EAGJ,2B;G;;;;;;;;;;;ECXJ,4B;IAAuC,2BAAkB,W;G;EAE1C,yE;IAEkB,WAAjB,MAAO,UAAU,a;IAA0B,YAA+B,QAA7E,MAAO,IAAP,SAAoB,IAApB,OAA+B,IAA/B,CAA6E,UAC9E,MAAO,GAAP,SAAmB,GAAnB,OAA6B,IAA7B,CAD8E,C;ICudtF,QAAQ,E;IACR,EAAE,OAAF,IAAa,K;IACb,EAAE,OAAF,IAH8E,K;IDvdtE,kBACkC,kBC0dnC,CD1dmC,C;IAIlC,qD;IAEc,IAAS,M;IADvB,eACc,cAAS,SAAT,QAAS,eAAc,OAAd,CAAT,yC;IAGV,wBAAmB,I;IAEnB,eAAW,MAAK,4GAAL,CAoBT,OAAM,iFAAN,C;IAIN,yBAA+C,uD;G;;SA/B/C,Y;;;MAAA,gC;K;SAAA,sB;MAAA,sC;K;;;SA+BA,Y;MAAA,6B;K;SAAA,mB;MAAA,gC;K;;6DAEA,Y;EACA,C;EAEA,kD;IAAA,wC;IAAA,yB;IAAA,kB;EAKA,C;;;;;;;;yCALA,Y;;;;;YACI,mBAAQ,sBAAkB,kBAAlB,CAAR,C;YAEA,gB;4BAAA,gB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YACA,gB;4BAAA,wB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;;;;;;;;;;;;;EACJ,C;+DALA,qC;mBAAA,2C;QAAA,S;aAAA,Q;;aAAA,uB;EAKA,C;EAzBmB,mK;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,0B;EAAY,C;;;;;;;;+HAAZ,Y;;;;;YAAE,gB;4BAAA,8B;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,oB;;;;;;;;;;;;;;EAAU,C;EAAZ,gH;IAAA,yD;qBAAA,uJ;UAAA,S;eAAA,Q;;eAAA,uB;IAAY,C;G;EAFH,8H;IAAA,qB;MAChB,QAAQ,WAAR,C;MAAA,OACA,8CAAO,oGAAP,C;IACJ,C;G;EAEkB,sG;IACd,QAAQ,SAAR,C;IACJ,W;EAAA,C;EAEuB,sG;IACnB,QAAQ,cAAR,C;IACJ,W;EAAA,C;EAlBY,uH;IAAA,yB;MACZ,mBAAa,MAAO,iBAAP,CAAwB,CAAxB,C;MAEb,0BAAoB,M;MACpB,yBAAmB,I;MACnB,aAAQ,O;MAER,0BAAoB,oH;MAKpB,wBAAkB,wF;MAIlB,6BAAuB,wF;MAI3B,W;IAAA,C;G;EAAQ,8F;IAAO,QAAQ,YAAU,CAAlB,C;IAAuB,W;EAAA,C;EAIK,qE;IAAC,W;EAAA,C;;;;;yCAtCxD,Y;IACI,yD;EAiDJ,C;;SAnDmC,Y;MAAA,gD;K;;;;;;;EElBlB,yB;IAA2C,mBAA+B,CAA/B,EAAkC,CAAlC,C;G;;;;;;ECOhE,oB;IAAA,wB;IACI,e9HgFoD,gB;I8H/EpD,yBAAmC,KAAK,uBAAL,C;G;;SAAnC,Y;avFgCwF,4B;K;;EuF9BxF,kC;IAAsB,sB;IAClB,2BAAmC,KAAK,uCAAL,C;G;;SAAnC,Y;avF6BoF,8B;K;;mDuFvBpF,Y;IACiB,IAAS,IAAT,EACG,M;IADhB,aAAa,cAAS,OAAT,QAAS,eAAc,QAAd,CAAT,wC;IACb,SAAS,CAAO,SAAP,MAAO,YAAW,QAAX,CAAP,gF;IACT,IAAI,UAAJ,C;MACI,MAAO,OACH,oDACQ,IADR,GAEQ,iGAHL,C;MAKP,MAAM,eAAU,uBAAV,C;KAEV,OAAO,2BAAc,UAAM,EAAN,CAAd,EAAyB,QAAzB,C;EACX,C;EAlBwC,mD;IACvB,IAAS,I;IAAtB,aAAa,cAAS,OAAT,QAAS,eAAc,QAAd,CAAT,wC;IACb,SAAS,MAAO,YAAW,OAAX,C;IADhB,OAEA,U;EACJ,C;;;;;;EAiBe,kD;IAAkC,uBAAY,GAAZ,EAAiB,WAAjB,C;G;0DACjD,c;IAAgD,W;G;;;;;;EAzBZ,mC;IAAE,mC;EAAgB,C;;;;;;;EAF9D,gC;IAAA,+B;MAAA,c;KAAA,wB;G;E9GsEwC,kD;IAAA,4B;MAAE,wB;MAAQ,W;K;G;EEgCkE,oC;IAAC,W;G;E6GhG3F,qC;IACtB,wBAAa,aAAa,KAAb,EAAoB,MAApB,CAAb,C;IADyC,4B;IAAyB,8B;G;;SAAzB,Y;MAAA,2B;K;;;SAAyB,Y;MAAA,4B;K;;;;;;;EAK3C,4D;IAAA,4B;MACnB,kBAAgB,aAAH,kB;MACb,mBAAiB,cAAH,kB;MAClB,W;IAAA,C;G;EAJJ,qC;IACoB,gBAAP,WAAT,QAAS,C;I7G2FiI,Q;I6G3F1I,O7G2F0I,cAAgD,OFhCpL,oBEgCoI,gBAAO,gBAAgB,OAAhB,EAA/E,IAA+E,CAAP,EAA0C,SAA1C,CFhCpI,EEgCqM,SFhCrM,EAA8B,0B+G3Db,kC/G2Da,CAA9B,CEgCoI,0C;G;E6GtFvH,8B;IAAC,4B;IACpB,uBAAqB,mBAAO,M;IAC5B,wBAAsB,mBAAO,O;IAE7B,mBAA0B,UAAP,mBAAO,C;G;;SAH1B,Y;MAAA,2B;K;;;SACA,Y;MAAA,4B;K;;6CAIA,iB;IAAwC,Q;IAAkB,CAAlB,wDAAkB,eAAK,gBAAL,EAAU,CAAV,EAAa,CAAb,C;G;6CAE1D,mE;IAIK,Q;IAAkB,CAAlB,wDAAkB,eAAK,gBAAL,EAAU,EAAV,EAAc,EAAd,EAAkB,MAAlB,EAA0B,OAA1B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,MAA3C,EAAmD,OAAnD,C;G;4CAEvB,iB;IAKmB,Q;IAJf,gCAAiB,KAAjB,C;IAEA,gBAAI,iB;IACJ,4CAA+B,a;IAC/B,gBAAI,WAAkC,CAAvB,6DAAuB,gBAAlC,EAA0C,GAA1C,EAA+C,GAA/C,C;IACJ,gBAAI,iB;EACR,C;2CAEA,4B;IACI,Q;IAAA,6D;IACA,gCAAiB,KAAjB,C;IAEA,gBAAI,iB;IACJ,4CAA+B,S;IAC/B,gBAAI,WAAU,KAAM,eAAhB,EAAwB,GAAxB,EAA6B,GAA7B,C;IACJ,gBAAI,iB;EACR,C;2CAEA,iB;IACI,qBAAM,KAAN,EAAa,SAAb,C;EACJ,C;0CAEA,iB;IACI,qBAAM,KAAN,EAAa,QAAb,C;EACJ,C;4CAEA,iB;IACI,qBAAM,KAAN,EAAa,YAAb,C;EACJ,C;qCAEA,Y;IAAmC,OAAA,mBAAO,WAAU,YAAV,C;G;oDAE1C,sB;IACI,QAAQ,MAAU,G;IAClB,QAAQ,MAAU,G;IAClB,YAAY,MAAa,M;IACzB,aAAa,MAAc,O;IAC3B,gBAAgB,gBAAI,cAAa,CAAb,EAAgB,CAAhB,EAAmB,KAAnB,EAA0B,MAA1B,C;IACpB,IAAI,GAAG,wBAAoB,SAAU,KAA9B,CAAH,CAAJ,C;MACI,gBAAI,cAAa,SAAb,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,KAApC,EAA2C,MAA3C,C;KAEZ,C;EAGW,+D;IAAA,0C;IAAS,kB;IACZ,uBAAqB,iBAAkB,M;IACvC,wBAAsB,iBAAkB,O;G;;SADxC,Y;MAAA,2B;K;;;SACA,Y;MAAA,4B;K;;0DACA,Y;IAAkC,6B;G;8DAElC,qB;IACI,GAAI,WAAU,qCAAV,EAAkB,GAAlB,EAAuB,GAAvB,C;EACR,C;8DAEA,iE;IAKI,GAAI,WACA,qCADA,EAEG,EAFH,EAEkB,EAFlB,EAEqC,MAFrC,EAEyD,OAFzD,EAGG,EAHH,EAGkB,EAHlB,EAGqC,MAHrC,EAGyD,OAHzD,C;EAKR,C;;;;;mCApBR,Y;IACI,mD;EAqBJ,C;iCAEA,Y;IACoB,IAAS,IAAT,EAGI,M;IAHpB,gBAAgB,cAAS,OAAT,QAAS,eAAc,QAAd,CAAT,wC;IAChB,kBAAkB,mBAAO,M;IACzB,mBAAmB,mBAAO,O;IAC1B,UAAU,cAAU,SAAV,SAAU,YAAW,IAAX,CAAV,iD;IACV,GAAI,WAAU,mBAAV,EAAkB,GAAlB,EAAuB,GAAvB,C;IACJ,OAAO,iBAAa,SAAb,C;EACX,C;sDAEA,iB;IACI,IAAI,eAAS,KAAM,MAAf,IAAwB,gBAAU,KAAM,OAA5C,C;MACI,MAAM,8BACF,uCACQ,OAAK,UAAL,SAAc,WAAd,YAA2B,KAAM,MAAjC,SAA0C,KAAM,OAAhD,MADR,CADE,C;KAKd,C;;;;;;EAGJ,mB;G;;;;;;EAUsB,uC;IAAyC,kB;IAAxC,gC;IACnB,uBAAqB,kBAAY,M;IACjC,wBAAsB,kBAAY,O;G;;SADlC,Y;MAAA,2B;K;;;SACA,Y;MAAA,4B;K;;wCAEA,Y;IACI,aAAa,iBAAa,kBAAY,MAAzB,EAAgC,kBAAY,OAA5C,C;IACb,MAAO,mBAAU,IAAV,C;IACP,OAAO,M;EACX,C;4CAEA,qB;IACI,GAAI,WAAU,kBAAV,EAAuB,GAAvB,EAA4B,GAA5B,C;EACR,C;4CAEA,iE;IAKI,GAAI,WACA,kBADA,EAEG,EAFH,EAEkB,EAFlB,EAEqC,MAFrC,EAEyD,OAFzD,EAGG,EAHH,EAGkB,EAHlB,EAGqC,MAHrC,EAGyD,OAHzD,C;EAKR,C;;;;;;EAGmB,oC;IAA0C,kB;IAAzC,wB;G;;SACD,Y;MAAQ,OAAA,cAAQ,W;K;;;SACf,Y;MAAQ,OAAA,cAAQ,Y;K;;yCAEpC,Y;IACI,aAAa,iBAAa,cAAQ,WAArB,EAAiC,cAAQ,YAAzC,C;IACb,MAAO,mBAAU,IAAV,C;IACP,OAAO,M;EACX,C;6CAEA,qB;IACI,GAAI,WAAU,cAAV,EAAmB,GAAnB,EAAwB,GAAxB,C;EACR,C;6CAEA,iE;IAKI,GAAI,WACA,cADA,EAEG,EAFH,EAEkB,EAFlB,EAEqC,MAFrC,EAEyD,OAFzD,EAGG,EAHH,EAGkB,EAHlB,EAGqC,MAHrC,EAGyD,OAHzD,C;EAKR,C;;;;;;EAGqB,uC;IAAC,wB;G;;SACC,Y;MAAQ,OAAA,aAAS,O;K;;8CAExC,iB;IACI,OAAO,aCmzBsD,CDnzB7C,KCmzB6C,C;EDlzBjE,C;8CAEA,wB;IACa,aAAT,CAAqB,KAArB,IAA8B,K;EAClC,C;;;;;;EE5LoB,kG;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,0C;EAAU,C;;;;;;;;sDAAV,Y;;;;;YAAE,gB;4BAAA,8B;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YAAA,oB;;;;;;;;;;;;;;EAAQ,C;EAAV,+C;IAAA,yD;qBAAA,sF;UAAA,S;eAAA,Q;;eAAA,uB;IAAU,C;G;EADlC,8B;IACgB,QAAZ,sBAAY,kBAAQ,2BAAR,C;IACZ,M;EACJ,C;;EAIA,2B;IACI,UAAU,oB;IACV,GAAI,MAAK,KAAL,EAAc,aAAF,oBAAiB,IAA7B,EAAoC,KAApC,C;IACJ,GAAI,O;IAEJ,IAAe,OAAX,GAAI,OAAO,EAAO,GAAP,CAAf,C;MACI,OAAO,GAAI,a;KAGf,MAAM,eAAU,6BAA2B,IAA3B,UAAoC,GAAI,OAAxC,SAAkD,GAAI,aAAhE,C;EACV,C;EAEA,yB;IAAmC,OAAW,uBAAX,IAAK,MAAM,C;G;EAE9C,yB;IACI,OAAsB,kBAAf,MAAO,MAAK,CAAL,CAAQ,C;EAC1B,C;EAEA,4C;IAA2D,yB;MAAA,YlBNwB,I;IkBO/E,WAAW,KAAX,EAAqB,8BAAO,KAAV,YAAoB,KAApB,UAA4B,EAA5B,WAAkC,OAApD,EAA8D,SAA9D,C;EACJ,C;EAEA,+C;IACI,QAAM,KAAN,C;WACI,O;QAAW,OAAQ,OAAM,OAAN,EAAe,SAAf,C;QAAnB,K;WACA,M;QAAU,OAAQ,MAAK,OAAL,EAAc,SAAd,C;QAAlB,K;WACA,M;QAAU,OAAQ,MAAK,OAAL,EAAc,SAAd,C;QAAlB,K;WACA,O;QAAW,OAAQ,KAAI,OAAJ,EAAa,SAAb,C;QAAnB,K;cACQ,OAAQ,KAAI,OAAJ,EAAa,SAAb,C;QALpB,K;;EAOJ,C;ECnCoB,uD;IAAC,+B;MAAA,kBAA+C,I;IAAM,4B;MAAA,eAAgC,C;IAArF,wC;IAAqD,kC;G;EAClC,gE;IAChC,0F;IAEA,gBAAiC,I;IAE7B,Q;IAAA,2D;MACI,gBAAW,gCAA0B,kCAA1B,C;KAInB,wBAAsB,I;G;;SATtB,Y;MAAA,+B;K;;;SASA,Y;MAAA,4B;K;;kEAEA,6B;IACI,OAAO,4BAAW,mBAAU,IAAV,EAAgB,WAAhB,C;EACtB,C;wEAEA,gB;I5HA0C,MAAM,6BAAoB,sC4HC3D,gD5HDuC,C;G;E4HYxB,kH;IAAA,gC;IAAA,0C;IAChB,6BAA4C,e;IAC5C,2BAA0C,e;G;;SAD1C,Y;MAAA,iC;K;;;SACA,Y;MAAA,+B;K;;;SACuB,Y;MAAQ,wB;K;;4FAE/B,iB;IACI,sBAAU,MAAK,cAAgB,eAAN,KAAM,CAAhB,CAAL,C;EACd,C;;;;;EAGe,qH;IAAA,qB;MACf,OAAQ,KAAI,iBAAJ,EAAuB,EAAvB,C;MACR,yBAAkB,mBAAU,qBAAV,C;MACtB,W;IAAA,C;G;EAEsB,uH;IAAA,qB;MAER,IAAG,IAAH,EAGgB,M;MAH1B,UAAU,cAAG,OAAH,EAAG,KAAH,kC;MACV,cAAc,cAAU,GAAV,C;MACd,YAAY,cAAU,OAAQ,OAAlB,C;MACc,SAAR,OAAQ,O;MAA1B,aAAU,CAAV,kB;QACI,MAAM,CAAN,IAAW,OFi4B8B,CEj4BtB,CFi4BsB,C;;ME/3B7C,yBAAkB,iBAAQ,qBAAR,EAAuB,KAAvB,C;MACtB,W;IAAA,C;G;EAEoB,yE;IAAE,OAAQ,OAAM,kBAAN,EAA0B,EAA1B,C;IAA8B,W;EAAA,C;EACxC,uH;IAAA,qB;MAChB,OAAQ,OAAM,kBAAN,EAA0B,EAA1B,C;MACR,yBAAkB,eAAM,qBAAN,C;MACtB,W;IAAA,C;G;yEAvCJ,oD;IAM+B,Q;IAA3B,gBAAgB,cAAkD,QAAV,CAA7B,kFAA6B,WAAU,qBAAQ,EAAR,EAAxC,GAAuD,IAAjE,C;IAChB,uBfq5MyE,a;Ien5MzE,+G;IAUA,mBAAmB,2F;IAKnB,sBAAsB,6F;IAWtB,oBAAoB,2D;IACpB,oBAAoB,6F;IAKpB,OAAO,a;EACX,C;EA5D0C,qE;G;;;;;;;;;kCAD9C,Y;IAAoC,kD;G;EAgEhB,kD;IAAC,0B;G;;;;;;;;;;;ECtEK,8C;IAiI1B,uC;IA9HA,qBAAgD,I;IAEhD,qBAAoB,IAAK,0BAAiB,OAAjB,EAA0B,IAA1B,EAAgC,cAAhC,EAAgD,IAAhD,C;IACzB,iBAAyB,K;IACzB,cnI4EoD,gB;G;gDmI1EpD,yB;IACI,iBAAY,I;IjIwlDA,Q;IAAA,OiItlDZ,WjIslDY,W;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MiItlDmB,2BjIslDN,OiItlDM,C;;IAC/B,WAAO,Q;EACX,C;8CAEA,gC;;MAEQ,IAAI,KvH8pNL,YAAQ,CuH9pNP,C;QAAqB,M;MAEE,gBAAvB,oBAAgB,KAAhB,C;MACI,S7HsDZ,S6HtDqB,W;MAEL,IADE,EACF,KAA4B,OAAX,oDAAW,KAA5B,C;QACI,kBAAkB,oC7HmDtC,S6HnDsD,YAAhB,C;QAClB,e7HkDpB,S6HlDmC,U;QACf,W7HiDpB,S6HjD+B,Y;QACX,WAAI,mBAAiB,IAAK,OAAtB,eAAoC,aAAM,IAAN,CAApC,cAAuD,WAAvD,SAAoE,QAAxE,C;QACA,iCAAc,iBAAQ,WAAR,EAAqB,QAArB,EAA+B,IAA/B,C;;QAGd,WAAI,0BAAuB,EAAvB,eAAJ,C;;;MAId,gC;QACE,8CAAO,eAAM,mCAAN,EAA2C,CAA3C,C;QACP,MAAM,C;;QApBV,O;;EAsBJ,C;4CAEA,yB;I7HnB8C,MAAM,6BAAoB,sC6HoB/D,gC7HpB2C,C;E6HqBpD,C;gDAEA,6B;IACI,IAAI,IAAK,cAAL,QAAJ,C;MACI,MAAM,2BAAsB,gCAAtB,C;KAGV,qBAAmB,W;IAEnB,IAAI,SAAQ,CAAZ,C;MACI,MAAM,8BAAyB,mDAAzB,C;KAG0B,gBAAlB,qB;I7HmBtB,S6HlBQ,mBAAqC,OAAV,mDAAU,KAArC,C;IACA,WAAI,aAAJ,C;IAFJ,yB7HoBG,S6HjBD,UAHF,C;IAKA,OAAO,yCAAe,IAAf,C;EACX,C;EAE0B,+D;IAA1B,oB;IACI,4BAA0B,a;G;;SAA1B,Y;MAAA,gC;K;;6DAEA,kC;IACI,IAAI,0DAAJ,C;MACI,MAAM,8BAAyB,6BAA0B,SAA1B,MAAzB,C;;IAG0B,gBAAlB,qB;;IAAwB,sC;I7HGlD,S6HFY,mBAAmC,OAAR,iDAAQ,KAAnC,C;I7HEZ,S6HDY,oBAAqB,eAArB,C;I7HCZ,S6HAY,uB;I7HAZ,S6HCY,0B;IACA,2BAAI,eAAmB,YAAnB,eAAiC,mCAAjC,kCAAJ,C;IALJ,yB7HID,S6HEG,UANF,C;EAOJ,C;kEAEA,uB;;IACwC,gBAAlB,qB;;IAAwB,sC;I7HPlD,S6HQY,mBAAwC,OAAb,sDAAa,KAAxC,C;I7HRZ,S6HSY,uB;I7HTZ,S6HUY,0B;IACA,2BAAI,oBAAwB,YAAxB,eAAsC,mCAAtC,kBAAJ,C;IAJJ,yB7HND,S6HWG,UALF,C;EAMJ,C;;;;;;kDAIJ,iB;IACI,IAAI,cAAJ,C;MACI,kBAAc,cAAK,KAAL,C;;MAEd,WAAO,WAAI,KAAJ,C;;EAEf,C;oCAEA,a;IACI,QAAQ,MAAI,eAAJ,qBAAuB,CAA/B,C;EACJ,C;sCAEA,gB;IACI,OAAO,YAAU,CAAC,IAAQ,CAAH,CAAG,CAAR,GAAoB,GAArB,IAA6B,GAA7B,IAAD,GAAuC,IAAQ,CAAH,CAAG,CAAR,GAAoB,GAApE,C;EACX,C;EAEkC,gD;IAAC,kB;G;EAEI,6D;IAAE,OAAqB,CAAlB,EAAQ,GAAI,GAAM,Y;EAAW,C;uDADrE,Y;IACI,OAAa,eAAN,UAAM,EAAa,GAAb,kCAAkB,+CAAlB,C;EACjB,C;qDAEA,iB;IAII,Q;IAHA,IAAI,SAAS,KAAb,C;MAAoB,OAAO,I;IAC3B,IAAI,iBAAiB,QAAY,sCAAZ,IAAY,EAAZ,EAA+B,sCAAb,KAAa,EAA/B,CAArB,C;MAAwD,OAAO,K;IAE/D,gF;IAEA,IAAI,CAAO,cAAN,UAAM,EAAc,KAAM,MAApB,CAAX,C;MAAuC,OAAO,K;IAE9C,OAAO,I;EACX,C;uDAEA,Y;IACI,OAAa,gBAAN,UAAM,C;EACjB,C;;;;;;yDAlBJ,Y;IAAmC,iB;G;2DAAnC,iB;IAAA,2CAAmC,qCAAnC,C;G;EAqBA,qC;IAAA,yC;IACI,cAAa,WAAO,iBAAP,C;G;;;;;;;EADjB,iD;IAAA,gD;MAAA,+B;KAAA,yC;G;;;;;;EC1Hc,2B;IAAC,gB;IACf,gBAAqB,WAAO,mBAAP,C;IACrB,cAAmB,SAAK,2BAAkB,OAAvB,C;IACnB,oBAAyB,aAAS,GAAT,EAAc,GAAd,UAAgC,GAAhC,C;IACzB,WAAgB,MAAO,S;IACvB,mD;IACA,uBAA4B,K;IAC5B,kBAAuB,aAAS,GAAT,EAAc,CAAd,UAA8B,GAA9B,C;IAEvB,iCAAkD,oB;IAElD,kBAAiB,wC;IACjB,qBAAoB,2C;IAsBhB,gB;G;;SA7BJ,Y;;;MAAA,+B;K;SAAA,qB;MAAA,oC;K;;EASA,gD;IAAA,oB;G;yDACI,Y;IAAuC,6B;G;;;;;;EAG3C,mD;IAAA,oB;IACI,iBpIyDgD,gB;G;;SoItD5C,Y;MAAQ,4C;K;;+DAEZ,4B;IACI,cAAU,WAAI,gBAAJ,C;EACd,C;iEAEA,4B;IACI,cAAU,cAAO,gBAAP,C;EACd,C;;;;;;EAYgB,8C;IAAE,uC;EAAiC,C;EAFhC,wD;IAAA,qB;MACf,oCAAgB,I;MAChB,0BAAO,cAAK,kCAAL,C;MACX,W;IAAA,C;G;EAEsB,0D;IAAA,qB;MACR,IAAG,I;MAAb,UAAU,QAAG,OAAH,EAAG,KAAH,kC;MAEV,cAAc,wBAAK,mBAAU,GAAV,C;MACnB,cAAc,OAAQ,UAAR,aAAkB,CAAlB,CAAqB,UAAU,Q;MAC7C,UAAU,OAAQ,UAAR,aAAkB,CAAlB,C;MACV,QAAM,OAAN,C;aACI,kB;;UAA8D,gBAAd,GAAI,U;UlI6wCzD,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;UAqEA,U;UAAA,6B;UAAb,OAAa,gBAAb,C;YAAa,wB;YACT,WAAY,WAAc,IkIn1CqD,UAAU,MlIm1C7E,C;;;UkIn1CkB,mCAAmE,alIo1C9F,WkIp1C8F,C;UAAzF,K;aACA,iB;UACmC,kBAAd,GAAI,U;UlI2wC9B,oBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;UAqEA,U;UAAA,+B;UAAb,OAAa,gBAAb,C;YAAa,0B;YACT,aAAY,WAAc,MkIj1C0B,UAAU,MlIi1ClD,C;;;UkIj1CA,iBAA0D,alIk1CnE,akIl1CmE,C;UAC1D,eAA6B,2BAAS,2CAAT,EAAkC,UAAlC,C;UlIoiD7B,U;UAAA,SkIniDA,+BAAc,UlImiDd,W;UAAhB,OAAgB,gBAAhB,C;YAAgB,2B;YAAa,OkIliDN,2B;;;UAJX,K;aAOA,U;UAAc,+BAAW,wBAAK,kBAAS,gCAAS,aAAlB,EAAgC,GAAhC,C;UAA9B,K;gBACQ,MAAM,8BAAyB,2BAAoB,OAApB,MAAzB,C;;MAflB,OAkBA,I;IACJ,C;G;EAIqB,0D;IAAA,mB;MAAE,0EAAgE,U;IAAI,C;G;EAGtE,0D;IAAA,mB;MAAE,6BAAmB,U;IAAI,C;G;EAL1B,0D;IAAA,qB;MAChB,IAAI,CAAC,iCAAL,C;QACI,0BAAO,eAAM,wCAAN,C;QACP,+BAAW,8B;;QAEX,0BAAO,eAAM,wCAAN,C;;MAEf,W;IAAA,C;G;EAIqB,0D;IAAA,mB;MAAE,yEAA+D,U;IAAI,C;G;EAKlE,qD;IAAE,uD;EAAiD,C;EAFhD,oH;IAAA,wC;IAAA,6B;IAAA,yB;IAAA,kD;EAInB,C;;;;;;;;oEAJmB,Y;;;;;YACf,gB;4BAAA,kB;gBAAA,qC;qBAAA,mB;YAAA,Q;;;;YACA,qCAAO,cAAK,yCAAL,C;YADP,OAEA,wCAFA,M;;;;;;;;;;;;;;EAGJ,C;EAJmB,mE;IAAA,yD;qBAAA,wG;UAAA,S;eAAA,Q;;eAAA,uB;IAInB,C;G;EATY,0D;IAAA,qB;MAChB,IAAI,iCAAJ,C;QACI,0BAAO,eAAM,wCAAN,C;QACP,+BAAW,8B;QAEC,OAAZ,sBAAY,kBAAO,uDAAP,C;OAMpB,W;IAAA,C;G;qCAlDJ,Y;IACI,mBAAY,cAAU,CAAO,OAAA,QAAE,SAAF,EAAc,QAAd,CAAJ,GAA4B,MAA5B,GAAwC,KAA3C,WAAoD,UAApD,YAAV,C;IAEZ,0BAAmB,iC;IAKnB,6BAAsB,mC;IAsBtB,2BAAoB,mC;IASpB,2BAAoB,mC;EAYxB,C;;;;;;ECvFkB,sC;IAAC,8B;IACnB,kBAAuC,I;G;6CAEvC,Y;IACsB,sB;G;yCAEtB,Y;IACgC,gBAArB,sCAAW,GAAX,EAAgB,GAAhB,C;IACH,iBAAW,0B/H0Eb,S+H1Ea,C;IADf,O/H4EG,S;E+HzEP,C;EAEsB,4D;IAAtB,oB;IAAuB,kB;IAAgB,oB;IAEkC,gBAAnD,uBAAc,wBAAhB,IAAgB,CAAd,C;I/HqDtB,S+HpDQ,SAAQ,UAAR,EAAe,WAAf,C;IAFJ,mB/HuDG,S;I+HlDmB,IAAY,I;IAAlC,gBAAqB,cAA8C,CAA7C,cAAY,OAAZ,gBAAY,WAAZ,wCAA6C,aAAW,OAAX,CAA9C,C;IACrB,mBAAwB,2BAAkB,EAAlB,EAAsB,GAAtB,EAA2B,CAA3B,EAA8B,KAA9B,C;IACxB,qBAA0B,sBAAkB,wBAAQ,WAAR,IAAiB,CAAjB,IAAlB,C;IAC1B,mBAAwB,cAAU,kBAAV,EAAuB,UAAvB,EAA8B,WAA9B,C;IAkBxB,yBAA+C,0C;G;EAHnC,0E;IAAA,qB;MAAE,uBAAQ,CAAO,qBAAiB,EAAjB,CAAP,C;MAA6B,W;IAAA,C;G;uDAbnD,yB;IACI,gBAAU,MAAK,MAAL,EAAa,IAAb,C;IACV,0BAAyB,UAAN,GAAmB,W;IACtC,gBAAU,yB;IACV,gBAAY,QAAO,KAAP,EAAc,gBAAd,C;IAEL,aAAY,YACf,CADe,EACZ,CADY,EACT,UADS,EACF,WADE,EACa,aAAY,KADzB,EACsC,aAAY,cADlD,EAEf,eAAW,kBAAY,OAAvB,CAFe,C;IAKnB,iB;IAAyB,6B;IAAW,oB;IAAA,oB;IAAA,wB;IAAA,e;IAAA,gB;IAAA,iB;IlBqwHX,gC;MAAA,mBAslF8C,M;KAtlFe,gC;MAAA,mBAomFT,S;KApmFyE,oC;MAAA,uBA8mFjE,S;KA9mF6I,2B;MAAA,cAAoB,S;IAAW,4B;MAAA,eAAqB,S;IAAW,6B;MAAA,gBAwnFlO,K;KAvnFvE,QAAQ,E;IACR,EAAE,kBAAF,IAAwB,gB;IACxB,EAAE,kBAAF,IAAwB,gB;IACxB,EAAE,sBAAF,IAA4B,oB;IAC5B,EAAE,aAAF,IAAmB,W;IACnB,EAAE,cAAF,IAAoB,Y;IACpB,EAAE,eAAF,IAAqB,a;IACd,CkB5wHK,oBlB41MqE,O;IkB71MlE,+BlB6wHR,CkB7wHQ,CAEJ,MAAK,qDAAL,C;EACP,C;;SAEA,Y;MAAA,6B;K;SAAA,mB;MAAA,gC;K;;EAGc,qD;IAAO,W;EAAA,C;gDADrB,Y;IACI,eAAU,wC;IACV,wBAAW,6BAAoB,IAApB,C;EACf,C;EAL+C,uD;IAAO,W;EAAA,C;;;;;;;;;;;ECjD9D,qC;IACI,YAAY,QAAS,O;IACrB,IAAU,WAAN,KAAM,EAAW,GAAX,CAAV,C;MACI,OAA0B,oBAAnB,K9G2LkE,W8G3LlD,C9G2LkD,C8G3L/C,C;;MAE1B,OAAO,U;;EAEf,C;EAEA,oC;IACI,WAAW,QAAS,K;IACpB,IAAS,WAAL,IAAK,EAAW,GAAX,CAAT,C;MACI,OAAyB,oBAAlB,I9GkLkE,W8GlLnD,C9GkLmD,C8GlLhD,C;;MAEzB,OAAO,U;;EAEf,C;EAEA,wC;IACwC,kBAAX,MAAlB,qBAAQ,EAAR,EAAa,EAAb,CAAkB,GAAM,GAAN,E;IpIuzClB,kBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,6B;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;mBoI53CgB,MpI43CU,IoI53CV,GAAM,GAAN,WAAmB,CAAnB,C;MAAX,QpICF,mBAAI,CAAJ,C;MoIDK,QpIWL,mBAAI,CAAJ,C;MAi3CS,YAAZ,WAAY,EoI33CZ,sBAAmB,CAAnB,GAAyB,mBAAmB,CAAnB,CAAzB,CpI23CY,C;;IoI73ChB,OAGE,QpI23CK,WoI33CL,C;EACN,C;EChByB,yD;IAAC,4B;MAAA,eAAkC,G;IAAM,4B;MAAA,eAAmC,G;IAA3E,kC;IAAwC,kC;G;wDAE9D,sB;IAA4D,OAA0B,CAA1B,4CAAc,UAAd,CAA0B,iB;G;EAE7D,+D;IAAzB,oB;IACgE,QAAM,UAAW,KAAX,GAAkB,0B;IAA3D,QAAyE,Y3IgzBxD,MAA+B,OAAZ,CAAY,C2IhzByB,C;IAAlG,oB3I8+B4C,MAAW,K2I9+B1B,I3I8+B0B,EAAO,CAAP,C;I2I7+BvD,uBAA4B,UAAW,iBAAS,Q;IAChD,kBAAuB,oBAAc,S;IACrC,sBAA2B,UAAW,a;IACtC,uBAA4B,UAAW,sB;G;8DAEvC,Y;IAiEoB,Q;IAhEhB,oBAAc,qB;IAEd,qBAAqB,c;IAErB,iBAAiB,gB;IAEjB,iBAAiB,oBAAc,M;IAC/B,cAAc,WAAW,CAAX,C;IACd,qBAAqB,cAAA,OAAQ,OAAR,CAAiB,Q;IACtC,uBAAuB,YAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,C;IACvB,UAAW,oBAAmB,cAAA,OAAQ,OAAR,CAAnB,EAAqC,gBAArC,C;IACX,aAAa,a;IACb,MAAO,4BAA2B,UAA3B,C;IACP,oBAAc,aAAY,MAAZ,C;IACd,cAAe,aAAY,MAAZ,C;IAEf,UAAU,4BAAe,OAAf,EAAwB,eAAxB,C;IACV,cAAc,a;IAEd,cAAwB,SAAY,MAAK,GAAI,QAAT,C;IAEpC,YAAY,I;IACZ,eAAe,cAAO,YAAP,GAAqB,CAArB,GAAyB,O;IACxC,oBAAoB,cAAO,YAAP,GAAqB,GAArB,GAA2B,G;IAC/C,sBAAsB,C;IACtB,aAAa,C;IACb,OAAO,SAAS,iBAAhB,C;MACoB,aAAJ,GAAI,E;MAAI,uC;MAAe,QAAI,Q;MAAvC,YAAY,SAAQ,S3I9Bc,MAAW,KAAI,CAAJ,C;M2I+B7B,aAAJ,GAAI,E;MAAI,uC;MAAe,UAAI,Q;MAAvC,YAAY,SAAQ,S3ItBc,MAAW,KAAI,GAAJ,C;M2IuB7C,YAAY,GAAI,E;MAIhB,IAAI,CAAC,0BAAa,OAAb,EAAsB,OAAtB,CAAL,C;QACI,cAAc,6BAAgB,OAAhB,EAAyB,OAAzB,C;QACd,IAAI,eAAJ,C;UAII,UAAW,oBAAmB,gBAAnB,EAAqC,cAArC,C;UACX,MAAO,4BAA2B,UAA3B,C;UACP,oBAAc,aAAY,MAAZ,C;UACd,cAAe,aAAY,MAAZ,C;UACf,OAAQ,cAAa,MAAb,C;UAER,UAAU,O;UACV,iBAAiB,cAAA,OAAQ,OAAR,CAAiB,Q;UAClC,UAAW,oBAAmB,cAAA,OAAQ,OAAR,CAAnB,EAAqC,gBAArC,C;UACX,MAAO,4BAA2B,UAA3B,C;UACP,oBAAc,aAAY,MAAZ,C;UACd,cAAe,aAAY,MAAZ,C;UAEf,OAAQ,cAAa,MAAb,C;UAGR,YAAY,oBAAc,SAAd,CAAuB,OAAQ,EAA/B,CAAkC,E;UAC9C,IAAI,CAAC,0BAAa,OAAb,EAAsB,OAAtB,CAAL,C;YAEI,OAAQ,MAAK,4BAAe,OAAf,EAAwB,eAAxB,CAAL,C;;UAKZ,WAAW,cAAO,YAAP,GAAqB,CAArB,GAAyB,O;UACpC,IAAI,6CAAU,CAAd,C;YAAiB,K;UACjB,kBAAkB,C;UAClB,Q;;OAKR,cAAwB,SAAY,MAAK,OAAQ,QAAb,C;MAEpC,YAAY,a;MACZ,iBAAiB,IAAI,cAAO,YAAP,GAAqB,GAAzB,GAA+B,G;MAGhD,IAAI,mBAAkB,oBAAa,EAAb,IAAlB,CAAJ,C;QACI,WAAW,cAAO,YAAP,GAAqB,CAArB,GAAyB,O;QACpC,gBAAgB,cAAO,YAAP,GAAqB,GAArB,GAA2B,G;QAC3C,kBAAkB,C;OAEtB,GAAI,MAAK,OAAL,C;MACJ,yC;MAEA,uB;;IAGJ,UAAW,oBAAmB,gBAAnB,EAAqC,cAArC,C;IACX,MAAO,4BAA2B,UAA3B,C;IACP,oBAAc,aAAY,MAAZ,C;IACd,cAAe,aAAY,MAAZ,C;IAEf,OAAO,cAAe,S;EAC1B,C;uEAGA,0B;IACI,QAAkB,CAAV,aAAU,OAAK,SAAS,IAAK,EAAd,CAAL,C;IAClB,CAAE,iBAA0B,CAAV,aAAU,OAAK,SAAS,IAAK,EAAd,CAAL,CAAuB,KAAI,CAAJ,CAAjD,EAAyD,cAAO,YAAhE,C;IACF,CAAE,iBAA0B,CAAV,aAAU,OAAK,SAAS,IAAK,EAAd,CAAL,CAAuB,KAAI,CAAJ,CAAjD,EAAyD,cAAO,YAAhE,C;IACF,OAAO,C;EACX,C;qEAEA,sB;IACI,eAAe,oBAAc,S;IAE7B,OAAO,sBACH,gBAAG,CAAH,CADG,EAEH,CACI,gBAAG,SAAS,OAAQ,EAAjB,CAAH,CADJ,EAEI,gBAAG,SAAS,OAAQ,EAAjB,CAAH,CAFJ,EAGI,gBAAG,SAAS,OAAQ,EAAjB,CAAH,CAHJ,CAFG,C;EAQX,C;iEAEA,qB;IAsBY,Q;IAlBR,IAAK,IAAQ,KAAR,aAAL;MAAQ,IAAK,KAAL,a;IAER,aAAa,K;IAEb,QAAQ,C;IACR,QAAQ,EAAG,OAAH,GAAU,CAAV,I;IACR,OAAO,IAAI,EAAG,OAAd,C;MACI,SAAS,GAAG,CAAH,CAAM,E;MACf,SAAS,GAAG,CAAH,CAAM,E;MACf,SAAS,GAAG,CAAH,CAAM,E;MACf,SAAS,GAAG,CAAH,CAAM,E;MAEf,gBAAkB,KAAK,CAAN,KAAa,KAAK,CAAnB,IACJ,IAAI,CAAC,KAAK,EAAN,KAAa,IAAI,EAAjB,KAAwB,KAAK,EAA7B,IAAmC,E;MACnD,IAAI,SAAJ,C;QACI,SAAS,CAAC,M;OAGd,KAAI,QAAJ,EAAI,gBAAJ,O;;IAGJ,OAAO,M;EACX,C;2DAEA,a;IAAqB,OAAW,sBAAO,CAAI,EAAX,EAAsB,CAAI,EAA1B,C;G;wEAEhC,sB;IAwBuB,Q;IAtBnB,IAAI,mBAAJ,C;MACI,eAAe,oBAAc,S;MAG7B,sBAAkB,CAAQ,EAAR,EAAY,EAAZ,CAAlB,C;MACA,uBAAmB,uCAAM,kBAAzB,C;MACmB,gBAAX,SAAR,OAAQ,C;M3Ho+VJ,U;MAAhB,4BAAgB,SAAhB,kB;QAAgB,cAAA,SAAhB,Q;Q2Hn+VgB,yBAAyB,a;QACzB,S3Hk+Va,O2Hl+VJ,CAAO,CAAP,C;QACT,S3Hi+Va,O2Hj+VJ,CAAO,CAAP,C;QACyB,CAAlC,UAAM,SAAS,EAAT,CAAN,EAAoB,SAAS,EAAT,CAApB,CAAkC,yBAAuB,IAAvB,EAA6B,kBAA7B,C;QAClC,mBAAmB,kBAAiC,c;QACpD,IAAI,eAAe,cAAnB,C;UACI,gB3H69VS,O;U2H59VT,iBAAe,Y;;MAIvB,aAAyB,MAAZ,aAAY,C;MAGzB,gBAAgB,+BAAc,MAAd,C;MACD,U;MAAA,sB;QrI4fpB,kBAAS,gB;QAyEA,U;QAAA,SqIrkBW,SrIqkBX,W;QAAhB,OAAgB,gBAAhB,C;UAAgB,6B;UAAM,IAAc,SqIrkBgB,YrIqkB9B,C;YAAwB,WAAY,WAAI,SAAJ,C;;QqIrkB/B,SrIskBpB,W;;QqItkBoB,a;MAAf,eAAe,iCAA4C,W;MAC3D,IAAI,QAAS,KAAT,KAAiB,CAArB,C;QACI,OAAO,I;;QACA,QAAS,K;MAKpB,OAAO,qBAAS,CAAT,C;KAEX,OAAO,I;EACX,C;;;;;;;;;;;EC/KQ,8D;IAIZ,6B;MAAA,gBAA6C,I;IAF7C,wB;IACA,4B;IACA,oC;IAGA,qBAA6B,K;IAC7B,cAAsB,K;IAEtB,iCAAsB,K;IAWtB,wBxIsCoD,gB;IwIpCpD,sB;IACA,oB;IACA,mB;IACA,sB;IACA,kB;IAEA,aAA4B,c;IAC5B,2B;IACA,0B;IACA,2B;IAEA,uB;IACA,eAA8B,I;IAC9B,oB;IAEA,2BxIqBoD,gB;IwInBpD,mBxImBoD,gB;IwIhBhD,gBAAU,kBAAiB,WAAjB,EAA8B,4BAA9B,EAA6E,KAA7E,C;IACV,gBAAS,2BAAkB,EAAlB,EAAsB,gBAAsB,YAAtB,GAAmC,gBAAU,aAAnE,EAAiF,CAAjF,EAAoF,KAApF,C;IACT,aAAO,SAAP,KAAoB,M;IACpB,kBAAW,kBAAc,aAAd,EAAsB,gBAAtB,C;IACX,gCAAyB,UAAK,CAAL,GAAS,I;IAClC,gCAAyB,UAAK,CAAL,GAAS,I;IAElC,eAAQ,W;IACyB,gBAAjB,oB;IlIApB,SkIA6C,MAAM,KAAI,QAAJ,C;IAA/C,uBlICG,S;IkIAgC,kBAApB,uB;IlIDnB,WkIC+C,MAAM,KAAI,QAAJ,C;IAAjD,sBlIAG,W;IkICiC,kBAApB,uB;IlIFpB,WkIEgD,MAAM,KAAI,QAAJ,C;IlIFtD,WkIEqE,aAAY,G;IAA7E,uBlIDG,W;IkIEH,YAAM,KAAI,aAAJ,C;IACN,kBAAW,wB;IACX,eAAS,eAAc,MAAO,iBAArB,C;IACT,a;IAEA,gBAAU,aAAY,eAAS,WAArB,C;IACV,cAAO,c;IACP,mBAAkB,oB;IACR,gBAAY,OAAO,OAA7B,aAAgD,C;IAE5C,oCAAqB,CAArB,EAAwB,EAAxB,EAA4B,EAA5B,C;IACoB,kBAApB,uB;IlIdR,WkIcoC,MAAM,KAAI,QAAJ,C;IAFtC,gBAAS,oBlIXN,WkIWM,C;IAIT,YAAM,KAAI,aAAJ,C;ItIugDM,U;IAAA,SsIpgDZ,KAAM,atIogDM,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,2B;MsIngDR,WAAc,SAAY,MAAK,YtImgDV,OsIngDoB,EAAV,EtImgDV,OsIngDyB,EAAf,EtImgDV,OsIngD8B,EAApB,CAAL,C;;IAG9B,oB;IAEA,uBAAyB,IAAzB,C;IACA,MAAO,kBAAiB,QAAjB,EAA2B,4CAA3B,C;IAkFX,uBAA4B,E;IA4C5B,qBAA0B,G;G;;SAjM1B,Y;MAAA,qC;K;SACI,qB;MACI,iCAAQ,S;MtI8jDA,Q;MAAA,OsI5jDR,gBtI4jDQ,W;MAAhB,OAAgB,cAAhB,C;QAAgB,yB;QAAa,OsI5jDc,qBAAN,eAAiC,U;;MAE9D,IAAI,SAAJ,C;QACI,cAAS,K;OAEjB,C;;kDAsEJ,yB;IACI,qBAAe,WAAI,aAAJ,C;EACnB,C;qDAEA,yB;IACI,qBAAe,cAAO,aAAP,C;EACnB,C;6CAEA,iB;IACI,eAAQ,YACH,KAAc,QAAd,GAA2B,gBAAU,YAAtC,GAAqD,CAArD,GAAyD,CADrD,EAEJ,EAAE,KAAc,QAAd,GAA2B,gBAAU,aAAvC,IAAuD,CAAvD,GAA2D,CAFvD,C;EAIZ,C;4CAEA,a;IAII,eAAe,eAAW,CAAX,EAAc,WAAd,EAAoB,YAApB,C;IACf,gBAAU,WAAI,QAAJ,C;IACV,OAAO,Q;EACX,C;+CAEA,mC;IACI,OAAO,mCAAc,UAAd,EAA0B,WAA1B,C;EACX,C;EAEyB,mE;IAAzB,oB;IACI,qBAA0B,cAAA,8BAAO,YAAP,WAAmB,UAAW,KAA9B,E;IAC1B,gBAAqB,yBAAqB,WAAY,gBAAO,kBAAP,EAAoB,EAApB,EAAwB,4CAAxB,CAAjC,C;IACrB,kBAAuB,uBAAmB,EAAnB,EAAuB,IAAvB,C;IACoB,gBAApB,uB;IlItE3B,SkIsEuD,MAAM,KAAI,QAAJ,C;IAAzD,kBlIrEG,S;IkIsEH,cAAmB,cAAK,eAAL,EAAe,eAAf,C;IACnB,uBAA4B,O;IAC5B,uBAA4B,G;IAC5B,uBAA4B,G;IAGxB,eAAS,aAAsB,CAAV,aAAU,kBAAgB,GAAhB,EAAqB,CAAC,KAAtB,EAA6B,GAA7B,CAAtB,C;IACT,8BAAuB,I;IACvB,0BAAmB,I;IACnB,WAAK,SAAS,KAAI,UAAW,OAAO,EAAtB,EAAyB,UAAW,OAAO,EAA3C,EAA8C,UAAW,OAAO,EAAhE,C;IACd,WAAK,SAAL,KAAkB,oB;IAClB,WAAK,SAAL,KAAkB,oB;IAClB,WAAK,SAAL,KAAkB,oB;IAClB,mBAAM,KAAI,WAAJ,C;G;0DAGV,Y;IACI,eAAS,MAAM,KAAI,aAAO,MAAM,IAAjB,C;IACf,0BAAmB,aAAO,OAAP,GAAgB,G;IAEnC,WAAK,SAAL,KAAkB,uBAAgB,aAAO,K;IACzC,WAAK,SAAL,KAAkB,oB;IAClB,WAAK,SAAL,KAAkB,oB;EACtB,C;EA1B8E,oE;IAAA,mB;MAAE,uC;MAAmB,W;IAAA,C;G;;;;;;uCA6BvG,Y;IACI,WAAK,wB;IACe,gBAAT,Y;IlInGf,SkImGgC,YAAW,W;IlInG3C,SkImGiD,YAAW,oB;IAAxD,alIlGG,S;IkImGH,YAAM,KAAI,UAAJ,C;IACN,aAAa,WAAoB,eAAY,OAAO,Q;IACpD,yBAAkB,M;IAClB,aAAO,QAAO,MAAP,C;IAEP,a;EACJ,C;EAQqC,0D;IAAA,qB;MAAE,wB;MAAS,W;IAAA,C;G;EAD1B,mD;IAAA,mB;MACd,MAAO,uBAAsB,gDAAtB,C;IACX,C;G;gCALJ,Y;IAOI,Q;IANA,IAAI,kBAAJ,C;MAAmB,M;IAEnB,MAAO,YAAW,8BAAX,EAEJ,oBAFI,C;IAIP,kC;MACI,eAAQ,I;MACR,gBAAU,qBAA0B,aAA1B,C;MACV,oBAAoB,gBAAU,kBAAiB,YAAM,SAAvB,EAAiC,KAAjC,C;M5H68VtB,U;MAAhB,4B4H58VQ,a5H48VR,kB;QAAgB,c4H58VR,a5H48VR,Q;Q4H38VY,wB5H28ViB,O4H38VoB,O;QACrC,eAAe,kCAAW,uBAAc,iBAAd,C;QAC1B,qB;UACI,U;UAAA,8DAA2B,eAAwB,aAAnD,Q;;KAMZ,IAAI,CAAC,oBAAD,IAAoB,WAAxB,C;MACI,eAAe,I;MACf,QAAQ,aAAO,SAAS,E;MACxB,QAAQ,aAAO,SAAS,E;MACxB,aAAO,SAAP,KAAoB,I5I3LkB,MAAW,K4I2LrB,Q5I3LqB,C4I2L7B,GAAoB,I5IpMF,MAAW,K4IoMD,Q5IpMC,C;M4IqM1C,aAAP,aAAO,S;MAAiB,UAAI,WAAW,C;MAAnB,iB5I5LkB,MAAW,KAAI,GAAJ,C;M4I4LD,UAAI,WAAW,C;MAA/D,WAAoB,SAAwB,I5IrMN,MAAW,KAAI,GAAJ,C;M4IsMjD,aAAO,QAAO,YAAM,SAAb,C;KAGX,eAAS,S;IAET,cAAc,e;IACd,eAAS,QAAO,YAAP,EAAc,aAAd,C;IACT,0BAAoB,yBAAkB,OAAlB,CAA2B,Q;ItIu4CnC,U;IAAA,SsIr4CZ,qBtIq4CY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,6B;MAAa,SsIr4CO,cAAa,YAAb,EAAoB,aAApB,C;;ItIq4CpB,U;IAAA,SsIp4CZ,wBtIo4CY,W;IAAhB,OAAgB,gBAAhB,C;MAAgB,6B;MAAa,SsIp4CY,E;;EACzC,C;gCAMA,Y;IACI,uBAAgB,gBAAsB,YAAtB,GAAmC,gBAAU,a;IAC7D,aAAO,yB;IACP,eAAS,SAAQ,gBAAU,YAAlB,EAA+B,gBAAU,aAAzC,C;EACb,C;qDAEA,qB;IACI,uBAAkB,S;EACtB,C;;;;;;;;EA1K4C,iD;IAAA,wB;MAAuB,gB;MAAA,oE;MAAZ,2C;MAAiC,W;IAAA,C;G;EAuC/C,8E;IAAA,mB;MAC7B,yBAAe,I;MACf,wB;MACJ,W;IAAA,C;G;EAR8B,yE;IAAA,qB;MAC9B,IAAI,2BAAiB,IAArB,C;QACI,MAAO,cAAa,qCAAb,C;OAGX,yBAAe,MAAO,YAAW,oEAAX,EAGnB,6BAHmB,C;MAI1B,W;IAAA,C;G;;;;;;ECvGsB,oE;IAgE1B,gD;IA7DA,8B;IAG2B,2BAAkB,W;IAED,gBAAlB,KAAM,Y;IvIqiChC,eAAwD,cAAzC,YAAY,mCAAwB,EAAxB,CAAZ,CAAyC,EAAc,EAAd,C;IACjD,kBAAY,qBAAoB,QAApB,C;IAyEH,Q;IAAA,2B;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MACZ,WuI/mCA,GvI+mCyB,OuI/mCjB,KAAR,EAAgB,iBAAW,oBvI+mCF,OuI/mCE,CAA3B,C;M1I8nBJ,wBAAI,IAAK,MAAT,EAAgB,IAAK,OAArB,C;;I0I/nBA,qBvIknCO,W;IuI9mCP,2D;IAGI,IAAK,0BAAiB,OAAjB,EAA0B,IAA1B,EAA8C,gBAA9C,EAAgE,IAAhE,C;G;;SAHT,Y;;;MAAA,mC;K;SAAA,yB;MAAA,4C;K;;yDAOA,yB;IACI,uBAAqB,a;EACzB,C;uDAEA,gC;IAGU,IAIE,IAJF,EAeE,M;IAjBR,aAAa,oBAAgB,KAAhB,C;IACb,SAAS,MAAkB,W;IAC3B,QAAM,EAAN,C;WACI,C;QACI,kBAAkB,MAAO,a;QACzB,iBAAiB,MAAO,U;QACxB,yCAAY,WAAZ,W;UAC8C,gBAApB,oB;UvIkyC/B,kBAAM,iBAAa,mCAAwB,EAAxB,CAAb,C;UAqEA,U;UAAA,6B;UAAb,OAAa,gBAAb,C;YAAa,wB;yBACT,W;YItyCG,SmIjEa,gCAAS,sB;YvIu2Cb,YAAZ,WAAY,EuIv2CiC,YAAQ,EAAG,EAAX,EAAc,EAAG,EAAjB,EAAoB,EAAG,EAAvB,CvIu2CjC,C;;UuIx2CA,qBxI9BkD,YCu4C3D,WDv4C2D,C;UwIiClD,iBAAkC,+BAAsB,cAAtB,C;;QAP1C,K;WAWA,C;QACI,oBAAkB,MAAO,a;QACzB,mBAAiB,MAAO,U;QACxB,2CAAY,aAAZ,W;UACI,gBAA2B,gB;UAC3B,sB;YACsB,QAAc,c;YAAhC,kB7Iq8B4B,MAAW,KAAI,CAAJ,e;Y6Ip8BvC,cAAc,C;YACd,aAAU,CAAV,MAAkB,WAAlB,M;cACI,sBAAU,CAAV,EAAe,6BAAM,kCAArB,C;;;QAThB,K;cAcQ,MAAM,mCAA8B,MAA9B,C;;EAEtB,C;EAGgB,iD;IAAE,4C;EAAsC,C;qDADxD,yB;IACI,uDAAO,cAAK,qCAAL,C;EACX,C;6CAEA,Y;EAEA,C;EAEA,8C;IAAA,kD;IACI,cAAa,WAAO,0BAAP,C;G;;;;;;;EADjB,0D;IAAA,yD;MAAA,wC;KAAA,kD;G;;SA1D2B,Y;MAAA,gD;K;;;;;;;ECgBf,wC;IACZ,kC;IADmC,kB;IAA4B,oB;IAa/D,YAAW,KAAM,K;IACjB,wBAAwB,c;IACxB,YAAW,G;IACX,yB;IACA,yB;IACA,iC;IAC+C,gBAApB,uB;IpI2B3B,SoI3BuD,MAAM,KAAI,QAAJ,C;IAA7D,sBpI4BO,S;IoI3BP,gC;IACA,kB;IACA,mB;IACA,2BAA4B,I;IASxB,oBAAoB,IAAK,iB;IACzB,oBAAoB,aAAc,S;IAElC,eAAe,c;IAEf,gB1IiBgD,gB;I0IhBd,kBAAZ,KAAM,M;IxIqwCzB,kBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,Q;IAAA,6B;IAAb,OAAa,cAAb,C;MAAa,sB;mBACT,W;MwI1zCmB,U;MAhBiB,kBxI00CV,IwI10CA,U;MxIowCvB,oBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;MAqEA,U;MAAA,+B;MAAb,OAAa,gBAAb,C;QAAa,0B;qBACT,a;QwIz0CQ,QAAQ,WAAK,SAAL,CxIy0CU,MwIz0CV,C;QACR,UAAwB,yBAAQ,CAAR,C;QACxB,IAAI,QAAO,EAAX,C;UACI,MAAoB,oB;UACM,mBAAK,CAAL,C;SxIq0C1B,YAAZ,aAAY,EwIn0CJ,GxIm0CI,C;;MwI10CR,iBxI20CD,a;MwIj0CU,aACL,cAAc,uBAAW,CAAX,CAAd,CADK,EAEL,cAAc,uBAAW,CAAX,CAAd,CAFK,EAGL,cAAc,uBAAW,CAAX,CAAd,CAHK,C;MAMT,eAAe,QAAqB,2BAArB,oC;MACL,oBAAI,QAAJ,C;MACV,YAAK,SAAL,GAAa,Q;MAEb,aAAsB,QvBixJ+B,CuBjxJtB,kBvBixJsB,C;MjH39G7C,YAAZ,WAAY,EwIrzCR,eAAM,uBAAW,CAAX,CAAN,EAAqB,uBAAW,CAAX,CAArB,EAAoC,uBAAW,CAAX,CAApC,EAAmD,MAAnD,CxIqzCQ,C;;IwI30CZ,sBzI3D8D,YCu4C3D,WDv4C2D,C;IyIoF9D,oBAAe,aAAc,MAAM,OAApB,GAA2B,C;IAE1C,aAAc,qB;IACd,oBAAoB,a;IACA,kBAApB,aAAc,M;I9HknWL,oB;IADb,YAAY,C;IACZ,4BAAa,WAAb,kB;MAAa,aAAA,WAAb,Q;M8HjnWQ,iBAAe,uB9HinWG,gB8HjnWH,E9HinWG,wB8HjnWH,E9HinWJ,Q8HjnWI,E;MACD,8BAAgB,c9HgnWH,M8HhnWQ,OAAL,CAAhB,EAA+B,UAA/B,C;;IAElB,qBAAc,aAAc,cAAkB,SAAlB,C;IAE5B,oB3IpCoD,oB;I2IqChC,kBAApB,aAAc,M;I9HyiWF,U;IAAhB,4BAAgB,WAAhB,kB;MAAgB,cAAA,WAAhB,Q;M8HxiWwB,kBAAX,S9HwiWgB,O8HxiWhB,C;M9HwiWG,U;MAAhB,4BAAgB,WAAhB,kB;QAAgB,gBAAA,WAAhB,Q;Q8HviWY,YAAe,M9HuiWE,S8HviWF,C;Q3I2OpB,U;QADP,YAAY,wB2IzOuC,K3IyOvC,C;QACL,IAAI,aAAJ,C;UACH,aClQgD,gB;UDmQhD,0B2I5O+C,K3I4O/C,EAAS,MAAT,C;UACA,e;;UAEA,c;;Q2I/OQ,gB3I0OZ,M;Q2IzOY,SAAU,W9HqiWO,O8HriWP,C;;;IAGlB,6BAAqB,a;IAErB,WAAK,uB;IAEmB,kBAAZ,KAAM,M;IxIstCf,oBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;IAqEA,U;IAAA,+B;IAAb,OAAa,gBAAb,C;MAAa,0B;mBACT,a;MwI3xCI,cAAc,c;MACmB,kBxI0xCX,MwI1xCE,S;MxIotCzB,oBAAM,iBAAa,qCAAwB,EAAxB,CAAb,C;MAqEA,W;MAAA,gC;MAAb,OAAa,iBAAb,C;QAAa,2B;QACT,aAAY,WwI1xCqC,YxI0xCvB,MwI1xCkC,EAAX,ExI0xCvB,MwI1xCwC,EAAjB,ExI0xCvB,MwI1xC8C,EAAvB,CxI0xCrC,C;;MwI1xCR,mBzI5G0D,YCu4C3D,aDv4C2D,C;MCs4ClD,YAAZ,aAAY,EwIzxCR,OxIyxCQ,C;;IwI5xCZ,YxI6xCG,a;IwIvxCqC,kBAApB,uB;IpI7CxB,WoI6CoD,MAAM,KAAI,OAAJ,C;IAAtD,4BpI5CG,W;IoI6CH,IAAK,qBAAL,QAAyB,e;IACzB,IAAK,qBAAL,eAAgC,K;IAEhC,cAAY,cAAK,aAAL,EAAoB,IAAK,qBAAzB,C;IACP,WAAL,QAAwB,cAAW,S;IAGnC,IAAK,OAAc,SAAnB,CAA+B,UAA/B,IAA6C,I;IAE7C,YAAM,KAAI,IAAK,OAAT,C;IxIssCH,oBAAM,iBAAa,wBwIpsCT,KxIosCS,EAAwB,EAAxB,CAAb,C;IAqEA,W;IAAA,UwIzwCI,KxIywCJ,W;IAAb,OAAa,iBAAb,C;MAAa,2B;MACT,aAAY,WwI1wCqB,cxI0wCP,MwI1wCO,EAAuB,mBAAvB,CxI0wCrB,C;;IwI1wCZ,exI2wCG,a;IAmNS,W;IAAA,UwI59CZ,IAAK,QxI49CO,W;IAAhB,OAAgB,iBAAhB,C;MAAgB,8B;MwI39CR,YAAM,KxI29Ce,SwI39Cf,C;;G;EAzGd,gC;IAAA,oC;IACI,sBAA2C,CAAhB,wBAAgB,OACpC,aAAH,8CADuC,EAEvC,wCAFuC,EAGvC,0CAHuC,EAIvC,0CAJuC,C;G;yDAO3C,oB;IACI,Q;IAAA,eAAA,QAAkB,SAAlB,CAA8B,UAA9B,iE;G;EANA,sD;IAAE,QAAQ,SAAR,C;IAAmB,W;EAAA,C;EACrB,wD;IAAE,QAAQ,WAAR,C;IAAqB,W;EAAA,C;EACvB,wD;IAAE,QAAQ,QAAR,C;IAAkB,W;EAAA,C;;;;;;;EAL5B,4C;IAAA,2C;MAAA,0B;KAAA,oC;G;;SAsBA,Y;MAAA,+B;K;SACI,iB;MACI,Q;MAAA,0EAAuB,YAAvB,e;MACA,0CAAkB,YAAlB,e;MAEA,2BAAQ,K;IACZ,C;;EAiFQ,iC;IAAC,U;IAAc,U;G;2CACvB,Y;IAA4B,a;G;2CAC5B,Y;IAA4B,a;G;;;;;;EAIjB,qD;IAAyB,0B;IACpC,sBAAoB,cAAU,O;IAC9B,qBAA0B,oB;IAC1B,2B;IACA,mC;IACA,sBAA2B,eAAS,SAAT,C;IAGvB,qBAAqB,iBAAa,YAAO,CAAP,IAAb,C;IACX,gBAAV,c;I9HwjWK,gB;IADb,YAAY,C;IACZ,wBAAa,SAAb,gB;MAAa,WAAA,SAAb,M;MAAmB,SAAO,cAAP,EAAO,sBAAP,S;MoH1lUiD,eU79BzC,IAAI,CAAJ,IV69ByC,IpH0lUjC,I8HvjWK,E;MV69B4B,eU59BzC,KAAI,CAAJ,QAAQ,CAAR,IV49ByC,IpH0lUjC,I8HtjWS,E;MV49BwB,eU39BzC,KAAI,CAAJ,QAAQ,CAAR,IV29ByC,IpH0lUjC,I8HrjWS,E;;IAGpC,0BAA0B,2BAAuB,cAAvB,EAAuC,CAAvC,C;IAC1B,kBAAY,cAAa,UAAb,EAAyB,mBAAzB,C;IAEZ,+BAAwB,2BAAuB,iBAAa,aAAO,CAAP,QAAW,CAAX,IAAb,CAAvB,EAAmD,CAAnD,C;IACxB,uCAAgC,I;IAEhC,cAAc,YAAQ,YAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,CAAR,EAA0B,UAAW,cAArC,C;IACsD,kBAAV,c;I9H28R3D,kBAAM,iBAAa,kBAAb,C;IA6UA,U;IAAb,yD;MAAa,aAAb,mB;mBACI,W;M8HxxSQ,eAAe,wBAAoB,IAAI,cAAO,YAAP,GAAqB,CAA7C,EAAgD,IAAI,cAAO,YAAP,GAAqB,CAAzE,C;MACP,wBAAO,QAAP,E;MACR,QAAS,W9HsxSS,M8HtxSU,EAAnB,E9HsxSS,M8HtxSsB,EAA/B,E9HsxSS,M8HtxSkC,EAA3C,C;M9HsxSL,YAAZ,WAAY,E8HrxSJ,Q9HqxSI,C;;I8HzxSR,uBAAgB,6BAAoB,uBzI/JsB,YWy7S3D,WXz7S2D,CyI+JtB,C;IAMpC,oBAAc,cAAa,OAAb,EAAsB,4BAAtB,C;IAGY,iC;IAAmC,kBAApB,uB;IpIrGjD,WoIsGQ,QAAO,e;IpItGf,WoIuGQ,eAAc,I;IpIvGtB,WoIwGQ,YAAW,sB;IpIxGnB,WoI0GQ,aAAY,K;IpI1GpB,WoI2GQ,cAAa,K;IpI3GrB,WoI4GQ,gBAAe,kB;IpI5GvB,WoI8GQ,OAAM,iD;IATV,oBAAyB,sBpIpGtB,WoIoGsB,C;G;;SA9BzB,Y;MAAA,0B;K;;sDA0CA,iB;IACI,KAAM,KAAI,iBAAJ,C;EACV,C;2DAEA,iB;IACI,KAAM,QAAO,iBAAP,C;EACV,C;+CAEA,a;IACI,OAAO,UAAM,oBAAa,CAAb,CAAN,C;EACX,C;+CAEA,oB;IACI,oBAAa,CAAb,IAAkB,KAAM,K;IAExB,WAAW,KAAM,KAAN,GAAa,C;IACxB,aAAa,KAAM,OAAN,GAAe,C;IAC5B,YAAY,KAAM,MAAN,GAAc,C;IAE1B,cAAc,4B;IACd,OAAQ,QAAO,IAAI,CAAJ,IAAP,EAAc,IAAd,EAAoB,MAApB,EAA4B,KAA5B,C;IACR,OAAQ,QAAO,KAAI,CAAJ,QAAQ,CAAR,IAAP,EAAkB,IAAlB,EAAwB,MAAxB,EAAgC,KAAhC,C;IACR,OAAQ,QAAO,KAAI,CAAJ,QAAQ,CAAR,IAAP,EAAkB,IAAlB,EAAwB,MAAxB,EAAgC,KAAhC,C;IACR,OAAQ,QAAO,KAAI,CAAJ,QAAQ,CAAR,IAAP,EAAkB,IAAlB,EAAwB,MAAxB,EAAgC,KAAhC,C;IACR,2CAAoC,I;EACxC,C;+CAEA,kB;IACmB,QAAI,IAAK,K;IAAxB,e9IgyBwC,MAAW,KAAI,CAAJ,E8IhyBrB,MAAO,O9IgyBc,C;I8I/xBnD,aAAa,4BAAsB,M;IACnC,aAAU,CAAV,MAAkB,QAAlB,M;MACI,oBAAa,CAAb,IAAkB,OAAO,CAAP,CAAU,K;MAE5B,aAAa,OAAO,CAAP,C;MACb,OAAO,IAAI,CAAJ,IAAP,IAAgB,MAAO,KAAP,GAAc,C;MAC9B,OAAO,KAAI,CAAJ,QAAQ,CAAR,IAAP,IAAoB,MAAO,OAAP,GAAgB,C;MACpC,OAAO,KAAI,CAAJ,QAAQ,CAAR,IAAP,IAAoB,MAAO,MAAP,GAAe,C;;IAEvC,2CAAoC,I;EACxC,C;yEAEA,sB;IAA4E,qB;G;yEAE5E,sB;IA2BgB,IAAe,IAAf,EACM,M;IA3BlB,gBAAgB,UAAW,iBAAS,Q;IACpC,cAAc,kBAAY,Q;IAE1B,uBAAuB,YAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,C;IAGvB,cAAc,YAAQ,UAAW,cAAnB,EAAgC,gBAAhC,C;IACd,OAAQ,iBAAO,SAAP,E;IACR,OAAQ,iBAAO,OAAP,E;IAGR,SAAU,qB;IACV,kBAAkB,cAAA,SAAU,YAAV,C;IAClB,UAAU,WAAY,I;IACtB,WAAW,QAAA,WAAY,IAAZ,EAAkB,WAAY,IAA9B,C;IAEX,gBAA0B,CAAV,aAAU,kBAAgB,CAAC,GAAI,EAArB,EAAwB,CAAC,GAAI,EAA7B,EAAgC,CAAC,GAAI,EAArC,C;IAC1B,SAAU,aAAY,SAAZ,C;IACV,OAAQ,aAAY,SAAZ,C;IAER,YAAsB,CAAV,aAAU,YAAU,MAAM,IAAK,EAArB,EAAwB,MAAM,IAAK,EAAnC,EAAsC,GAAtC,C;IACtB,SAAU,aAAY,KAAZ,C;IACV,OAAQ,aAAY,KAAZ,C;IAER,c1I7K4C,gB;I0I8K5C,qBAAqB,OAAQ,cAAa,UAAb,C;IAC7B,YAAY,cAAe,OAAf,cAAe,MAAf,mC;IACM,SAAA,cAAe,MAAf,GAAuB,CAAvB,I;IAAlB,aAAU,CAAV,mBAAgD,CAAhD,C;MACI,QAAQ,cAAwB,mBAAV,KVi3B2B,CUj3BrB,CVi3BqB,CUj3BjB,CAAxB,EAAwD,mBAAd,KVi3BD,CUj3BO,IAAI,CAAJ,IVi3BP,CUj3Be,CAAxD,C;MACR,OAAQ,WAAI,CAAJ,C;;IAGZ,OzIhQ0D,YyIgQnD,OzIhQmD,C;EyIiQ9D,C;iDAEA,a;IAA6B,Q9ImnBqB,MAAW,K8InnBpB,C9ImnBoB,E8InnBjB,G9ImnBiB,C;I8InnBhC,O9I0mBqB,MAAW,K8I1mB5B,G9I0mB4B,EAAO,CAAP,C;G;;;;;;uD8IvmBjE,Y;IACW,Q;IAAP,OAAO,6EAAyC,IAAzC,Q;EACX,C;uDAEA,Y;IACW,Q;IAAP,OAAO,6EAAyC,IAAzC,Q;EACX,C;;;;;;EClRJ,6B;IAAuB,QAAQ,CAAQ,WAAR,EAAW,WAAX,CAAR,EAAuB,CAAQ,WAAR,EAAW,WAAX,CAAvB,EAAsC,CAAQ,WAAR,EAAW,WAAX,CAAtC,C;G;EACvB,0B;IAAyB,OAAS,aAAT,mBAAS,EAAa,GAAb,C;G;EAErB,2B;IAAC,gB;IAAmB,Y;IAC7B,oBAAyB,gB;IACzB,gBAAqB,a;IAGjB,iBAAW,oBAAmB,SAAnB,EAAyB,OAAzB,C;IACX,aAAO,4BAA2B,iBAA3B,C;G;qCAGX,iB;I/HkoWgB,Q;IAAhB,wB+HjoWI,K/HioWJ,gB;MAAgB,c+HjoWZ,K/HioWJ,M;MAA6B,O+HjoWN,aAAY,aAAZ,C;;EACvB,C;qCAEA,iB;I/H8nWgB,Q;IAAhB,wB+H7nWI,K/H6nWJ,gB;MAAgB,c+H7nWZ,K/H6nWJ,M;MAA6B,O+H7nWN,aAAY,aAAZ,C;;EACvB,C;qCAEA,mB;I/H0nWgB,Q;IAAhB,wB+HznWI,O/HynWJ,gB;MAAgB,c+HznWZ,O/HynWJ,M;MAA6B,O+HznWJ,cAAa,aAAb,C;;EACzB,C;6BAEA,Y;IAAwB,myB9G0ED,cAAqB,WAAP,wCAAO,CAArB,EAAmC,qBAAY,aAA/C,C;iBAiDR,kBAAkB,mBAAlB,C;eAQM,SAAK,2BAAkB,OAAvB,C;kBoGrJL,Qdi2J6C,Ccj2JpC,edi2JoC,C;;;;;"}