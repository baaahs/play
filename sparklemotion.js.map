{"version":3,"file":"sparklemotion.js","sources":["../../../../../src/commonMain/kotlin/baaahs/Brain.kt","kotlin/math.kt","collections/Sets.kt","collections/Maps.kt","collections/Collections.kt","kotlin/collections.kt","generated/_Collections.kt","../../../../../src/commonMain/kotlin/baaahs/Mapper.kt","../../../../../src/commonMain/kotlin/baaahs/Pinky.kt","util/Standard.kt","text/Strings.kt","kotlin/text/numberConversions.kt","kotlin/ranges.kt","generated/_ArraysJs.kt","arrayUtils.kt","../../../../../src/commonMain/kotlin/baaahs/shows/PanelTweenShow.kt","comparisons/Comparisons.kt","kotlin/Comparator.kt","../../../../../src/jsMain/kotlin/baaahs/SheepSimulator.kt","../../../../../../../../dummy.kt","../../../../../src/commonMain/kotlin/baaahs/Color.kt","../../../../../src/commonMain/kotlin/baaahs/Config.kt","../../../../../src/commonMain/kotlin/baaahs/Display.kt","../../../../../src/commonMain/kotlin/baaahs/Dmx.kt","../../../../../src/commonMain/kotlin/baaahs/Gadget.kt","generated/_Maps.kt","../../../../../src/commonMain/kotlin/baaahs/GadgetManager.kt","../../../../../src/commonMain/kotlin/baaahs/MediaDevices.kt","generated/_Arrays.kt","../../../../../src/commonMain/kotlin/baaahs/PubSub.kt","../../../../../src/commonMain/kotlin/baaahs/Shaders.kt","util/Lazy.kt","../../../../../src/commonMain/kotlin/baaahs/SheepModel.kt","../../../../../src/commonMain/kotlin/baaahs/Shenzarpy.kt","../../../../../src/commonMain/kotlin/baaahs/Show.kt","../../../../../src/commonMain/kotlin/baaahs/ShowRunner.kt","collections/MutableCollections.kt","../../../../../src/commonMain/kotlin/baaahs/SparkleMotion.kt","../../../../../src/commonMain/kotlin/baaahs/Topics.kt","../../../../../src/commonMain/kotlin/baaahs/gadgets/ColorPicker.kt","../../../../../src/commonMain/kotlin/baaahs/gadgets/Slider.kt","../../../../../src/commonMain/kotlin/baaahs/io/ByteArrayReader.kt","kotlin/numbers.kt","../../../../../src/commonMain/kotlin/baaahs/io/ByteArrayWriter.kt","../../../../../src/commonMain/kotlin/baaahs/net/FragmentingUdpLink.kt","../../../../../src/commonMain/kotlin/baaahs/net/Network.kt","../../../../../src/commonMain/kotlin/baaahs/proto/Protocol.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/CompositorShader.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/HeartShader.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/PixelShader.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/SimpleSpatialShader.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/SineWaveShader.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/SolidShader.kt","../../../../../src/commonMain/kotlin/baaahs/shaders/SparkleShader.kt","../../../../../src/commonMain/kotlin/baaahs/shows/AllShows.kt","../../../../../src/commonMain/kotlin/baaahs/shows/CompositeShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/HeartbleatShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/LifeyShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/PixelTweenShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/RandomShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/SimpleSpatialShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/SolidColorShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/SomeDumbShow.kt","../../../../../src/commonMain/kotlin/baaahs/shows/ThumpShow.kt","../../../../../src/commonMain/kotlin/baaahs/sim/FakeDmxUniverse.kt","../../../../../src/commonMain/kotlin/baaahs/sim/FakeNetwork.kt","../../../../../src/commonMain/kotlin/baaahs/util.kt","../../../../../src/jsMain/kotlin/baaahs/Displays.kt","org.w3c/org.w3c.dom.kt","../../../../../src/jsMain/kotlin/baaahs/JsMapperDisplay.kt","../../../../../src/jsMain/kotlin/baaahs/Launcher.kt","../../../../../src/jsMain/kotlin/baaahs/View.kt","../../../../../src/jsMain/kotlin/baaahs/WebUi.kt","../../../../../src/jsMain/kotlin/baaahs/geom/Vector2.kt","../../../../../src/jsMain/kotlin/baaahs/imaging/JsImaging.kt","../../../../../src/jsMain/kotlin/baaahs/jsImpl.kt","../../../../../src/jsMain/kotlin/baaahs/net/BrowserNetwork.kt","org.w3c/org.khronos.webgl.kt","../../../../../src/jsMain/kotlin/baaahs/sim/FakeMediaDevices.kt","../../../../../src/jsMain/kotlin/baaahs/visualizer/SwirlyPixelArranger.kt","../../../../../src/jsMain/kotlin/baaahs/visualizer/Visualizer.kt","../../../../../src/jsMain/kotlin/baaahs/visualizer/VizPanel.kt","../../../../../src/jsMain/kotlin/baaahs/visualizer/util.kt"],"sourcesContent":["package baaahs\n\nimport baaahs.io.ByteArrayReader\nimport baaahs.net.FragmentingUdpLink\nimport baaahs.net.Network\nimport baaahs.proto.*\nimport kotlinx.coroutines.delay\n\nclass Brain(\n    val id: String,\n    private val network: Network,\n    private val display: BrainDisplay,\n    private val pixels: Pixels\n) : Network.UdpListener {\n    private lateinit var link: Network.Link\n    private var lastInstructionsReceivedAtMs: Long = 0\n    private var surfaceName : String? = null\n    private var surface : Surface = UnmappedSurface()\n        set(value) { field = value; display.surface = value }\n    private var currentShaderDesc: ByteArray? = null\n    private var currentShaderBits: ShaderBits<*>? = null\n\n    suspend fun run() {\n        link = FragmentingUdpLink(network.link())\n        link.listenUdp(Ports.BRAIN, this)\n        display.id = id\n        display.haveLink(link)\n        display.onReset = {\n            println(\"Resetting Brain $id!\")\n            reset()\n        }\n\n        sendHello()\n    }\n\n    private suspend fun reset() {\n        lastInstructionsReceivedAtMs = 0\n        surfaceName = null\n        surface = UnmappedSurface()\n        currentShaderDesc = null\n        currentShaderBits = null\n\n        for (i in pixels.indices) pixels[i] = Color.WHITE\n\n        sendHello()\n    }\n\n    /**\n     * So that the JVM standalone can boot up and have a surface name without mapping\n     */\n    fun forcedSurfaceName(name: String) {\n        surfaceName = name\n    }\n\n    private suspend fun sendHello() {\n        while (true) {\n            val elapsedSinceMessageMs = getTimeMillis() - lastInstructionsReceivedAtMs\n            if (elapsedSinceMessageMs > 10000) {\n                if (lastInstructionsReceivedAtMs != 0L) {\n                    logger.info(\"$id: haven't heard from Pinky in ${elapsedSinceMessageMs}ms\")\n                }\n                link.broadcastUdp(Ports.PINKY, BrainHelloMessage(id, surfaceName))\n            }\n\n            delay(5000)\n        }\n    }\n\n    override fun receive(fromAddress: Network.Address, bytes: ByteArray) {\n        val now = getTimeMillis()\n        lastInstructionsReceivedAtMs = now\n\n        val reader = ByteArrayReader(bytes)\n\n        // Inline message parsing here so we can optimize stuff.\n        val type = Type.get(reader.readByte())\n        when (type) {\n            Type.BRAIN_PANEL_SHADE -> {\n                val shaderDesc = reader.readBytes()\n\n                // If possible, use the previously-built Shader stuff:\n                val theCurrentShaderDesc = currentShaderDesc\n                if (theCurrentShaderDesc == null || !theCurrentShaderDesc.contentEquals(shaderDesc)) {\n                    currentShaderDesc = shaderDesc\n\n                    @Suppress(\"UNCHECKED_CAST\")\n                    val shader = Shader.parse(ByteArrayReader(shaderDesc)) as Shader<Shader.Buffer>\n                    currentShaderBits = ShaderBits(\n                        shader,\n                        shader.createRenderer(surface),\n                        shader.createBuffer(surface)\n                    )\n                }\n\n                with(currentShaderBits!!) {\n                    read(reader)\n                    draw(pixels)\n                }\n            }\n\n            Type.BRAIN_ID_REQUEST -> {\n                val message = BrainIdRequest.parse(reader)\n                link.sendUdp(fromAddress, message.port, BrainIdResponse(id, surfaceName))\n            }\n\n            Type.BRAIN_MAPPING -> {\n                val message = BrainMappingMessage.parse(reader)\n                surfaceName = message.surfaceName\n                surface = if (message.surfaceName != null) {\n                    MappedSurface(message.pixelCount, message.pixelVertices, message.surfaceName)\n                } else {\n                    UnmappedSurface()\n                }\n\n                // next frame we'll need to recreate everything...\n                currentShaderDesc = null\n                currentShaderBits = null\n\n                link.broadcastUdp(Ports.PINKY, BrainHelloMessage(id, surfaceName))\n            }\n\n            // Other message types are ignored by Brains.\n            else -> {\n                // no-op\n            }\n        }\n    }\n\n    class ShaderBits<B : Shader.Buffer>(val shader: Shader<B>, val renderer: Shader.Renderer<B>, val buffer: B) {\n        fun read(reader: ByteArrayReader) = buffer.read(reader)\n        fun draw(pixels: Pixels) {\n            renderer.beginFrame(buffer, pixels.size)\n            for (i in pixels.indices) {\n                pixels[i] = renderer.draw(buffer, i)\n            }\n            renderer.endFrame()\n        }\n    }\n\n    inner class UnmappedSurface : Surface {\n        override val pixelCount: Int = SparkleMotion.MAX_PIXEL_COUNT\n\n        override fun describe(): String = \"unmapped\"\n    }\n\n    inner class MappedSurface(\n        override val pixelCount: Int,\n        var pixelVertices: List<Vector2F>? = null,\n        private val name: String\n    ) : Surface {\n        override fun describe(): String = name\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.withSign(sign: Double): Double {\n    val thisSignBit = js(\"Kotlin\").doubleSignBit(this).unsafeCast<Int>()\n    val newSignBit = js(\"Kotlin\").doubleSignBit(sign).unsafeCast<Int>()\n    return if (thisSignBit == newSignBit) this else -this\n}\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n\npackage kotlin.collections\n\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.readOnlySet\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n * @sample samples.collections.Collections.Sets.emptyMutableSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.mutableSet\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [LinkedHashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Calculate the initial capacity of a map, based on Guava's com.google.common.collect.Maps approach. This is equivalent\n * to the Collection constructor for HashSet, (c.size()/.75f) + 1, but provides further optimisations for very small or\n * very large sizes, allows support non-collection classes, and provides consistency for all map based class construction.\n */\n@PublishedApi\ninternal fun mapCapacity(expectedSize: Int): Int {\n    if (expectedSize < 3) {\n        return expectedSize + 1\n    }\n    if (expectedSize < INT_MAX_POWER_OF_TWO) {\n        return expectedSize + expectedSize / 3\n    }\n    return Int.MAX_VALUE // any large value\n}\n\nprivate const val INT_MAX_POWER_OF_TWO: Int = Int.MAX_VALUE / 2 + 1\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","package baaahs\n\nimport baaahs.imaging.Bitmap\nimport baaahs.imaging.Image\nimport baaahs.imaging.NativeBitmap\nimport baaahs.net.FragmentingUdpLink\nimport baaahs.net.Network\nimport baaahs.proto.*\nimport baaahs.shaders.PixelShader\nimport baaahs.shaders.SolidShader\nimport kotlinx.coroutines.*\nimport kotlin.math.min\nimport kotlin.random.Random\n\nclass Mapper(\n    private val network: Network,\n    sheepModel: SheepModel,\n    private val mapperDisplay: MapperDisplay,\n    mediaDevices: MediaDevices\n) : Network.UdpListener, MapperDisplay.Listener, CoroutineScope by MainScope() {\n    private val maxPixelsPerBrain = SparkleMotion.MAX_PIXEL_COUNT\n    val width = 640\n    val height = 300\n\n    val camera = mediaDevices.getCamera(width, height).apply {\n        onImage = { image -> haveImage(image) }\n    }\n    private var baseBitmap: Bitmap? = null\n    private lateinit var deltaBitmap: Bitmap\n    private var newChangeRegion: MediaDevices.Region? = null\n\n    private lateinit var link: Network.Link\n    private var isRunning: Boolean = true\n    private var isAligned: Boolean = false\n    private var isPaused: Boolean = false\n    private var captureBaseImage = false\n\n    private var suppressShowsJob: Job? = null\n    private val brainMappers: MutableMap<Network.Address, BrainMapper> = mutableMapOf()\n\n    init {\n        mapperDisplay.listen(this)\n        mapperDisplay.addWireframe(sheepModel)\n    }\n\n    fun start() = doRunBlocking {\n        link = FragmentingUdpLink(network.link())\n        link.listenUdp(Ports.MAPPER, this)\n\n        launch { run() }\n    }\n\n    override fun onStart() {\n        isAligned = true\n    }\n\n    override fun onPause() {\n        isPaused = !isPaused\n    }\n\n    override fun onStop() {\n        isAligned = false\n    }\n\n    override fun onClose() {\n        println(\"Shutting down Mapper...\")\n        isRunning = false\n        camera.close()\n\n        suppressShowsJob?.cancel()\n        link.broadcastUdp(Ports.PINKY, MapperHelloMessage(false))\n\n        mapperDisplay.close()\n    }\n\n    private val retries = (0..1)\n\n    suspend fun run() {\n        mapperDisplay.showMessage(\"ESTABLISHING UPLINK\u2026\")\n\n        // shut down Pinky, advertise for Brains...\n        retry {\n            link.broadcastUdp(Ports.PINKY, MapperHelloMessage(true))\n            delay(1000L)\n            link.broadcastUdp(Ports.BRAIN, solidColor(Color.BLACK))\n        }\n\n        // keep Pinky from waking up while we're running...\n        suppressShows()\n\n        retry {\n            link.broadcastUdp(Ports.BRAIN, BrainIdRequest(Ports.MAPPER))\n            delay(1000L)\n        }\n\n        // wait for responses from Brains\n        delay(1000L)\n\n        // Blackout\n        retry { link.broadcastUdp(Ports.BRAIN, solidColor(Color.BLACK)); delay(250L) }\n        delay(250L)\n\n        mapperDisplay.showMessage(\"READY PLAYER ONE\u2026\")\n        // Blackout\n        retry { link.broadcastUdp(Ports.BRAIN, solidColor(Color.WHITE)); delay(250L) }\n        delay(250L)\n\n        while (!isAligned) {\n            delay(500)\n\n            if (Random.nextFloat() < .1) {\n                mapperDisplay.showMessage(\"READY PLAYER ONE\u2026\")\n            } else if (Random.nextFloat() < .1) {\n                mapperDisplay.showMessage(\"ALIGN THY SHEEP\u2026\")\n            }\n        }\n\n        mapperDisplay.showMessage(\"CALIBRATING\u2026\")\n\n        // Blackout\n        retry { link.broadcastUdp(Ports.BRAIN, solidColor(Color.BLACK)); delay(250L) }\n        delay(250L)\n        captureBaseImage = true\n        delay(250L)\n\n        mapperDisplay.showMessage(\"MAPPING\u2026\")\n        mapperDisplay.showStats(brainMappers.size, 0, -1)\n\n        while (isRunning) {\n            println(\"identify brains...\")\n            // light up each brain in an arbitrary sequence...\n            brainMappers.values.forEach { brainMapper ->\n                retry { brainMapper.shade { solidColor(Color.WHITE) } }\n                delay(34L)\n\n                // wait for a new image to come it...\n                while (newChangeRegion == null) {\n                    delay(10)\n                }\n                val changeRegion = newChangeRegion!!\n                newChangeRegion = null\n\n                val candidates = mapperDisplay.getCandidateSurfaces(changeRegion)\n                mapperDisplay.showMessage2(\n                    \"Candidate panels: ${candidates.subList(\n                        0,\n                        min(5, candidates.size)\n                    ).map { it.name }}\"\n                )\n\n                println(\"Guessed panel ${candidates.first().name} for ${brainMapper.brainId}\")\n\n                maybePause()\n                retry { brainMapper.shade { solidColor(Color.BLACK) } }\n            }\n\n            delay(1000L)\n\n            println(\"identify pixels...\")\n            // light up each pixel...\n            val pixelShader = PixelShader()\n            val buffer = pixelShader.createBuffer(object : Surface {\n                override val pixelCount = SparkleMotion.MAX_PIXEL_COUNT\n\n                override fun describe(): String = \"Mapper surface\"\n            })\n            buffer.setAll(Color.BLACK)\n            for (i in 0 until maxPixelsPerBrain) {\n                if (i % 128 == 0) println(\"pixel $i... isRunning is $isRunning\")\n                buffer.colors[i] = Color.WHITE\n                link.broadcastUdp(Ports.BRAIN, BrainShaderMessage(pixelShader, buffer))\n                buffer.colors[i] = Color.BLACK\n                delay(34L)\n                maybePause()\n            }\n            println(\"done identifying pixels...\")\n\n            delay(1000L)\n        }\n        println(\"done identifying things... $isRunning\")\n\n        retry { link.broadcastUdp(Ports.PINKY, MapperHelloMessage(isRunning)) }\n    }\n\n    private suspend fun retry(fn: suspend () -> Unit) {\n        fn()\n        fn()\n    }\n\n    // keep Pinky from restarting a show up while Mapper is running...\n    private fun suppressShows() {\n        suppressShowsJob = launch(CoroutineName(\"Suppress Pinky\")) {\n            while (isRunning) {\n                delay(10000L)\n                link.broadcastUdp(Ports.PINKY, MapperHelloMessage(isRunning))\n            }\n        }\n    }\n\n    private suspend fun maybePause() {\n        while (isPaused) {\n            delay(100L)\n        }\n    }\n\n    private fun solidColor(color: Color): BrainShaderMessage {\n        val solidShader = SolidShader()\n        val buffer = solidShader.createBuffer(object : Surface {\n            override val pixelCount = SparkleMotion.MAX_PIXEL_COUNT\n\n            override fun describe(): String = \"Mapper surface\"\n        }).apply { this.color = color }\n        return BrainShaderMessage(solidShader, buffer)\n    }\n\n    override fun receive(fromAddress: Network.Address, bytes: ByteArray) {\n        val message = parse(bytes)\n        when (message) {\n            is BrainIdResponse -> {\n                val brainMapper = brainMappers.getOrPut(fromAddress) { BrainMapper(fromAddress, message.id) }\n                brainMapper.shade { solidColor(Color.GREEN) }\n            }\n\n            is PinkyPongMessage -> {\n                message.brainIds.forEach { id ->\n                    println(\"id = ${id}\")\n//                    display.\n                }\n            }\n        }\n    }\n\n    private fun haveImage(image: Image) {\n//        println(\"image: $image\")\n        mapperDisplay.showCamImage(image)\n\n        val bitmap = image.toBitmap()\n        if (captureBaseImage) {\n            baseBitmap = bitmap\n            deltaBitmap = NativeBitmap(bitmap.width, bitmap.height)\n            captureBaseImage = false\n        } else if (baseBitmap != null) {\n            deltaBitmap.copyFrom(baseBitmap!!)\n            deltaBitmap.subtract(bitmap)\n\n            val changeRegion: MediaDevices.Region = detectChangeRegion()\n            this.newChangeRegion = changeRegion\n\n            println(\"changeRegion = $changeRegion ${changeRegion.width} ${changeRegion.height}\")\n\n            mapperDisplay.showDiffImage(deltaBitmap, changeRegion)\n        }\n    }\n\n    private fun detectChangeRegion(): MediaDevices.Region {\n        var changeRegion: MediaDevices.Region = MediaDevices.Region(-1, -1, -1, -1)\n        deltaBitmap.withData { data ->\n            var x0 = -1\n            var y0 = -1\n            var x1 = -1\n            var y1 = -1\n\n            for (y in 0 until height) {\n                var yAnyDiff = false\n\n                for (x in 0 until width) {\n                    val pixDiff = data[(x + y * width) * 4 + 2 /* green component */].toInt()\n\n                    if (pixDiff != 0) {\n                        if (x0 == -1 || x0 > x) x0 = x\n                        if (x > x1) x1 = x\n                        yAnyDiff = true\n                    }\n                }\n\n                if (yAnyDiff) {\n                    if (y0 == -1) y0 = y\n                    y1 = y\n                }\n            }\n            changeRegion = MediaDevices.Region(x0, y0, x1, y1)\n            false\n        }\n        return changeRegion\n    }\n\n    inner class BrainMapper(private val address: Network.Address, val brainId: String) {\n        fun shade(shaderMessage: () -> BrainShaderMessage) {\n            link.sendUdp(address, Ports.BRAIN, shaderMessage())\n        }\n    }\n}\n\ninterface MapperDisplay {\n    fun listen(listener: Listener)\n\n    fun addWireframe(sheepModel: SheepModel)\n    fun getCandidateSurfaces(changeRegion: MediaDevices.Region): List<SheepModel.Panel>\n    fun showCamImage(image: Image)\n    fun showDiffImage(deltaBitmap: Bitmap, changeRegion: MediaDevices.Region)\n    fun showMessage(message: String)\n    fun showMessage2(message: String)\n    fun showStats(total: Int, mapped: Int, visible: Int)\n    fun close()\n\n    interface Listener {\n        fun onStart()\n        fun onPause()\n        fun onStop()\n        fun onClose()\n    }\n}","package baaahs\n\nimport baaahs.geom.Vector2\nimport baaahs.net.FragmentingUdpLink\nimport baaahs.net.Network\nimport baaahs.proto.*\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\n\nclass Pinky(\n    val sheepModel: SheepModel,\n    val shows: List<Show>,\n    val network: Network,\n    val dmxUniverse: Dmx.Universe,\n    val display: PinkyDisplay\n) : Network.UdpListener {\n    private val link = FragmentingUdpLink(network.link())\n    private val beatProvider = PinkyBeatProvider(120.0f)\n    private var mapperIsRunning = false\n    private var selectedShow = shows.first()\n        set(value) {\n            field = value\n            display.selectedShow = value\n            showRunner.nextShow = selectedShow\n        }\n\n    private val pubSub = PubSub.Server(link, Ports.PINKY_UI_TCP).apply { install(gadgetModule) }\n    private val gadgetManager = GadgetManager(pubSub)\n    private val showRunner =\n        ShowRunner(sheepModel, selectedShow, gadgetManager, beatProvider, dmxUniverse)\n    private val surfacesByName = sheepModel.allPanels.associateBy { it.name }\n    private val pixelsBySurface = mutableMapOf<Surface, Array<Vector2>>()\n    private val surfaceMappingsByBrain = mutableMapOf<BrainId, Surface>()\n\n    private val brainInfos: MutableMap<BrainId, BrainInfo> = mutableMapOf()\n    private val pendingBrainInfos: MutableMap<BrainId, BrainInfo> = mutableMapOf()\n\n    val address: Network.Address get() = link.myAddress\n    private val networkStats = NetworkStats()\n\n    suspend fun run(): Show.Renderer {\n        GlobalScope.launch { beatProvider.run() }\n\n        link.listenUdp(Ports.PINKY, this)\n\n        display.listShows(shows)\n        display.selectedShow = selectedShow\n\n        pubSub.publish(Topics.availableShows, shows.map { show -> show.name }) {}\n        val selectedShowChannel = pubSub.publish(Topics.selectedShow, shows[0].name) { selectedShow ->\n            this.selectedShow = shows.find { it.name == selectedShow }!!\n        }\n\n        display.onShowChange = {\n            this.selectedShow = display.selectedShow!!\n            selectedShowChannel.onChange(this.selectedShow.name)\n        }\n\n        while (true) {\n            if (mapperIsRunning) {\n                disableDmx()\n                delay(50)\n                continue\n            }\n\n            updateSurfaces()\n\n            networkStats.reset()\n            val elapsedMs = time {\n                drawNextFrame()\n            }\n            display.nextFrameMs = elapsedMs.toInt()\n            display.stats = networkStats\n\n            delay(50)\n        }\n    }\n\n    internal fun updateSurfaces() {\n        if (pendingBrainInfos.isNotEmpty()) {\n            val brainSurfacesToRemove = mutableListOf<ShowRunner.SurfaceReceiver>()\n            val brainSurfacesToAdd = mutableListOf<ShowRunner.SurfaceReceiver>()\n\n            pendingBrainInfos.forEach { (brainId, brainInfo) ->\n                val priorBrainInfo = brainInfos[brainId]\n                if (priorBrainInfo != null) {\n                    brainSurfacesToRemove.add(priorBrainInfo.surfaceReceiver)\n                }\n                brainSurfacesToAdd.add(brainInfo.surfaceReceiver)\n\n                brainInfos[brainId] = brainInfo\n            }\n\n            showRunner.surfacesChanged(brainSurfacesToAdd, brainSurfacesToRemove)\n\n            pendingBrainInfos.clear()\n        }\n\n        display.brainCount = brainInfos.size\n    }\n\n    internal fun drawNextFrame() {\n        showRunner.nextFrame()\n    }\n\n    private fun disableDmx() {\n        dmxUniverse.allOff()\n    }\n\n    override fun receive(fromAddress: Network.Address, bytes: ByteArray) {\n        val message = parse(bytes)\n        when (message) {\n            is BrainHelloMessage -> foundBrain(fromAddress, BrainId(message.brainId), message.surfaceName)\n            is MapperHelloMessage -> mapperIsRunning = message.isRunning\n        }\n    }\n\n    private fun maybeSendMapping(address: Network.Address, brainId: BrainId) {\n        val surface = surfaceMappingsByBrain[brainId]\n        if (surface != null && surface is SheepModel.Panel) {\n            val pixelLocations = pixelsBySurface[surface]\n            val pixelCount = pixelLocations?.size ?: -1\n            val pixelVertices = pixelLocations?.map { Vector2F(it.x.toFloat(), it.y.toFloat()) }\n                ?: emptyList()\n            val mappingMsg = BrainMappingMessage(brainId, surface.name, pixelCount, pixelVertices)\n            link.sendUdp(address, Ports.BRAIN, mappingMsg)\n        }\n    }\n\n    class UnknownSurface(val brainId: BrainId) : Surface {\n        override val pixelCount = SparkleMotion.PIXEL_COUNT_UNKNOWN\n\n        override fun describe(): String = \"Unknown surface for $brainId\"\n        override fun equals(other: Any?): Boolean = other is UnknownSurface && brainId.equals(other.brainId)\n        override fun hashCode(): Int = brainId.hashCode()\n    }\n\n    private fun foundBrain(\n        brainAddress: Network.Address,\n        brainId: BrainId,\n        surfaceName: String?\n    ) {\n        val surface = surfaceName?.let { surfacesByName[surfaceName] } ?: UnknownSurface(brainId)\n        if (surface is UnknownSurface) maybeSendMapping(brainAddress, brainId)\n\n        val priorBrainInfo = brainInfos[brainId]\n        if (priorBrainInfo != null) {\n            if (priorBrainInfo.brainId == brainId && priorBrainInfo.surface == surface) {\n                // Duplicate packet?\n//                logger.debug(\n//                    \"Ignore ${priorBrainInfo.brainId} ${priorBrainInfo.surface.describe()} ->\" +\n//                            \" ${surface.describe()} because probably duplicate?\"\n//                )\n                return\n            }\n\n//            logger.debug(\n//                \"Remapping ${priorBrainInfo.brainId} from ${priorBrainInfo.surface.describe()} ->\" +\n//                        \" ${surface.describe()}\"\n//            )\n        }\n\n        val surfaceReceiver = ShowRunner.SurfaceReceiver(surface) { shaderBuffer ->\n            val message = BrainShaderMessage(shaderBuffer.shader, shaderBuffer).toBytes()\n            link.sendUdp(brainAddress, Ports.BRAIN, message)\n\n            networkStats.packetsSent++\n            networkStats.bytesSent += message.size\n        }\n\n\n        val brainInfo = BrainInfo(brainAddress, brainId, surface, surfaceReceiver)\n//        logger.debug(\"Map ${brainInfo.brainId} to ${brainInfo.surface.describe()}\")\n        pendingBrainInfos[brainId] = brainInfo\n    }\n\n    fun providePanelMapping(brainId: BrainId, surface: Surface) {\n        surfaceMappingsByBrain[brainId] = surface\n    }\n\n    fun providePixelMapping(surface: Surface, pixelLocations: Array<Vector2>) {\n        pixelsBySurface[surface] = pixelLocations\n    }\n\n    interface BeatProvider {\n        var bpm: Float\n        val beat: Float\n    }\n\n    inner class PinkyBeatProvider(override var bpm: Float) : BeatProvider {\n        private var startTimeMillis = 0L\n        private var beatsPerMeasure = 4\n\n        private val millisPerBeat = 1000 / (bpm / 60)\n\n        override val beat: Float\n            get() {\n                val now = getTimeMillis()\n                return (now - startTimeMillis) / millisPerBeat % beatsPerMeasure\n            }\n\n        suspend fun run() {\n            startTimeMillis = getTimeMillis()\n\n            while (true) {\n                display.beat = beat.toInt()\n\n                val offsetMillis = getTimeMillis() - startTimeMillis\n                val millsPer = millisPerBeat\n                val delayTimeMillis = millsPer - offsetMillis % millsPer\n                delay(delayTimeMillis.toLong())\n            }\n        }\n    }\n\n    class NetworkStats(var bytesSent: Int = 0, var packetsSent: Int = 0) {\n        internal fun reset() {\n            bytesSent = 0\n            packetsSent = 0\n        }\n    }\n}\n\ndata class BrainId(val uuid: String)\n\nclass BrainInfo(\n    val address: Network.Address,\n    val brainId: BrainId,\n    val surface: Surface,\n    val surfaceReceiver: ShowRunner.SurfaceReceiver\n)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.append(this, 0, startIndex)\n    sb.append(replacement)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.append(this, 0, startIndex)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n\n/**\n * Returns `true` if the contents of this string is equal to the word \"true\", ignoring case, and `false` otherwise.\n */\npublic actual fun String.toBoolean(): Boolean = toLowerCase() == \"true\"\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toByte(): Byte = toByteOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toByte(radix: Int): Byte = toByteOrNull(radix) ?: numberFormatError(this)\n\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toShort(): Short = toShortOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toShort(radix: Int): Short = toShortOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toInt(): Int = toIntOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toInt(radix: Int): Int = toIntOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toLong(): Long = toLongOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toLong(radix: Int): Long = toLongOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Double] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toDouble(): Double = (+(this.asDynamic())).unsafeCast<Double>().also {\n    if (it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n        numberFormatError(this)\n}\n\n/**\n * Parses the string as a [Float] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloat(): Float = toDouble().unsafeCast<Float>()\n\n/**\n * Parses the string as a [Double] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\npublic actual fun String.toDoubleOrNull(): Double? = (+(this.asDynamic())).unsafeCast<Double>().takeIf {\n    !(it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n}\n\n/**\n * Parses the string as a [Float] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloatOrNull(): Float? = toDoubleOrNull().unsafeCast<Float?>()\n\n/**\n * Returns a string representation of this [Byte] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Byte.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Short] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Short.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Long] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Long.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))\n\n/**\n * Returns a string representation of this [Int] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Int.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))\n\nprivate fun String.isNaN(): Boolean = when (this.toLowerCase()) {\n    \"nan\", \"+nan\", \"-nan\" -> true\n    else -> false\n}\n\n/**\n * Checks whether the given [radix] is valid radix for string to number and number to string conversion.\n */\n@PublishedApi\ninternal actual fun checkRadix(radix: Int): Int {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"radix $radix was not in valid range 2..36\")\n    }\n    return radix\n}\n\ninternal actual fun digitOf(char: Char, radix: Int): Int = when {\n    char >= '0' && char <= '9' -> char - '0'\n    char >= 'A' && char <= 'Z' -> char - 'A' + 10\n    char >= 'a' && char <= 'z' -> char - 'a' + 10\n    else -> -1\n}.let { if (it >= radix) -1 else it }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.ranges\n\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun Float.rangeTo(that: Float): ClosedFloatingPointRange<Float> =\n    this.toDouble().rangeTo(that.toDouble()).unsafeCast<ClosedFloatingPointRange<Float>>()\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n",null,"package baaahs.shows\n\nimport baaahs.*\nimport baaahs.gadgets.Slider\nimport baaahs.shaders.CompositingMode\nimport baaahs.shaders.CompositorShader\nimport baaahs.shaders.SolidShader\nimport baaahs.shaders.SparkleShader\n\nobject PanelTweenShow : Show(\"PanelTweenShow\") {\n    override fun createRenderer(sheepModel: SheepModel, showRunner: ShowRunner): Renderer {\n        val colorArray = arrayOf(\n            Color.from(\"#FF8A47\"),\n            Color.from(\"#FC6170\"),\n            Color.from(\"#8CEEEE\"),\n            Color.from(\"#26BFBF\"),\n            Color.from(\"#FFD747\")\n        )\n\n        return object : Renderer {\n            val slider = showRunner.getGadget(\"sparkliness\", Slider(\"Sparkliness\", 0f))\n\n            val solidShader = SolidShader()\n            val sparkleShader = SparkleShader()\n\n            val shaderBuffers = showRunner.allSurfaces.map { surface ->\n                val solidShaderBuffer = showRunner.getShaderBuffer(surface, solidShader)\n                val sparkleShaderBuffer = showRunner.getShaderBuffer(surface, sparkleShader)\n                val compositorShaderBuffer = showRunner.getCompositorBuffer(\n                    surface, solidShaderBuffer, sparkleShaderBuffer, CompositingMode.ADD, 1f\n                )\n\n                Shaders(solidShaderBuffer, sparkleShaderBuffer, compositorShaderBuffer)\n            }\n            val fadeTimeMs = 500\n\n            override fun nextFrame() {\n                val now = getTimeMillis().and(0xfffffff).toInt()\n                shaderBuffers.forEachIndexed() { number, bufs ->\n                    val colorIndex = (now / fadeTimeMs + number) % colorArray.size\n                    val startColor = colorArray[colorIndex]\n                    val endColor = colorArray[(colorIndex + 1) % colorArray.size]\n                    val tweenedColor = startColor.fade(endColor, (now % fadeTimeMs) / fadeTimeMs.toFloat())\n\n                    bufs.apply {\n                        solidShader.color = tweenedColor\n\n                        sparkleShader.color = Color.WHITE\n                        sparkleShader.sparkliness = slider.value\n                    }\n                }\n            }\n        }\n    }\n\n    class Shaders(\n        val solidShader: SolidShader.Buffer,\n        val sparkleShader: SparkleShader.Buffer,\n        val compositorShader: CompositorShader.Buffer\n    )\n\n    val SheepModel.Panel.number: Int\n        get() = Regex(\"\\\\d+\").find(name)?.value?.toInt() ?: -1\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual interface Comparator<T> {\n    @JsName(\"compare\")\n    actual fun compare(a: T, b: T): Int\n}\n\npublic actual inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n","package baaahs\n\nimport baaahs.proto.Ports\nimport baaahs.shows.AllShows\nimport baaahs.sim.FakeDmxUniverse\nimport baaahs.sim.FakeMediaDevices\nimport baaahs.sim.FakeNetwork\nimport baaahs.visualizer.Visualizer\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\nimport kotlin.browser.document\n\nclass SheepSimulator {\n    private val display = JsDisplay()\n    private val network = FakeNetwork(display = display.forNetwork())\n    private val dmxUniverse = FakeDmxUniverse()\n    private val sheepModel = SheepModel().apply { load() }\n    private val shows = AllShows.allShows\n    private val visualizer = Visualizer(sheepModel)\n    private val pinky = Pinky(sheepModel, shows, network, dmxUniverse, display.forPinky())\n\n    fun start() = doRunBlocking {\n        pinkyScope.launch { pinky.run() }\n\n        val launcher = Launcher(document.getElementById(\"launcher\")!!)\n        launcher.add(\"Web UI\") {\n            val webUiClientLink = network.link()\n            val pubSub = PubSub.Client(webUiClientLink, pinky.address, Ports.PINKY_UI_TCP).apply {\n                install(gadgetModule)\n            }\n            document.asDynamic().createUiApp(pubSub)\n        }.also { delay(1000); it.click() }\n\n        launcher.add(\"Mapper\") {\n            val mapperDisplay = JsMapperDisplay(visualizer)\n\n            val mapper = Mapper(network, sheepModel, mapperDisplay, FakeMediaDevices(visualizer))\n            mapperScope.launch { mapper.start() }\n\n            mapperDisplay\n        }\n\n        sheepModel.panels.sortedBy(SheepModel.Panel::name).forEachIndexed { index, panel ->\n//            if (panel.name != \"17L\") return@forEachIndexed\n\n            val jsPanel = visualizer.addPanel(panel)\n\n            val pixelLocations = jsPanel.getPixelLocations()!!\n            pinky.providePixelMapping(panel, pixelLocations)\n\n            val brain = Brain(\"brain//$index\", network, display.forBrain(),  jsPanel.vizPixels ?: NullPixels)\n            pinky.providePanelMapping(BrainId(brain.id), panel)\n            brainScope.launch { randomDelay(1000); brain.run() }\n        }\n\n        sheepModel.eyes.forEach { eye ->\n            visualizer.addMovingHead(eye, dmxUniverse)\n        }\n\n//        val users = storage.users.transaction { store -> store.getAll() }\n//        println(\"users = ${users}\")\n\n        doRunBlocking {\n            delay(200000L)\n        }\n    }\n\n    object NullPixels : Pixels {\n        override val size = 0\n\n        override fun get(i: Int): Color = Color.BLACK\n        override fun set(i: Int, color: Color) {}\n        override fun set(colors: Array<Color>) {}\n    }\n\n    private val pinkyScope = CoroutineScope(Dispatchers.Main)\n    private val brainScope = CoroutineScope(Dispatchers.Main)\n    private val mapperScope = CoroutineScope(Dispatchers.Main)\n}\n",null,"package baaahs\n\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlinx.serialization.*\nimport kotlinx.serialization.internal.IntDescriptor\nimport kotlin.js.JsName\nimport kotlin.math.max\nimport kotlin.math.min\nimport kotlin.math.sqrt\nimport kotlin.random.Random\n\n/**\n * Canonical representation of a color.\n */\n@Serializable\ndata class Color(val argb: Int) {\n    /** Values are bounded at `0..255`. */\n    constructor(red: Float, green: Float, blue: Float, alpha: Float = 1f) : this(asArgb(red, green, blue, alpha))\n\n    /** Values are bounded at `0f..1f`. */\n    constructor(red: Int, green: Int, blue: Int, alpha: Int = 255) : this(asArgb(red, green, blue, alpha))\n\n    fun serialize(writer: ByteArrayWriter) = writer.writeInt(argb)\n\n    @Transient\n    val alphaI: Int\n        get() = alphaI(argb)\n    @Transient\n    val redI: Int\n        get() = redI(argb)\n    @Transient\n    val greenI: Int\n        get() = greenI(argb)\n    @Transient\n    val blueI: Int\n        get() = blueI(argb)\n\n    @Transient\n    val alphaF: Float\n        get() = alphaI.toFloat() / 255\n    @Transient\n    val redF: Float\n        get() = redI.toFloat() / 255\n    @Transient\n    val greenF: Float\n        get() = greenI.toFloat() / 255\n    @Transient\n    val blueF: Float\n        get() = blueI.toFloat() / 255\n\n    fun alphaI(value: Int) = value shr 24 and 0xff\n    fun redI(value: Int) = value shr 16 and 0xff\n    fun greenI(value: Int) = value shr 8 and 0xff\n    fun blueI(value: Int) = value and 0xff\n\n    val rgb: Int get() = argb and 0xffffff\n    fun toInt(): Int = argb\n\n    @JsName(\"toHexString\")\n    fun toHexString() =\n        \"#\" + maybe(alphaI) + redI.toHexString() + greenI.toHexString() + blueI.toHexString()\n\n    private fun maybe(alphaI: Int): String = if (alphaI == 255) \"\" else alphaI.toHexString()\n\n    fun Int.toHexString(): String {\n        if (this < 0) {\n            throw Exception(\"can't toHexString() negative ints\")\n        }\n\n        if (this < 16) {\n            return \"0\" + toString(16)\n        } else {\n            return toString(16)\n        }\n    }\n\n    /** Super-naive approximation of desaturation. */\n    fun withSaturation(saturation: Float): Color {\n        val desaturation = 1 - saturation\n        return Color(\n            redF + (1 - redF) * desaturation,\n            greenF + (1 - greenF) * desaturation,\n            blueF + (1 - blueF) * desaturation,\n            alphaF\n        )\n    }\n\n    fun distanceTo(other: Color): Float {\n        val dist = square(other.redF - redF) + square(other.greenF - greenF) + square(other.blueF - blueF)\n        return sqrt(dist / 3)\n    }\n\n    private fun square(f: Float) = f * f\n\n    fun plus(other: Color): Color =\n        Color(redI + other.redI, greenI + other.greenI, blueI + other.blueI, alphaI)\n\n    fun fade(other: Color, amount: Float = 0.5f): Color {\n        val amountThis = 1 - amount\n\n        return Color(\n            redF * amountThis + other.redF * amount,\n            greenF * amountThis + other.greenF * amount,\n            blueF * amountThis + other.blueF * amount,\n            alphaF * amountThis + other.alphaF * amount\n        )\n    }\n\n    fun opaque(): Color = Color(argb or 0xff000000.toInt())\n\n    override fun toString(): String {\n        return \"Color(${toHexString()})\"\n    }\n\n    @Serializer(forClass = Color::class)\n    companion object : KSerializer<Color> {\n        val BLACK = Color(0, 0, 0)\n        val WHITE = Color(255, 255, 255)\n        val RED = Color(255, 0, 0)\n        val ORANGE = Color(255, 127, 0)\n        val YELLOW = Color(255, 255, 0)\n        val GREEN = Color(0, 255, 0)\n        val BLUE = Color(0, 0, 255)\n        val PURPLE = Color(200, 0, 212)\n        val TRANSPARENT = Color(0, 0, 0, 0)\n\n        fun random() = Color(\n            Random.nextInt() and 0xff,\n            Random.nextInt() and 0xff,\n            Random.nextInt() and 0xff\n        )\n\n        fun parse(reader: ByteArrayReader) = Color(reader.readInt())\n\n        @JsName(\"fromInts\")\n        fun from(i: Int) = Color(i)\n\n        @JsName(\"fromString\")\n        fun from(hex: String): Color {\n            val hexDigits = hex.trimStart('#')\n            if (hexDigits.length == 6) {\n                val l: Int = 0xff000000.toInt()\n                // huh? that's not an Int already? I'm supposed to do twos-complement math and negate? blech Kotlin.\n                return Color((l or hexDigits.toInt(16)).toInt())\n            }\n            throw IllegalArgumentException(\"unknown color \\\"$hex\\\"\")\n        }\n\n        private fun asArgb(red: Float, green: Float, blue: Float, alpha: Float = 1f): Int {\n            val asArgb = asArgb(asInt(red), asInt(green), asInt(blue), asInt(alpha))\n            return asArgb\n        }\n\n        private fun asArgb(red: Int, green: Int, blue: Int, alpha: Int = 255): Int {\n            return ((bounded(alpha) shl 24)\n                    or (bounded(red) shl 16)\n                    or (bounded(green) shl 8)\n                    or (bounded(blue)))\n        }\n\n        private fun bounded(i: Int): Int = max(0, min(255, i))\n        private fun bounded(f: Float): Float = max(0f, min(1f, f))\n        private fun asInt(f: Float): Int = (bounded(f) * 255).toInt()\n\n        override val descriptor: SerialDescriptor = IntDescriptor.withName(\"Color\")\n        override fun serialize(encoder: Encoder, obj: Color) = encoder.encodeInt(obj.argb)\n        override fun deserialize(decoder: Decoder): Color = Color(decoder.decodeInt())\n    }\n}","package baaahs\n\npublic class Config {\n    companion object {\n        val DMX_DEVICES: Map<String, Int> = mapOf(\n            Pair(\"leftEye\", 1),\n            Pair(\"rightEye\", 17)\n        )\n    }\n\n\n    class MovingHeadConfig(val deviceType: Dmx.DeviceType, val baseChannel: Int)\n}\n","package baaahs\n\nimport baaahs.net.Network\n\ninterface Display {\n    fun forNetwork(): NetworkDisplay\n    fun forPinky(): PinkyDisplay\n    fun forBrain(): BrainDisplay\n}\n\ninterface NetworkDisplay {\n    var packetLossRate: Float\n    fun receivedPacket()\n    fun droppedPacket()\n}\n\ninterface PinkyDisplay {\n    fun listShows(shows: List<Show>)\n\n    var brainCount: Int\n    var beat: Int\n    var onShowChange: (() -> Unit)\n    var selectedShow: Show?\n    var nextFrameMs: Int\n    var stats: Pinky.NetworkStats?\n}\n\nopen class StubPinkyDisplay : PinkyDisplay {\n    override fun listShows(shows: List<Show>) {\n    }\n\n    override var brainCount = 0\n    override var beat = 0\n    override var onShowChange: () -> Unit = { }\n    override var selectedShow: Show? = null\n    override var nextFrameMs: Int = 0\n    override var stats: Pinky.NetworkStats? = null\n}\n\ninterface BrainDisplay {\n    var id: String?\n    var surface: Surface?\n    var onReset: suspend () -> Unit\n    fun haveLink(link: Network.Link)\n}\n","package baaahs\n\ninterface Dmx {\n    abstract class Universe {\n        abstract fun writer(baseChannel: Int, channelCount: Int): Buffer\n        abstract fun sendFrame()\n        abstract fun allOff()\n    }\n\n    class Buffer(private val channels: ByteArray, val baseChannel: Int, val channelCount: Int) {\n        operator fun get(index: Int): Byte {\n            boundsCheck(index)\n            return channels[baseChannel + index]\n        }\n\n        operator fun set(index: Int, value: Byte) {\n            boundsCheck(index)\n            channels[baseChannel + index] = value\n        }\n\n        private fun boundsCheck(index: Int) {\n            if (index < 0 || index >= channelCount) {\n                throw Exception(\"index out of bounds: $index >= ${channelCount}\")\n            }\n        }\n    }\n\n    open class DeviceType(val channelCount: Int)\n}\n","package baaahs\n\nimport baaahs.gadgets.ColorPicker\nimport baaahs.gadgets.Slider\nimport kotlinx.serialization.*\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\nimport kotlinx.serialization.json.JsonElement\nimport kotlinx.serialization.modules.SerializersModule\nimport kotlin.js.JsName\nimport kotlin.properties.ReadWriteProperty\nimport kotlin.reflect.KProperty\n\n/**\n * Base class for user input gadgets.\n *\n * Gadgets may be requested by a [Show]:\n *\n * ```kotlin\n * val sparklinessSlider = showRunner.getGadget(Slider(\"Sparkliness\"))\n *\n * fun nextFrame() {\n *   println(\"Sparkliness is ${sparklinessSlider.value}.\")\n * }\n * ```\n *\n * Mutable values in a gadget should be declared like this:\n *\n * ```kotlin\n *     var value: Float by updatable(\"value\", initialValue, Float.serializer())\n * ```\n *\n * Mutable values _should not_ be included in tests for equality.\n */\nopen class Gadget {\n    @Transient\n    private val listeners = mutableSetOf<GadgetListener>()\n\n    @JsName(\"listen\")\n    fun listen(gadgetListener: GadgetListener) {\n        if (!listeners.add(gadgetListener)) throw IllegalStateException(\"$gadgetListener already listening to $this\")\n    }\n\n    @JsName(\"unlisten\")\n    fun unlisten(gadgetListener: GadgetListener) {\n        if (!listeners.remove(gadgetListener)) throw IllegalStateException(\"$gadgetListener isn't listening to $this\")\n    }\n\n    @JsName(\"withoutTriggering\")\n    fun changed() = listeners.forEach { it.onChanged(this) }\n\n    fun withoutTriggering(gadgetListener: GadgetListener, fn: () -> Unit) {\n        unlisten(gadgetListener)\n        try {\n            fn()\n        } finally {\n            listen(gadgetListener)\n        }\n    }\n\n    protected fun <T> updatable(name: String, initialValue: T, serializer: KSerializer<T>) =\n        GadgetValueObserver(name, initialValue, serializer, state) { changed() }\n\n    val state: MutableMap<String, JsonElement> = hashMapOf()\n}\n\ninterface GadgetListener {\n    @JsName(\"onChanged\")\n    fun onChanged(gadget: Gadget)\n}\n\nclass GadgetValueObserver<T>(\n    val name: String,\n    val initialValue: T,\n    private val serializer: KSerializer<T>,\n    val data: MutableMap<String, JsonElement>,\n    val onChange: () -> Unit\n) : ReadWriteProperty<Gadget, T> {\n    override fun getValue(thisRef: Gadget, property: KProperty<*>): T {\n        val value = data[name]\n        return if (value == null) initialValue else { jsonParser.fromJson(serializer, value) }\n    }\n\n    override fun setValue(thisRef: Gadget, property: KProperty<*>, value: T) {\n        if (getValue(thisRef, property) != value) {\n            data[name] = jsonParser.toJson(serializer, value)\n            onChange()\n        }\n    }\n}\n\n@Serializable()\nclass GadgetData(val name: String, @Polymorphic var gadget: Gadget, val topicName: String)\n\nval GadgetDataSerializer = (String.serializer() to JsonElement.serializer()).map\n\nclass GadgetDisplay(pubSub: PubSub.Client, onUpdatedGadgets: (Array<GadgetData>) -> Unit) {\n    val activeGadgets = mutableListOf<GadgetData>()\n    val channels = hashMapOf<String, PubSub.Channel<Map<String, JsonElement>>>()\n\n    init {\n        pubSub.subscribe(Topics.activeGadgets) { gadgetDatas ->\n            activeGadgets.clear()\n            channels.forEach { it.value.unsubscribe() }\n            channels.clear()\n\n            gadgetDatas.forEach { gadgetData ->\n                val gadget = gadgetData.gadget\n                val topicName = gadgetData.topicName\n\n                val listener = object : GadgetListener {\n                    override fun onChanged(gadget: Gadget) {\n                        val observer = channels[topicName]\n                        if (observer == null) {\n                            println(\"Huh, no observer for $topicName; discarding update (know about ${channels.keys})\")\n                        } else {\n                            observer.onChange(gadget.state)\n                        }\n                    }\n                }\n                gadget.listen(listener)\n\n                channels[topicName] =\n                    pubSub.subscribe(PubSub.Topic(topicName, GadgetDataSerializer)) { json ->\n                        gadget.apply {\n                            withoutTriggering(listener) {\n                                gadget.state.putAll(json)\n                            }\n                        }\n                    }\n\n                activeGadgets.add(gadgetData)\n            }\n\n            onUpdatedGadgets(activeGadgets.toTypedArray())\n        }\n    }\n}\n\nval gadgetModule = SerializersModule {\n    polymorphic(Gadget::class) {\n        ColorPicker::class with ColorPicker.serializer()\n        Slider::class with Slider.serializer()\n    }\n}\n\nprivate val jsonParser = Json(JsonConfiguration.Stable)\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns a [List] containing all key-value pairs.\n */\npublic fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>> {\n    if (size == 0)\n        return emptyList()\n    val iterator = entries.iterator()\n    if (!iterator.hasNext())\n        return emptyList()\n    val first = iterator.next()\n    if (!iterator.hasNext())\n        return listOf(first.toPair())\n    val result = ArrayList<Pair<K, V>>(size)\n    result.add(first.toPair())\n    do {\n        result.add(iterator.next().toPair())\n    } while (iterator.hasNext())\n    return result\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n */\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each entry in the original map.\n * \n * @sample samples.collections.Maps.Transformations.mapToList\n */\npublic inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each entry in the original map.\n */\npublic inline fun <K, V, R : Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each entry in the original map\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each entry of the original map\n * and appends the results to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns `true` if all entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if map has at least one entry.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <K, V> Map<out K, V>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one entry matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of entries in this map.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of entries matching the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int {\n    if (isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Performs the given [action] on each entry.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.maxBy(selector)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.maxWith(comparator)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.minBy(selector)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.\n */\npublic fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.minWith(comparator)\n}\n\n/**\n * Returns `true` if the map has no entries.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <K, V> Map<out K, V>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no entries match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <K, V> Map<out K, V>.none(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each entry and returns the map itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original map returning its entries when being iterated.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.asIterable(): Iterable<Map.Entry<K, V>> {\n    return entries\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.\n */\npublic fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>> {\n    return entries.asSequence()\n}\n\n","package baaahs\n\nimport kotlinx.serialization.json.JsonElement\n\nclass GadgetManager(private val pubSub: PubSub.Server) {\n    private val activeGadgets = mutableListOf<GadgetData>()\n    private val activeGadgetChannel = pubSub.publish(Topics.activeGadgets, activeGadgets) { }\n\n    private val gadgets = mutableMapOf<String, GadgetInfo>()\n    private val priorRequestedGadgets = mutableListOf<Pair<String, Gadget>>()\n    private var nextGadgetId = 1\n\n    fun clear() {\n        gadgets.values.forEach { gadgetChannel -> gadgetChannel.channel.unsubscribe() }\n        gadgets.clear()\n        activeGadgets.clear()\n    }\n\n    fun sync(\n        requestedGadgets: List<Pair<String, Gadget>>,\n        restoreState: Map<String, Map<String, JsonElement>> = emptyMap()\n    ) {\n        // First, update state on new gadgets.\n        requestedGadgets.forEach { (name, gadget) ->\n            restoreState[name]?.let { state -> gadget.state.putAll(state) }\n        }\n\n        if (priorRequestedGadgets == requestedGadgets) {\n            requestedGadgets.zip(priorRequestedGadgets).forEach { (new, old) ->\n                val (name, oldGadget) = old\n                val newGadget = new.second\n\n                val gadgetInfo = gadgets[name]!!\n                gadgetInfo.channel.replaceOnUpdate { updated -> newGadget.state.putAll(updated) }\n                gadgetInfo.gadgetData.gadget = newGadget\n\n                if (oldGadget.state != newGadget.state) {\n                    gadgetInfo.channel.onChange(newGadget.state)\n                }\n            }\n        } else {\n            activeGadgets.clear()\n            requestedGadgets.forEach { (name, gadget) ->\n                val gadgetId = nextGadgetId++\n\n                val topic =\n                    PubSub.Topic(\"/gadgets/${gadget::class.simpleName}/$gadgetId\", GadgetDataSerializer)\n\n                val channel = pubSub.publish(topic, gadget.state) { updated -> gadget.state.putAll(updated) }\n                val gadgetData = GadgetData(name, gadget, topic.name)\n                activeGadgets.add(gadgetData)\n                gadgets[name] = GadgetInfo(topic, channel, gadgetData)\n            }\n            activeGadgetChannel.onChange(activeGadgets)\n        }\n\n        priorRequestedGadgets.clear()\n        priorRequestedGadgets.addAll(requestedGadgets)\n    }\n\n    fun getGadgetsState(): Map<String, Map<String, JsonElement>> {\n        return activeGadgets.associate { gadgetData ->\n            gadgetData.name to gadgetData.gadget.state\n        }\n    }\n\n    internal fun findGadget(name: String) = gadgets[name]?.gadgetData?.gadget\n    internal fun findGadgetInfo(name: String) = gadgets[name]\n\n    class GadgetInfo(\n        val topic: PubSub.Topic<Map<String, JsonElement>>,\n        val channel: PubSub.Channel<Map<String, JsonElement>>,\n        val gadgetData: GadgetData\n    )\n}","package baaahs\n\nimport baaahs.imaging.Image\nimport kotlin.math.sqrt\n\ninterface MediaDevices {\n    fun getCamera(width: Int, height: Int): Camera\n\n    interface Camera {\n        var onImage: (image: Image) -> Unit\n\n        fun close()\n    }\n\n    data class Region(val x0: Int, val y0: Int, val x1: Int, val y1: Int) {\n        val width = x1 - x0\n        val height = y1 - y0\n\n        val centerX = x1 - x0\n        val centerY = y1 - y0\n\n        fun distanceTo(other: Region): Float {\n            val dX = centerX - other.centerX\n            val dY = centerY - other.centerY\n\n            return sqrt((dX * dX + dY * dY).toDouble()).toFloat()\n        }\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","package baaahs\n\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport baaahs.net.Network\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\nimport kotlinx.serialization.modules.EmptyModule\nimport kotlinx.serialization.modules.SerialModule\nimport kotlinx.serialization.modules.plus\nimport kotlin.js.JsName\n\nabstract class PubSub {\n\n    companion object {\n        fun listen(networkLink: Network.Link, port: Int): Server {\n            return Server(networkLink, port)\n        }\n\n        fun connect(networkLink: Network.Link, address: Network.Address, port: Int): Client {\n            return Client(networkLink, address, port)\n        }\n    }\n\n    open class Origin\n\n    interface Channel<T> {\n        @JsName(\"onChange\")\n        fun onChange(t: T)\n\n        fun replaceOnUpdate(onUpdate: (T) -> Unit)\n\n        fun unsubscribe()\n    }\n\n    data class Topic<T>(\n        val name: String,\n        val serializer: KSerializer<T>\n    )\n\n    abstract class Listener(private val origin: Origin) {\n        fun onUpdate(data: String, fromOrigin: Origin) {\n            if (origin !== fromOrigin) {\n                onUpdate(data)\n            }\n        }\n\n        abstract fun onUpdate(data: String)\n    }\n\n    class TopicInfo(val name: String, var data: String? = null) {\n        val listeners: MutableList<Listener> = mutableListOf()\n\n        fun notify(jsonData: String, origin: Origin) {\n            data = jsonData\n            listeners.forEach { listener -> listener.onUpdate(jsonData, origin) }\n        }\n    }\n\n    open class Connection(\n        private val name: String,\n        private val topics: MutableMap<String, TopicInfo>\n    ) : Origin(), Network.TcpListener {\n        protected var connection: Network.TcpConnection? = null\n        private val toSend: MutableList<ByteArray> = mutableListOf()\n\n        override fun connected(tcpConnection: Network.TcpConnection) {\n            logger.debug(\"[${tcpConnection.fromAddress} -> $name] PubSub: new $this connection\")\n            connection = tcpConnection\n            toSend.forEach { tcpConnection.send(it) }\n            toSend.clear()\n        }\n\n        override fun receive(tcpConnection: Network.TcpConnection, bytes: ByteArray) {\n            val reader = ByteArrayReader(bytes)\n            when (val command = reader.readString()) {\n                \"sub\" -> {\n                    val topicName = reader.readString()\n                    println(\"[${tcpConnection.fromAddress} -> $name] sub $topicName\")\n\n                    val topicInfo = topics.getOrPut(topicName) { TopicInfo(topicName) }\n                    val listener = object : Listener(this) {\n                        override fun onUpdate(data: String) = sendTopicUpdate(topicName, data)\n                    }\n                    topicInfo.listeners.add(listener)\n\n                    val topicData = topicInfo.data\n                    if (topicData != null) {\n                        listener.onUpdate(topicData)\n                    }\n                }\n\n                \"update\" -> {\n                    val topicName = reader.readString()\n                    val data = reader.readString()\n                    println(\"[${tcpConnection.fromAddress} -> $name] update $topicName $data\")\n\n                    val topicInfo = topics[topicName]\n                    topicInfo?.notify(data, this)\n                }\n\n                else -> {\n                    IllegalArgumentException(\"huh? don't know what to do with $command\")\n                }\n            }\n        }\n\n        fun sendTopicUpdate(name: String, data: String) {\n            val writer = ByteArrayWriter()\n            println(\"-> update $name $data to ${connection?.toAddress}\")\n            writer.writeString(\"update\")\n            writer.writeString(name)\n            writer.writeString(data)\n            sendCommand(writer.toBytes())\n        }\n\n        fun sendTopicSub(topicName: String) {\n            val writer = ByteArrayWriter()\n            writer.writeString(\"sub\")\n            writer.writeString(topicName)\n            sendCommand(writer.toBytes())\n        }\n\n        override fun reset(tcpConnection: Network.TcpConnection) {\n            TODO(\"PubSub.Connection.reset not implemented\")\n        }\n\n        private fun sendCommand(bytes: ByteArray) {\n            val tcpConnection = connection\n            if (tcpConnection == null) {\n                toSend.add(bytes)\n            } else {\n                tcpConnection.send(bytes)\n            }\n        }\n    }\n\n    open class Endpoint {\n        var serialModule: SerialModule = EmptyModule\n        var json = Json(JsonConfiguration.Stable, serialModule)\n\n        fun install(toInstall: SerialModule) {\n            serialModule = serialModule.plus(toInstall)\n            json = Json(JsonConfiguration.Stable, serialModule)\n        }\n    }\n\n    class Server(link: Network.Link, port: Int) : Endpoint(), Network.TcpServerSocketListener {\n        private val topics: MutableMap<String, TopicInfo> = hashMapOf()\n\n        init {\n            link.listenTcp(port, this)\n        }\n\n        override fun incomingConnection(fromConnection: Network.TcpConnection): Network.TcpListener {\n            return Connection(\"server\", topics)\n        }\n\n        fun <T : Any> publish(topic: Topic<T>, data: T, onUpdate: (T) -> Unit): Channel<T> {\n            val publisher = Origin()\n            val topicName = topic.name\n            val jsonData = json.stringify(topic.serializer, data)\n            val topicInfo = topics.getOrPut(topicName) { TopicInfo(topicName) }\n            val listener = PublisherListener(topic, publisher, onUpdate)\n            topicInfo.listeners.add(listener)\n            topicInfo.notify(jsonData, publisher)\n\n            return object : Channel<T> {\n                override fun onChange(t: T) {\n                    topicInfo.notify(json.stringify(topic.serializer, t), publisher)\n                }\n\n                override fun replaceOnUpdate(onUpdate: (T) -> Unit) {\n                    listener.onUpdate = onUpdate\n                }\n\n                override fun unsubscribe() {\n                    // TODO(\"${CLASS_NAME}.unsubscribe not implemented\")\n                }\n            }\n        }\n\n        internal fun getTopicInfo(topicName: String) = topics[topicName]\n\n        inner class PublisherListener<T : Any>(\n            private val topic: Topic<T>,\n            origin: Origin,\n            var onUpdate: (T) -> Unit\n        ) : Listener(origin) {\n            override fun onUpdate(data: String) {\n                onUpdate(json.parse(topic.serializer, data))\n            }\n        }\n    }\n\n    class Client(link: Network.Link, serverAddress: Network.Address, port: Int): Endpoint() {\n        private val topics: MutableMap<String, TopicInfo> = hashMapOf()\n        private var server: Connection = Connection(\"client at ${link.myAddress}\", topics)\n\n        init {\n            link.connectTcp(serverAddress, port, server)\n        }\n\n        @JsName(\"subscribe\")\n        fun <T> subscribe(topic: Topic<T>, onUpdate: (T) -> Unit): Channel<T> {\n            val subscriber = Origin()\n\n            val topicName = topic.name\n            val topicInfo = topics.getOrPut(topicName) {\n                TopicInfo(topicName)\n                    .apply {\n                        listeners.add(object : Listener(server) {\n                            override fun onUpdate(data: String) = server.sendTopicUpdate(topicName, data)\n                        })\n                    }\n                    .also { server.sendTopicSub(topicName) }\n            }\n\n            val listener = object : Listener(subscriber) {\n                override fun onUpdate(data: String) = onUpdate(json.parse(topic.serializer, data))\n            }\n            topicInfo.listeners.add(listener)\n            val data = topicInfo.data\n            if (data != null) {\n                listener.onUpdate(data)\n            }\n\n            return object : Channel<T> {\n                override fun onChange(t: T) {\n                    val jsonData = json.stringify(topic.serializer, t)\n                    topicInfo.notify(jsonData, subscriber)\n                }\n\n                override fun replaceOnUpdate(onUpdate: (T) -> Unit) {\n                    TODO(\"Client.channel.replaceOnUpdate not implemented\")\n                }\n\n                override fun unsubscribe() {\n                    // TODO(\"${CLASS_NAME}.unsubscribe not implemented\")\n                }\n            }\n        }\n    }\n}","package baaahs\n\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport baaahs.shaders.*\n\nenum class ShaderId(val reader: ShaderReader<*>) {\n    SOLID(SolidShader),\n    PIXEL(PixelShader),\n    SINE_WAVE(SineWaveShader),\n    COMPOSITOR(CompositorShader),\n    SPARKLE(SparkleShader),\n    SIMPLE_SPATIAL(SimpleSpatialShader),\n    HEART(HeartShader);\n\n    companion object {\n        val values = values()\n        fun get(i: Byte): ShaderId {\n            if (i > values.size || i < 0) {\n                throw Throwable(\"bad index for ShaderId: $i\")\n            }\n            return values[i.toInt()]\n        }\n    }\n}\n\ninterface Surface {\n    val pixelCount: Int\n\n    fun describe(): String\n}\n\ninterface ShaderReader<T : Shader<*>> {\n    fun parse(reader: ByteArrayReader): T\n}\n\nabstract class Shader<B : Shader.Buffer>(val id: ShaderId) {\n    abstract fun createRenderer(surface: Surface): Renderer<B>\n\n    abstract fun createBuffer(surface: Surface): B\n\n    val descriptorBytes: ByteArray by lazy { toBytes() }\n\n    fun serialize(writer: ByteArrayWriter) {\n        writer.writeByte(id.ordinal.toByte())\n        serializeConfig(writer)\n    }\n\n    /** Override if your shader has static configuration that needs to be shared with the Renderer. */\n    open fun serializeConfig(writer: ByteArrayWriter) {\n    }\n\n    private fun toBytes(): ByteArray {\n        val writer = ByteArrayWriter()\n        serialize(writer)\n        return writer.toBytes()\n    }\n\n    abstract fun readBuffer(reader: ByteArrayReader): B\n\n    companion object {\n        fun parse(reader: ByteArrayReader): Shader<*> {\n            val shaderTypeI = reader.readByte()\n            val shaderType = ShaderId.get(shaderTypeI)\n            return shaderType.reader.parse(reader)\n        }\n    }\n\n    interface Buffer {\n        val shader: Shader<*>\n\n        fun serialize(writer: ByteArrayWriter)\n\n        /**\n         * Read new data into an existing buffer (as efficiently as possible).\n         */\n        fun read(reader: ByteArrayReader)\n    }\n\n    interface Renderer<B : Buffer> {\n        fun beginFrame(buffer: B, pixelCount: Int) {}\n        fun draw(buffer: B, pixelIndex: Int): Color\n        fun endFrame() {}\n    }\n}\n\ninterface Pixels : Iterable<Color> {\n    val size: Int\n\n    val indices: IntRange\n        get() = IntRange(0, size - 1)\n\n    operator fun get(i: Int): Color\n    operator fun set(i: Int, color: Color)\n\n    fun set(colors: Array<Color>)\n\n    override fun iterator(): Iterator<Color> {\n        return object : Iterator<Color> {\n            private var i = 0\n\n            override fun hasNext(): Boolean = i < size\n\n            override fun next(): Color = get(i++)\n        }\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n","package baaahs\n\nclass SheepModel {\n    lateinit var vertices: List<Point>\n    lateinit var panels: List<Panel>\n\n    lateinit var eyes: List<MovingHead>\n\n    val allPanels: List<Panel>\n        get() = panels\n    val partySide: List<Panel>\n        get() = panels.filter { panel -> Regex(\"P$\").matches(panel.name) }\n\n    lateinit var panelNeighbors: Map<Panel, List<Panel>>\n\n    fun load() {\n        val vertices: MutableList<Point> = mutableListOf()\n        val panels: MutableList<Panel> = mutableListOf()\n        var currentPanel = Panel(\"initial\")\n\n        val panelsByEdge = mutableMapOf<List<Int>, MutableList<Panel>>()\n        val edgesByPanel = mutableMapOf<Panel, MutableList<List<Int>>>()\n\n        getResource(\"newsheep_processed.obj\")\n            .split(\"\\n\")\n            .map { it.trim() }\n            .forEach { line ->\n                val parts = line.split(\" \")\n                val args = parts.subList(1, parts.size)\n\n                when (parts[0]) {\n                    \"v\" -> {\n                        if (args.size != 3) throw Exception(\"invalid vertex line: $line\")\n                        val coords = args.map { it.toFloat() }\n                        vertices.add(Point(coords[0], coords[1], coords[2]))\n                    }\n                    \"g\" -> {\n                        var name = args.joinToString(\" \")\n                        val match = Regex(\"^G_0?([^_]+).*?\\$\").matchEntire(name)\n                        if (match != null) {\n                            name = match.groups[1]!!.value\n                        }\n                        currentPanel = Panel(name)\n                        panels.add(currentPanel)\n                    }\n                    \"f\" -> {\n                        val verts = args.map { it.toInt() - 1 }\n                        currentPanel.faces.faces.add(Face(verts))\n                    }\n                    \"l\" -> {\n                        val verts = args.map { it.toInt() - 1 }\n                        val points = mutableListOf<Point>()\n                        for (vi in verts) {\n                            val v = vertices[vi]\n                            points.add(v)\n                        }\n\n                        val sortedVerts = verts.sorted()\n                        panelsByEdge.getOrPut(sortedVerts) { mutableListOf() }.add(currentPanel)\n                        edgesByPanel.getOrPut(currentPanel) { mutableListOf() }.add(sortedVerts)\n\n                        currentPanel.lines.add(Line(points))\n                    }\n                }\n            }\n\n        println(\"Sheep model has ${panels.size} panels (and ${vertices.size} vertices)!\")\n        this.vertices = vertices\n        this.panels = panels\n\n        fun neighborsOf(panel: Panel): List<Panel> {\n            return edgesByPanel[panel]\n                ?.flatMap { panelsByEdge[it]?.toList() ?: emptyList() }\n                ?.filter { it != panel }\n                ?: emptyList()\n        }\n\n        panelNeighbors = allPanels.associateWith { neighborsOf(it) }\n\n        eyes = arrayListOf(\n            MovingHead(\"leftEye\", Point(-163.738f, 204.361f, 439.302f)),\n            MovingHead(\"rightEye\", Point(-103.738f, 204.361f, 439.302f))\n        )\n    }\n\n    fun neighborsOf(panel: Panel) = panelNeighbors[panel] ?: emptyList()\n\n    data class Point(val x: Float, val y: Float, val z: Float)\n    data class Line(val points: List<Point>)\n\n    class Face(val vertexIds: List<Int>)\n\n    class Faces {\n        val vertices: MutableList<Point> = mutableListOf()\n        val faces: MutableList<Face> = mutableListOf()\n    }\n\n    class Panel(val name: String) : Surface {\n        override val pixelCount = SparkleMotion.PIXEL_COUNT_UNKNOWN\n\n        val faces = Faces()\n        val lines = mutableListOf<Line>()\n\n        override fun describe(): String = \"Panel $name\"\n        override fun equals(other: Any?): Boolean = other is Panel && name == other.name\n        override fun hashCode(): Int = name.hashCode()\n    }\n\n    class MovingHead(val name: String, val origin: Point/*, val heading: Point*/) {\n\n    }\n}\n\n","package baaahs\n\nimport kotlin.math.abs\n\nclass Shenzarpy(private val buffer: Dmx.Buffer) : Dmx.DeviceType(16) {\n    companion object {\n        val panRange = toRadians(0f)..toRadians(540f)\n        val tiltRange = toRadians(-110f)..toRadians(110f)\n    }\n\n    enum class WheelColor(val color: Color) {\n        RED(Color.from(0xc21e22)),\n        ORANGE(Color.from(0xeb8236)),\n        AQUAMARINE(Color.from(0x7cbc84)),\n        DEEP_GREEN(Color.from(0x12812f)),\n        LIGHT_GREEN(Color.from(0x9fc13f)),\n        LAVENDER(Color.from(0x8f74ab)),\n        PINK(Color.from(0xeb8182)),\n        YELLOW(Color.from(0xfeeb34)),\n        MAGENTA(Color.from(0xe11382)),\n        CYAN(Color.from(0x1ba7e8)),\n        CTO2(Color.from(0xf4c651)),\n        CTO1(Color.from(0xf4d88a)),\n        CTB(Color.from(0x97c7b8)),\n        DARK_BLUE(Color.from(0x085197)),\n        WHITE(Color.from(0xffffff));\n\n        companion object {\n            val values = values()\n            fun get(i: Byte) = values[i.toInt()]\n        }\n    }\n\n    enum class Channel {\n        COLOR_WHEEL(),\n        SHUTTER(),\n        DIMMER(),\n        GOBO_WHEEL(),\n        PRISM(),\n        PRISM_ROTATION(),\n        MACRO(),\n        FROST(),\n        FOCUS(),\n        PAN(),\n        PAN_FINE(),\n        TILT(),\n        TILT_FINE(),\n        PAN_TILT_SPEED(),\n        RESET(),\n        LAMP_CONTROL(),\n        BLANK(),\n        COLOR_WHEEL_SPEED(),\n        DIM_PRISM_ATOM_SPEED(),\n        GOBO_WHEEL_SPEED();\n\n\n        companion object {\n            val values = values()\n            fun get(i: Byte) = values[i.toInt()]\n        }\n    }\n\n    var colorWheel: Byte\n        get() = buffer[Channel.COLOR_WHEEL]\n        set(value) {\n            buffer[Channel.COLOR_WHEEL] = value\n        }\n\n    var dimmer: Float\n        get() = (buffer[Channel.DIMMER].toInt() and 0xff) / 255F\n        set(value) {\n            buffer[Channel.DIMMER] = ((value * 255).toInt() and 0xff).toByte()\n        }\n\n    var pan: Float\n        get() {\n            val firstByte = buffer[Channel.PAN].toInt() and 0xff\n            val secondByte = buffer[Channel.PAN_FINE].toInt() and 0xff\n            val scaled = firstByte * 256 + secondByte\n            return scaled / 65535f\n        }\n        set(value) {\n            val modVal = abs(value % panRange.endInclusive)\n            val scaled = (modVal * 65535).toInt()\n            buffer[Channel.PAN] = (scaled shr 8).toByte()\n            buffer[Channel.PAN_FINE] = (scaled and 0xff).toByte()\n        }\n\n    var tilt: Float\n        get() {\n            val firstByte = buffer[Channel.TILT].toInt() and 0xff\n            val secondByte = buffer[Channel.TILT_FINE].toInt() and 0xff\n            val scaled = firstByte * 256 + secondByte\n            return scaled / 65535f\n        }\n        set(value) {\n            val modVal = abs(value % tiltRange.endInclusive)\n            val scaled = (modVal * 65535).toInt()\n            buffer[Channel.TILT] = (scaled shr 8).toByte()\n            buffer[Channel.TILT_FINE] = (scaled and 0xff).toByte()\n        }\n\n    init {\n        dimmer = 1f\n    }\n\n    private operator fun Dmx.Buffer.set(channel: Channel, value: Byte) {\n        buffer[channel.ordinal] = value\n    }\n\n    private operator fun Dmx.Buffer.get(channel: Channel): Byte = buffer[channel.ordinal]\n\n    fun closestColorFor(color: Color): Byte {\n        var bestMatch = WheelColor.WHITE\n        var bestDistance = 1f\n\n        WheelColor.values.forEach { wheelColor ->\n            val distance = wheelColor.color.distanceTo(color)\n            if (distance < bestDistance) {\n                bestMatch = wheelColor\n                bestDistance = distance\n            }\n        }\n\n        return bestMatch.ordinal.toByte()\n    }\n}","package baaahs\n\n/** A show takes input from gadgets and uses it to configure shaders, creating pretty stuff on surfaces. */\nabstract class Show(val name: String) {\n\n    abstract fun createRenderer(sheepModel: SheepModel, showRunner: ShowRunner): Renderer\n\n    interface Renderer {\n        /**\n         * Renders the next frame of the show.\n         *\n         * Try to keep this under 30ms or so.\n         */\n        fun nextFrame()\n\n        /**\n         * Called when surfaces are newly or no longer available to the show.\n         *\n         * If the show is able to reconfigure itself for the new set of shaders, it should do so and return `true`.\n         *\n         * @return true if the show should be reinitialized.\n         */\n        fun surfacesChanged(newSurfaces: List<Surface>, removedSurfaces: List<Surface>): Unit =\n            throw RestartShowException()\n    }\n\n    class RestartShowException : Exception()\n}\n","package baaahs\n\nimport baaahs.shaders.CompositingMode\nimport baaahs.shaders.CompositorShader\n\nclass ShowRunner(\n    private val model: SheepModel,\n    initialShow: Show,\n    private val gadgetManager: GadgetManager,\n    private val beatProvider: Pinky.BeatProvider,\n    private val dmxUniverse: Dmx.Universe\n) {\n    var nextShow: Show? = initialShow\n    private var currentShow: Show? = null\n    private var currentShowRenderer: Show.Renderer? = null\n    private val changedSurfaces = mutableListOf<SurfacesChanges>()\n    private var totalSurfaceReceivers = 0\n\n    val allSurfaces: List<Surface> get() = surfaceReceivers.keys.toList()\n    val allUnusedSurfaces: List<Surface> get() = allSurfaces.minus(shaderBuffers.keys)\n\n    private val shaderBuffers: MutableMap<Surface, MutableList<Shader.Buffer>> = hashMapOf()\n\n    private var requestedGadgets: LinkedHashMap<String, Gadget> = linkedMapOf()\n\n    private var shadersLocked = true\n    private var gadgetsLocked = true\n\n    fun getBeatProvider(): Pinky.BeatProvider = beatProvider\n\n    private fun recordShader(surface: Surface, shaderBuffer: Shader.Buffer) {\n        val buffersForSurface = shaderBuffers.getOrPut(surface) { mutableListOf() }\n\n        if (shaderBuffer is CompositorShader.Buffer) {\n            if (!buffersForSurface.remove(shaderBuffer.bufferA)\n                || !buffersForSurface.remove(shaderBuffer.bufferB)\n            ) {\n                throw IllegalStateException(\"Composite of unknown shader buffers!\")\n            }\n        }\n\n        buffersForSurface += shaderBuffer\n    }\n\n    /**\n     * Obtain a shader buffer which can be used to control the illumination of a surface.\n     *\n     * @param surface The surface we're shading.\n     * @param shader The type of shader.\n     * @return A shader buffer of the appropriate type.\n     */\n    fun <B : Shader.Buffer> getShaderBuffer(surface: Surface, shader: Shader<B>): B {\n        if (shadersLocked) throw IllegalStateException(\"Shaders can't be obtained during #nextFrame()\")\n        val buffer = shader.createBuffer(surface)\n        recordShader(surface, buffer)\n        return buffer\n    }\n\n    /**\n     * Obtain a compositing shader buffer which can be used to blend two other shaders together.\n     *\n     * The shaders must already have been obtained using [getShaderBuffer].\n     */\n    fun getCompositorBuffer(\n        surface: Surface,\n        bufferA: Shader.Buffer,\n        bufferB: Shader.Buffer,\n        mode: CompositingMode = CompositingMode.NORMAL,\n        fade: Float = 0.5f\n    ): CompositorShader.Buffer {\n        if (shadersLocked) throw IllegalStateException(\"Shaders can't be obtained during #nextFrame()\")\n        return CompositorShader(bufferA.shader, bufferB.shader)\n            .createBuffer(bufferA, bufferB)\n            .also {\n                it.mode = mode\n                it.fade = fade\n                recordShader(surface, it)\n            }\n    }\n\n    private fun getDmxBuffer(baseChannel: Int, channelCount: Int): Dmx.Buffer =\n        dmxUniverse.writer(baseChannel, channelCount)\n\n    fun getMovingHead(movingHead: SheepModel.MovingHead): Shenzarpy {\n        if (shadersLocked) throw IllegalStateException(\"Moving heads can't be obtained during #nextFrame()\")\n        val baseChannel = Config.DMX_DEVICES[movingHead.name]!!\n        return Shenzarpy(getDmxBuffer(baseChannel, 16))\n    }\n\n    /**\n     * Obtain a gadget that can be used to receive input from a user. The gadget will be displayed in the show's UI.\n     *\n     * @param name Symbolic name for this gadget; must be unique within the show.\n     * @param gadget The gadget to display.\n     */\n    fun <T : Gadget> getGadget(name: String, gadget: T): T {\n        if (gadgetsLocked) throw IllegalStateException(\"Gadgets can't be obtained during #nextFrame()\")\n        val oldValue = requestedGadgets.put(name, gadget)\n        if (oldValue != null) throw IllegalStateException(\"Gadget names must be unique ($name)\")\n        return gadget\n    }\n\n    fun surfacesChanged(addedSurfaces: Collection<SurfaceReceiver>, removedSurfaces: Collection<SurfaceReceiver>) {\n        changedSurfaces.add(SurfacesChanges(ArrayList(addedSurfaces), ArrayList(removedSurfaces)))\n    }\n\n    fun nextFrame() {\n        // Always generate and send the next frame right away, then perform any housekeeping tasks immediately\n        // afterward, to avoid frame lag.\n        currentShowRenderer?.let {\n            it.nextFrame()\n            send()\n        }\n\n        housekeeping()\n    }\n\n    private val surfaceReceivers = mutableMapOf<Surface, MutableList<SurfaceReceiver>>()\n\n    private fun housekeeping() {\n        for ((added, removed) in changedSurfaces) {\n            println(\"ShowRunner surfaces changed! ${added.size} added, ${removed.size} removed\")\n            for (receiver in removed) removeReceiver(receiver)\n            for (receiver in added) addReceiver(receiver)\n\n            if (nextShow == null) {\n                shadersLocked = false\n                try {\n                    currentShowRenderer?.surfacesChanged(added.map { it.surface }, removed.map { it.surface })\n\n                    logger.info(\"Show ${currentShow!!.name} updated; \" +\n                            \"${shaderBuffers.size} surfaces\")\n                } catch (e: Show.RestartShowException) {\n                    // Show doesn't support changing surfaces, just restart it cold.\n                    nextShow = currentShow ?: nextShow\n                }\n                shadersLocked = true\n            }\n        }\n        changedSurfaces.clear()\n\n        if (totalSurfaceReceivers > 0) {\n            nextShow?.let { startingShow ->\n                createShowRenderer(startingShow)\n\n                currentShow = nextShow\n                nextShow = null\n            }\n        }\n    }\n\n    private fun createShowRenderer(startingShow: Show) {\n        shaderBuffers.clear()\n\n        val restartingSameShow = nextShow == currentShow\n        val gadgetsState = if (restartingSameShow) gadgetManager.getGadgetsState() else emptyMap()\n\n        unlockShadersAndGadgets {\n            currentShowRenderer = startingShow.createRenderer(model, this)\n        }\n\n        logger.info(\n            \"New show ${startingShow.name} created; \" +\n                    \"${shaderBuffers.size} surfaces \" +\n                    \"and ${requestedGadgets.size} gadgets\"\n        )\n\n        gadgetManager.sync(requestedGadgets.toList(), gadgetsState)\n        requestedGadgets.clear()\n    }\n\n    private fun unlockShadersAndGadgets(fn: () -> Unit) {\n        shadersLocked = false\n        gadgetsLocked = false\n\n        try {\n            fn()\n        } finally {\n            shadersLocked = true\n            gadgetsLocked = true\n        }\n    }\n\n    private fun addReceiver(receiver: SurfaceReceiver) {\n        receiversFor(receiver.surface).add(receiver)\n        totalSurfaceReceivers++\n    }\n\n    private fun removeReceiver(receiver: SurfaceReceiver) {\n        receiversFor(receiver.surface).remove(receiver)\n        shaderBuffers.remove(receiver.surface)\n        totalSurfaceReceivers--\n    }\n\n    private fun receiversFor(surface: Surface): MutableList<SurfaceReceiver> {\n        return surfaceReceivers.getOrPut(surface) { mutableListOf() }\n    }\n\n    fun send() {\n        shaderBuffers.forEach { (surface, shaderBuffers) ->\n            if (shaderBuffers.size != 1) {\n                throw IllegalStateException(\"Too many shader buffers for ${surface.describe()}: $shaderBuffers\")\n            }\n            val shaderBuffer = shaderBuffers.first()\n\n            receiversFor(surface).forEach { receiver ->\n                receiver.sendFn(shaderBuffer)\n            }\n        }\n\n        dmxUniverse.sendFrame()\n    }\n\n    fun shutDown() {\n        gadgetManager.clear()\n    }\n\n    data class SurfacesChanges(val added: Collection<SurfaceReceiver>, val removed: Collection<SurfaceReceiver>)\n    class SurfaceReceiver(val surface: Surface, val sendFn: (Shader.Buffer) -> Unit)\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n/**\n * Randomly shuffles elements in this mutable list using the specified [random] instance as the source of randomness.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n","package baaahs\n\nobject SparkleMotion {\n    const val MAX_PIXEL_COUNT = 2048\n    const val PIXEL_COUNT_UNKNOWN = -1\n}","package baaahs\n\nimport kotlinx.serialization.list\nimport kotlinx.serialization.serializer\n\nobject Topics {\n    val availableShows = PubSub.Topic(\"availableShows\", String.serializer().list)\n    val selectedShow = PubSub.Topic(\"selectedShow\", String.serializer())\n    val activeGadgets = PubSub.Topic(\"activeGadgets\", GadgetData.serializer().list)\n}","package baaahs.gadgets\n\nimport baaahs.Color\nimport baaahs.Gadget\nimport kotlinx.serialization.Serializable\nimport kotlin.js.JsName\n\n/** A gadget for picking a single color for a color palette. */\n@Serializable\ndata class ColorPicker(\n    /** The name for this color picker. */\n    val name: String,\n\n    /** The initial value for this color picker. */\n    val initialValue: Color = Color.WHITE\n) : Gadget() {\n\n    /** The selected color. */\n    @JsName(\"color\")\n    var color: Color by updatable(\"color\", initialValue, Color.serializer())\n}","package baaahs.gadgets\n\nimport baaahs.Gadget\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.serializer\nimport kotlin.js.JsName\n\n/** A gadget for adjusting a value using a slider. */\n@Serializable\ndata class Slider(\n    /** The name for this slider. */\n    val name: String,\n\n    /** The initial value for this slider. */\n    val initialValue: Float = 1f\n) : Gadget() {\n    /** The selected value. */\n    @JsName(\"value\")\n    var value: Float by updatable(\"value\", initialValue, Float.serializer())\n}","package baaahs.io\n\nclass ByteArrayReader(val bytes: ByteArray, offset: Int = 0) {\n    var offset = offset\n        set(value) {\n            if (value > bytes.size) {\n                throw IllegalStateException(\"array index out of bounds\")\n            }\n            field = value\n        }\n\n    fun readBoolean(): Boolean = bytes[offset++].toInt() != 0\n\n    fun readByte(): Byte = bytes[offset++]\n\n    fun readShort(): Short =\n        (bytes[offset++].toInt() and 0xff shl 8)\n            .or(bytes[offset++].toInt() and 0xff).toShort()\n\n    fun readChar(): Char = readShort().toChar()\n\n    fun readInt(): Int =\n        (bytes[offset++].toInt() and 0xff shl 24)\n            .or(bytes[offset++].toInt() and 0xff shl 16)\n            .or(bytes[offset++].toInt() and 0xff shl 8)\n            .or(bytes[offset++].toInt() and 0xff)\n\n    fun readFloat(): Float = Float.fromBits(readInt())\n\n    fun readString(): String {\n        val length = readInt()\n        val buf = StringBuilder(length)\n        for (i in 0 until length) {\n            buf.append(readChar())\n        }\n        return buf.toString()\n    }\n\n    fun readNullableString(): String? = if (readBoolean()) readString() else null\n\n    fun readBytes(): ByteArray {\n        val count = readInt()\n        return readNBytes(count)\n    }\n\n    fun readNBytes(count: Int): ByteArray {\n        val bytes = bytes.copyOfRange(offset, offset + count)\n        offset += count\n        return bytes\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Double.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Float.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Double.isInfinite(): Boolean = this == Double.POSITIVE_INFINITY || this == Double.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Float.isInfinite(): Boolean = this == Float.POSITIVE_INFINITY || this == Float.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Double.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Float.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToBits\")\npublic actual fun Double.toBits(): Long = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout,\n * preserving `NaN` values exact layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToRawBits\")\npublic actual fun Double.toRawBits(): Long = definedExternally\n\n/**\n * Returns the [Double] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Double.Companion.fromBits(bits: Long): Double = js(\"Kotlin\").doubleFromBits(bits).unsafeCast<Double>()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToBits\")\npublic actual fun Float.toBits(): Int = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout,\n * preserving `NaN` values exact layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToRawBits\")\npublic actual fun Float.toRawBits(): Int = definedExternally\n\n/**\n * Returns the [Float] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Float.Companion.fromBits(bits: Int): Float = js(\"Kotlin\").floatFromBits(bits).unsafeCast<Float>()","package baaahs.io\n\nclass ByteArrayWriter(private var bytes: ByteArray = ByteArray(128), var offset: Int = 0) {\n    constructor(size: Int) : this(ByteArray(size))\n\n    fun writeBoolean(b: Boolean) {\n        growIfNecessary(1)\n        bytes[offset++] = if (b) 1 else 0\n    }\n\n    fun writeByte(b: Byte) {\n        growIfNecessary(1)\n        bytes[offset++] = b\n    }\n\n    fun writeShort(s: Short) {\n        growIfNecessary(2)\n        bytes[offset++] = s.toInt().shr(8).and(0xff).toByte()\n        bytes[offset++] = s.toInt().and(0xff).toByte()\n    }\n\n    fun writeChar(c: Char) = writeShort(c.toShort())\n\n    fun writeInt(l: Int) {\n        growIfNecessary(4)\n        bytes[offset++] = l.shr(24).and(0xff).toByte()\n        bytes[offset++] = l.shr(16).and(0xff).toByte()\n        bytes[offset++] = l.shr(8).and(0xff).toByte()\n        bytes[offset++] = l.and(0xff).toByte()\n    }\n\n    fun writeFloat(f: Float) {\n        writeInt(f.toBits())\n    }\n\n    fun writeString(s: String) {\n        growIfNecessary(4 + 2 * s.length)\n        writeInt(s.length)\n        for (i in s.indices) {\n            writeChar(s[i])\n        }\n    }\n\n    fun writeNullableString(s: String?) {\n        writeBoolean(s != null)\n        if (s != null) {\n            writeString(s)\n        }\n    }\n\n    fun writeBytes(data: ByteArray, startIndex: Int = 0, endIndex: Int = data.size) {\n        val size = endIndex - startIndex\n\n        growIfNecessary(4 + size)\n        writeInt(size)\n\n        data.copyInto(bytes, offset, startIndex, endIndex)\n        offset += size\n    }\n\n    fun writeNBytes(data: ByteArray, startIndex: Int = 0, endIndex: Int = data.size) {\n        val size = endIndex - startIndex\n\n        growIfNecessary(size)\n\n        data.copyInto(bytes, offset, startIndex, endIndex)\n        offset += size\n    }\n\n    fun toBytes(): ByteArray {\n        return bytes.copyOf(offset)\n    }\n\n    private fun growIfNecessary(by: Int) {\n        if (offset + by > bytes.size) {\n            bytes = bytes.copyOf(bytes.size * 2)\n        }\n    }\n}","package baaahs.net\n\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport baaahs.proto.Message\nimport kotlin.math.min\n\nclass FragmentingUdpLink(private val wrappedLink: Network.Link) : Network.Link {\n    override val myAddress: Network.Address get() = wrappedLink.myAddress\n    override val udpMtu: Int get() = wrappedLink.udpMtu\n\n    /**\n     * Header is 12 bytes long; format is:\n     * * message ID (short)\n     * * this frame size (short)\n     * * total payload size (long)\n     * * this frame offset (long)\n     */\n    companion object {\n        const val headerSize = 12\n    }\n\n    private val mtu = wrappedLink.udpMtu\n    private var nextMessageId: Short = 0\n\n    private var fragments = arrayListOf<Fragment>()\n\n    class Fragment(val messageId: Short, val offset: Int, val bytes: ByteArray)\n\n    override fun listenUdp(port: Int, udpListener: Network.UdpListener) {\n        wrappedLink.listenUdp(port, object : Network.UdpListener {\n            override fun receive(fromAddress: Network.Address, bytes: ByteArray) {\n                // reassemble fragmented payloads...\n                val reader = ByteArrayReader(bytes)\n                val messageId = reader.readShort()\n                val size = reader.readShort()\n                val totalSize = reader.readInt()\n                val offset = reader.readInt()\n                val frameBytes = reader.readNBytes(size.toInt())\n                if (offset == 0 && size.toInt() == totalSize) {\n                    udpListener.receive(fromAddress, frameBytes)\n                } else {\n                    val thisFragment = Fragment(messageId, offset, frameBytes)\n                    fragments.add(thisFragment)\n\n//                        println(\"received fragment: ${thisFragment}\")\n                    if (offset + size == totalSize) {\n                        // final fragment, try to reassemble\u2026\n\n                        val myFragments = arrayListOf<Fragment>()\n                        fragments.removeAll { fragment ->\n                            val remove = fragment.messageId == messageId\n                            if (remove) myFragments.add(fragment)\n                            remove\n                        }\n\n                        if (!fragments.isEmpty()) {\n                            // println(\"remaining fragments = ${fragments}\")\n                        }\n\n                        val actualTotalSize = myFragments.map { it.bytes.size }.reduce { acc, i -> acc + i }\n                        if (actualTotalSize != totalSize) {\n                            IllegalArgumentException(\"can't reassemble packet, $actualTotalSize != $totalSize for $messageId\")\n                        }\n\n                        val reassembleBytes = ByteArray(totalSize)\n                        myFragments.forEach {\n                            it.bytes.copyInto(reassembleBytes, it.offset)\n                        }\n\n                        udpListener.receive(fromAddress, reassembleBytes)\n                    }\n                }\n            }\n        })\n    }\n\n    /** Sends payloads which might be larger than the network's MTU. */\n    override fun sendUdp(toAddress: Network.Address, port: Int, bytes: ByteArray) {\n        transmitMultipartUdp(bytes) { fragment -> wrappedLink.sendUdp(toAddress, port, fragment) }\n    }\n\n    /** Broadcasts payloads which might be larger than the network's MTU. */\n    override fun broadcastUdp(port: Int, bytes: ByteArray) {\n        transmitMultipartUdp(bytes) { fragment -> wrappedLink.broadcastUdp(port, fragment) }\n    }\n\n    override fun sendUdp(toAddress: Network.Address, port: Int, message: Message) {\n        sendUdp(toAddress, port, message.toBytes())\n    }\n\n    override fun broadcastUdp(port: Int, message: Message) {\n        broadcastUdp(port, message.toBytes())\n    }\n\n    /** Sends payloads which might be larger than the network's MTU. */\n    private fun transmitMultipartUdp(bytes: ByteArray, fn: (bytes: ByteArray) -> Unit) {\n        if (bytes.size > 65535) {\n            IllegalArgumentException(\"buffer too big! ${bytes.size} must be < 65536\")\n        }\n        val messageId = nextMessageId++\n        val messageCount = (bytes.size - 1) / (mtu - headerSize) + 1\n        val buf = ByteArray(mtu)\n        var offset = 0\n        for (i in 0 until messageCount) {\n            val writer = ByteArrayWriter(buf)\n            val thisFrameSize = min((mtu - headerSize), bytes.size - offset)\n            writer.writeShort(messageId)\n            writer.writeShort(thisFrameSize.toShort())\n            writer.writeInt(bytes.size)\n            writer.writeInt(offset)\n            writer.writeNBytes(bytes, offset, offset + thisFrameSize)\n            fn(writer.toBytes())\n\n            offset += thisFrameSize\n        }\n    }\n\n    override fun listenTcp(port: Int, tcpServerSocketListener: Network.TcpServerSocketListener): Unit =\n        wrappedLink.listenTcp(port, tcpServerSocketListener)\n\n    override fun connectTcp(toAddress: Network.Address, port: Int, tcpListener: Network.TcpListener): Network.TcpConnection =\n        wrappedLink.connectTcp(toAddress, port, tcpListener)\n\n}\n","package baaahs.net\n\nimport baaahs.proto.Message\n\ninterface Network {\n    fun link(): Link\n\n    interface Link {\n        val myAddress: Address\n\n        val udpMtu: Int\n        fun listenUdp(port: Int, udpListener: UdpListener)\n        fun sendUdp(toAddress: Address, port: Int, bytes: ByteArray)\n        fun broadcastUdp(port: Int, bytes: ByteArray)\n\n        fun sendUdp(toAddress: Address, port: Int, message: Message) {\n            sendUdp(toAddress, port, message.toBytes())\n        }\n\n        fun broadcastUdp(port: Int, message: Message) {\n            broadcastUdp(port, message.toBytes())\n        }\n\n        fun listenTcp(port: Int, tcpServerSocketListener: TcpServerSocketListener)\n        fun connectTcp(toAddress: Address, port: Int, tcpListener: TcpListener): TcpConnection\n    }\n\n    interface Address\n\n    interface UdpListener {\n        fun receive(fromAddress: Address, bytes: ByteArray)\n    }\n\n    interface TcpConnection {\n        val fromAddress: Address\n        val toAddress: Address\n        val port: Int\n\n        fun send(bytes: ByteArray)\n\n        fun send(message: Message) {\n            send(message.toBytes())\n        }\n    }\n\n    interface TcpListener {\n        fun connected(tcpConnection: TcpConnection)\n        fun receive(tcpConnection: TcpConnection, bytes: ByteArray)\n        fun reset(tcpConnection: TcpConnection)\n    }\n\n    interface TcpServerSocketListener {\n        fun incomingConnection(fromConnection: TcpConnection): TcpListener\n    }\n}","package baaahs.proto\n\nimport baaahs.BrainId\nimport baaahs.Shader\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\n\nobject Ports {\n    const val MAPPER = 8001\n    const val PINKY = 8002\n    const val BRAIN = 8003\n\n    const val PINKY_UI_TCP = 8004\n}\n\nenum class Type {\n    // UDP:\n    BRAIN_HELLO,\n    BRAIN_PANEL_SHADE,\n    MAPPER_HELLO,\n    BRAIN_ID_REQUEST,\n    BRAIN_ID_RESPONSE,\n    BRAIN_MAPPING,\n    PINKY_PONG;\n\n    companion object {\n        val values = values()\n        fun get(i: Byte) = values[i.toInt()]\n    }\n}\n\nfun parse(bytes: ByteArray): Message {\n    val reader = ByteArrayReader(bytes)\n    return when (Type.get(reader.readByte())) {\n        Type.BRAIN_HELLO -> BrainHelloMessage.parse(reader)\n        Type.BRAIN_PANEL_SHADE -> BrainShaderMessage.parse(reader)\n        Type.MAPPER_HELLO -> MapperHelloMessage.parse(reader)\n        Type.BRAIN_ID_REQUEST -> BrainIdRequest.parse(reader)\n        Type.BRAIN_ID_RESPONSE -> BrainIdResponse.parse(reader)\n        Type.BRAIN_MAPPING -> BrainMappingMessage.parse(reader)\n        Type.PINKY_PONG -> PinkyPongMessage.parse(reader)\n    }\n}\n\nclass BrainHelloMessage(val brainId: String, val surfaceName: String?) : Message(Type.BRAIN_HELLO) {\n    companion object {\n        fun parse(reader: ByteArrayReader): BrainHelloMessage {\n            return BrainHelloMessage(\n                reader.readString(),\n                reader.readNullableString()\n            )\n        }\n    }\n\n    override fun serialize(writer: ByteArrayWriter) {\n        writer.writeString(brainId)\n        writer.writeNullableString(surfaceName)\n    }\n}\n\nclass BrainShaderMessage(val shader: Shader<*>, val buffer: Shader.Buffer) : Message(Type.BRAIN_PANEL_SHADE) {\n    companion object {\n        /**\n         * Suboptimal parser; on the Brain we'll do better than this.\n         */\n        fun parse(reader: ByteArrayReader): BrainShaderMessage {\n            val shaderDesc = reader.readBytes()\n            val shader = Shader.parse(ByteArrayReader(shaderDesc))\n            val buffer = shader.readBuffer(reader)\n            return BrainShaderMessage(shader, buffer)\n        }\n    }\n\n    override fun serialize(writer: ByteArrayWriter) {\n        writer.writeBytes(shader.descriptorBytes)\n        buffer.serialize(writer)\n    }\n}\n\nclass MapperHelloMessage(val isRunning: Boolean) : Message(Type.MAPPER_HELLO) {\n    companion object {\n        fun parse(reader: ByteArrayReader): MapperHelloMessage {\n            return MapperHelloMessage(reader.readBoolean())\n        }\n    }\n\n    override fun serialize(writer: ByteArrayWriter) {\n        writer.writeBoolean(isRunning)\n    }\n}\n\nclass BrainIdRequest(val port: Int) : Message(Type.BRAIN_ID_REQUEST) {\n    companion object {\n        fun parse(reader: ByteArrayReader) = BrainIdRequest(reader.readInt())\n    }\n\n    override fun serialize(writer: ByteArrayWriter) {\n        writer.writeInt(port)\n    }\n}\n\nclass BrainIdResponse(val id: String, val surfaceName: String?) : Message(Type.BRAIN_ID_RESPONSE) {\n    companion object {\n        fun parse(reader: ByteArrayReader) = BrainIdResponse(reader.readString(), reader.readNullableString())\n    }\n\n    override fun serialize(writer: ByteArrayWriter) {\n        writer.writeString(id)\n        writer.writeNullableString(surfaceName)\n    }\n}\n\nclass BrainMappingMessage(\n    val brainId: BrainId,\n    val surfaceName: String?,\n    val pixelCount: Int,\n    val pixelVertices: List<Vector2F>\n) : Message(Type.BRAIN_MAPPING) {\n    companion object {\n        fun ByteArrayReader.readListOfVertices(): List<Vector2F> {\n            val vertexCount = readInt()\n            return (0 until vertexCount).map { Vector2F(readFloat(), readFloat()) }\n        }\n\n        fun parse(reader: ByteArrayReader) = BrainMappingMessage(\n            BrainId(reader.readString()),\n            reader.readNullableString(),\n            reader.readInt(),\n            reader.readListOfVertices()\n        )\n    }\n\n    override fun serialize(writer: ByteArrayWriter) {\n        writer.writeString(brainId.uuid)\n        writer.writeNullableString(surfaceName)\n        writer.writeInt(pixelCount)\n\n        val vertexCount = pixelVertices.size\n        writer.writeInt(vertexCount)\n        pixelVertices.forEach { v ->\n            writer.writeFloat(v.x)\n            writer.writeFloat(v.y)\n        }\n    }\n}\n\nclass Vector2F(val x: Float, val y: Float) {\n    operator fun component1() = x\n    operator fun component2() = y\n}\n\nclass PinkyPongMessage(val brainIds: List<String>) : Message(Type.PINKY_PONG) {\n    companion object {\n        fun parse(reader: ByteArrayReader): PinkyPongMessage {\n            val brainCount = reader.readInt();\n            val brainIds = mutableListOf<String>()\n            for (i in 0 until brainCount) {\n                brainIds.add(reader.readString())\n            }\n            return PinkyPongMessage(brainIds)\n        }\n    }\n\n    override fun serialize(writer: ByteArrayWriter) {\n        writer.writeInt(brainIds.size)\n        brainIds.forEach { writer.writeString(it) }\n    }\n}\n\nopen class Message(val type: Type) {\n    // TODO: send message length as the first four bytes, plus maybe sequence/reassembly info for UDP\n    fun toBytes(): ByteArray {\n        val writer = ByteArrayWriter(1 + size())\n        writer.writeByte(type.ordinal.toByte())\n        serialize(writer)\n        return writer.toBytes()\n    }\n\n    open fun serialize(writer: ByteArrayWriter) {\n    }\n\n    open fun size(): Int = 127\n}","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\n\n/**\n * A shader which combines the results of two sub-shaders according to a specified compositing mode and cross-fade\n * value.\n */\nclass CompositorShader(val aShader: Shader<*>, val bShader: Shader<*>) :\n    Shader<CompositorShader.Buffer>(ShaderId.COMPOSITOR) {\n\n    override fun createBuffer(surface: Surface) = Buffer(aShader.createBuffer(surface), bShader.createBuffer(surface))\n\n    override fun serializeConfig(writer: ByteArrayWriter) {\n        aShader.serialize(writer)\n        bShader.serialize(writer)\n    }\n\n    override fun createRenderer(surface: Surface): Shader.Renderer<Buffer> =\n        Renderer(surface, aShader, bShader)\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer =\n        Buffer(\n            aShader.readBuffer(reader),\n            bShader.readBuffer(reader),\n            CompositingMode.get(reader.readByte()),\n            reader.readFloat()\n        )\n\n    fun createBuffer(bufferA: Shader.Buffer, bufferB: Shader.Buffer): Buffer =\n        Buffer(bufferA, bufferB)\n\n    companion object : ShaderReader<CompositorShader> {\n        override fun parse(reader: ByteArrayReader): CompositorShader {\n            val shaderA = Shader.parse(reader)\n            val shaderB = Shader.parse(reader)\n            return CompositorShader(shaderA, shaderB)\n        }\n    }\n\n    inner class Buffer(\n        val bufferA: Shader.Buffer, val bufferB: Shader.Buffer,\n        var mode: CompositingMode = CompositingMode.NORMAL,\n        var fade: Float = 0.5f\n    ) : Shader.Buffer {\n        override val shader: Shader<*> = this@CompositorShader\n\n        override fun serialize(writer: ByteArrayWriter) {\n            bufferA.serialize(writer)\n            bufferB.serialize(writer)\n            writer.writeByte(mode.ordinal.toByte())\n            writer.writeFloat(fade)\n        }\n\n        override fun read(reader: ByteArrayReader) {\n            bufferA.read(reader)\n            bufferB.read(reader)\n            mode = CompositingMode.get(reader.readByte())\n            fade = reader.readFloat()\n        }\n    }\n\n    class Renderer<A : Shader.Buffer, B : Shader.Buffer>(\n        surface: Surface,\n        aShader: Shader<A>,\n        bShader: Shader<B>\n    ) : Shader.Renderer<Buffer> {\n        private val rendererA: Shader.Renderer<A> = aShader.createRenderer(surface)\n        private val rendererB: Shader.Renderer<B> = bShader.createRenderer(surface)\n\n        @Suppress(\"UNCHECKED_CAST\")\n        override fun beginFrame(buffer: Buffer, pixelCount: Int) {\n            rendererA.beginFrame(buffer.bufferA as A, pixelCount)\n            rendererB.beginFrame(buffer.bufferB as B, pixelCount)\n        }\n\n        @Suppress(\"UNCHECKED_CAST\")\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color {\n            val dest = rendererA.draw(buffer.bufferA as A, pixelIndex)\n            val src = rendererB.draw(buffer.bufferB as B, pixelIndex)\n            return dest.fade(buffer.mode.composite(src, dest), buffer.fade)\n        }\n\n        override fun endFrame() {\n            rendererA.endFrame()\n            rendererB.endFrame()\n        }\n    }\n}\n\nenum class CompositingMode {\n    NORMAL {\n        override fun composite(src: Color, dest: Color) = src\n    },\n    ADD {\n        override fun composite(src: Color, dest: Color) = dest.plus(src)\n    };\n\n    abstract fun composite(src: Color, dest: Color): Color\n\n    companion object {\n        val values = values()\n        fun get(i: Byte): CompositingMode {\n            return values[i.toInt()]\n        }\n    }\n}","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlin.math.PI\nimport kotlin.math.abs\nimport kotlin.math.acos\nimport kotlin.math.pow\n\nclass HeartShader : Shader<HeartShader.Buffer>(ShaderId.HEART) {\n    override fun createBuffer(surface: Surface): Buffer = Buffer()\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer = Buffer().apply { read(reader) }\n\n    override fun createRenderer(surface: Surface): Renderer = Renderer(surface)\n\n    companion object : ShaderReader<HeartShader> {\n        override fun parse(reader: ByteArrayReader) = HeartShader()\n    }\n\n    inner class Buffer : Shader.Buffer {\n        override val shader: Shader<*> get() = this@HeartShader\n\n        var edgeColor = Color.RED\n        var centerColor = Color.RED.fade(Color.WHITE, .2f)\n        var heartSize = 1f\n        var strokeSize = 1f\n        var xOff = 0f\n        var yOff = 0f\n\n        override fun serialize(writer: ByteArrayWriter) {\n            writer.writeFloat(heartSize)\n            writer.writeFloat(strokeSize)\n            writer.writeFloat(xOff)\n            writer.writeFloat(yOff)\n        }\n\n        override fun read(reader: ByteArrayReader) {\n            heartSize = reader.readFloat()\n            strokeSize = reader.readFloat()\n            xOff = reader.readFloat()\n            yOff = reader.readFloat()\n        }\n\n    }\n\n    class Renderer(surface: Surface) : Shader.Renderer<Buffer> {\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color {\n            if (pixelVertices == null) {\n                return Color.BLACK\n            }\n\n            var (x, y) = pixelVertices[pixelIndex]\n            x -= .5f + buffer.xOff - .5f\n            x *= 1.1f\n            y -= .5f + buffer.yOff - .5f\n\n            x /= buffer.heartSize\n            y /= buffer.heartSize\n\n            val upperCurveDist = y - (1 - (abs(x) - 1).pow(2))\n            val lowerCurveDist = y - (acos(1 - abs(x)) - PI).toFloat()\n            if (y >= 0) { // upper section\n                if (upperCurveDist < 0) {\n                    val fadeAmount = if (abs(upperCurveDist) < buffer.strokeSize) {\n                        0f\n                    } else {\n                        abs(upperCurveDist / buffer.heartSize)\n                    }\n                    return buffer.edgeColor.fade(buffer.centerColor, fadeAmount)\n                } else {\n                    return Color.TRANSPARENT\n                }\n            } else if (lowerCurveDist > 0) {\n                val fadeAmount = if (lowerCurveDist < buffer.strokeSize) {\n                    1f\n                } else {\n                    lowerCurveDist / buffer.heartSize\n                }\n                return buffer.edgeColor.fade(buffer.centerColor, fadeAmount)\n            } else {\n                return Color.TRANSPARENT\n            }\n        }\n\n        private val pixelVertices = (surface as? Brain.MappedSurface)?.pixelVertices\n    }\n}","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlin.math.min\n\n/**\n * A shader that allows control of individual pixels' colors directly from a show.\n *\n * This is a suboptimal shader for most purposes, consider writing a custom shader instead!\n */\nclass PixelShader() : Shader<PixelShader.Buffer>(ShaderId.PIXEL) {\n\n    override fun createBuffer(surface: Surface): Buffer = Buffer(surface.pixelCount)\n\n    override fun createRenderer(surface: Surface): Shader.Renderer<Buffer> = Renderer()\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer {\n        val incomingColorCount = reader.readInt()\n        val buf = Buffer(incomingColorCount)\n        (0 until incomingColorCount).forEach { index -> buf.colors[index] = Color.parse(reader) }\n        return buf\n    }\n\n    companion object : ShaderReader<PixelShader> {\n        override fun parse(reader: ByteArrayReader) = PixelShader()\n    }\n\n    inner class Buffer(pixelCount: Int) : Shader.Buffer {\n        override val shader: Shader<*>\n            get() = this@PixelShader\n\n        var colors: Array<Color>\n\n        init {\n            val bufPixelCount = if (pixelCount == SparkleMotion.PIXEL_COUNT_UNKNOWN) {\n                SparkleMotion.MAX_PIXEL_COUNT\n            } else {\n                pixelCount\n            }\n            colors = Array(bufPixelCount) { Color.WHITE }\n        }\n\n        override fun serialize(writer: ByteArrayWriter) {\n            writer.writeInt(colors.size)\n            colors.forEach { color -> color.serialize(writer) }\n        }\n\n        override fun read(reader: ByteArrayReader) {\n            val incomingColorCount = reader.readInt()\n\n            // if there are more colors in the buffer than pixels, drop from the end\n            val countFromBuffer = min(colors.size, incomingColorCount)\n            for (i in 0 until countFromBuffer) {\n                colors[i] = Color.parse(reader)\n            }\n\n            // if there are more pixels than colors in the buffer, repeat\n            for (i in countFromBuffer until colors.size) {\n                colors[i] = colors[i % countFromBuffer]\n            }\n        }\n\n        fun setAll(color: Color) {\n            for (i in colors.indices) {\n                colors[i] = color\n            }\n        }\n    }\n\n    class Renderer : Shader.Renderer<Buffer> {\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color = buffer.colors[pixelIndex]\n    }\n\n}\n","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlin.math.min\nimport kotlin.math.sqrt\n\n/**\n * A shader that sets all pixels to a single color within x/y constraints.\n */\nclass SimpleSpatialShader() : Shader<SimpleSpatialShader.Buffer>(ShaderId.SIMPLE_SPATIAL) {\n    override fun createBuffer(surface: Surface): Buffer = Buffer()\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer = Buffer().apply { read(reader) }\n\n    override fun createRenderer(surface: Surface): Renderer = Renderer(surface)\n\n    companion object : ShaderReader<SimpleSpatialShader> {\n        override fun parse(reader: ByteArrayReader) = SimpleSpatialShader()\n    }\n\n    inner class Buffer : Shader.Buffer {\n        override val shader: Shader<*>\n            get() = this@SimpleSpatialShader\n\n        var color: Color = Color.WHITE\n        var centerX: Float = 0.5f\n        var centerY: Float = 0.5f\n        var radius: Float = 0.75f\n\n        override fun serialize(writer: ByteArrayWriter) {\n            color.serialize(writer)\n            writer.writeFloat(centerX)\n            writer.writeFloat(centerY)\n            writer.writeFloat(radius)\n        }\n\n        override fun read(reader: ByteArrayReader) {\n            color = Color.parse(reader)\n            centerX = reader.readFloat()\n            centerY = reader.readFloat()\n            radius = reader.readFloat()\n        }\n    }\n\n    class Renderer(surface: Surface) : Shader.Renderer<Buffer> {\n        private val pixelVertices = (surface as? Brain.MappedSurface)?.pixelVertices\n\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color {\n            if (pixelVertices == null || pixelIndex >= pixelVertices.size) return Color.BLACK\n\n            val (pixX, pixY) = pixelVertices[pixelIndex]\n\n            val distX = pixX - buffer.centerX\n            val distY = pixY - buffer.centerY\n            val dist = sqrt(distX * distX + distY * distY)\n            return when {\n                dist < buffer.radius - 0.025f -> buffer.color\n                dist < buffer.radius + 0.025f -> Color.BLACK\n                else -> buffer.color.fade(Color.BLACK, dist * 2)\n            }\n        }\n    }\n}\n","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlin.math.PI\nimport kotlin.math.sin\n\n/**\n * A shader that treats a surface's pixels as a linear strip and applies a configurable sine wave along the strip.\n */\nclass SineWaveShader() : Shader<SineWaveShader.Buffer>(ShaderId.SINE_WAVE) {\n    override fun createBuffer(surface: Surface): Buffer = Buffer()\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer = Buffer().apply { read(reader) }\n\n    override fun createRenderer(surface: Surface): Shader.Renderer<Buffer> = Renderer()\n\n    companion object : ShaderReader<SineWaveShader> {\n        override fun parse(reader: ByteArrayReader) = SineWaveShader()\n    }\n\n    inner class Buffer : Shader.Buffer {\n        override val shader: Shader<*>\n            get() = this@SineWaveShader\n\n        var color: Color = Color.WHITE\n        var theta: Float = 0f\n        var density: Float = 1f\n\n        override fun serialize(writer: ByteArrayWriter) {\n            color.serialize(writer)\n            writer.writeFloat(theta)\n            writer.writeFloat(density)\n        }\n\n        override fun read(reader: ByteArrayReader) {\n            color = Color.parse(reader)\n            theta = reader.readFloat()\n            density = reader.readFloat()\n        }\n    }\n\n    class Renderer : Shader.Renderer<Buffer> {\n        private var pixelCount: Int = 1\n\n        override fun beginFrame(buffer: Buffer, pixelCount: Int) {\n            this.pixelCount = pixelCount\n        }\n\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color {\n            val theta = buffer.theta\n            val density = buffer.density\n\n            val v = sin(theta + 2 * PI * (pixelIndex.toFloat() / pixelCount * density)) / 2 + .5\n            return Color.BLACK.fade(buffer.color, v.toFloat())\n        }\n    }\n}\n","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\n\n/**\n * A shader that sets all pixels to a single color.\n */\nclass SolidShader : Shader<SolidShader.Buffer>(ShaderId.SOLID) {\n    override fun createBuffer(surface: Surface): Buffer = Buffer()\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer = Buffer().apply { read(reader) }\n\n    override fun createRenderer(surface: Surface): Renderer = Renderer()\n\n    companion object : ShaderReader<SolidShader> {\n        override fun parse(reader: ByteArrayReader) = SolidShader()\n    }\n\n    inner class Buffer : Shader.Buffer {\n        override val shader: Shader<*>\n            get() = this@SolidShader\n\n        var color: Color = Color.WHITE\n\n        override fun serialize(writer: ByteArrayWriter) {\n            color.serialize(writer)\n        }\n\n        override fun read(reader: ByteArrayReader) {\n            color = Color.parse(reader)\n        }\n    }\n\n    class Renderer : Shader.Renderer<Buffer> {\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color = buffer.color\n    }\n}\n","package baaahs.shaders\n\nimport baaahs.*\nimport baaahs.io.ByteArrayReader\nimport baaahs.io.ByteArrayWriter\nimport kotlin.random.Random\n\n/**\n * A shader that randomly sets some pixels to white, changing with each frame.\n */\nclass SparkleShader : Shader<SparkleShader.Buffer>(ShaderId.SPARKLE) {\n    override fun createBuffer(surface: Surface): Buffer = Buffer()\n\n    override fun readBuffer(reader: ByteArrayReader): Buffer = Buffer().apply { read(reader) }\n\n    override fun createRenderer(surface: Surface): Shader.Renderer<Buffer> = Renderer()\n\n    companion object : ShaderReader<SparkleShader> {\n        override fun parse(reader: ByteArrayReader) = SparkleShader()\n    }\n\n    inner class Buffer : Shader.Buffer {\n        override val shader: Shader<*> = this@SparkleShader\n\n        var color: Color = Color.WHITE\n        var sparkliness: Float = .1F\n\n        override fun serialize(writer: ByteArrayWriter) {\n            color.serialize(writer)\n            writer.writeFloat(sparkliness)\n        }\n\n        override fun read(reader: ByteArrayReader) {\n            color = Color.parse(reader)\n            sparkliness = reader.readFloat()\n        }\n    }\n\n    class Renderer : Shader.Renderer<Buffer> {\n        override fun draw(buffer: Buffer, pixelIndex: Int): Color {\n            return if (Random.nextFloat() < buffer.sparkliness ) { buffer.color } else { Color.BLACK }\n        }\n    }\n}\n","package baaahs.shows\n\nclass AllShows {\n    companion object {\n        val allShows = listOf(\n            SolidColorShow,\n            SomeDumbShow,\n            RandomShow,\n            CompositeShow,\n            ThumpShow,\n            PanelTweenShow,\n            PixelTweenShow,\n            LifeyShow,\n            SimpleSpatialShow,\n            HeartbleatShow\n        )\n    }\n}","package baaahs.shows\n\nimport baaahs.*\nimport baaahs.gadgets.ColorPicker\nimport baaahs.shaders.CompositingMode\nimport baaahs.shaders.CompositorShader\nimport baaahs.shaders.SineWaveShader\nimport baaahs.shaders.SolidShader\nimport kotlin.math.PI\nimport kotlin.random.Random\n\nobject CompositeShow : Show(\"Composite\") {\n    override fun createRenderer(sheepModel: SheepModel, showRunner: ShowRunner) = object : Renderer {\n        val colorPicker = showRunner.getGadget(\"color\", ColorPicker(\"Color\"))\n\n        val solidShader = SolidShader()\n        val sineWaveShader = SineWaveShader()\n\n        private val shaderBufs = showRunner.allSurfaces.associateWith { surface -> shaderBufsFor(surface) }\n            .toMutableMap()\n\n        private fun shaderBufsFor(surface: Surface): ShaderBufs {\n            val solidShaderBuffer = showRunner.getShaderBuffer(surface, solidShader)\n            val sineWaveShaderBuffer = showRunner.getShaderBuffer(surface, sineWaveShader).apply {\n                density = Random.nextFloat() * 20\n            }\n\n            val compositorShaderBuffer =\n                showRunner.getCompositorBuffer(surface, solidShaderBuffer, sineWaveShaderBuffer, CompositingMode.ADD)\n\n            return ShaderBufs(solidShaderBuffer, sineWaveShaderBuffer, compositorShaderBuffer)\n        }\n\n        private val movingHeadBuffers = sheepModel.eyes.map { showRunner.getMovingHead(it) }\n\n        override fun nextFrame() {\n            val theta = ((getTimeMillis() % 10000 / 1000f) % (2 * PI)).toFloat()\n\n            var i = 0\n            shaderBufs.values.forEach { shaderBuffer ->\n                shaderBuffer.solidShaderBuffer.color = colorPicker.color\n                shaderBuffer.sineWaveShaderBuffer.color = Color.WHITE\n                shaderBuffer.sineWaveShaderBuffer.theta = theta + i++\n                shaderBuffer.compositorShaderBuffer.mode = CompositingMode.ADD\n                shaderBuffer.compositorShaderBuffer.fade = 1f\n            }\n\n            movingHeadBuffers.forEach { buf ->\n                buf.colorWheel = buf.closestColorFor(colorPicker.color)\n                buf.pan = PI.toFloat() / 2\n                buf.tilt = theta / 2\n            }\n        }\n\n        override fun surfacesChanged(newSurfaces: List<Surface>, removedSurfaces: List<Surface>) {\n            removedSurfaces.forEach { shaderBufs.remove(it) }\n            newSurfaces.forEach { shaderBufs[it] = shaderBufsFor(it) }\n        }\n    }\n\n    class ShaderBufs(\n        val solidShaderBuffer: SolidShader.Buffer,\n        val sineWaveShaderBuffer: SineWaveShader.Buffer,\n        val compositorShaderBuffer: CompositorShader.Buffer\n    )\n}\n","package baaahs.shows\n\nimport baaahs.Color\nimport baaahs.SheepModel\nimport baaahs.Show\nimport baaahs.ShowRunner\nimport baaahs.gadgets.Slider\nimport baaahs.shaders.HeartShader\nimport baaahs.shaders.SolidShader\nimport kotlin.math.PI\nimport kotlin.math.abs\nimport kotlin.math.sin\n\nobject HeartbleatShow : Show(\"Heartbleat\") {\n    override fun createRenderer(sheepModel: SheepModel, showRunner: ShowRunner): Renderer {\n        return object : Renderer {\n            val beatProvider = showRunner.getBeatProvider()\n            val hearts = sheepModel.allPanels.filter { it.number == 7 }\n                .map { showRunner.getShaderBuffer(it, HeartShader()) }\n            val heartSizeGadget = showRunner.getGadget(\"heartSize\", Slider(\"Heart Size\", .16f))\n            val strokeSize = showRunner.getGadget(\"strokeSize\", Slider(\"Stroke Size\", .5f))\n            val xOff = showRunner.getGadget(\"xOff\", Slider(\"X Offset\", .4f))\n            val yOff = showRunner.getGadget(\"yOff\", Slider(\"Y Offset\", .67f))\n            val otherSurfaces = showRunner.allUnusedSurfaces.map { showRunner.getShaderBuffer(it, SolidShader()) }\n\n            override fun nextFrame() {\n                var phase = (beatProvider.beat % 1.0) * 3.0f\n                val heartSize = heartSizeGadget.value * if (phase > 1.5 && phase < 2.5f) {\n                    1f + ((.5f - abs(phase - 2)) / 4).toFloat()\n                } else if (phase > 2.5f || phase < 0.5f) {\n                    if (phase > 2.5f) phase -= 3\n                    1f + ((.5f - abs(phase)) / 2).toFloat()\n                } else {\n                    1f\n                }\n\n                hearts.forEach {\n                    it.heartSize = heartSize\n                    it.strokeSize = strokeSize.value\n                    it.xOff = xOff.value\n                    it.yOff = yOff.value\n                }\n\n                otherSurfaces.forEach {\n                    it.color = Color(.25f, .25f, .25f)\n                        .fade(Color(.75f, .3f, .3f), sin(beatProvider.beat / 4.0f * PI).toFloat())\n                }\n            }\n        }\n    }\n\n    val SheepModel.Panel.number: Int\n        get() = Regex(\"\\\\d+\").find(name)?.value?.toInt() ?: -1\n\n}\n","package baaahs.shows\n\nimport baaahs.*\nimport baaahs.gadgets.Slider\nimport baaahs.shaders.SolidShader\nimport kotlin.random.Random\n\nobject LifeyShow : Show(\"Lifey\") {\n    override fun createRenderer(sheepModel: SheepModel, showRunner: ShowRunner): Renderer {\n        val speedSlider = showRunner.getGadget(\"speed\", Slider(\"Speed\", .25f))\n\n        val shader = SolidShader()\n        val shaderBuffers = sheepModel.allPanels.associateWith {\n            showRunner.getShaderBuffer(it, shader).apply { color = Color.WHITE }\n        }\n\n        val selectedPanels = mutableListOf<SheepModel.Panel>()\n        var lastUpdateMs : Long = 0\n\n        fun SheepModel.Panel.neighbors() = sheepModel.neighborsOf(this)\n        fun SheepModel.Panel.isSelected() = selectedPanels.contains(this)\n        fun SheepModel.Panel.neighborsSelected() = neighbors().filter { selectedPanels.contains(it) }.count()\n\n        return object : Renderer {\n            override fun nextFrame() {\n                val nowMs = getTimeMillis()\n                val intervalMs = ((1f - speedSlider.value) * 1000).toLong()\n                if (nowMs > lastUpdateMs + intervalMs) {\n                    if (selectedPanels.isEmpty()) {\n                        selectedPanels.addAll(sheepModel.allPanels.filter { Random.nextFloat() < .5 })\n                    } else {\n                        val newSelectedPanels = mutableListOf<SheepModel.Panel>()\n                        selectedPanels.forEach { panel ->\n                            var living = panel.isSelected()\n\n                            val neighborsSelected = panel.neighborsSelected()\n                            if (living) {\n                                if (neighborsSelected < 1 || neighborsSelected > 3) {\n                                    living = false\n\n                                    // super-lonely panels will move next door instead of dying...\n                                    if (neighborsSelected == 0) {\n                                        val moveToNeighbor = panel.neighbors().random()\n                                        moveToNeighbor?.let { newSelectedPanels.add(it) }\n                                        living = false\n                                    }\n                                }\n                            } else {\n                                if (neighborsSelected == 2 || neighborsSelected == 3) {\n                                    living = true\n                                }\n                            }\n\n                            // sometimes panels spontaneously become alive or die...\n                            if (Random.nextFloat() < .1) {\n                                living = !living\n                            }\n\n                            if (living) {\n                                newSelectedPanels.add(panel)\n                            }\n                        }\n                        selectedPanels.clear()\n                        selectedPanels.addAll(newSelectedPanels)\n                    }\n\n                    lastUpdateMs = nowMs\n                }\n\n                shaderBuffers.forEach { (panel, buffer) ->\n                    buffer.color = if (selectedPanels.contains(panel)) Color.WHITE else Color.BLACK\n                }\n            }\n        }\n    }\n}","package baaahs.shows\n\nimport baaahs.*\nimport baaahs.shaders.PixelShader\nimport kotlin.random.Random\n\nobject PixelTweenShow : Show(\"PixelTweenShow\") {\n    override fun createRenderer(sheepModel: SheepModel, showRunner: ShowRunner): Renderer {\n        val colorArray = arrayOf(\n            Color.from(\"#FF8A47\"),\n            Color.from(\"#FC6170\"),\n            Color.from(\"#8CEEEE\"),\n            Color.from(\"#26BFBF\"),\n            Color.from(\"#FFD747\")\n        )\n\n        return object : Renderer {\n            val shaderBuffers = showRunner.allSurfaces.map { surface ->\n                showRunner.getShaderBuffer(surface, PixelShader())\n            }\n            val fadeTimeMs = 1000\n\n            override fun nextFrame() {\n                val now = getTimeMillis().and(0xfffffff).toInt()\n                shaderBuffers.forEachIndexed { i, buffer ->\n                    val colorIndex = (now / fadeTimeMs + i) % colorArray.size\n                    val startColor = colorArray[colorIndex]\n                    val endColor = colorArray[(colorIndex + 1) % colorArray.size]\n\n                    val colors = buffer.colors\n                    colors.forEachIndexed { index, _ ->\n                        if (Random.nextFloat() < .1) {\n                            colors[index] = Color.WHITE\n                        } else {\n                            val tweenedColor =\n                                startColor.fade(endColor, ((now + index) % fadeTimeMs) / fadeTimeMs.toFloat())\n                            colors[index] = tweenedColor\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    val SheepModel.Panel.number: Int\n        get() = Regex(\"\\\\d+\").find(name)?.value?.toInt() ?: -1\n\n}\n","package baaahs.shows\n\nimport baaahs.*\nimport baaahs.shaders.PixelShader\nimport kotlin.random.Random\n\nobject RandomShow : Show(\"Random\") {\n    override fun createRenderer(sheepModel: SheepModel, showRunner: ShowRunner) = object : Renderer {\n        val pixelShaderBuffers = showRunner.allSurfaces.map { surface ->\n            showRunner.getShaderBuffer(surface, PixelShader())\n        }\n        val movingHeadBuffers = sheepModel.eyes.map { showRunner.getMovingHead(it) }\n\n        override fun nextFrame() {\n            pixelShaderBuffers.forEach { shaderBuffer ->\n                for (i in shaderBuffer.colors.indices) {\n                    shaderBuffer.colors[i] = Color.random()\n                }\n            }\n\n            movingHeadBuffers.forEach { shenzarpy ->\n                shenzarpy.colorWheel = shenzarpy.closestColorFor(Color.random())\n                shenzarpy.pan = Random.nextFloat() * Shenzarpy.panRange.endInclusive\n                shenzarpy.tilt = Random.nextFloat() * Shenzarpy.tiltRange.endInclusive\n            }\n        }\n    }\n}\n","package baaahs.shows\n\nimport baaahs.SheepModel\nimport baaahs.Show\nimport baaahs.ShowRunner\nimport baaahs.gadgets.ColorPicker\nimport baaahs.gadgets.Slider\nimport baaahs.shaders.SimpleSpatialShader\n\nobject SimpleSpatialShow : Show(\"Spatial\") {\n    override fun createRenderer(sheepModel: SheepModel, showRunner: ShowRunner): Renderer {\n        val colorPicker = showRunner.getGadget(\"color\", ColorPicker(\"Color\"))\n        val centerXSlider = showRunner.getGadget(\"centerX\", Slider(\"center X\", 0.5f))\n        val centerYSlider = showRunner.getGadget(\"centerY\", Slider(\"center Y\", 0.5f))\n        val radiusSlider = showRunner.getGadget(\"radius\", Slider(\"radius\", 0.25f))\n\n        val shader = SimpleSpatialShader()\n        val shaderBuffers = showRunner.allSurfaces.map {\n            showRunner.getShaderBuffer(it, shader)\n        }\n\n        return object : Renderer {\n            override fun nextFrame() {\n                shaderBuffers.forEach {\n                    it.color = colorPicker.color\n                    it.centerX = centerXSlider.value\n                    it.centerY = centerYSlider.value\n                    it.radius = radiusSlider.value\n                }\n            }\n        }\n    }\n}","package baaahs.shows\n\nimport baaahs.Color\nimport baaahs.SheepModel\nimport baaahs.Show\nimport baaahs.ShowRunner\nimport baaahs.gadgets.ColorPicker\nimport baaahs.shaders.SolidShader\n\nobject SolidColorShow : Show(\"Solid Color\") {\n    override fun createRenderer(sheepModel: SheepModel, showRunner: ShowRunner): Renderer {\n        val colorPicker = showRunner.getGadget(\"color\", ColorPicker(\"Color\"))\n\n        val shader = SolidShader()\n        val shaderBuffers = showRunner.allSurfaces.map {\n            showRunner.getShaderBuffer(it, shader).apply { color = Color.WHITE }\n        }\n\n        return object : Renderer {\n            var priorColor = colorPicker.color\n\n            override fun nextFrame() {\n                val color = colorPicker.color\n                if (color != priorColor) {\n                    shaderBuffers.forEach { it.color = color }\n                    priorColor = color\n                }\n            }\n        }\n    }\n}","package baaahs.shows\n\nimport baaahs.*\nimport baaahs.gadgets.ColorPicker\nimport baaahs.shaders.PixelShader\nimport kotlin.math.abs\nimport kotlin.math.sin\nimport kotlin.random.Random\n\nobject SomeDumbShow : Show(\"SomeDumbShow\") {\n    override fun createRenderer(sheepModel: SheepModel, showRunner: ShowRunner) = object : Renderer {\n        val colorPicker = showRunner.getGadget(\"color\", ColorPicker(\"Color\"))\n        val pixelShader = PixelShader()\n\n        val pixelShaderBuffers =\n            showRunner.allSurfaces.map { surface -> showRunner.getShaderBuffer(surface, pixelShader) }\n        val movingHeads = sheepModel.eyes.map { showRunner.getMovingHead(it) }\n\n        override fun nextFrame() {\n            val seed = Random(0)\n            val now = getTimeMillis()\n\n            fun Random.nextTimeShiftedFloat(): Float =\n                sin(nextFloat() + now / 1000.0).toFloat()\n\n            fun Color.desaturateRandomishly(baseSaturation: Float, seed: Random): Color {\n                return withSaturation(baseSaturation * abs(seed.nextFloat()))\n            }\n\n            pixelShaderBuffers.forEach { shaderBuffer ->\n                val baseSaturation = seed.nextFloat()\n                val panelColor = if (seed.nextTimeShiftedFloat() < 0.1) Color.random() else colorPicker.color\n\n                for (i in shaderBuffer.colors.indices) {\n                    shaderBuffer.colors[i] = panelColor.desaturateRandomishly(baseSaturation, seed)\n                }\n            }\n\n            movingHeads.forEach { buf ->\n                buf.colorWheel = buf.closestColorFor(colorPicker.color)\n                buf.pan += (seed.nextTimeShiftedFloat() - .5f) / 5\n                buf.tilt += (seed.nextTimeShiftedFloat() - .5f) / 5\n            }\n        }\n    }\n}\n","package baaahs.shows\n\nimport baaahs.*\nimport baaahs.gadgets.ColorPicker\nimport baaahs.shaders.CompositingMode\nimport baaahs.shaders.CompositorShader\nimport baaahs.shaders.SineWaveShader\nimport baaahs.shaders.SolidShader\nimport kotlin.math.PI\nimport kotlin.random.Random\n\nobject ThumpShow : Show(\"Thump\") {\n    override fun createRenderer(sheepModel: SheepModel, showRunner: ShowRunner) = object : Renderer {\n        private val beatProvider = showRunner.getBeatProvider()\n        val colorPicker = showRunner.getGadget(\"color\", ColorPicker(\"Color\"))\n\n        val solidShader = SolidShader()\n        val sineWaveShader = SineWaveShader()\n        val compositorShader = CompositorShader(solidShader, sineWaveShader)\n\n        private val shaderBufs = showRunner.allSurfaces.map { surface ->\n            val solidShaderBuffer = showRunner.getShaderBuffer(surface, solidShader)\n\n            val sineWaveShaderBuffer = showRunner.getShaderBuffer(surface, sineWaveShader).apply {\n                density = Random.nextFloat() * 20\n            }\n\n            val compositorShaderBuffer =\n                showRunner.getCompositorBuffer(surface, solidShaderBuffer, sineWaveShaderBuffer, CompositingMode.ADD, 1f)\n\n            ShaderBufs(solidShaderBuffer, sineWaveShaderBuffer, compositorShaderBuffer)\n        }\n\n        private val movingHeadBuffers = sheepModel.eyes.map { showRunner.getMovingHead(it) }\n\n        init {\n//        println(\"Created new CompositeShow, we have ${shaderBufs.size} buffers\")\n        }\n\n        override fun nextFrame() {\n            val theta = ((getTimeMillis() / 1000f) % (2 * PI)).toFloat()\n            val beat = beatProvider.beat\n\n            var i = 0\n            shaderBufs.forEach { shaderBuffer ->\n                shaderBuffer.solidShaderBuffer.color = Color.BLACK.fade(colorPicker.color, beat % 1f)\n                shaderBuffer.sineWaveShaderBuffer.color = if (beat < .2) Color.WHITE else Color.ORANGE\n                shaderBuffer.sineWaveShaderBuffer.theta = theta + i++\n                shaderBuffer.compositorShaderBuffer.mode = CompositingMode.ADD\n                shaderBuffer.compositorShaderBuffer.fade = 1f\n            }\n\n            movingHeadBuffers.forEach { buf ->\n                buf.colorWheel = buf.closestColorFor(colorPicker.color)\n                buf.pan = PI.toFloat() / 2\n                buf.tilt = beat / PI.toFloat()\n            }\n        }\n    }\n\n    class ShaderBufs(\n        val solidShaderBuffer: SolidShader.Buffer,\n        val sineWaveShaderBuffer: SineWaveShader.Buffer,\n        val compositorShaderBuffer: CompositorShader.Buffer\n    )\n}\n","package baaahs.sim\n\nimport baaahs.Dmx\n\nclass FakeDmxUniverse : Dmx.Universe() {\n    private val channelsOut = ByteArray(512)\n    private val channelsIn = ByteArray(512)\n    private val listeners = mutableListOf<() -> Unit>()\n\n    override fun writer(baseChannel: Int, channelCount: Int) =\n        Dmx.Buffer(channelsOut, baseChannel, channelCount)\n\n    fun reader(baseChannel: Int, channelCount: Int, listener: () -> Unit): Dmx.Buffer {\n        listeners.add(listener)\n        return Dmx.Buffer(channelsIn, baseChannel, channelCount)\n    }\n\n    override fun sendFrame() {\n        channelsOut.copyInto(channelsIn)\n        updateListeners()\n    }\n\n    override fun allOff() {\n        for (i in 0..512) channelsIn[i] = 0\n        updateListeners()\n    }\n\n    private fun updateListeners() {\n        listeners.forEach { it() }\n    }\n}","package baaahs.sim\n\nimport baaahs.NetworkDisplay\nimport baaahs.net.Network\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\nimport kotlin.coroutines.CoroutineContext\nimport kotlin.coroutines.EmptyCoroutineContext\nimport kotlin.random.Random\n\nclass FakeNetwork(\n    private val networkDelay: Int = 1,\n    private val display: NetworkDisplay? = null,\n    coroutineContext: CoroutineContext = EmptyCoroutineContext\n) : Network {\n    private val coroutineScope: CoroutineScope = object : CoroutineScope {\n        override val coroutineContext: CoroutineContext get() = coroutineContext\n    }\n    private var nextAddress = 0xb00f\n    private val udpListeners: MutableMap<Pair<Network.Address, Int>, Network.UdpListener> = hashMapOf()\n    private val udpListenersByPort: MutableMap<Int, MutableList<Network.UdpListener>> = hashMapOf()\n\n    private val tcpServerSocketsByPort: MutableMap<Pair<Network.Address, Int>, Network.TcpServerSocketListener> =\n        hashMapOf()\n\n    override fun link(): Network.Link {\n        val address = FakeAddress(nextAddress++)\n        return FakeLink(address)\n    }\n\n    private fun listenUdp(address: Network.Address, port: Int, udpListener: Network.UdpListener) {\n        udpListeners.put(Pair(address, port), udpListener)\n        val portListeners = udpListenersByPort.getOrPut(port) { mutableListOf() }\n        portListeners.add(udpListener)\n    }\n\n    private fun sendUdp(fromAddress: Network.Address, toAddress: Network.Address, port: Int, bytes: ByteArray) {\n        if (!sendPacketSuccess()) {\n            display?.droppedPacket()\n            return\n        }\n\n        val listener = udpListeners[Pair(toAddress, port)]\n        if (listener != null) transmitUdp(fromAddress, listener, bytes)\n    }\n\n    private fun broadcastUdp(fromAddress: Network.Address, port: Int, bytes: ByteArray) {\n        if (!sendPacketSuccess()) {\n            display?.droppedPacket()\n            return\n        }\n\n        udpListenersByPort[port]?.forEach { listener ->\n            transmitUdp(fromAddress, listener, bytes)\n        }\n    }\n\n    private fun transmitUdp(fromAddress: Network.Address, udpListener: Network.UdpListener, bytes: ByteArray) {\n        coroutineScope.launch {\n            networkDelay()\n\n            if (!receivePacketSuccess()) {\n                display?.droppedPacket()\n            } else {\n                display?.receivedPacket()\n                udpListener.receive(fromAddress, bytes)\n            }\n        }\n    }\n\n    private fun listenTcp(\n        myAddress: Network.Address,\n        port: Int,\n        tcpServerSocketListener: Network.TcpServerSocketListener\n    ) {\n        tcpServerSocketsByPort[Pair(myAddress, port)] = tcpServerSocketListener\n    }\n\n    private fun connectTcp(\n        clientAddress: Network.Address,\n        serverAddress: Network.Address,\n        serverPort: Int,\n        clientListener: Network.TcpListener\n    ): Network.TcpConnection {\n        val serverSocketListener = tcpServerSocketsByPort[Pair(serverAddress, serverPort)]\n        if (serverSocketListener == null) {\n            val connection = FakeTcpConnection(clientAddress, serverAddress, serverPort, null)\n            coroutineScope.launch {\n                networkDelay()\n                clientListener.reset(connection);\n            }\n            return connection\n        }\n\n        lateinit var clientSideConnection: FakeTcpConnection\n        val serverSideConnection = FakeTcpConnection(clientAddress, serverAddress, serverPort, clientListener) {\n            clientSideConnection\n        }\n\n        val serverListener = serverSocketListener.incomingConnection(serverSideConnection)\n\n        clientSideConnection = FakeTcpConnection(clientAddress, serverAddress, serverPort, serverListener) {\n            serverSideConnection\n        }\n\n        coroutineScope.launch {\n            networkDelay();\n            clientListener.connected(clientSideConnection)\n        }\n\n        coroutineScope.launch {\n            networkDelay();\n            serverListener.connected(serverSideConnection)\n        }\n\n        return clientSideConnection\n    }\n\n    inner class FakeTcpConnection(\n        override val fromAddress: Network.Address,\n        override val toAddress: Network.Address,\n        override val port: Int,\n        private val tcpListener: Network.TcpListener? = null,\n        private val otherListener: (() -> Network.TcpConnection)? = null\n    ) : Network.TcpConnection {\n        override fun send(bytes: ByteArray) {\n            coroutineScope.launch {\n                tcpListener?.receive(otherListener!!(), bytes)\n            }\n        }\n    }\n\n    private fun sendPacketSuccess() = Random.nextFloat() > packetLossRate() / 2\n    private fun receivePacketSuccess() = Random.nextFloat() > packetLossRate() / 2\n    private fun packetLossRate() = display?.packetLossRate ?: 0f\n\n    private inner class FakeLink(override val myAddress: Network.Address) : Network.Link {\n        override val udpMtu = 1500\n\n        override fun listenUdp(port: Int, udpListener: Network.UdpListener) {\n            this@FakeNetwork.listenUdp(myAddress, port, udpListener)\n        }\n\n        override fun sendUdp(toAddress: Network.Address, port: Int, bytes: ByteArray) {\n            this@FakeNetwork.sendUdp(myAddress, toAddress, port, bytes)\n        }\n\n        override fun broadcastUdp(port: Int, bytes: ByteArray) {\n            this@FakeNetwork.broadcastUdp(myAddress, port, bytes)\n        }\n\n        override fun listenTcp(port: Int, tcpServerSocketListener: Network.TcpServerSocketListener) {\n            this@FakeNetwork.listenTcp(myAddress, port, tcpServerSocketListener)\n        }\n\n        override fun connectTcp(\n            toAddress: Network.Address,\n            port: Int,\n            tcpListener: Network.TcpListener\n        ): Network.TcpConnection = this@FakeNetwork.connectTcp(myAddress, toAddress, port, tcpListener)\n    }\n\n    private suspend fun networkDelay() {\n        if (networkDelay != 0) delay(networkDelay.toLong())\n    }\n\n    private data class FakeAddress(val id: Int) : Network.Address {\n        override fun toString(): String = \"x${id.toString(16)}\"\n    }\n}","package baaahs\n\nimport kotlinx.coroutines.delay\nimport kotlin.math.PI\nimport kotlin.random.Random\n\nfun <E> List<E>.random(): E? = if (size > 0) get(Random.nextInt(size)) else null\n\nfun <E> List<E>.random(random: Random): E? = if (size > 0) get(random.nextInt(size)) else null\n\nfun <E> Collection<E>.only(description: String = \"item\"): E {\n    if (size != 1) throw IllegalArgumentException(\"Expected one $description, found $size: $this\")\n    else return iterator().next()\n}\n\nfun toRadians(degrees: Float) = (degrees * PI / 180).toFloat()\n\nsuspend fun randomDelay(timeMs: Int) {\n    delay(Random.nextInt(timeMs).toLong())\n}\n\nclass logger {\n    companion object {\n        fun debug(message: String) {\n            println(\"DEBUG: $message\")\n        }\n\n        fun info(message: String) {\n            println(\"INFO: $message\")\n        }\n\n        fun warn(message: String) {\n            println(\"WARN: $message\")\n        }\n\n        fun error(message: String) {\n            println(\"ERROR: $message\")\n        }\n    }\n}\n\n\nexpect fun getTimeMillis(): Long\nexpect fun doRunBlocking(block: suspend () -> Unit)\n\nexpect fun getResource(name: String): String\n\ninternal fun time(function: () -> Unit): Long {\n    val now = getTimeMillis()\n    function.invoke()\n    return getTimeMillis() - now\n}\n","package baaahs\n\nimport baaahs.net.Network\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.launch\nimport org.w3c.dom.Document\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLSelectElement\nimport org.w3c.dom.get\nimport kotlin.browser.document\nimport kotlin.dom.addClass\nimport kotlin.dom.appendElement\nimport kotlin.dom.appendText\nimport kotlin.dom.clear\n\nclass JsDisplay : Display {\n    override fun forNetwork(): NetworkDisplay = JsNetworkDisplay(document)\n\n    override fun forPinky(): PinkyDisplay =\n        JsPinkyDisplay(document.getElementById(\"pinkyView\")!!)\n\n    override fun forBrain(): BrainDisplay =\n        JsBrainDisplay(\n            document.getElementById(\"brainsView\")!!,\n            document.getElementById(\"brainDetails\")!!\n        )\n}\n\nclass JsNetworkDisplay(document: Document) : NetworkDisplay {\n    private val packetLossRateSpan = document.getElementById(\"networkPacketLossRate\")!!.apply {\n        addEventListener(\"click\", {\n            packetLossRate = kotlin.browser.window.prompt(\n                \"Packet loss rate (%):\", \"${(packetLossRate * 100).toInt()}\"\n            )!!.toFloat() / 100\n        })\n    }\n\n    override var packetLossRate: Float = 0.05f\n        set(value) {\n            packetLossRateSpan.textContent = \"${(value * 100).toInt()}%\"\n            field = value\n        }\n\n    init {\n        packetLossRate = 0.05f\n    }\n\n\n    private val packetsReceivedSpan = document.getElementById(\"networkPacketsReceived\")!!\n    private val packetsDroppedSpan = document.getElementById(\"networkPacketsDropped\")!!\n\n    private var packetsReceived = 0\n    private var packetsDropped = 0\n\n    override fun receivedPacket() {\n        packetsReceivedSpan.textContent = packetsReceived++.toString()\n    }\n\n    override fun droppedPacket() {\n        packetsDroppedSpan.textContent = packetsDropped++.toString()\n    }\n}\n\nclass JsPinkyDisplay(element: Element) : PinkyDisplay {\n    override var onShowChange: (() -> Unit) = {}\n    override var selectedShow: Show? = null\n        set(value) {\n            field = value\n            val options = showListInput.options\n            for (i in 0 until options.length) {\n                if (options[i]?.textContent == value?.name) showListInput.selectedIndex = i\n            }\n        }\n\n    override var nextFrameMs: Int = 0\n        set(value) {\n            field = value\n            nextFrameElapsed.textContent = \"${value}ms\"\n        }\n\n    override var stats: Pinky.NetworkStats? = null\n        set(value) {\n            field = value\n            statsSpan.textContent = value?.run { \"$bytesSent bytes / $packetsSent packets sent\" } ?: \"?\"\n        }\n\n    private val brainCountDiv: Element\n    private val beat1: Element\n    private val beat2: Element\n    private val beat3: Element\n    private val beat4: Element\n    private val beats: List<Element>\n    private var showList = emptyList<Show>()\n    private val showListInput: HTMLSelectElement\n    private var nextFrameElapsed: Element\n    private var statsSpan: Element\n\n    init {\n        element.appendText(\"Brains online: \")\n        brainCountDiv = element.appendElement(\"span\") {}\n\n        val beatsDiv = element.appendElement(\"div\") {\n            id = \"beatsDiv\"\n            appendElement(\"b\") { appendText(\"Beats: \") }\n            appendElement(\"br\") {}\n        }\n        beat1 = beatsDiv.appendElement(\"span\") { appendText(\"1\") }\n        beat2 = beatsDiv.appendElement(\"span\") { appendText(\"2\") }\n        beat3 = beatsDiv.appendElement(\"span\") { appendText(\"3\") }\n        beat4 = beatsDiv.appendElement(\"span\") { appendText(\"4\") }\n        beats = listOf(beat1, beat2, beat3, beat4)\n\n        element.appendElement(\"b\") { appendText(\"Renderer: \") }\n        showListInput = element.appendElement(\"select\") { className = \"showsDiv\" } as HTMLSelectElement\n        showListInput.onchange = {\n            selectedShow = showList.find { it.name == showListInput.selectedOptions[0]?.textContent }\n            onShowChange.invoke()\n        }\n\n        element.appendText(\".nextFrame(): \")\n        nextFrameElapsed = element.appendElement(\"span\") {}\n        element.appendElement(\"br\") { }\n        element.appendElement(\"b\") { appendText(\"Data to Brains: \") }\n        statsSpan = element.appendElement(\"span\") {}\n    }\n\n    override fun listShows(shows: List<Show>) {\n        showListInput.clear()\n        showList = shows\n        shows.forEach {\n            showListInput.appendElement(\"option\") { appendText(it.name) }\n        }\n    }\n\n    override var brainCount: Int = 0\n        set(value) {\n            brainCountDiv.clear()\n            brainCountDiv.appendText(value.toString())\n            field = value\n        }\n\n    override var beat: Int = 0\n        set (value) {\n            beats[field].classList.clear()\n            beats[value].classList.add(\"selected\")\n\n            field = value\n        }\n}\n\nclass JsBrainDisplay(container: Element, detailsContainer: Element) : BrainDisplay {\n    override var id: String? = null\n    override var surface: Surface? = null\n    override var onReset: suspend () -> Unit = {}\n\n    private var myDiv = container.appendElement(\"div\") {\n        addClass(\"brain-box\", \"brain-offline\")\n        this.addEventListener(\"click\", { GlobalScope.launch { onReset() } })\n        this.addEventListener(\"mouseover\", {\n            detailsContainer.clear()\n            detailsContainer.appendElement(\"hr\") {}\n            detailsContainer.appendElement(\"b\") {\n                appendText(\"Brain ${this@JsBrainDisplay.id}\")\n            }\n            detailsContainer.appendElement(\"div\") {\n                appendText(\"Surface: ${surface?.describe()}\")\n            }\n        })\n    }\n\n    override fun haveLink(link: Network.Link) {\n        myDiv.classList.remove(\"brain-offline\")\n        myDiv.classList.add(\"brain-link\")\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See libraries/tools/idl2k for details\n\n@file:Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npackage org.w3c.dom\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Navigator](https://developer.mozilla.org/en/docs/Web/API/Navigator) to Kotlin\n */\npublic external abstract class Navigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorContentUtils, NavigatorCookies, NavigatorPlugins, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n    open val maxTouchPoints: Int\n    open val mediaDevices: MediaDevices\n    open val clipboard: Clipboard\n    fun vibrate(pattern: dynamic): Boolean\n    fun getUserMedia(constraints: MediaStreamConstraints, successCallback: (MediaStream) -> Unit, errorCallback: (dynamic) -> Unit): Unit\n}\n\n/**\n * Exposes the JavaScript [Document](https://developer.mozilla.org/en/docs/Web/API/Document) to Kotlin\n */\npublic external open class Document : Node, GlobalEventHandlers, DocumentAndElementEventHandlers, NonElementParentNode, DocumentOrShadowRoot, ParentNode, GeometryUtils {\n    open val fullscreenEnabled: Boolean\n    open val fullscreen: Boolean\n    var onfullscreenchange: ((Event) -> dynamic)?\n    var onfullscreenerror: ((Event) -> dynamic)?\n    open val rootElement: SVGSVGElement?\n    var title: String\n    open val referrer: String\n    var domain: String\n    open val activeElement: Element?\n    open val location: Location?\n    var cookie: String\n    open val lastModified: String\n    open val readyState: DocumentReadyState\n    var dir: String\n    var body: HTMLElement?\n    open val head: HTMLHeadElement?\n    open val images: HTMLCollection\n    open val embeds: HTMLCollection\n    open val plugins: HTMLCollection\n    open val links: HTMLCollection\n    open val forms: HTMLCollection\n    open val scripts: HTMLCollection\n    open val currentScript: HTMLOrSVGScriptElement?\n    open val defaultView: Window?\n    var designMode: String\n    var onreadystatechange: ((Event) -> dynamic)?\n    var fgColor: String\n    var linkColor: String\n    var vlinkColor: String\n    var alinkColor: String\n    var bgColor: String\n    open val anchors: HTMLCollection\n    open val applets: HTMLCollection\n    open val all: HTMLAllCollection\n    open val implementation: DOMImplementation\n    open val URL: String\n    open val documentURI: String\n    open val origin: String\n    open val compatMode: String\n    open val characterSet: String\n    open val charset: String\n    open val inputEncoding: String\n    open val contentType: String\n    open val doctype: DocumentType?\n    open val documentElement: Element?\n    open val scrollingElement: Element?\n    open val styleSheets: StyleSheetList\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override val fullscreenElement: Element?\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    fun exitFullscreen(): Promise<Unit>\n    fun getElementsByName(elementName: String): NodeList\n    fun open(type: String = definedExternally, replace: String = definedExternally): Document\n    fun open(url: String, name: String, features: String): Window\n    fun close(): Unit\n    fun write(vararg text: String): Unit\n    fun writeln(vararg text: String): Unit\n    fun hasFocus(): Boolean\n    fun execCommand(commandId: String, showUI: Boolean = definedExternally, value: String = definedExternally): Boolean\n    fun queryCommandEnabled(commandId: String): Boolean\n    fun queryCommandIndeterm(commandId: String): Boolean\n    fun queryCommandState(commandId: String): Boolean\n    fun queryCommandSupported(commandId: String): Boolean\n    fun queryCommandValue(commandId: String): String\n    fun clear(): Unit\n    fun captureEvents(): Unit\n    fun releaseEvents(): Unit\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun createElement(localName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createElementNS(namespace: String?, qualifiedName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createDocumentFragment(): DocumentFragment\n    fun createTextNode(data: String): Text\n    fun createCDATASection(data: String): CDATASection\n    fun createComment(data: String): Comment\n    fun createProcessingInstruction(target: String, data: String): ProcessingInstruction\n    fun importNode(node: Node, deep: Boolean = definedExternally): Node\n    fun adoptNode(node: Node): Node\n    fun createAttribute(localName: String): Attr\n    fun createAttributeNS(namespace: String?, qualifiedName: String): Attr\n    fun createEvent(interface_: String): Event\n    fun createRange(): Range\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): NodeIterator\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): NodeIterator\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): TreeWalker\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): TreeWalker\n    fun elementFromPoint(x: Double, y: Double): Element?\n    fun elementsFromPoint(x: Double, y: Double): Array<Element>\n    fun caretPositionFromPoint(x: Double, y: Double): CaretPosition?\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n@kotlin.internal.InlineOnly inline operator fun Document.get(name: String): dynamic = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Window](https://developer.mozilla.org/en/docs/Web/API/Window) to Kotlin\n */\npublic external abstract class Window : EventTarget, GlobalEventHandlers, WindowEventHandlers, WindowOrWorkerGlobalScope, WindowSessionStorage, WindowLocalStorage, GlobalPerformance, UnionMessagePortOrWindow {\n    override val performance: Performance\n    open val window: Window\n    open val self: Window\n    open val document: Document\n    open var name: String\n    open val location: Location\n    open val history: History\n    open val customElements: CustomElementRegistry\n    open val locationbar: BarProp\n    open val menubar: BarProp\n    open val personalbar: BarProp\n    open val scrollbars: BarProp\n    open val statusbar: BarProp\n    open val toolbar: BarProp\n    open var status: String\n    open val closed: Boolean\n    open val frames: Window\n    open val length: Int\n    open val top: Window\n    open var opener: Any?\n    open val parent: Window\n    open val frameElement: Element?\n    open val navigator: Navigator\n    open val applicationCache: ApplicationCache\n    open val external: External\n    open val screen: Screen\n    open val innerWidth: Int\n    open val innerHeight: Int\n    open val scrollX: Double\n    open val pageXOffset: Double\n    open val scrollY: Double\n    open val pageYOffset: Double\n    open val screenX: Int\n    open val screenY: Int\n    open val outerWidth: Int\n    open val outerHeight: Int\n    open val devicePixelRatio: Double\n    fun close(): Unit\n    fun stop(): Unit\n    fun focus(): Unit\n    fun blur(): Unit\n    fun open(url: String = definedExternally, target: String = definedExternally, features: String = definedExternally): Window?\n    fun alert(): Unit\n    fun alert(message: String): Unit\n    fun confirm(message: String = definedExternally): Boolean\n    fun prompt(message: String = definedExternally, default: String = definedExternally): String?\n    fun print(): Unit\n    fun requestAnimationFrame(callback: (Double) -> Unit): Int\n    fun cancelAnimationFrame(handle: Int): Unit\n    fun postMessage(message: Any?, targetOrigin: String, transfer: Array<dynamic> = definedExternally): Unit\n    fun captureEvents(): Unit\n    fun releaseEvents(): Unit\n    fun matchMedia(query: String): MediaQueryList\n    fun moveTo(x: Int, y: Int): Unit\n    fun moveBy(x: Int, y: Int): Unit\n    fun resizeTo(x: Int, y: Int): Unit\n    fun resizeBy(x: Int, y: Int): Unit\n    fun scroll(options: ScrollToOptions = definedExternally): Unit\n    fun scroll(x: Double, y: Double): Unit\n    fun scrollTo(options: ScrollToOptions = definedExternally): Unit\n    fun scrollTo(x: Double, y: Double): Unit\n    fun scrollBy(options: ScrollToOptions = definedExternally): Unit\n    fun scrollBy(x: Double, y: Double): Unit\n    fun getComputedStyle(elt: Element, pseudoElt: String? = definedExternally): CSSStyleDeclaration\n}\n@kotlin.internal.InlineOnly inline operator fun Window.get(name: String): dynamic = asDynamic()[name]\n\npublic external abstract class HTMLAllCollection {\n    open val length: Int\n//    fun namedItem(name: String): UnionElementOrHTMLCollection?\n    fun item(nameOrIndex: String = definedExternally): UnionElementOrHTMLCollection?\n}\n//@kotlin.internal.InlineOnly inline operator fun HTMLAllCollection.get(index: Int): Element? = asDynamic()[index]\n//@kotlin.internal.InlineOnly inline operator fun HTMLAllCollection.get(name: String): UnionElementOrHTMLCollection? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLFormControlsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLFormControlsCollection) to Kotlin\n */\npublic external abstract class HTMLFormControlsCollection : HTMLCollection {\n//    override fun namedItem(name: String): UnionElementOrRadioNodeList?\n}\n//@kotlin.internal.InlineOnly override inline operator fun HTMLFormControlsCollection.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [RadioNodeList](https://developer.mozilla.org/en/docs/Web/API/RadioNodeList) to Kotlin\n */\npublic external abstract class RadioNodeList : NodeList, UnionElementOrRadioNodeList {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionsCollection) to Kotlin\n */\npublic external abstract class HTMLOptionsCollection : HTMLCollection {\n    override var length: Int\n    open var selectedIndex: Int\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally): Unit\n    fun remove(index: Int): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLOptionsCollection.set(index: Int, option: HTMLOptionElement?): Unit { asDynamic()[index] = option; }\n\n/**\n * Exposes the JavaScript [HTMLElement](https://developer.mozilla.org/en/docs/Web/API/HTMLElement) to Kotlin\n */\npublic external abstract class HTMLElement : Element, ElementCSSInlineStyle, GlobalEventHandlers, DocumentAndElementEventHandlers, ElementContentEditable {\n    open var title: String\n    open var lang: String\n    open var translate: Boolean\n    open var dir: String\n    open val dataset: DOMStringMap\n    open var hidden: Boolean\n    open var tabIndex: Int\n    open var accessKey: String\n    open val accessKeyLabel: String\n    open var draggable: Boolean\n    open val dropzone: DOMTokenList\n    open var contextMenu: HTMLMenuElement?\n    open var spellcheck: Boolean\n    open var innerText: String\n    open val offsetParent: Element?\n    open val offsetTop: Int\n    open val offsetLeft: Int\n    open val offsetWidth: Int\n    open val offsetHeight: Int\n    fun click(): Unit\n    fun focus(): Unit\n    fun blur(): Unit\n    fun forceSpellCheck(): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLUnknownElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUnknownElement) to Kotlin\n */\npublic external abstract class HTMLUnknownElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [DOMStringMap](https://developer.mozilla.org/en/docs/Web/API/DOMStringMap) to Kotlin\n */\npublic external abstract class DOMStringMap {\n}\n@kotlin.internal.InlineOnly inline operator fun DOMStringMap.get(name: String): String? = asDynamic()[name]\n@kotlin.internal.InlineOnly inline operator fun DOMStringMap.set(name: String, value: String): Unit { asDynamic()[name] = value; }\n\n/**\n * Exposes the JavaScript [HTMLHtmlElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHtmlElement) to Kotlin\n */\npublic external abstract class HTMLHtmlElement : HTMLElement {\n    open var version: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadElement) to Kotlin\n */\npublic external abstract class HTMLHeadElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLTitleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTitleElement) to Kotlin\n */\npublic external abstract class HTMLTitleElement : HTMLElement {\n    open var text: String\n}\n\n/**\n * Exposes the JavaScript [HTMLBaseElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBaseElement) to Kotlin\n */\npublic external abstract class HTMLBaseElement : HTMLElement {\n    open var href: String\n    open var target: String\n}\n\n/**\n * Exposes the JavaScript [HTMLLinkElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLinkElement) to Kotlin\n */\npublic external abstract class HTMLLinkElement : HTMLElement, LinkStyle {\n    open var scope: String\n    open var workerType: WorkerType\n    open var href: String\n    open var crossOrigin: String?\n    open var rel: String\n    @JsName(\"as\") open var as_: RequestDestination\n    open val relList: DOMTokenList\n    open var media: String\n    open var nonce: String\n    open var hreflang: String\n    open var type: String\n    open val sizes: DOMTokenList\n    open var referrerPolicy: String\n    open var charset: String\n    open var rev: String\n    open var target: String\n}\n\n/**\n * Exposes the JavaScript [HTMLMetaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMetaElement) to Kotlin\n */\npublic external abstract class HTMLMetaElement : HTMLElement {\n    open var name: String\n    open var httpEquiv: String\n    open var content: String\n    open var scheme: String\n}\n\n/**\n * Exposes the JavaScript [HTMLStyleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLStyleElement) to Kotlin\n */\npublic external abstract class HTMLStyleElement : HTMLElement, LinkStyle {\n    open var media: String\n    open var nonce: String\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLBodyElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBodyElement) to Kotlin\n */\npublic external abstract class HTMLBodyElement : HTMLElement, WindowEventHandlers {\n    open var text: String\n    open var link: String\n    open var vLink: String\n    open var aLink: String\n    open var bgColor: String\n    open var background: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadingElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadingElement) to Kotlin\n */\npublic external abstract class HTMLHeadingElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLParagraphElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParagraphElement) to Kotlin\n */\npublic external abstract class HTMLParagraphElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHRElement) to Kotlin\n */\npublic external abstract class HTMLHRElement : HTMLElement {\n    open var align: String\n    open var color: String\n    open var noShade: Boolean\n    open var size: String\n    open var width: String\n}\n\n/**\n * Exposes the JavaScript [HTMLPreElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPreElement) to Kotlin\n */\npublic external abstract class HTMLPreElement : HTMLElement {\n    open var width: Int\n}\n\n/**\n * Exposes the JavaScript [HTMLQuoteElement](https://developer.mozilla.org/en/docs/Web/API/HTMLQuoteElement) to Kotlin\n */\npublic external abstract class HTMLQuoteElement : HTMLElement {\n    open var cite: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOListElement) to Kotlin\n */\npublic external abstract class HTMLOListElement : HTMLElement {\n    open var reversed: Boolean\n    open var start: Int\n    open var type: String\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLUListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUListElement) to Kotlin\n */\npublic external abstract class HTMLUListElement : HTMLElement {\n    open var compact: Boolean\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLLIElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLIElement) to Kotlin\n */\npublic external abstract class HTMLLIElement : HTMLElement {\n    open var value: Int\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLDListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDListElement) to Kotlin\n */\npublic external abstract class HTMLDListElement : HTMLElement {\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDivElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDivElement) to Kotlin\n */\npublic external abstract class HTMLDivElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLAnchorElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAnchorElement) to Kotlin\n */\npublic external abstract class HTMLAnchorElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var hreflang: String\n    open var type: String\n    open var text: String\n    open var referrerPolicy: String\n    open var coords: String\n    open var charset: String\n    open var name: String\n    open var rev: String\n    open var shape: String\n}\n\n/**\n * Exposes the JavaScript [HTMLDataElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataElement) to Kotlin\n */\npublic external abstract class HTMLDataElement : HTMLElement {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTimeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTimeElement) to Kotlin\n */\npublic external abstract class HTMLTimeElement : HTMLElement {\n    open var dateTime: String\n}\n\n/**\n * Exposes the JavaScript [HTMLSpanElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSpanElement) to Kotlin\n */\npublic external abstract class HTMLSpanElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLBRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBRElement) to Kotlin\n */\npublic external abstract class HTMLBRElement : HTMLElement {\n    open var clear: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHyperlinkElementUtils](https://developer.mozilla.org/en/docs/Web/API/HTMLHyperlinkElementUtils) to Kotlin\n */\npublic external interface HTMLHyperlinkElementUtils {\n    var href: String\n    val origin: String\n    var protocol: String\n    var username: String\n    var password: String\n    var host: String\n    var hostname: String\n    var port: String\n    var pathname: String\n    var search: String\n    var hash: String\n}\n\n/**\n * Exposes the JavaScript [HTMLModElement](https://developer.mozilla.org/en/docs/Web/API/HTMLModElement) to Kotlin\n */\npublic external abstract class HTMLModElement : HTMLElement {\n    open var cite: String\n    open var dateTime: String\n}\n\n/**\n * Exposes the JavaScript [HTMLPictureElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPictureElement) to Kotlin\n */\npublic external abstract class HTMLPictureElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLSourceElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSourceElement) to Kotlin\n */\npublic external abstract class HTMLSourceElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var srcset: String\n    open var sizes: String\n    open var media: String\n}\n\n/**\n * Exposes the JavaScript [HTMLImageElement](https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement) to Kotlin\n */\npublic external abstract class HTMLImageElement : HTMLElement, TexImageSource, HTMLOrSVGImageElement {\n    open var alt: String\n    open var src: String\n    open var srcset: String\n    open var sizes: String\n    open var crossOrigin: String?\n    open var useMap: String\n    open var isMap: Boolean\n    open var width: Int\n    open var height: Int\n    open val naturalWidth: Int\n    open val naturalHeight: Int\n    open val complete: Boolean\n    open val currentSrc: String\n    open var referrerPolicy: String\n    open var name: String\n    open var lowsrc: String\n    open var align: String\n    open var hspace: Int\n    open var vspace: Int\n    open var longDesc: String\n    open var border: String\n    open val x: Int\n    open val y: Int\n}\n\n/**\n * Exposes the JavaScript [Image](https://developer.mozilla.org/en/docs/Web/API/Image) to Kotlin\n */\npublic external open class Image(width: Int = definedExternally, height: Int = definedExternally) : HTMLImageElement {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override val style: CSSStyleDeclaration\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [HTMLIFrameElement](https://developer.mozilla.org/en/docs/Web/API/HTMLIFrameElement) to Kotlin\n */\npublic external abstract class HTMLIFrameElement : HTMLElement {\n    open var src: String\n    open var srcdoc: String\n    open var name: String\n    open val sandbox: DOMTokenList\n    open var allowFullscreen: Boolean\n    open var allowUserMedia: Boolean\n    open var width: String\n    open var height: String\n    open var referrerPolicy: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var align: String\n    open var scrolling: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var marginHeight: String\n    open var marginWidth: String\n    fun getSVGDocument(): Document?\n}\n\n/**\n * Exposes the JavaScript [HTMLEmbedElement](https://developer.mozilla.org/en/docs/Web/API/HTMLEmbedElement) to Kotlin\n */\npublic external abstract class HTMLEmbedElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var width: String\n    open var height: String\n    open var align: String\n    open var name: String\n    fun getSVGDocument(): Document?\n}\n\n/**\n * Exposes the JavaScript [HTMLObjectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLObjectElement) to Kotlin\n */\npublic external abstract class HTMLObjectElement : HTMLElement {\n    open var data: String\n    open var type: String\n    open var typeMustMatch: Boolean\n    open var name: String\n    open var useMap: String\n    open val form: HTMLFormElement?\n    open var width: String\n    open var height: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open var align: String\n    open var archive: String\n    open var code: String\n    open var declare: Boolean\n    open var hspace: Int\n    open var standby: String\n    open var vspace: Int\n    open var codeBase: String\n    open var codeType: String\n    open var border: String\n    fun getSVGDocument(): Document?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLParamElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParamElement) to Kotlin\n */\npublic external abstract class HTMLParamElement : HTMLElement {\n    open var name: String\n    open var value: String\n    open var type: String\n    open var valueType: String\n}\n\n/**\n * Exposes the JavaScript [HTMLVideoElement](https://developer.mozilla.org/en/docs/Web/API/HTMLVideoElement) to Kotlin\n */\npublic external abstract class HTMLVideoElement : HTMLMediaElement, TexImageSource {\n    open var width: Int\n    open var height: Int\n    open val videoWidth: Int\n    open val videoHeight: Int\n    open var poster: String\n    open var playsInline: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLAudioElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement) to Kotlin\n */\npublic external abstract class HTMLAudioElement : HTMLMediaElement {\n}\n\npublic external open class Audio(src: String = definedExternally) : HTMLAudioElement {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override val style: CSSStyleDeclaration\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [HTMLTrackElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTrackElement) to Kotlin\n */\npublic external abstract class HTMLTrackElement : HTMLElement {\n    open var kind: String\n    open var src: String\n    open var srclang: String\n    open var label: String\n    open var default: Boolean\n    open val readyState: Short\n    open val track: TextTrack\n\n    companion object {\n        val NONE: Short\n        val LOADING: Short\n        val LOADED: Short\n        val ERROR: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMediaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMediaElement) to Kotlin\n */\npublic external abstract class HTMLMediaElement : HTMLElement {\n    open val error: MediaError?\n    open var src: String\n    open var srcObject: dynamic\n    open val currentSrc: String\n    open var crossOrigin: String?\n    open val networkState: Short\n    open var preload: String\n    open val buffered: TimeRanges\n    open val readyState: Short\n    open val seeking: Boolean\n    open var currentTime: Double\n    open val duration: Double\n    open val paused: Boolean\n    open var defaultPlaybackRate: Double\n    open var playbackRate: Double\n    open val played: TimeRanges\n    open val seekable: TimeRanges\n    open val ended: Boolean\n    open var autoplay: Boolean\n    open var loop: Boolean\n    open var controls: Boolean\n    open var volume: Double\n    open var muted: Boolean\n    open var defaultMuted: Boolean\n    open val audioTracks: AudioTrackList\n    open val videoTracks: VideoTrackList\n    open val textTracks: TextTrackList\n    fun load(): Unit\n    fun canPlayType(type: String): CanPlayTypeResult\n    fun fastSeek(time: Double): Unit\n    fun getStartDate(): dynamic\n    fun play(): Promise<Unit>\n    fun pause(): Unit\n    fun addTextTrack(kind: TextTrackKind, label: String = definedExternally, language: String = definedExternally): TextTrack\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [MediaError](https://developer.mozilla.org/en/docs/Web/API/MediaError) to Kotlin\n */\npublic external abstract class MediaError {\n    open val code: Short\n\n    companion object {\n        val MEDIA_ERR_ABORTED: Short\n        val MEDIA_ERR_NETWORK: Short\n        val MEDIA_ERR_DECODE: Short\n        val MEDIA_ERR_SRC_NOT_SUPPORTED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [AudioTrackList](https://developer.mozilla.org/en/docs/Web/API/AudioTrackList) to Kotlin\n */\npublic external abstract class AudioTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): AudioTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun AudioTrackList.get(index: Int): AudioTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [AudioTrack](https://developer.mozilla.org/en/docs/Web/API/AudioTrack) to Kotlin\n */\npublic external abstract class AudioTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var enabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [VideoTrackList](https://developer.mozilla.org/en/docs/Web/API/VideoTrackList) to Kotlin\n */\npublic external abstract class VideoTrackList : EventTarget {\n    open val length: Int\n    open val selectedIndex: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): VideoTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun VideoTrackList.get(index: Int): VideoTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [VideoTrack](https://developer.mozilla.org/en/docs/Web/API/VideoTrack) to Kotlin\n */\npublic external abstract class VideoTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var selected: Boolean\n}\n\npublic external abstract class TextTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): TextTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun TextTrackList.get(index: Int): TextTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrack](https://developer.mozilla.org/en/docs/Web/API/TextTrack) to Kotlin\n */\npublic external abstract class TextTrack : EventTarget, UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val kind: TextTrackKind\n    open val label: String\n    open val language: String\n    open val id: String\n    open val inBandMetadataTrackDispatchType: String\n    open var mode: TextTrackMode\n    open val cues: TextTrackCueList?\n    open val activeCues: TextTrackCueList?\n    open var oncuechange: ((Event) -> dynamic)?\n    fun addCue(cue: TextTrackCue): Unit\n    fun removeCue(cue: TextTrackCue): Unit\n}\n\npublic external abstract class TextTrackCueList {\n    open val length: Int\n    fun getCueById(id: String): TextTrackCue?\n}\n@kotlin.internal.InlineOnly inline operator fun TextTrackCueList.get(index: Int): TextTrackCue? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrackCue](https://developer.mozilla.org/en/docs/Web/API/TextTrackCue) to Kotlin\n */\npublic external abstract class TextTrackCue : EventTarget {\n    open val track: TextTrack?\n    open var id: String\n    open var startTime: Double\n    open var endTime: Double\n    open var pauseOnExit: Boolean\n    open var onenter: ((Event) -> dynamic)?\n    open var onexit: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [TimeRanges](https://developer.mozilla.org/en/docs/Web/API/TimeRanges) to Kotlin\n */\npublic external abstract class TimeRanges {\n    open val length: Int\n    fun start(index: Int): Double\n    fun end(index: Int): Double\n}\n\n/**\n * Exposes the JavaScript [TrackEvent](https://developer.mozilla.org/en/docs/Web/API/TrackEvent) to Kotlin\n */\npublic external open class TrackEvent(type: String, eventInitDict: TrackEventInit = definedExternally) : Event {\n    open val track: UnionAudioTrackOrTextTrackOrVideoTrack?\n}\n\npublic external interface TrackEventInit : EventInit {\n    var track: UnionAudioTrackOrTextTrackOrVideoTrack? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun TrackEventInit(track: UnionAudioTrackOrTextTrackOrVideoTrack? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): TrackEventInit {\n    val o = js(\"({})\")\n\n    o[\"track\"] = track\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLMapElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMapElement) to Kotlin\n */\npublic external abstract class HTMLMapElement : HTMLElement {\n    open var name: String\n    open val areas: HTMLCollection\n}\n\n/**\n * Exposes the JavaScript [HTMLAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAreaElement) to Kotlin\n */\npublic external abstract class HTMLAreaElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var alt: String\n    open var coords: String\n    open var shape: String\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var referrerPolicy: String\n    open var noHref: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLTableElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableElement) to Kotlin\n */\npublic external abstract class HTMLTableElement : HTMLElement {\n    open var caption: HTMLTableCaptionElement?\n    open var tHead: HTMLTableSectionElement?\n    open var tFoot: HTMLTableSectionElement?\n    open val tBodies: HTMLCollection\n    open val rows: HTMLCollection\n    open var align: String\n    open var border: String\n    open var frame: String\n    open var rules: String\n    open var summary: String\n    open var width: String\n    open var bgColor: String\n    open var cellPadding: String\n    open var cellSpacing: String\n    fun createCaption(): HTMLTableCaptionElement\n    fun deleteCaption(): Unit\n    fun createTHead(): HTMLTableSectionElement\n    fun deleteTHead(): Unit\n    fun createTFoot(): HTMLTableSectionElement\n    fun deleteTFoot(): Unit\n    fun createTBody(): HTMLTableSectionElement\n    fun insertRow(index: Int = definedExternally): HTMLTableRowElement\n    fun deleteRow(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCaptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCaptionElement) to Kotlin\n */\npublic external abstract class HTMLTableCaptionElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTableColElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableColElement) to Kotlin\n */\npublic external abstract class HTMLTableColElement : HTMLElement {\n    open var span: Int\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var width: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTableSectionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableSectionElement) to Kotlin\n */\npublic external abstract class HTMLTableSectionElement : HTMLElement {\n    open val rows: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    fun insertRow(index: Int = definedExternally): HTMLElement\n    fun deleteRow(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableRowElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableRowElement) to Kotlin\n */\npublic external abstract class HTMLTableRowElement : HTMLElement {\n    open val rowIndex: Int\n    open val sectionRowIndex: Int\n    open val cells: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var bgColor: String\n    fun insertCell(index: Int = definedExternally): HTMLElement\n    fun deleteCell(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCellElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCellElement) to Kotlin\n */\npublic external abstract class HTMLTableCellElement : HTMLElement {\n    open var colSpan: Int\n    open var rowSpan: Int\n    open var headers: String\n    open val cellIndex: Int\n    open var scope: String\n    open var abbr: String\n    open var align: String\n    open var axis: String\n    open var height: String\n    open var width: String\n    open var ch: String\n    open var chOff: String\n    open var noWrap: Boolean\n    open var vAlign: String\n    open var bgColor: String\n}\n\n/**\n * Exposes the JavaScript [HTMLFormElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFormElement) to Kotlin\n */\npublic external abstract class HTMLFormElement : HTMLElement {\n    open var acceptCharset: String\n    open var action: String\n    open var autocomplete: String\n    open var enctype: String\n    open var encoding: String\n    open var method: String\n    open var name: String\n    open var noValidate: Boolean\n    open var target: String\n    open val elements: HTMLFormControlsCollection\n    open val length: Int\n    fun submit(): Unit\n    fun reset(): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLFormElement.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLFormElement.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLLabelElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLabelElement) to Kotlin\n */\npublic external abstract class HTMLLabelElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var htmlFor: String\n    open val control: HTMLElement?\n}\n\n/**\n * Exposes the JavaScript [HTMLInputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement) to Kotlin\n */\npublic external abstract class HTMLInputElement : HTMLElement {\n    open var accept: String\n    open var alt: String\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var defaultChecked: Boolean\n    open var checked: Boolean\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open val files: FileList?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var height: Int\n    open var indeterminate: Boolean\n    open var inputMode: String\n    open val list: HTMLElement?\n    open var max: String\n    open var maxLength: Int\n    open var min: String\n    open var minLength: Int\n    open var multiple: Boolean\n    open var name: String\n    open var pattern: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var size: Int\n    open var src: String\n    open var step: String\n    open var type: String\n    open var defaultValue: String\n    open var value: String\n    open var valueAsDate: dynamic\n    open var valueAsNumber: Double\n    open var width: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    open var align: String\n    open var useMap: String\n    fun stepUp(n: Int = definedExternally): Unit\n    fun stepDown(n: Int = definedExternally): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n    fun select(): Unit\n    fun setRangeText(replacement: String): Unit\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally): Unit\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLButtonElement](https://developer.mozilla.org/en/docs/Web/API/HTMLButtonElement) to Kotlin\n */\npublic external abstract class HTMLButtonElement : HTMLElement {\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var name: String\n    open var type: String\n    open var value: String\n    open var menu: HTMLMenuElement?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLSelectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSelectElement) to Kotlin\n */\npublic external abstract class HTMLSelectElement : HTMLElement, ItemArrayLike<Element> {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var multiple: Boolean\n    open var name: String\n    open var required: Boolean\n    open var size: Int\n    open val type: String\n    open val options: HTMLOptionsCollection\n    override var length: Int\n    open val selectedOptions: HTMLCollection\n    open var selectedIndex: Int\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): HTMLOptionElement?\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally): Unit\n    fun remove(index: Int): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLSelectElement.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLSelectElement.set(index: Int, option: HTMLOptionElement?): Unit { asDynamic()[index] = option; }\n\n/**\n * Exposes the JavaScript [HTMLDataListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataListElement) to Kotlin\n */\npublic external abstract class HTMLDataListElement : HTMLElement {\n    open val options: HTMLCollection\n}\n\n/**\n * Exposes the JavaScript [HTMLOptGroupElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptGroupElement) to Kotlin\n */\npublic external abstract class HTMLOptGroupElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open var label: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionElement) to Kotlin\n */\npublic external abstract class HTMLOptionElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var label: String\n    open var defaultSelected: Boolean\n    open var selected: Boolean\n    open var value: String\n    open var text: String\n    open val index: Int\n}\n\n/**\n * Exposes the JavaScript [Option](https://developer.mozilla.org/en/docs/Web/API/Option) to Kotlin\n */\npublic external open class Option(text: String = definedExternally, value: String = definedExternally, defaultSelected: Boolean = definedExternally, selected: Boolean = definedExternally) : HTMLOptionElement {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override val style: CSSStyleDeclaration\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [HTMLTextAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTextAreaElement) to Kotlin\n */\npublic external abstract class HTMLTextAreaElement : HTMLElement {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var cols: Int\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var inputMode: String\n    open var maxLength: Int\n    open var minLength: Int\n    open var name: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var rows: Int\n    open var wrap: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val textLength: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n    fun select(): Unit\n    fun setRangeText(replacement: String): Unit\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally): Unit\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLKeygenElement](https://developer.mozilla.org/en/docs/Web/API/HTMLKeygenElement) to Kotlin\n */\npublic external abstract class HTMLKeygenElement : HTMLElement {\n    open var autofocus: Boolean\n    open var challenge: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var keytype: String\n    open var name: String\n    open val type: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLOutputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOutputElement) to Kotlin\n */\npublic external abstract class HTMLOutputElement : HTMLElement {\n    open val htmlFor: DOMTokenList\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLProgressElement](https://developer.mozilla.org/en/docs/Web/API/HTMLProgressElement) to Kotlin\n */\npublic external abstract class HTMLProgressElement : HTMLElement {\n    open var value: Double\n    open var max: Double\n    open val position: Double\n    open val labels: NodeList\n}\n\n/**\n * Exposes the JavaScript [HTMLMeterElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMeterElement) to Kotlin\n */\npublic external abstract class HTMLMeterElement : HTMLElement {\n    open var value: Double\n    open var min: Double\n    open var max: Double\n    open var low: Double\n    open var high: Double\n    open var optimum: Double\n    open val labels: NodeList\n}\n\n/**\n * Exposes the JavaScript [HTMLFieldSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFieldSetElement) to Kotlin\n */\npublic external abstract class HTMLFieldSetElement : HTMLElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open val elements: HTMLCollection\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLLegendElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLegendElement) to Kotlin\n */\npublic external abstract class HTMLLegendElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [ValidityState](https://developer.mozilla.org/en/docs/Web/API/ValidityState) to Kotlin\n */\npublic external abstract class ValidityState {\n    open val valueMissing: Boolean\n    open val typeMismatch: Boolean\n    open val patternMismatch: Boolean\n    open val tooLong: Boolean\n    open val tooShort: Boolean\n    open val rangeUnderflow: Boolean\n    open val rangeOverflow: Boolean\n    open val stepMismatch: Boolean\n    open val badInput: Boolean\n    open val customError: Boolean\n    open val valid: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDetailsElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDetailsElement) to Kotlin\n */\npublic external abstract class HTMLDetailsElement : HTMLElement {\n    open var open: Boolean\n}\n\npublic external abstract class HTMLMenuElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var compact: Boolean\n}\n\npublic external abstract class HTMLMenuItemElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var icon: String\n    open var disabled: Boolean\n    open var checked: Boolean\n    open var radiogroup: String\n    open var default: Boolean\n}\n\npublic external open class RelatedEvent(type: String, eventInitDict: RelatedEventInit = definedExternally) : Event {\n    open val relatedTarget: EventTarget?\n}\n\npublic external interface RelatedEventInit : EventInit {\n    var relatedTarget: EventTarget? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun RelatedEventInit(relatedTarget: EventTarget? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): RelatedEventInit {\n    val o = js(\"({})\")\n\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLDialogElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDialogElement) to Kotlin\n */\npublic external abstract class HTMLDialogElement : HTMLElement {\n    open var open: Boolean\n    open var returnValue: String\n    fun show(anchor: UnionElementOrMouseEvent = definedExternally): Unit\n    fun showModal(anchor: UnionElementOrMouseEvent = definedExternally): Unit\n    fun close(returnValue: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLScriptElement](https://developer.mozilla.org/en/docs/Web/API/HTMLScriptElement) to Kotlin\n */\npublic external abstract class HTMLScriptElement : HTMLElement, HTMLOrSVGScriptElement {\n    open var src: String\n    open var type: String\n    open var charset: String\n    open var async: Boolean\n    open var defer: Boolean\n    open var crossOrigin: String?\n    open var text: String\n    open var nonce: String\n    open var event: String\n    open var htmlFor: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTemplateElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTemplateElement) to Kotlin\n */\npublic external abstract class HTMLTemplateElement : HTMLElement {\n    open val content: DocumentFragment\n}\n\n/**\n * Exposes the JavaScript [HTMLSlotElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSlotElement) to Kotlin\n */\npublic external abstract class HTMLSlotElement : HTMLElement {\n    open var name: String\n    fun assignedNodes(options: AssignedNodesOptions = definedExternally): Array<Node>\n}\n\npublic external interface AssignedNodesOptions {\n    var flatten: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AssignedNodesOptions(flatten: Boolean? = false): AssignedNodesOptions {\n    val o = js(\"({})\")\n\n    o[\"flatten\"] = flatten\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLCanvasElement](https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement) to Kotlin\n */\npublic external abstract class HTMLCanvasElement : HTMLElement, TexImageSource {\n    open var width: Int\n    open var height: Int\n    fun getContext(contextId: String, vararg arguments: Any?): RenderingContext?\n    fun toDataURL(type: String = definedExternally, quality: Any? = definedExternally): String\n    fun toBlob(_callback: (Blob?) -> Unit, type: String = definedExternally, quality: Any? = definedExternally): Unit\n}\n\npublic external interface CanvasRenderingContext2DSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CanvasRenderingContext2DSettings(alpha: Boolean? = true): CanvasRenderingContext2DSettings {\n    val o = js(\"({})\")\n\n    o[\"alpha\"] = alpha\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CanvasRenderingContext2D](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D) to Kotlin\n */\npublic external abstract class CanvasRenderingContext2D : CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasHitRegion, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath, RenderingContext {\n    open val canvas: HTMLCanvasElement\n}\n\npublic external interface CanvasState {\n    fun save(): Unit\n    fun restore(): Unit\n}\n\npublic external interface CanvasTransform {\n    fun scale(x: Double, y: Double): Unit\n    fun rotate(angle: Double): Unit\n    fun translate(x: Double, y: Double): Unit\n    fun transform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double): Unit\n    fun getTransform(): DOMMatrix\n    fun setTransform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double): Unit\n    fun setTransform(transform: dynamic = definedExternally): Unit\n    fun resetTransform(): Unit\n}\n\npublic external interface CanvasCompositing {\n    var globalAlpha: Double\n    var globalCompositeOperation: String\n}\n\npublic external interface CanvasImageSmoothing {\n    var imageSmoothingEnabled: Boolean\n    var imageSmoothingQuality: ImageSmoothingQuality\n}\n\npublic external interface CanvasFillStrokeStyles {\n    var strokeStyle: dynamic\n    var fillStyle: dynamic\n    fun createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double): CanvasGradient\n    fun createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double): CanvasGradient\n    fun createPattern(image: dynamic, repetition: String): CanvasPattern?\n}\n\npublic external interface CanvasShadowStyles {\n    var shadowOffsetX: Double\n    var shadowOffsetY: Double\n    var shadowBlur: Double\n    var shadowColor: String\n}\n\npublic external interface CanvasFilters {\n    var filter: String\n}\n\npublic external interface CanvasRect {\n    fun clearRect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun fillRect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun strokeRect(x: Double, y: Double, w: Double, h: Double): Unit\n}\n\npublic external interface CanvasDrawPath {\n    fun beginPath(): Unit\n    fun fill(fillRule: CanvasFillRule = definedExternally): Unit\n    fun fill(path: Path2D, fillRule: CanvasFillRule = definedExternally): Unit\n    fun stroke(): Unit\n    fun stroke(path: Path2D): Unit\n    fun clip(fillRule: CanvasFillRule = definedExternally): Unit\n    fun clip(path: Path2D, fillRule: CanvasFillRule = definedExternally): Unit\n    fun resetClip(): Unit\n    fun isPointInPath(x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInPath(path: Path2D, x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInStroke(x: Double, y: Double): Boolean\n    fun isPointInStroke(path: Path2D, x: Double, y: Double): Boolean\n}\n\npublic external interface CanvasUserInterface {\n    fun drawFocusIfNeeded(element: Element): Unit\n    fun drawFocusIfNeeded(path: Path2D, element: Element): Unit\n    fun scrollPathIntoView(): Unit\n    fun scrollPathIntoView(path: Path2D): Unit\n}\n\npublic external interface CanvasText {\n    fun fillText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally): Unit\n    fun strokeText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally): Unit\n    fun measureText(text: String): TextMetrics\n}\n\npublic external interface CanvasDrawImage {\n    fun drawImage(image: dynamic, dx: Double, dy: Double): Unit\n    fun drawImage(image: dynamic, dx: Double, dy: Double, dw: Double, dh: Double): Unit\n    fun drawImage(image: dynamic, sx: Double, sy: Double, sw: Double, sh: Double, dx: Double, dy: Double, dw: Double, dh: Double): Unit\n}\n\npublic external interface CanvasHitRegion {\n    fun addHitRegion(options: HitRegionOptions = definedExternally): Unit\n    fun removeHitRegion(id: String): Unit\n    fun clearHitRegions(): Unit\n}\n\npublic external interface CanvasImageData {\n    fun createImageData(sw: Double, sh: Double): ImageData\n    fun createImageData(imagedata: ImageData): ImageData\n    fun getImageData(sx: Double, sy: Double, sw: Double, sh: Double): ImageData\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double): Unit\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double, dirtyX: Double, dirtyY: Double, dirtyWidth: Double, dirtyHeight: Double): Unit\n}\n\npublic external interface CanvasPathDrawingStyles {\n    var lineWidth: Double\n    var lineCap: CanvasLineCap\n    var lineJoin: CanvasLineJoin\n    var miterLimit: Double\n    var lineDashOffset: Double\n    fun setLineDash(segments: Array<Double>): Unit\n    fun getLineDash(): Array<Double>\n}\n\npublic external interface CanvasTextDrawingStyles {\n    var font: String\n    var textAlign: CanvasTextAlign\n    var textBaseline: CanvasTextBaseline\n    var direction: CanvasDirection\n}\n\npublic external interface CanvasPath {\n    fun closePath(): Unit\n    fun moveTo(x: Double, y: Double): Unit\n    fun lineTo(x: Double, y: Double): Unit\n    fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double): Unit\n    fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double): Unit\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double): Unit\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double): Unit\n    fun rect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally): Unit\n    fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [CanvasGradient](https://developer.mozilla.org/en/docs/Web/API/CanvasGradient) to Kotlin\n */\npublic external abstract class CanvasGradient {\n    fun addColorStop(offset: Double, color: String): Unit\n}\n\n/**\n * Exposes the JavaScript [CanvasPattern](https://developer.mozilla.org/en/docs/Web/API/CanvasPattern) to Kotlin\n */\npublic external abstract class CanvasPattern {\n    fun setTransform(transform: dynamic = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [TextMetrics](https://developer.mozilla.org/en/docs/Web/API/TextMetrics) to Kotlin\n */\npublic external abstract class TextMetrics {\n    open val width: Double\n    open val actualBoundingBoxLeft: Double\n    open val actualBoundingBoxRight: Double\n    open val fontBoundingBoxAscent: Double\n    open val fontBoundingBoxDescent: Double\n    open val actualBoundingBoxAscent: Double\n    open val actualBoundingBoxDescent: Double\n    open val emHeightAscent: Double\n    open val emHeightDescent: Double\n    open val hangingBaseline: Double\n    open val alphabeticBaseline: Double\n    open val ideographicBaseline: Double\n}\n\npublic external interface HitRegionOptions {\n    var path: Path2D? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillRule: CanvasFillRule? /* = CanvasFillRule.NONZERO */\n        get() = definedExternally\n        set(value) = definedExternally\n    var id: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var parentID: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cursor: String? /* = \"inherit\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var control: Element? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var label: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var role: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HitRegionOptions(path: Path2D? = null, fillRule: CanvasFillRule? = CanvasFillRule.NONZERO, id: String? = \"\", parentID: String? = null, cursor: String? = \"inherit\", control: Element? = null, label: String? = null, role: String? = null): HitRegionOptions {\n    val o = js(\"({})\")\n\n    o[\"path\"] = path\n    o[\"fillRule\"] = fillRule\n    o[\"id\"] = id\n    o[\"parentID\"] = parentID\n    o[\"cursor\"] = cursor\n    o[\"control\"] = control\n    o[\"label\"] = label\n    o[\"role\"] = role\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [ImageData](https://developer.mozilla.org/en/docs/Web/API/ImageData) to Kotlin\n */\npublic external open class ImageData : TexImageSource {\n    constructor(sw: Int, sh: Int)\n    constructor(data: Uint8ClampedArray, sw: Int, sh: Int = definedExternally)\n    open val width: Int\n    open val height: Int\n    open val data: Uint8ClampedArray\n}\n\n/**\n * Exposes the JavaScript [Path2D](https://developer.mozilla.org/en/docs/Web/API/Path2D) to Kotlin\n */\npublic external open class Path2D() : CanvasPath {\n    constructor(path: Path2D)\n    constructor(paths: Array<Path2D>, fillRule: CanvasFillRule = definedExternally)\n    constructor(d: String)\n    fun addPath(path: Path2D, transform: dynamic = definedExternally): Unit\n    override fun closePath(): Unit\n    override fun moveTo(x: Double, y: Double): Unit\n    override fun lineTo(x: Double, y: Double): Unit\n    override fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double): Unit\n    override fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double): Unit\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double): Unit\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double): Unit\n    override fun rect(x: Double, y: Double, w: Double, h: Double): Unit\n    override fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */): Unit\n    override fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */): Unit\n}\n\n/**\n * Exposes the JavaScript [Touch](https://developer.mozilla.org/en/docs/Web/API/Touch) to Kotlin\n */\npublic external abstract class Touch {\n    open val region: String?\n}\n\n/**\n * Exposes the JavaScript [ImageBitmapRenderingContext](https://developer.mozilla.org/en/docs/Web/API/ImageBitmapRenderingContext) to Kotlin\n */\npublic external abstract class ImageBitmapRenderingContext {\n    open val canvas: HTMLCanvasElement\n    fun transferFromImageBitmap(bitmap: ImageBitmap?): Unit\n}\n\npublic external interface ImageBitmapRenderingContextSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapRenderingContextSettings(alpha: Boolean? = true): ImageBitmapRenderingContextSettings {\n    val o = js(\"({})\")\n\n    o[\"alpha\"] = alpha\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomElementRegistry](https://developer.mozilla.org/en/docs/Web/API/CustomElementRegistry) to Kotlin\n */\npublic external abstract class CustomElementRegistry {\n    fun define(name: String, constructor: () -> dynamic, options: ElementDefinitionOptions = definedExternally): Unit\n    fun get(name: String): Any?\n    fun whenDefined(name: String): Promise<Unit>\n}\n\npublic external interface ElementDefinitionOptions {\n    var extends: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementDefinitionOptions(extends: String? = undefined): ElementDefinitionOptions {\n    val o = js(\"({})\")\n\n    o[\"extends\"] = extends\n\n    return o\n}\n\npublic external interface ElementContentEditable {\n    var contentEditable: String\n    val isContentEditable: Boolean\n}\n\n/**\n * Exposes the JavaScript [DataTransfer](https://developer.mozilla.org/en/docs/Web/API/DataTransfer) to Kotlin\n */\npublic external abstract class DataTransfer {\n    open var dropEffect: String\n    open var effectAllowed: String\n    open val items: DataTransferItemList\n    open val types: Array<out String>\n    open val files: FileList\n    fun setDragImage(image: Element, x: Int, y: Int): Unit\n    fun getData(format: String): String\n    fun setData(format: String, data: String): Unit\n    fun clearData(format: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [DataTransferItemList](https://developer.mozilla.org/en/docs/Web/API/DataTransferItemList) to Kotlin\n */\npublic external abstract class DataTransferItemList {\n    open val length: Int\n    fun add(data: String, type: String): DataTransferItem?\n    fun add(data: File): DataTransferItem?\n    fun remove(index: Int): Unit\n    fun clear(): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun DataTransferItemList.get(index: Int): DataTransferItem? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DataTransferItem](https://developer.mozilla.org/en/docs/Web/API/DataTransferItem) to Kotlin\n */\npublic external abstract class DataTransferItem {\n    open val kind: String\n    open val type: String\n    fun getAsString(_callback: ((String) -> Unit)?): Unit\n    fun getAsFile(): File?\n}\n\n/**\n * Exposes the JavaScript [DragEvent](https://developer.mozilla.org/en/docs/Web/API/DragEvent) to Kotlin\n */\npublic external open class DragEvent(type: String, eventInitDict: DragEventInit = definedExternally) : MouseEvent {\n    open val dataTransfer: DataTransfer?\n}\n\npublic external interface DragEventInit : MouseEventInit {\n    var dataTransfer: DataTransfer? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DragEventInit(dataTransfer: DataTransfer? = null, screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): DragEventInit {\n    val o = js(\"({})\")\n\n    o[\"dataTransfer\"] = dataTransfer\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external abstract class BarProp {\n    open val visible: Boolean\n}\n\n/**\n * Exposes the JavaScript [History](https://developer.mozilla.org/en/docs/Web/API/History) to Kotlin\n */\npublic external abstract class History {\n    open val length: Int\n    open var scrollRestoration: ScrollRestoration\n    open val state: Any?\n    fun go(delta: Int = definedExternally): Unit\n    fun back(): Unit\n    fun forward(): Unit\n    fun pushState(data: Any?, title: String, url: String? = definedExternally): Unit\n    fun replaceState(data: Any?, title: String, url: String? = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [Location](https://developer.mozilla.org/en/docs/Web/API/Location) to Kotlin\n */\npublic external abstract class Location {\n    open var href: String\n    open val origin: String\n    open var protocol: String\n    open var host: String\n    open var hostname: String\n    open var port: String\n    open var pathname: String\n    open var search: String\n    open var hash: String\n    open val ancestorOrigins: Array<out String>\n    fun assign(url: String): Unit\n    fun replace(url: String): Unit\n    fun reload(): Unit\n}\n\n/**\n * Exposes the JavaScript [PopStateEvent](https://developer.mozilla.org/en/docs/Web/API/PopStateEvent) to Kotlin\n */\npublic external open class PopStateEvent(type: String, eventInitDict: PopStateEventInit = definedExternally) : Event {\n    open val state: Any?\n}\n\npublic external interface PopStateEventInit : EventInit {\n    var state: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PopStateEventInit(state: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PopStateEventInit {\n    val o = js(\"({})\")\n\n    o[\"state\"] = state\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HashChangeEvent](https://developer.mozilla.org/en/docs/Web/API/HashChangeEvent) to Kotlin\n */\npublic external open class HashChangeEvent(type: String, eventInitDict: HashChangeEventInit = definedExternally) : Event {\n    open val oldURL: String\n    open val newURL: String\n}\n\npublic external interface HashChangeEventInit : EventInit {\n    var oldURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HashChangeEventInit(oldURL: String? = \"\", newURL: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): HashChangeEventInit {\n    val o = js(\"({})\")\n\n    o[\"oldURL\"] = oldURL\n    o[\"newURL\"] = newURL\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [PageTransitionEvent](https://developer.mozilla.org/en/docs/Web/API/PageTransitionEvent) to Kotlin\n */\npublic external open class PageTransitionEvent(type: String, eventInitDict: PageTransitionEventInit = definedExternally) : Event {\n    open val persisted: Boolean\n}\n\npublic external interface PageTransitionEventInit : EventInit {\n    var persisted: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PageTransitionEventInit(persisted: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PageTransitionEventInit {\n    val o = js(\"({})\")\n\n    o[\"persisted\"] = persisted\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [BeforeUnloadEvent](https://developer.mozilla.org/en/docs/Web/API/BeforeUnloadEvent) to Kotlin\n */\npublic external open class BeforeUnloadEvent : Event {\n    var returnValue: String\n}\n\npublic external abstract class ApplicationCache : EventTarget {\n    open val status: Short\n    open var onchecking: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onnoupdate: ((Event) -> dynamic)?\n    open var ondownloading: ((Event) -> dynamic)?\n    open var onprogress: ((ProgressEvent) -> dynamic)?\n    open var onupdateready: ((Event) -> dynamic)?\n    open var oncached: ((Event) -> dynamic)?\n    open var onobsolete: ((Event) -> dynamic)?\n    fun update(): Unit\n    fun abort(): Unit\n    fun swapCache(): Unit\n\n    companion object {\n        val UNCACHED: Short\n        val IDLE: Short\n        val CHECKING: Short\n        val DOWNLOADING: Short\n        val UPDATEREADY: Short\n        val OBSOLETE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NavigatorOnLine](https://developer.mozilla.org/en/docs/Web/API/NavigatorOnLine) to Kotlin\n */\npublic external interface NavigatorOnLine {\n    val onLine: Boolean\n}\n\n/**\n * Exposes the JavaScript [ErrorEvent](https://developer.mozilla.org/en/docs/Web/API/ErrorEvent) to Kotlin\n */\npublic external open class ErrorEvent(type: String, eventInitDict: ErrorEventInit = definedExternally) : Event {\n    open val message: String\n    open val filename: String\n    open val lineno: Int\n    open val colno: Int\n    open val error: Any?\n}\n\npublic external interface ErrorEventInit : EventInit {\n    var message: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var filename: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lineno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var error: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ErrorEventInit(message: String? = \"\", filename: String? = \"\", lineno: Int? = 0, colno: Int? = 0, error: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ErrorEventInit {\n    val o = js(\"({})\")\n\n    o[\"message\"] = message\n    o[\"filename\"] = filename\n    o[\"lineno\"] = lineno\n    o[\"colno\"] = colno\n    o[\"error\"] = error\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [PromiseRejectionEvent](https://developer.mozilla.org/en/docs/Web/API/PromiseRejectionEvent) to Kotlin\n */\npublic external open class PromiseRejectionEvent(type: String, eventInitDict: PromiseRejectionEventInit) : Event {\n    open val promise: Promise<Any?>\n    open val reason: Any?\n}\n\npublic external interface PromiseRejectionEventInit : EventInit {\n    var promise: Promise<Any?>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PromiseRejectionEventInit(promise: Promise<Any?>?, reason: Any? = undefined, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PromiseRejectionEventInit {\n    val o = js(\"({})\")\n\n    o[\"promise\"] = promise\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [GlobalEventHandlers](https://developer.mozilla.org/en/docs/Web/API/GlobalEventHandlers) to Kotlin\n */\npublic external interface GlobalEventHandlers {\n    var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    var onpointerdown: ((PointerEvent) -> dynamic)?\n    var onpointermove: ((PointerEvent) -> dynamic)?\n    var onpointerup: ((PointerEvent) -> dynamic)?\n    var onpointercancel: ((PointerEvent) -> dynamic)?\n    var onpointerover: ((PointerEvent) -> dynamic)?\n    var onpointerout: ((PointerEvent) -> dynamic)?\n    var onpointerenter: ((PointerEvent) -> dynamic)?\n    var onpointerleave: ((PointerEvent) -> dynamic)?\n    var onabort: ((Event) -> dynamic)?\n    var onblur: ((FocusEvent) -> dynamic)?\n    var oncancel: ((Event) -> dynamic)?\n    var oncanplay: ((Event) -> dynamic)?\n    var oncanplaythrough: ((Event) -> dynamic)?\n    var onchange: ((Event) -> dynamic)?\n    var onclick: ((MouseEvent) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    var oncontextmenu: ((MouseEvent) -> dynamic)?\n    var oncuechange: ((Event) -> dynamic)?\n    var ondblclick: ((MouseEvent) -> dynamic)?\n    var ondrag: ((DragEvent) -> dynamic)?\n    var ondragend: ((DragEvent) -> dynamic)?\n    var ondragenter: ((DragEvent) -> dynamic)?\n    var ondragexit: ((DragEvent) -> dynamic)?\n    var ondragleave: ((DragEvent) -> dynamic)?\n    var ondragover: ((DragEvent) -> dynamic)?\n    var ondragstart: ((DragEvent) -> dynamic)?\n    var ondrop: ((DragEvent) -> dynamic)?\n    var ondurationchange: ((Event) -> dynamic)?\n    var onemptied: ((Event) -> dynamic)?\n    var onended: ((Event) -> dynamic)?\n    var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    var onfocus: ((FocusEvent) -> dynamic)?\n    var oninput: ((InputEvent) -> dynamic)?\n    var oninvalid: ((Event) -> dynamic)?\n    var onkeydown: ((KeyboardEvent) -> dynamic)?\n    var onkeypress: ((KeyboardEvent) -> dynamic)?\n    var onkeyup: ((KeyboardEvent) -> dynamic)?\n    var onload: ((Event) -> dynamic)?\n    var onloadeddata: ((Event) -> dynamic)?\n    var onloadedmetadata: ((Event) -> dynamic)?\n    var onloadend: ((Event) -> dynamic)?\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n    var onmousedown: ((MouseEvent) -> dynamic)?\n    var onmouseenter: ((MouseEvent) -> dynamic)?\n    var onmouseleave: ((MouseEvent) -> dynamic)?\n    var onmousemove: ((MouseEvent) -> dynamic)?\n    var onmouseout: ((MouseEvent) -> dynamic)?\n    var onmouseover: ((MouseEvent) -> dynamic)?\n    var onmouseup: ((MouseEvent) -> dynamic)?\n    var onwheel: ((WheelEvent) -> dynamic)?\n    var onpause: ((Event) -> dynamic)?\n    var onplay: ((Event) -> dynamic)?\n    var onplaying: ((Event) -> dynamic)?\n    var onprogress: ((ProgressEvent) -> dynamic)?\n    var onratechange: ((Event) -> dynamic)?\n    var onreset: ((Event) -> dynamic)?\n    var onresize: ((Event) -> dynamic)?\n    var onscroll: ((Event) -> dynamic)?\n    var onseeked: ((Event) -> dynamic)?\n    var onseeking: ((Event) -> dynamic)?\n    var onselect: ((Event) -> dynamic)?\n    var onshow: ((Event) -> dynamic)?\n    var onstalled: ((Event) -> dynamic)?\n    var onsubmit: ((Event) -> dynamic)?\n    var onsuspend: ((Event) -> dynamic)?\n    var ontimeupdate: ((Event) -> dynamic)?\n    var ontoggle: ((Event) -> dynamic)?\n    var onvolumechange: ((Event) -> dynamic)?\n    var onwaiting: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [WindowEventHandlers](https://developer.mozilla.org/en/docs/Web/API/WindowEventHandlers) to Kotlin\n */\npublic external interface WindowEventHandlers {\n    var onafterprint: ((Event) -> dynamic)?\n    var onbeforeprint: ((Event) -> dynamic)?\n    var onbeforeunload: ((BeforeUnloadEvent) -> String?)?\n    var onhashchange: ((HashChangeEvent) -> dynamic)?\n    var onlanguagechange: ((Event) -> dynamic)?\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var onoffline: ((Event) -> dynamic)?\n    var ononline: ((Event) -> dynamic)?\n    var onpagehide: ((PageTransitionEvent) -> dynamic)?\n    var onpageshow: ((PageTransitionEvent) -> dynamic)?\n    var onpopstate: ((PopStateEvent) -> dynamic)?\n    var onrejectionhandled: ((Event) -> dynamic)?\n    var onstorage: ((StorageEvent) -> dynamic)?\n    var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n    var onunload: ((Event) -> dynamic)?\n}\n\npublic external interface DocumentAndElementEventHandlers {\n    var oncopy: ((ClipboardEvent) -> dynamic)?\n    var oncut: ((ClipboardEvent) -> dynamic)?\n    var onpaste: ((ClipboardEvent) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [WindowOrWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WindowOrWorkerGlobalScope) to Kotlin\n */\npublic external interface WindowOrWorkerGlobalScope {\n    val caches: CacheStorage\n    val origin: String\n    fun fetch(input: dynamic, init: RequestInit = definedExternally): Promise<Response>\n    fun btoa(data: String): String\n    fun atob(data: String): String\n    fun setTimeout(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearTimeout(handle: Int = definedExternally): Unit\n    fun setInterval(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearInterval(handle: Int = definedExternally): Unit\n    fun createImageBitmap(image: dynamic, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun createImageBitmap(image: dynamic, sx: Int, sy: Int, sw: Int, sh: Int, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n}\n\n/**\n * Exposes the JavaScript [NavigatorID](https://developer.mozilla.org/en/docs/Web/API/NavigatorID) to Kotlin\n */\npublic external interface NavigatorID {\n    val appCodeName: String\n    val appName: String\n    val appVersion: String\n    val platform: String\n    val product: String\n    val productSub: String\n    val userAgent: String\n    val vendor: String\n    val vendorSub: String\n    val oscpu: String\n    fun taintEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorLanguage](https://developer.mozilla.org/en/docs/Web/API/NavigatorLanguage) to Kotlin\n */\npublic external interface NavigatorLanguage {\n    val language: String\n    val languages: Array<out String>\n}\n\npublic external interface NavigatorContentUtils {\n    fun registerProtocolHandler(scheme: String, url: String, title: String): Unit\n    fun registerContentHandler(mimeType: String, url: String, title: String): Unit\n    fun isProtocolHandlerRegistered(scheme: String, url: String): String\n    fun isContentHandlerRegistered(mimeType: String, url: String): String\n    fun unregisterProtocolHandler(scheme: String, url: String): Unit\n    fun unregisterContentHandler(mimeType: String, url: String): Unit\n}\n\npublic external interface NavigatorCookies {\n    val cookieEnabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorPlugins](https://developer.mozilla.org/en/docs/Web/API/NavigatorPlugins) to Kotlin\n */\npublic external interface NavigatorPlugins {\n    val plugins: PluginArray\n    val mimeTypes: MimeTypeArray\n    fun javaEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [PluginArray](https://developer.mozilla.org/en/docs/Web/API/PluginArray) to Kotlin\n */\npublic external abstract class PluginArray : ItemArrayLike<Plugin> {\n    override val length: Int\n    fun refresh(reload: Boolean = definedExternally): Unit\n    override fun item(index: Int): Plugin?\n    fun namedItem(name: String): Plugin?\n}\n@kotlin.internal.InlineOnly inline operator fun PluginArray.get(index: Int): Plugin? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun PluginArray.get(name: String): Plugin? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeTypeArray](https://developer.mozilla.org/en/docs/Web/API/MimeTypeArray) to Kotlin\n */\npublic external abstract class MimeTypeArray : ItemArrayLike<MimeType> {\n    override val length: Int\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n@kotlin.internal.InlineOnly inline operator fun MimeTypeArray.get(index: Int): MimeType? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun MimeTypeArray.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Plugin](https://developer.mozilla.org/en/docs/Web/API/Plugin) to Kotlin\n */\npublic external abstract class Plugin : ItemArrayLike<MimeType> {\n    open val name: String\n    open val description: String\n    open val filename: String\n    override val length: Int\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n@kotlin.internal.InlineOnly inline operator fun Plugin.get(index: Int): MimeType? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Plugin.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeType](https://developer.mozilla.org/en/docs/Web/API/MimeType) to Kotlin\n */\npublic external abstract class MimeType {\n    open val type: String\n    open val description: String\n    open val suffixes: String\n    open val enabledPlugin: Plugin\n}\n\n/**\n * Exposes the JavaScript [ImageBitmap](https://developer.mozilla.org/en/docs/Web/API/ImageBitmap) to Kotlin\n */\npublic external abstract class ImageBitmap : TexImageSource {\n    open val width: Int\n    open val height: Int\n    fun close(): Unit\n}\n\npublic external interface ImageBitmapOptions {\n    var imageOrientation: ImageOrientation? /* = ImageOrientation.NONE */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultiplyAlpha: PremultiplyAlpha? /* = PremultiplyAlpha.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colorSpaceConversion: ColorSpaceConversion? /* = ColorSpaceConversion.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeWidth: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeHeight: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeQuality: ResizeQuality? /* = ResizeQuality.LOW */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapOptions(imageOrientation: ImageOrientation? = ImageOrientation.NONE, premultiplyAlpha: PremultiplyAlpha? = PremultiplyAlpha.DEFAULT, colorSpaceConversion: ColorSpaceConversion? = ColorSpaceConversion.DEFAULT, resizeWidth: Int? = undefined, resizeHeight: Int? = undefined, resizeQuality: ResizeQuality? = ResizeQuality.LOW): ImageBitmapOptions {\n    val o = js(\"({})\")\n\n    o[\"imageOrientation\"] = imageOrientation\n    o[\"premultiplyAlpha\"] = premultiplyAlpha\n    o[\"colorSpaceConversion\"] = colorSpaceConversion\n    o[\"resizeWidth\"] = resizeWidth\n    o[\"resizeHeight\"] = resizeHeight\n    o[\"resizeQuality\"] = resizeQuality\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageEvent](https://developer.mozilla.org/en/docs/Web/API/MessageEvent) to Kotlin\n */\npublic external open class MessageEvent(type: String, eventInitDict: MessageEventInit = definedExternally) : Event {\n    open val data: Any?\n    open val origin: String\n    open val lastEventId: String\n    open val source: UnionMessagePortOrWindow?\n    open val ports: Array<out MessagePort>\n    fun initMessageEvent(type: String, bubbles: Boolean, cancelable: Boolean, data: Any?, origin: String, lastEventId: String, source: UnionMessagePortOrWindow?, ports: Array<MessagePort>): Unit\n}\n\npublic external interface MessageEventInit : EventInit {\n    var data: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lastEventId: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var source: UnionMessagePortOrWindow? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var ports: Array<MessagePort>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MessageEventInit(data: Any? = null, origin: String? = \"\", lastEventId: String? = \"\", source: UnionMessagePortOrWindow? = null, ports: Array<MessagePort>? = arrayOf(), bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MessageEventInit {\n    val o = js(\"({})\")\n\n    o[\"data\"] = data\n    o[\"origin\"] = origin\n    o[\"lastEventId\"] = lastEventId\n    o[\"source\"] = source\n    o[\"ports\"] = ports\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [EventSource](https://developer.mozilla.org/en/docs/Web/API/EventSource) to Kotlin\n */\npublic external open class EventSource(url: String, eventSourceInitDict: EventSourceInit = definedExternally) : EventTarget {\n    open val url: String\n    open val withCredentials: Boolean\n    open val readyState: Short\n    var onopen: ((Event) -> dynamic)?\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    fun close(): Unit\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSED: Short\n    }\n}\n\npublic external interface EventSourceInit {\n    var withCredentials: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventSourceInit(withCredentials: Boolean? = false): EventSourceInit {\n    val o = js(\"({})\")\n\n    o[\"withCredentials\"] = withCredentials\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [WebSocket](https://developer.mozilla.org/en/docs/Web/API/WebSocket) to Kotlin\n */\npublic external open class WebSocket(url: String, protocols: dynamic = definedExternally) : EventTarget {\n    open val url: String\n    open val readyState: Short\n    open val bufferedAmount: Int\n    var onopen: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    open val extensions: String\n    open val protocol: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var binaryType: BinaryType\n    fun close(code: Short = definedExternally, reason: String = definedExternally): Unit\n    fun send(data: String): Unit\n    fun send(data: Blob): Unit\n    fun send(data: ArrayBuffer): Unit\n    fun send(data: ArrayBufferView): Unit\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSING: Short\n        val CLOSED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CloseEvent](https://developer.mozilla.org/en/docs/Web/API/CloseEvent) to Kotlin\n */\npublic external open class CloseEvent(type: String, eventInitDict: CloseEventInit = definedExternally) : Event {\n    open val wasClean: Boolean\n    open val code: Short\n    open val reason: String\n}\n\npublic external interface CloseEventInit : EventInit {\n    var wasClean: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var code: Short? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CloseEventInit(wasClean: Boolean? = false, code: Short? = 0, reason: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CloseEventInit {\n    val o = js(\"({})\")\n\n    o[\"wasClean\"] = wasClean\n    o[\"code\"] = code\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageChannel](https://developer.mozilla.org/en/docs/Web/API/MessageChannel) to Kotlin\n */\npublic external open class MessageChannel {\n    open val port1: MessagePort\n    open val port2: MessagePort\n}\n\n/**\n * Exposes the JavaScript [MessagePort](https://developer.mozilla.org/en/docs/Web/API/MessagePort) to Kotlin\n */\npublic external abstract class MessagePort : EventTarget, UnionMessagePortOrWindow, UnionMessagePortOrServiceWorker, UnionClientOrMessagePortOrServiceWorker {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n    fun start(): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [BroadcastChannel](https://developer.mozilla.org/en/docs/Web/API/BroadcastChannel) to Kotlin\n */\npublic external open class BroadcastChannel(name: String) : EventTarget {\n    open val name: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [WorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WorkerGlobalScope) to Kotlin\n */\npublic external abstract class WorkerGlobalScope : EventTarget, WindowOrWorkerGlobalScope, GlobalPerformance {\n    open val self: WorkerGlobalScope\n    open val location: WorkerLocation\n    open val navigator: WorkerNavigator\n    open var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    open var onlanguagechange: ((Event) -> dynamic)?\n    open var onoffline: ((Event) -> dynamic)?\n    open var ononline: ((Event) -> dynamic)?\n    open var onrejectionhandled: ((Event) -> dynamic)?\n    open var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n    fun importScripts(vararg urls: String): Unit\n}\n\n/**\n * Exposes the JavaScript [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/DedicatedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class DedicatedWorkerGlobalScope : WorkerGlobalScope {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [SharedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/SharedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class SharedWorkerGlobalScope : WorkerGlobalScope {\n    open val name: String\n    open val applicationCache: ApplicationCache\n    open var onconnect: ((Event) -> dynamic)?\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [AbstractWorker](https://developer.mozilla.org/en/docs/Web/API/AbstractWorker) to Kotlin\n */\npublic external interface AbstractWorker {\n    var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [Worker](https://developer.mozilla.org/en/docs/Web/API/Worker) to Kotlin\n */\npublic external open class Worker(scriptURL: String, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    var onmessage: ((MessageEvent) -> dynamic)?\n    override var onerror: ((Event) -> dynamic)?\n    fun terminate(): Unit\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n}\n\npublic external interface WorkerOptions {\n    var type: WorkerType? /* = WorkerType.CLASSIC */\n        get() = definedExternally\n        set(value) = definedExternally\n    var credentials: RequestCredentials? /* = RequestCredentials.OMIT */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WorkerOptions(type: WorkerType? = WorkerType.CLASSIC, credentials: RequestCredentials? = RequestCredentials.OMIT): WorkerOptions {\n    val o = js(\"({})\")\n\n    o[\"type\"] = type\n    o[\"credentials\"] = credentials\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [SharedWorker](https://developer.mozilla.org/en/docs/Web/API/SharedWorker) to Kotlin\n */\npublic external open class SharedWorker(scriptURL: String, name: String = definedExternally, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    open val port: MessagePort\n    override var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [NavigatorConcurrentHardware](https://developer.mozilla.org/en/docs/Web/API/NavigatorConcurrentHardware) to Kotlin\n */\npublic external interface NavigatorConcurrentHardware {\n    val hardwareConcurrency: Int\n}\n\n/**\n * Exposes the JavaScript [WorkerNavigator](https://developer.mozilla.org/en/docs/Web/API/WorkerNavigator) to Kotlin\n */\npublic external abstract class WorkerNavigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n}\n\n/**\n * Exposes the JavaScript [WorkerLocation](https://developer.mozilla.org/en/docs/Web/API/WorkerLocation) to Kotlin\n */\npublic external abstract class WorkerLocation {\n    open var href: String\n    open val origin: String\n    open val protocol: String\n    open val host: String\n    open val hostname: String\n    open val port: String\n    open val pathname: String\n    open val search: String\n    open val hash: String\n}\n\n/**\n * Exposes the JavaScript [Storage](https://developer.mozilla.org/en/docs/Web/API/Storage) to Kotlin\n */\npublic external abstract class Storage {\n    open val length: Int\n    fun key(index: Int): String?\n    fun getItem(key: String): String?\n    fun setItem(key: String, value: String): Unit\n    fun removeItem(key: String): Unit\n    fun clear(): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun Storage.get(key: String): String? = asDynamic()[key]\n@kotlin.internal.InlineOnly inline operator fun Storage.set(key: String, value: String): Unit { asDynamic()[key] = value; }\n\n/**\n * Exposes the JavaScript [WindowSessionStorage](https://developer.mozilla.org/en/docs/Web/API/WindowSessionStorage) to Kotlin\n */\npublic external interface WindowSessionStorage {\n    val sessionStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [WindowLocalStorage](https://developer.mozilla.org/en/docs/Web/API/WindowLocalStorage) to Kotlin\n */\npublic external interface WindowLocalStorage {\n    val localStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [StorageEvent](https://developer.mozilla.org/en/docs/Web/API/StorageEvent) to Kotlin\n */\npublic external open class StorageEvent(type: String, eventInitDict: StorageEventInit = definedExternally) : Event {\n    open val key: String?\n    open val oldValue: String?\n    open val newValue: String?\n    open val url: String\n    open val storageArea: Storage?\n}\n\npublic external interface StorageEventInit : EventInit {\n    var key: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var oldValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var url: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var storageArea: Storage? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun StorageEventInit(key: String? = null, oldValue: String? = null, newValue: String? = null, url: String? = \"\", storageArea: Storage? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): StorageEventInit {\n    val o = js(\"({})\")\n\n    o[\"key\"] = key\n    o[\"oldValue\"] = oldValue\n    o[\"newValue\"] = newValue\n    o[\"url\"] = url\n    o[\"storageArea\"] = storageArea\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external abstract class HTMLAppletElement : HTMLElement {\n    open var align: String\n    open var alt: String\n    open var archive: String\n    open var code: String\n    open var codeBase: String\n    open var height: String\n    open var hspace: Int\n    open var name: String\n    open var _object: String\n    open var vspace: Int\n    open var width: String\n}\n\n/**\n * Exposes the JavaScript [HTMLMarqueeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMarqueeElement) to Kotlin\n */\npublic external abstract class HTMLMarqueeElement : HTMLElement {\n    open var behavior: String\n    open var bgColor: String\n    open var direction: String\n    open var height: String\n    open var hspace: Int\n    open var loop: Int\n    open var scrollAmount: Int\n    open var scrollDelay: Int\n    open var trueSpeed: Boolean\n    open var vspace: Int\n    open var width: String\n    open var onbounce: ((Event) -> dynamic)?\n    open var onfinish: ((Event) -> dynamic)?\n    open var onstart: ((Event) -> dynamic)?\n    fun start(): Unit\n    fun stop(): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLFrameSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFrameSetElement) to Kotlin\n */\npublic external abstract class HTMLFrameSetElement : HTMLElement, WindowEventHandlers {\n    open var cols: String\n    open var rows: String\n}\n\npublic external abstract class HTMLFrameElement : HTMLElement {\n    open var name: String\n    open var scrolling: String\n    open var src: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var noResize: Boolean\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var marginHeight: String\n    open var marginWidth: String\n}\n\npublic external abstract class HTMLDirectoryElement : HTMLElement {\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLFontElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFontElement) to Kotlin\n */\npublic external abstract class HTMLFontElement : HTMLElement {\n    open var color: String\n    open var face: String\n    open var size: String\n}\n\npublic external interface External {\n    fun AddSearchProvider(): Unit\n    fun IsSearchProviderInstalled(): Unit\n}\n\npublic external interface EventInit {\n    var bubbles: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cancelable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventInit(bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): EventInit {\n    val o = js(\"({})\")\n\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomEvent](https://developer.mozilla.org/en/docs/Web/API/CustomEvent) to Kotlin\n */\npublic external open class CustomEvent(type: String, eventInitDict: CustomEventInit = definedExternally) : Event {\n    open val detail: Any?\n    fun initCustomEvent(type: String, bubbles: Boolean, cancelable: Boolean, detail: Any?): Unit\n}\n\npublic external interface CustomEventInit : EventInit {\n    var detail: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CustomEventInit(detail: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CustomEventInit {\n    val o = js(\"({})\")\n\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external interface EventListenerOptions {\n    var capture: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventListenerOptions(capture: Boolean? = false): EventListenerOptions {\n    val o = js(\"({})\")\n\n    o[\"capture\"] = capture\n\n    return o\n}\n\npublic external interface AddEventListenerOptions : EventListenerOptions {\n    var passive: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var once: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AddEventListenerOptions(passive: Boolean? = false, once: Boolean? = false, capture: Boolean? = false): AddEventListenerOptions {\n    val o = js(\"({})\")\n\n    o[\"passive\"] = passive\n    o[\"once\"] = once\n    o[\"capture\"] = capture\n\n    return o\n}\n\npublic external interface NonElementParentNode {\n    fun getElementById(elementId: String): Element?\n}\n\n/**\n * Exposes the JavaScript [DocumentOrShadowRoot](https://developer.mozilla.org/en/docs/Web/API/DocumentOrShadowRoot) to Kotlin\n */\npublic external interface DocumentOrShadowRoot {\n    val fullscreenElement: Element?\n}\n\n/**\n * Exposes the JavaScript [ParentNode](https://developer.mozilla.org/en/docs/Web/API/ParentNode) to Kotlin\n */\npublic external interface ParentNode {\n    val children: HTMLCollection\n    val firstElementChild: Element?\n    val lastElementChild: Element?\n    val childElementCount: Int\n    fun prepend(vararg nodes: dynamic): Unit\n    fun append(vararg nodes: dynamic): Unit\n    fun querySelector(selectors: String): Element?\n    fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [NonDocumentTypeChildNode](https://developer.mozilla.org/en/docs/Web/API/NonDocumentTypeChildNode) to Kotlin\n */\npublic external interface NonDocumentTypeChildNode {\n    val previousElementSibling: Element?\n    val nextElementSibling: Element?\n}\n\n/**\n * Exposes the JavaScript [ChildNode](https://developer.mozilla.org/en/docs/Web/API/ChildNode) to Kotlin\n */\npublic external interface ChildNode {\n    fun before(vararg nodes: dynamic): Unit\n    fun after(vararg nodes: dynamic): Unit\n    fun replaceWith(vararg nodes: dynamic): Unit\n    fun remove(): Unit\n}\n\n/**\n * Exposes the JavaScript [Slotable](https://developer.mozilla.org/en/docs/Web/API/Slotable) to Kotlin\n */\npublic external interface Slotable {\n    val assignedSlot: HTMLSlotElement?\n}\n\n/**\n * Exposes the JavaScript [NodeList](https://developer.mozilla.org/en/docs/Web/API/NodeList) to Kotlin\n */\npublic external abstract class NodeList : ItemArrayLike<Node> {\n    override val length: Int\n    override fun item(index: Int): Node?\n}\n@kotlin.internal.InlineOnly inline operator fun NodeList.get(index: Int): Node? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [HTMLCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLCollection) to Kotlin\n */\npublic external abstract class HTMLCollection : UnionElementOrHTMLCollection, ItemArrayLike<Element> {\n    override val length: Int\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): Element?\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLCollection.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLCollection.get(name: String): Element? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver) to Kotlin\n */\npublic external open class MutationObserver(callback: (Array<MutationRecord>, MutationObserver) -> Unit) {\n    fun observe(target: Node, options: MutationObserverInit = definedExternally): Unit\n    fun disconnect(): Unit\n    fun takeRecords(): Array<MutationRecord>\n}\n\n/**\n * Exposes the JavaScript [MutationObserverInit](https://developer.mozilla.org/en/docs/Web/API/MutationObserverInit) to Kotlin\n */\npublic external interface MutationObserverInit {\n    var childList: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributes: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterData: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var subtree: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterDataOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeFilter: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MutationObserverInit(childList: Boolean? = false, attributes: Boolean? = undefined, characterData: Boolean? = undefined, subtree: Boolean? = false, attributeOldValue: Boolean? = undefined, characterDataOldValue: Boolean? = undefined, attributeFilter: Array<String>? = undefined): MutationObserverInit {\n    val o = js(\"({})\")\n\n    o[\"childList\"] = childList\n    o[\"attributes\"] = attributes\n    o[\"characterData\"] = characterData\n    o[\"subtree\"] = subtree\n    o[\"attributeOldValue\"] = attributeOldValue\n    o[\"characterDataOldValue\"] = characterDataOldValue\n    o[\"attributeFilter\"] = attributeFilter\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MutationRecord](https://developer.mozilla.org/en/docs/Web/API/MutationRecord) to Kotlin\n */\npublic external abstract class MutationRecord {\n    open val type: String\n    open val target: Node\n    open val addedNodes: NodeList\n    open val removedNodes: NodeList\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open val attributeName: String?\n    open val attributeNamespace: String?\n    open val oldValue: String?\n}\n\n/**\n * Exposes the JavaScript [Node](https://developer.mozilla.org/en/docs/Web/API/Node) to Kotlin\n */\npublic external abstract class Node : EventTarget {\n    open val nodeType: Short\n    open val nodeName: String\n    open val baseURI: String\n    open val isConnected: Boolean\n    open val ownerDocument: Document?\n    open val parentNode: Node?\n    open val parentElement: Element?\n    open val childNodes: NodeList\n    open val firstChild: Node?\n    open val lastChild: Node?\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open var nodeValue: String?\n    open var textContent: String?\n    fun getRootNode(options: GetRootNodeOptions = definedExternally): Node\n    fun hasChildNodes(): Boolean\n    fun normalize(): Unit\n    fun cloneNode(deep: Boolean = definedExternally): Node\n    fun isEqualNode(otherNode: Node?): Boolean\n    fun isSameNode(otherNode: Node?): Boolean\n    fun compareDocumentPosition(other: Node): Short\n    fun contains(other: Node?): Boolean\n    fun lookupPrefix(namespace: String?): String?\n    fun lookupNamespaceURI(prefix: String?): String?\n    fun isDefaultNamespace(namespace: String?): Boolean\n    fun insertBefore(node: Node, child: Node?): Node\n    fun appendChild(node: Node): Node\n    fun replaceChild(node: Node, child: Node): Node\n    fun removeChild(child: Node): Node\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface GetRootNodeOptions {\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun GetRootNodeOptions(composed: Boolean? = false): GetRootNodeOptions {\n    val o = js(\"({})\")\n\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [XMLDocument](https://developer.mozilla.org/en/docs/Web/API/XMLDocument) to Kotlin\n */\npublic external open class XMLDocument : Document {\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\npublic external interface ElementCreationOptions {\n    @JsName(\"is\") var is_: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementCreationOptions(is_: String? = undefined): ElementCreationOptions {\n    val o = js(\"({})\")\n\n    o[\"is\"] = is_\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMImplementation](https://developer.mozilla.org/en/docs/Web/API/DOMImplementation) to Kotlin\n */\npublic external abstract class DOMImplementation {\n    fun createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType\n    fun createDocument(namespace: String?, qualifiedName: String, doctype: DocumentType? = definedExternally): XMLDocument\n    fun createHTMLDocument(title: String = definedExternally): Document\n    fun hasFeature(): Boolean\n}\n\n/**\n * Exposes the JavaScript [DocumentType](https://developer.mozilla.org/en/docs/Web/API/DocumentType) to Kotlin\n */\npublic external abstract class DocumentType : Node, ChildNode {\n    open val name: String\n    open val publicId: String\n    open val systemId: String\n}\n\n/**\n * Exposes the JavaScript [DocumentFragment](https://developer.mozilla.org/en/docs/Web/API/DocumentFragment) to Kotlin\n */\npublic external open class DocumentFragment : Node, NonElementParentNode, ParentNode {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [ShadowRoot](https://developer.mozilla.org/en/docs/Web/API/ShadowRoot) to Kotlin\n */\npublic external open class ShadowRoot : DocumentFragment, DocumentOrShadowRoot {\n    open val mode: ShadowRootMode\n    open val host: Element\n    override val fullscreenElement: Element?\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [Element](https://developer.mozilla.org/en/docs/Web/API/Element) to Kotlin\n */\npublic external abstract class Element : Node, ParentNode, NonDocumentTypeChildNode, ChildNode, Slotable, GeometryUtils, UnionElementOrProcessingInstruction, UnionElementOrHTMLCollection, UnionElementOrRadioNodeList, UnionElementOrMouseEvent {\n    open var innerHTML: String\n    open var outerHTML: String\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val tagName: String\n    open var id: String\n    open var className: String\n    open val classList: DOMTokenList\n    open var slot: String\n    open val attributes: NamedNodeMap\n    open val shadowRoot: ShadowRoot?\n    open var scrollTop: Double\n    open var scrollLeft: Double\n    open val scrollWidth: Int\n    open val scrollHeight: Int\n    open val clientTop: Int\n    open val clientLeft: Int\n    open val clientWidth: Int\n    open val clientHeight: Int\n    fun requestFullscreen(): Promise<Unit>\n    fun setPointerCapture(pointerId: Int): Unit\n    fun releasePointerCapture(pointerId: Int): Unit\n    fun hasPointerCapture(pointerId: Int): Boolean\n    fun insertAdjacentHTML(position: String, text: String): Unit\n    fun hasAttributes(): Boolean\n    fun getAttributeNames(): Array<String>\n    fun getAttribute(qualifiedName: String): String?\n    fun getAttributeNS(namespace: String?, localName: String): String?\n    fun setAttribute(qualifiedName: String, value: String): Unit\n    fun setAttributeNS(namespace: String?, qualifiedName: String, value: String): Unit\n    fun removeAttribute(qualifiedName: String): Unit\n    fun removeAttributeNS(namespace: String?, localName: String): Unit\n    fun hasAttribute(qualifiedName: String): Boolean\n    fun hasAttributeNS(namespace: String?, localName: String): Boolean\n    fun getAttributeNode(qualifiedName: String): Attr?\n    fun getAttributeNodeNS(namespace: String?, localName: String): Attr?\n    fun setAttributeNode(attr: Attr): Attr?\n    fun setAttributeNodeNS(attr: Attr): Attr?\n    fun removeAttributeNode(attr: Attr): Attr\n    fun attachShadow(init: ShadowRootInit): ShadowRoot\n    fun closest(selectors: String): Element?\n    fun matches(selectors: String): Boolean\n    fun webkitMatchesSelector(selectors: String): Boolean\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun insertAdjacentElement(where: String, element: Element): Element?\n    fun insertAdjacentText(where: String, data: String): Unit\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun scrollIntoView(): Unit\n    fun scrollIntoView(arg: dynamic): Unit\n    fun scroll(options: ScrollToOptions = definedExternally): Unit\n    fun scroll(x: Double, y: Double): Unit\n    fun scrollTo(options: ScrollToOptions = definedExternally): Unit\n    fun scrollTo(x: Double, y: Double): Unit\n    fun scrollBy(options: ScrollToOptions = definedExternally): Unit\n    fun scrollBy(x: Double, y: Double): Unit\n}\n\npublic external interface ShadowRootInit {\n    var mode: ShadowRootMode?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ShadowRootInit(mode: ShadowRootMode?): ShadowRootInit {\n    val o = js(\"({})\")\n\n    o[\"mode\"] = mode\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [NamedNodeMap](https://developer.mozilla.org/en/docs/Web/API/NamedNodeMap) to Kotlin\n */\npublic external abstract class NamedNodeMap : ItemArrayLike<Attr> {\n    override val length: Int\n    override fun item(index: Int): Attr?\n    fun getNamedItem(qualifiedName: String): Attr?\n    fun getNamedItemNS(namespace: String?, localName: String): Attr?\n    fun setNamedItem(attr: Attr): Attr?\n    fun setNamedItemNS(attr: Attr): Attr?\n    fun removeNamedItem(qualifiedName: String): Attr\n    fun removeNamedItemNS(namespace: String?, localName: String): Attr\n}\n@kotlin.internal.InlineOnly inline operator fun NamedNodeMap.get(index: Int): Attr? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun NamedNodeMap.get(qualifiedName: String): Attr? = asDynamic()[qualifiedName]\n\n/**\n * Exposes the JavaScript [Attr](https://developer.mozilla.org/en/docs/Web/API/Attr) to Kotlin\n */\npublic external abstract class Attr : Node {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val name: String\n    open var value: String\n    open val ownerElement: Element?\n    open val specified: Boolean\n}\n\n/**\n * Exposes the JavaScript [CharacterData](https://developer.mozilla.org/en/docs/Web/API/CharacterData) to Kotlin\n */\npublic external abstract class CharacterData : Node, NonDocumentTypeChildNode, ChildNode {\n    open var data: String\n    open val length: Int\n    fun substringData(offset: Int, count: Int): String\n    fun appendData(data: String): Unit\n    fun insertData(offset: Int, data: String): Unit\n    fun deleteData(offset: Int, count: Int): Unit\n    fun replaceData(offset: Int, count: Int, data: String): Unit\n}\n\n/**\n * Exposes the JavaScript [Text](https://developer.mozilla.org/en/docs/Web/API/Text) to Kotlin\n */\npublic external open class Text(data: String = definedExternally) : CharacterData, Slotable, GeometryUtils {\n    open val wholeText: String\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    fun splitText(offset: Int): Text\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [CDATASection](https://developer.mozilla.org/en/docs/Web/API/CDATASection) to Kotlin\n */\npublic external open class CDATASection : Text {\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [ProcessingInstruction](https://developer.mozilla.org/en/docs/Web/API/ProcessingInstruction) to Kotlin\n */\npublic external abstract class ProcessingInstruction : CharacterData, LinkStyle, UnionElementOrProcessingInstruction {\n    open val target: String\n}\n\n/**\n * Exposes the JavaScript [Comment](https://developer.mozilla.org/en/docs/Web/API/Comment) to Kotlin\n */\npublic external open class Comment(data: String = definedExternally) : CharacterData {\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n}\n\n/**\n * Exposes the JavaScript [Range](https://developer.mozilla.org/en/docs/Web/API/Range) to Kotlin\n */\npublic external open class Range {\n    open val startContainer: Node\n    open val startOffset: Int\n    open val endContainer: Node\n    open val endOffset: Int\n    open val collapsed: Boolean\n    open val commonAncestorContainer: Node\n    fun createContextualFragment(fragment: String): DocumentFragment\n    fun setStart(node: Node, offset: Int): Unit\n    fun setEnd(node: Node, offset: Int): Unit\n    fun setStartBefore(node: Node): Unit\n    fun setStartAfter(node: Node): Unit\n    fun setEndBefore(node: Node): Unit\n    fun setEndAfter(node: Node): Unit\n    fun collapse(toStart: Boolean = definedExternally): Unit\n    fun selectNode(node: Node): Unit\n    fun selectNodeContents(node: Node): Unit\n    fun compareBoundaryPoints(how: Short, sourceRange: Range): Short\n    fun deleteContents(): Unit\n    fun extractContents(): DocumentFragment\n    fun cloneContents(): DocumentFragment\n    fun insertNode(node: Node): Unit\n    fun surroundContents(newParent: Node): Unit\n    fun cloneRange(): Range\n    fun detach(): Unit\n    fun isPointInRange(node: Node, offset: Int): Boolean\n    fun comparePoint(node: Node, offset: Int): Short\n    fun intersectsNode(node: Node): Boolean\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n\n    companion object {\n        val START_TO_START: Short\n        val START_TO_END: Short\n        val END_TO_END: Short\n        val END_TO_START: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NodeIterator](https://developer.mozilla.org/en/docs/Web/API/NodeIterator) to Kotlin\n */\npublic external abstract class NodeIterator {\n    open val root: Node\n    open val referenceNode: Node\n    open val pointerBeforeReferenceNode: Boolean\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    fun nextNode(): Node?\n    fun previousNode(): Node?\n    fun detach(): Unit\n}\n\n/**\n * Exposes the JavaScript [TreeWalker](https://developer.mozilla.org/en/docs/Web/API/TreeWalker) to Kotlin\n */\npublic external abstract class TreeWalker {\n    open val root: Node\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    open var currentNode: Node\n    fun parentNode(): Node?\n    fun firstChild(): Node?\n    fun lastChild(): Node?\n    fun previousSibling(): Node?\n    fun nextSibling(): Node?\n    fun previousNode(): Node?\n    fun nextNode(): Node?\n}\n\n/**\n * Exposes the JavaScript [NodeFilter](https://developer.mozilla.org/en/docs/Web/API/NodeFilter) to Kotlin\n */\npublic external interface NodeFilter {\n    fun acceptNode(node: Node): Short\n\n    companion object {\n        val FILTER_ACCEPT: Short\n        val FILTER_REJECT: Short\n        val FILTER_SKIP: Short\n        val SHOW_ALL: Int\n        val SHOW_ELEMENT: Int\n        val SHOW_ATTRIBUTE: Int\n        val SHOW_TEXT: Int\n        val SHOW_CDATA_SECTION: Int\n        val SHOW_ENTITY_REFERENCE: Int\n        val SHOW_ENTITY: Int\n        val SHOW_PROCESSING_INSTRUCTION: Int\n        val SHOW_COMMENT: Int\n        val SHOW_DOCUMENT: Int\n        val SHOW_DOCUMENT_TYPE: Int\n        val SHOW_DOCUMENT_FRAGMENT: Int\n        val SHOW_NOTATION: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMTokenList](https://developer.mozilla.org/en/docs/Web/API/DOMTokenList) to Kotlin\n */\npublic external abstract class DOMTokenList : ItemArrayLike<String> {\n    override val length: Int\n    open var value: String\n    override fun item(index: Int): String?\n    fun contains(token: String): Boolean\n    fun add(vararg tokens: String): Unit\n    fun remove(vararg tokens: String): Unit\n    fun toggle(token: String, force: Boolean = definedExternally): Boolean\n    fun replace(token: String, newToken: String): Unit\n    fun supports(token: String): Boolean\n}\n@kotlin.internal.InlineOnly inline operator fun DOMTokenList.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMPointReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMPointReadOnly) to Kotlin\n */\npublic external open class DOMPointReadOnly(x: Double, y: Double, z: Double, w: Double) {\n    open val x: Double\n    open val y: Double\n    open val z: Double\n    open val w: Double\n    fun matrixTransform(matrix: DOMMatrixReadOnly): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [DOMPoint](https://developer.mozilla.org/en/docs/Web/API/DOMPoint) to Kotlin\n */\npublic external open class DOMPoint : DOMPointReadOnly {\n    constructor(point: DOMPointInit)\n    constructor(x: Double = definedExternally, y: Double = definedExternally, z: Double = definedExternally, w: Double = definedExternally)\n    override var x: Double\n    override var y: Double\n    override var z: Double\n    override var w: Double\n}\n\n/**\n * Exposes the JavaScript [DOMPointInit](https://developer.mozilla.org/en/docs/Web/API/DOMPointInit) to Kotlin\n */\npublic external interface DOMPointInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var z: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var w: Double? /* = 1.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMPointInit(x: Double? = 0.0, y: Double? = 0.0, z: Double? = 0.0, w: Double? = 1.0): DOMPointInit {\n    val o = js(\"({})\")\n\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"z\"] = z\n    o[\"w\"] = w\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMRect](https://developer.mozilla.org/en/docs/Web/API/DOMRect) to Kotlin\n */\npublic external open class DOMRect(x: Double = definedExternally, y: Double = definedExternally, width: Double = definedExternally, height: Double = definedExternally) : DOMRectReadOnly {\n    override var x: Double\n    override var y: Double\n    override var width: Double\n    override var height: Double\n}\n\n/**\n * Exposes the JavaScript [DOMRectReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMRectReadOnly) to Kotlin\n */\npublic external open class DOMRectReadOnly(x: Double, y: Double, width: Double, height: Double) {\n    open val x: Double\n    open val y: Double\n    open val width: Double\n    open val height: Double\n    open val top: Double\n    open val right: Double\n    open val bottom: Double\n    open val left: Double\n}\n\npublic external interface DOMRectInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var width: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMRectInit(x: Double? = 0.0, y: Double? = 0.0, width: Double? = 0.0, height: Double? = 0.0): DOMRectInit {\n    val o = js(\"({})\")\n\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"width\"] = width\n    o[\"height\"] = height\n\n    return o\n}\n\npublic external interface DOMRectList : ItemArrayLike<DOMRect> {\n    override fun item(index: Int): DOMRect?\n}\n@kotlin.internal.InlineOnly inline operator fun DOMRectList.get(index: Int): DOMRect? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMQuad](https://developer.mozilla.org/en/docs/Web/API/DOMQuad) to Kotlin\n */\npublic external open class DOMQuad {\n    constructor(p1: DOMPointInit = definedExternally, p2: DOMPointInit = definedExternally, p3: DOMPointInit = definedExternally, p4: DOMPointInit = definedExternally)\n    constructor(rect: DOMRectInit)\n    open val p1: DOMPoint\n    open val p2: DOMPoint\n    open val p3: DOMPoint\n    open val p4: DOMPoint\n    open val bounds: DOMRectReadOnly\n}\n\n/**\n * Exposes the JavaScript [DOMMatrixReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMMatrixReadOnly) to Kotlin\n */\npublic external open class DOMMatrixReadOnly(numberSequence: Array<Double>) {\n    open val a: Double\n    open val b: Double\n    open val c: Double\n    open val d: Double\n    open val e: Double\n    open val f: Double\n    open val m11: Double\n    open val m12: Double\n    open val m13: Double\n    open val m14: Double\n    open val m21: Double\n    open val m22: Double\n    open val m23: Double\n    open val m24: Double\n    open val m31: Double\n    open val m32: Double\n    open val m33: Double\n    open val m34: Double\n    open val m41: Double\n    open val m42: Double\n    open val m43: Double\n    open val m44: Double\n    open val is2D: Boolean\n    open val isIdentity: Boolean\n    fun translate(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scale(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3d(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniform(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotate(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVector(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngle(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewX(sx: Double): DOMMatrix\n    fun skewY(sy: Double): DOMMatrix\n    fun multiply(other: DOMMatrix): DOMMatrix\n    fun flipX(): DOMMatrix\n    fun flipY(): DOMMatrix\n    fun inverse(): DOMMatrix\n    fun transformPoint(point: DOMPointInit = definedExternally): DOMPoint\n    fun toFloat32Array(): Float32Array\n    fun toFloat64Array(): Float64Array\n}\n\n/**\n * Exposes the JavaScript [DOMMatrix](https://developer.mozilla.org/en/docs/Web/API/DOMMatrix) to Kotlin\n */\npublic external open class DOMMatrix() : DOMMatrixReadOnly {\n    constructor(transformList: String)\n    constructor(other: DOMMatrixReadOnly)\n    constructor(array32: Float32Array)\n    constructor(array64: Float64Array)\n    constructor(numberSequence: Array<Double>)\n    override var a: Double\n    override var b: Double\n    override var c: Double\n    override var d: Double\n    override var e: Double\n    override var f: Double\n    override var m11: Double\n    override var m12: Double\n    override var m13: Double\n    override var m14: Double\n    override var m21: Double\n    override var m22: Double\n    override var m23: Double\n    override var m24: Double\n    override var m31: Double\n    override var m32: Double\n    override var m33: Double\n    override var m34: Double\n    override var m41: Double\n    override var m42: Double\n    override var m43: Double\n    override var m44: Double\n    fun multiplySelf(other: DOMMatrix): DOMMatrix\n    fun preMultiplySelf(other: DOMMatrix): DOMMatrix\n    fun translateSelf(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scaleSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3dSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniformSelf(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotateSelf(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVectorSelf(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngleSelf(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewXSelf(sx: Double): DOMMatrix\n    fun skewYSelf(sy: Double): DOMMatrix\n    fun invertSelf(): DOMMatrix\n    fun setMatrixValue(transformList: String): DOMMatrix\n}\n\npublic external interface ScrollOptions {\n    var behavior: ScrollBehavior? /* = ScrollBehavior.AUTO */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollOptions(behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollOptions {\n    val o = js(\"({})\")\n\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [ScrollToOptions](https://developer.mozilla.org/en/docs/Web/API/ScrollToOptions) to Kotlin\n */\npublic external interface ScrollToOptions : ScrollOptions {\n    var left: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var top: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollToOptions(left: Double? = undefined, top: Double? = undefined, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollToOptions {\n    val o = js(\"({})\")\n\n    o[\"left\"] = left\n    o[\"top\"] = top\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaQueryList](https://developer.mozilla.org/en/docs/Web/API/MediaQueryList) to Kotlin\n */\npublic external abstract class MediaQueryList : EventTarget {\n    open val media: String\n    open val matches: Boolean\n    open var onchange: ((Event) -> dynamic)?\n    fun addListener(listener: EventListener?): Unit\n    fun addListener(listener: ((Event) -> Unit)?): Unit\n    fun removeListener(listener: EventListener?): Unit\n    fun removeListener(listener: ((Event) -> Unit)?): Unit\n}\n\n/**\n * Exposes the JavaScript [MediaQueryListEvent](https://developer.mozilla.org/en/docs/Web/API/MediaQueryListEvent) to Kotlin\n */\npublic external open class MediaQueryListEvent(type: String, eventInitDict: MediaQueryListEventInit = definedExternally) : Event {\n    open val media: String\n    open val matches: Boolean\n}\n\npublic external interface MediaQueryListEventInit : EventInit {\n    var media: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var matches: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaQueryListEventInit(media: String? = \"\", matches: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaQueryListEventInit {\n    val o = js(\"({})\")\n\n    o[\"media\"] = media\n    o[\"matches\"] = matches\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [Screen](https://developer.mozilla.org/en/docs/Web/API/Screen) to Kotlin\n */\npublic external abstract class Screen {\n    open val availWidth: Int\n    open val availHeight: Int\n    open val width: Int\n    open val height: Int\n    open val colorDepth: Int\n    open val pixelDepth: Int\n}\n\n/**\n * Exposes the JavaScript [CaretPosition](https://developer.mozilla.org/en/docs/Web/API/CaretPosition) to Kotlin\n */\npublic external abstract class CaretPosition {\n    open val offsetNode: Node\n    open val offset: Int\n    fun getClientRect(): DOMRect?\n}\n\npublic external interface ScrollIntoViewOptions : ScrollOptions {\n    var block: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var inline: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollIntoViewOptions(block: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, inline: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollIntoViewOptions {\n    val o = js(\"({})\")\n\n    o[\"block\"] = block\n    o[\"inline\"] = inline\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\npublic external interface BoxQuadOptions {\n    var box: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var relativeTo: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BoxQuadOptions(box: CSSBoxType? = CSSBoxType.BORDER, relativeTo: dynamic = undefined): BoxQuadOptions {\n    val o = js(\"({})\")\n\n    o[\"box\"] = box\n    o[\"relativeTo\"] = relativeTo\n\n    return o\n}\n\npublic external interface ConvertCoordinateOptions {\n    var fromBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var toBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConvertCoordinateOptions(fromBox: CSSBoxType? = CSSBoxType.BORDER, toBox: CSSBoxType? = CSSBoxType.BORDER): ConvertCoordinateOptions {\n    val o = js(\"({})\")\n\n    o[\"fromBox\"] = fromBox\n    o[\"toBox\"] = toBox\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [GeometryUtils](https://developer.mozilla.org/en/docs/Web/API/GeometryUtils) to Kotlin\n */\npublic external interface GeometryUtils {\n    fun getBoxQuads(options: BoxQuadOptions = definedExternally): Array<DOMQuad>\n    fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMPoint\n}\n\npublic external @marker interface UnionElementOrProcessingInstruction {\n}\n\npublic external @marker interface UnionElementOrHTMLCollection {\n}\n\npublic external @marker interface UnionElementOrRadioNodeList {\n}\n\npublic external @marker interface UnionHTMLOptGroupElementOrHTMLOptionElement {\n}\n\npublic external @marker interface UnionAudioTrackOrTextTrackOrVideoTrack {\n}\n\npublic external @marker interface UnionElementOrMouseEvent {\n}\n\npublic external @marker interface UnionMessagePortOrWindow {\n}\n\npublic external @marker interface UnionMessagePortOrServiceWorker {\n}\n\npublic external @marker interface HTMLOrSVGScriptElement {\n}\n\npublic external @marker interface RenderingContext {\n}\n\npublic external @marker interface HTMLOrSVGImageElement {\n}\n\n/* please, don't implement this interface! */\npublic external interface DocumentReadyState {\n    companion object\n}\npublic inline val DocumentReadyState.Companion.LOADING: DocumentReadyState get() = \"loading\".asDynamic().unsafeCast<DocumentReadyState>()\npublic inline val DocumentReadyState.Companion.INTERACTIVE: DocumentReadyState get() = \"interactive\".asDynamic().unsafeCast<DocumentReadyState>()\npublic inline val DocumentReadyState.Companion.COMPLETE: DocumentReadyState get() = \"complete\".asDynamic().unsafeCast<DocumentReadyState>()\n\n/* please, don't implement this interface! */\npublic external interface CanPlayTypeResult {\n    companion object\n}\npublic inline val CanPlayTypeResult.Companion.EMPTY: CanPlayTypeResult get() = \"\".asDynamic().unsafeCast<CanPlayTypeResult>()\npublic inline val CanPlayTypeResult.Companion.MAYBE: CanPlayTypeResult get() = \"maybe\".asDynamic().unsafeCast<CanPlayTypeResult>()\npublic inline val CanPlayTypeResult.Companion.PROBABLY: CanPlayTypeResult get() = \"probably\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\n/* please, don't implement this interface! */\npublic external interface TextTrackMode {\n    companion object\n}\npublic inline val TextTrackMode.Companion.DISABLED: TextTrackMode get() = \"disabled\".asDynamic().unsafeCast<TextTrackMode>()\npublic inline val TextTrackMode.Companion.HIDDEN: TextTrackMode get() = \"hidden\".asDynamic().unsafeCast<TextTrackMode>()\npublic inline val TextTrackMode.Companion.SHOWING: TextTrackMode get() = \"showing\".asDynamic().unsafeCast<TextTrackMode>()\n\n/* please, don't implement this interface! */\npublic external interface TextTrackKind {\n    companion object\n}\npublic inline val TextTrackKind.Companion.SUBTITLES: TextTrackKind get() = \"subtitles\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.CAPTIONS: TextTrackKind get() = \"captions\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.DESCRIPTIONS: TextTrackKind get() = \"descriptions\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.CHAPTERS: TextTrackKind get() = \"chapters\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.METADATA: TextTrackKind get() = \"metadata\".asDynamic().unsafeCast<TextTrackKind>()\n\n/* please, don't implement this interface! */\npublic external interface SelectionMode {\n    companion object\n}\npublic inline val SelectionMode.Companion.SELECT: SelectionMode get() = \"select\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.START: SelectionMode get() = \"start\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.END: SelectionMode get() = \"end\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.PRESERVE: SelectionMode get() = \"preserve\".asDynamic().unsafeCast<SelectionMode>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasFillRule {\n    companion object\n}\npublic inline val CanvasFillRule.Companion.NONZERO: CanvasFillRule get() = \"nonzero\".asDynamic().unsafeCast<CanvasFillRule>()\npublic inline val CanvasFillRule.Companion.EVENODD: CanvasFillRule get() = \"evenodd\".asDynamic().unsafeCast<CanvasFillRule>()\n\n/* please, don't implement this interface! */\npublic external interface ImageSmoothingQuality {\n    companion object\n}\npublic inline val ImageSmoothingQuality.Companion.LOW: ImageSmoothingQuality get() = \"low\".asDynamic().unsafeCast<ImageSmoothingQuality>()\npublic inline val ImageSmoothingQuality.Companion.MEDIUM: ImageSmoothingQuality get() = \"medium\".asDynamic().unsafeCast<ImageSmoothingQuality>()\npublic inline val ImageSmoothingQuality.Companion.HIGH: ImageSmoothingQuality get() = \"high\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasLineCap {\n    companion object\n}\npublic inline val CanvasLineCap.Companion.BUTT: CanvasLineCap get() = \"butt\".asDynamic().unsafeCast<CanvasLineCap>()\npublic inline val CanvasLineCap.Companion.ROUND: CanvasLineCap get() = \"round\".asDynamic().unsafeCast<CanvasLineCap>()\npublic inline val CanvasLineCap.Companion.SQUARE: CanvasLineCap get() = \"square\".asDynamic().unsafeCast<CanvasLineCap>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasLineJoin {\n    companion object\n}\npublic inline val CanvasLineJoin.Companion.ROUND: CanvasLineJoin get() = \"round\".asDynamic().unsafeCast<CanvasLineJoin>()\npublic inline val CanvasLineJoin.Companion.BEVEL: CanvasLineJoin get() = \"bevel\".asDynamic().unsafeCast<CanvasLineJoin>()\npublic inline val CanvasLineJoin.Companion.MITER: CanvasLineJoin get() = \"miter\".asDynamic().unsafeCast<CanvasLineJoin>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasTextAlign {\n    companion object\n}\npublic inline val CanvasTextAlign.Companion.START: CanvasTextAlign get() = \"start\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.END: CanvasTextAlign get() = \"end\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.LEFT: CanvasTextAlign get() = \"left\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.RIGHT: CanvasTextAlign get() = \"right\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.CENTER: CanvasTextAlign get() = \"center\".asDynamic().unsafeCast<CanvasTextAlign>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasTextBaseline {\n    companion object\n}\npublic inline val CanvasTextBaseline.Companion.TOP: CanvasTextBaseline get() = \"top\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.HANGING: CanvasTextBaseline get() = \"hanging\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.MIDDLE: CanvasTextBaseline get() = \"middle\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.ALPHABETIC: CanvasTextBaseline get() = \"alphabetic\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.IDEOGRAPHIC: CanvasTextBaseline get() = \"ideographic\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.BOTTOM: CanvasTextBaseline get() = \"bottom\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasDirection {\n    companion object\n}\npublic inline val CanvasDirection.Companion.LTR: CanvasDirection get() = \"ltr\".asDynamic().unsafeCast<CanvasDirection>()\npublic inline val CanvasDirection.Companion.RTL: CanvasDirection get() = \"rtl\".asDynamic().unsafeCast<CanvasDirection>()\npublic inline val CanvasDirection.Companion.INHERIT: CanvasDirection get() = \"inherit\".asDynamic().unsafeCast<CanvasDirection>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollRestoration {\n    companion object\n}\npublic inline val ScrollRestoration.Companion.AUTO: ScrollRestoration get() = \"auto\".asDynamic().unsafeCast<ScrollRestoration>()\npublic inline val ScrollRestoration.Companion.MANUAL: ScrollRestoration get() = \"manual\".asDynamic().unsafeCast<ScrollRestoration>()\n\n/* please, don't implement this interface! */\npublic external interface ImageOrientation {\n    companion object\n}\npublic inline val ImageOrientation.Companion.NONE: ImageOrientation get() = \"none\".asDynamic().unsafeCast<ImageOrientation>()\npublic inline val ImageOrientation.Companion.FLIPY: ImageOrientation get() = \"flipY\".asDynamic().unsafeCast<ImageOrientation>()\n\n/* please, don't implement this interface! */\npublic external interface PremultiplyAlpha {\n    companion object\n}\npublic inline val PremultiplyAlpha.Companion.NONE: PremultiplyAlpha get() = \"none\".asDynamic().unsafeCast<PremultiplyAlpha>()\npublic inline val PremultiplyAlpha.Companion.PREMULTIPLY: PremultiplyAlpha get() = \"premultiply\".asDynamic().unsafeCast<PremultiplyAlpha>()\npublic inline val PremultiplyAlpha.Companion.DEFAULT: PremultiplyAlpha get() = \"default\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\n/* please, don't implement this interface! */\npublic external interface ColorSpaceConversion {\n    companion object\n}\npublic inline val ColorSpaceConversion.Companion.NONE: ColorSpaceConversion get() = \"none\".asDynamic().unsafeCast<ColorSpaceConversion>()\npublic inline val ColorSpaceConversion.Companion.DEFAULT: ColorSpaceConversion get() = \"default\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\n/* please, don't implement this interface! */\npublic external interface ResizeQuality {\n    companion object\n}\npublic inline val ResizeQuality.Companion.PIXELATED: ResizeQuality get() = \"pixelated\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.LOW: ResizeQuality get() = \"low\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.MEDIUM: ResizeQuality get() = \"medium\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.HIGH: ResizeQuality get() = \"high\".asDynamic().unsafeCast<ResizeQuality>()\n\n/* please, don't implement this interface! */\npublic external interface BinaryType {\n    companion object\n}\npublic inline val BinaryType.Companion.BLOB: BinaryType get() = \"blob\".asDynamic().unsafeCast<BinaryType>()\npublic inline val BinaryType.Companion.ARRAYBUFFER: BinaryType get() = \"arraybuffer\".asDynamic().unsafeCast<BinaryType>()\n\n/* please, don't implement this interface! */\npublic external interface WorkerType {\n    companion object\n}\npublic inline val WorkerType.Companion.CLASSIC: WorkerType get() = \"classic\".asDynamic().unsafeCast<WorkerType>()\npublic inline val WorkerType.Companion.MODULE: WorkerType get() = \"module\".asDynamic().unsafeCast<WorkerType>()\n\n/* please, don't implement this interface! */\npublic external interface ShadowRootMode {\n    companion object\n}\npublic inline val ShadowRootMode.Companion.OPEN: ShadowRootMode get() = \"open\".asDynamic().unsafeCast<ShadowRootMode>()\npublic inline val ShadowRootMode.Companion.CLOSED: ShadowRootMode get() = \"closed\".asDynamic().unsafeCast<ShadowRootMode>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollBehavior {\n    companion object\n}\npublic inline val ScrollBehavior.Companion.AUTO: ScrollBehavior get() = \"auto\".asDynamic().unsafeCast<ScrollBehavior>()\npublic inline val ScrollBehavior.Companion.INSTANT: ScrollBehavior get() = \"instant\".asDynamic().unsafeCast<ScrollBehavior>()\npublic inline val ScrollBehavior.Companion.SMOOTH: ScrollBehavior get() = \"smooth\".asDynamic().unsafeCast<ScrollBehavior>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollLogicalPosition {\n    companion object\n}\npublic inline val ScrollLogicalPosition.Companion.START: ScrollLogicalPosition get() = \"start\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.CENTER: ScrollLogicalPosition get() = \"center\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.END: ScrollLogicalPosition get() = \"end\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.NEAREST: ScrollLogicalPosition get() = \"nearest\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\n/* please, don't implement this interface! */\npublic external interface CSSBoxType {\n    companion object\n}\npublic inline val CSSBoxType.Companion.MARGIN: CSSBoxType get() = \"margin\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.BORDER: CSSBoxType get() = \"border\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.PADDING: CSSBoxType get() = \"padding\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.CONTENT: CSSBoxType get() = \"content\".asDynamic().unsafeCast<CSSBoxType>()\n\n","package baaahs\n\nimport baaahs.imaging.Bitmap\nimport baaahs.imaging.CanvasBitmap\nimport baaahs.visualizer.Visualizer\nimport info.laht.threekt.cameras.PerspectiveCamera\nimport info.laht.threekt.core.*\nimport info.laht.threekt.geometries.SphereBufferGeometry\nimport info.laht.threekt.materials.LineBasicMaterial\nimport info.laht.threekt.materials.MeshBasicMaterial\nimport info.laht.threekt.math.Box3\nimport info.laht.threekt.math.Color\nimport info.laht.threekt.math.Vector3\nimport info.laht.threekt.math.plus\nimport info.laht.threekt.objects.Line\nimport info.laht.threekt.objects.Mesh\nimport info.laht.threekt.renderers.WebGLRenderer\nimport info.laht.threekt.scenes.Scene\nimport kotlinx.html.*\nimport kotlinx.html.dom.append\nimport kotlinx.html.dom.create\nimport kotlinx.html.js.onClickFunction\nimport kotlinx.html.js.table\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.HTMLDivElement\nimport org.w3c.dom.HTMLElement\nimport kotlin.browser.document\nimport kotlin.collections.component1\nimport kotlin.collections.component2\nimport kotlin.collections.set\nimport kotlin.dom.clear\nimport kotlin.math.max\nimport kotlin.math.min\nimport kotlin.math.roundToInt\n\nclass JsMapperDisplay(private val visualizer: Visualizer) : MapperDisplay, HostedWebApp {\n    private lateinit var listener: MapperDisplay.Listener\n\n    override fun listen(listener: MapperDisplay.Listener) {\n        this.listener = listener\n    }\n\n    private var width = 512\n    private var height = 384\n\n    private val clock = Clock()\n\n    // onscreen renderer for registration UI:\n    private val uiRenderer = WebGLRenderer(js(\"{alpha: true}\"))\n    private var uiScene = Scene()\n    private var uiCamera = PerspectiveCamera(45, width.toDouble() / height, 1, 10000)\n    private var uiControls: dynamic\n    private val wireframe = Object3D()\n\n    private val screen = document.create.div(\"mapperUi-screen\") {\n        div(\"mapperUi-controls\") {\n            button { +\"\u25b2\"; onClickFunction = { wireframe.position.y += 10 } }\n            button { +\"\u25bc\"; onClickFunction = { wireframe.position.y -= 10 } }\n//            button { i(classes=\"fas fa-crosshairs\"); onClickFunction = { target() } }\n            button { i(classes=\"fas fa-play\"); onClickFunction = { go() } }\n            button { i(classes=\"fas fa-pause\"); onClickFunction = { listener.onPause() } }\n            button { i(classes=\"fas fa-stop\"); onClickFunction = { listener.onStop() }; disabled = true }\n        }\n        canvas(classes = \"mapperUi-2d-canvas\") {\n            width = this@JsMapperDisplay.width.toString() + \"px\"\n            height = this@JsMapperDisplay.height.toString() + \"px\"\n        }\n        div(\"mapperUi-3d-div\") { }\n        canvas(classes = \"mapperUi-diff-canvas\") {\n            width = this@JsMapperDisplay.width.toString() + \"px\"\n            height = this@JsMapperDisplay.height.toString() + \"px\"\n        }\n        div(\"mapperUi-stats\") { }\n        div(\"mapperUi-message\") { }\n        div(\"mapperUi-message2\") { }\n        div(\"mapperUi-table\") { }\n    }\n\n    private val ui2dCanvas = screen.first<HTMLCanvasElement>(\"mapperUi-2d-canvas\")\n    private val ui2dCtx = ui2dCanvas.context2d()\n\n    private val ui3dDiv = screen.first<HTMLCanvasElement>(\"mapperUi-3d-div\")\n    private val ui3dCanvas = uiRenderer.domElement as HTMLCanvasElement\n\n    private val diffCanvas = screen.first<HTMLCanvasElement>(\"mapperUi-diff-canvas\")\n    private val diffCtx = diffCanvas.context2d()\n    private var changeRegion: MediaDevices.Region? = null\n\n    private val statsDiv = screen.first<HTMLDivElement>(\"mapperUi-stats\")\n    private val messageDiv = screen.first<HTMLDivElement>(\"mapperUi-message\")\n    private val message2Div = screen.first<HTMLDivElement>(\"mapperUi-message2\")\n    private val table = screen.first<HTMLDivElement>(\"mapperUi-table\")\n\n    private val visiblePanels = mutableListOf<Pair<SheepModel.Panel, PanelInfo>>()\n\n    private val panelInfos = mutableMapOf<SheepModel.Panel, PanelInfo>()\n\n    init {\n        visualizer.mapperIsRunning = true\n\n        ui3dDiv.appendChild(ui3dCanvas)\n\n        uiCamera.position.z = 1000.0\n        uiScene.add(uiCamera)\n\n        uiControls = js(\"document.createCameraControls\")(uiCamera, uiRenderer.domElement)\n    }\n\n    override fun render(parentNode: HTMLElement) {\n        parentNode.appendChild(screen)\n\n        parentNode.onresize = {\n            resizeTo(parentNode.offsetWidth, parentNode.offsetHeight)\n        }\n        resizeTo(width, height)\n    }\n\n    override fun onClose() {\n        visualizer.mapperIsRunning = false\n\n        listener.onClose()\n    }\n\n    private fun resizeTo(width: Int, height: Int) {\n        this.width = width\n        this.height = height\n\n        uiCamera.aspect = width.toDouble() / height\n        uiCamera.updateProjectionMatrix()\n\n        uiRenderer.setSize(width, height)\n        uiRenderer.setPixelRatio(width.toFloat() / height)\n        (uiRenderer.domElement as HTMLCanvasElement).width = width\n        (uiRenderer.domElement as HTMLCanvasElement).height = height\n\n        ui2dCanvas.width = width\n        ui2dCanvas.height = height\n\n        diffCanvas.width = width\n        diffCanvas.height = height\n    }\n\n    override fun addWireframe(sheepModel: SheepModel) {\n        val lineMaterial = LineBasicMaterial().apply { color = Color(0f, 1f, 0f) }\n\n        val vertices = sheepModel.vertices.map { v -> Vector3(v.x, v.y, v.z) }.toTypedArray()\n        val container = Object3D()\n        sheepModel.panels.forEach { panel ->\n            val geom = Geometry()\n            val allFaces = mutableListOf<Face3>()\n            geom.vertices = vertices\n\n            val panelFaces = mutableListOf<Face3>()\n            var faceNormal = Vector3()\n            panel.faces.faces.forEach { face ->\n                val face3 = Face3(face.vertexIds[0], face.vertexIds[1], face.vertexIds[2], Vector3(0, 0, 0))\n                allFaces.add(face3)\n                panelFaces.add(face3)\n\n                // just compute this face's normal\n                geom.faces = arrayOf(face3)\n                geom.computeFaceNormals()\n                faceNormal = face3.normal!!\n            }\n\n            val panelMaterial = MeshBasicMaterial().apply { color = Color(0, 0, 0) }\n            val mesh = Mesh(geom, panelMaterial)\n            uiScene.add(mesh)\n\n            // offset the wireframe by one of the panel's face normals so it's not clipped by the panel mesh\n            panel.lines.forEach { line ->\n                val lineGeom = BufferGeometry()\n                lineGeom.setFromPoints(line.points.map { pt -> Vector3(pt.x, pt.y, pt.z) + faceNormal }.toTypedArray())\n                wireframe.add(Line(lineGeom, lineMaterial))\n            }\n\n            geom.faces = allFaces.toTypedArray()\n            geom.computeFaceNormals()\n            geom.computeVertexNormals()\n\n//            container.add(mesh)\n\n            panelInfos[panel] = PanelInfo(panelFaces, mesh, geom)\n        }\n\n        uiScene.add(wireframe)\n\n        val originMarker = Mesh(\n            SphereBufferGeometry(1, 32, 32),\n            MeshBasicMaterial().apply { color = Color(0xff0000) })\n        uiScene.add(originMarker)\n\n        val boundingBox = Box3().setFromObject(container)\n        val centerOfSheep = boundingBox.getCenter().clone()\n\n        uiCamera.lookAt(centerOfSheep)\n    }\n\n    override fun getCandidateSurfaces(changeRegion: MediaDevices.Region): List<SheepModel.Panel> {\n        val panelRects = visiblePanels.associate { (panel, panelInfo) ->\n            panelInfo.mesh.updateMatrixWorld()\n\n            val panelBasePosition = panelInfo.mesh.position\n\n            var minX = Int.MAX_VALUE\n            var maxX = Int.MIN_VALUE\n            var minY = Int.MAX_VALUE\n            var maxY = Int.MIN_VALUE\n\n            val widthHalf = width / 2.0\n            val heightHalf = height / 2.0\n\n            for (face in panelInfo.faces) {\n                for (vertexI in arrayOf(face.a, face.b, face.c)) {\n                    val v = panelBasePosition.clone() + panelInfo.geom.vertices[vertexI]\n                    v.project(uiCamera)\n\n                    val x = ((v.x * widthHalf) + widthHalf).toInt()\n                    val y = (-(v.y * heightHalf) + heightHalf).toInt()\n\n                    if (x < minX) minX = x\n                    if (x > maxX) maxX = x\n                    if (y < minY) minY = y\n                    if (y > maxY) maxY = y\n                }\n            }\n\n            Pair(panel, MediaDevices.Region(minX, minY, maxX, maxY))\n        }\n\n        val orderedPanels = visiblePanels\n            .sortedBy { (panel, _) -> panelRects[panel]!!.distanceTo(changeRegion) }\n        val first = orderedPanels.first()\n        (first.second.mesh.material as MeshBasicMaterial).color.r += .25\n\n        table.clear()\n        table.append {\n            table {\n                tr {\n                    th { +\"Panel\" }\n                    th { +\"Centroid dist\" }\n                }\n\n                orderedPanels.subList(0, min(5, orderedPanels.size)).forEach { (panel, _) ->\n                    tr {\n                        td { +panel.name }\n                        td { +\"${panelRects[panel]!!.distanceTo(changeRegion)}\" }\n                    }\n                }\n            }\n        }\n\n        return orderedPanels.map { (panel, _) -> panel }\n    }\n\n    override fun showCamImage(image: baaahs.imaging.Image) {\n        ui2dCtx.resetTransform()\n\n        val scale = max(\n            width.toDouble() / image.width,\n            height.toDouble() / image.height\n        )\n        val imgWidth = (image.width * scale).roundToInt()\n        val imgHeight = (image.height * scale).roundToInt()\n\n        val widthDiff = width - imgWidth\n        val heightDiff = height - imgHeight\n\n        val widthOff = widthDiff / 2.0\n        val heightOff = heightDiff / 2.0\n\n        CanvasBitmap(ui2dCanvas).drawImage(image,\n            0, 0, image.width, image.height,\n            widthDiff / 2, heightDiff / 2, imgWidth, imgHeight\n        )\n\n        // add a green line around the camera image:\n        ui2dCtx.strokeStyle = \"#006600\"\n        ui2dCtx.strokeRect(widthOff, heightOff, imgWidth.toDouble(), imgHeight.toDouble())\n\n        changeRegion?.apply {\n            ui2dCtx.strokeStyle = \"#ff0000\"\n            ui2dCtx.strokeRect(x0 * scale + widthOff, y0 * scale + heightOff, width * scale, height * scale)\n        }\n\n        uiControls.update(clock.getDelta())\n        uiRenderer.render(uiScene, uiCamera)\n    }\n\n    override fun showDiffImage(deltaBitmap: Bitmap, changeRegion: MediaDevices.Region) {\n        this.changeRegion = changeRegion\n\n        CanvasBitmap(diffCanvas).drawImage(deltaBitmap.asImage())\n        diffCtx.strokeStyle = \"#ff0000\"\n        changeRegion.apply {\n            diffCtx.strokeRect(x0.toDouble(), y0.toDouble(),\n                changeRegion.width.toDouble(), changeRegion.height.toDouble())\n        }\n    }\n\n    override fun showMessage(message: String) {\n        messageDiv.innerText = message\n    }\n\n    override fun showMessage2(message: String) {\n        message2Div.innerText = message\n    }\n\n    override fun showStats(total: Int, mapped: Int, visible: Int) {\n        statsDiv.innerHTML = \"<i class=\\\"fas fa-triangle\\\"></i>Mapped: $mapped / $total<br/>Visible: $visible\"\n    }\n\n    private fun go() {\n        listener.onStart()\n\n        computeVisiblePanels()\n    }\n\n    private fun computeVisiblePanels() {\n        visiblePanels.clear()\n\n        panelInfos.forEach { (panel, panelInfo) ->\n            val panelPosition = panelInfo.geom.vertices[panelInfo.faces[0].a]\n            val dirToCamera = uiCamera.position.clone().sub(panelPosition)\n            dirToCamera.normalize()\n            val angle = panelInfo.faces[0].normal!!.dot(dirToCamera)\n            println(\"Angle for ${panel.name} is $angle\")\n            if (angle > 0) {\n                visiblePanels.add(Pair(panel, panelInfo))\n            }\n        }\n    }\n\n    override fun close() {\n    }\n}\n\nclass PanelInfo(val faces: MutableList<Face3>, val mesh: Mesh, val geom: Geometry)","package baaahs\n\nimport org.w3c.dom.Element\nimport org.w3c.dom.HTMLButtonElement\nimport org.w3c.dom.HTMLElement\nimport kotlin.dom.appendElement\nimport kotlin.dom.appendText\n\nclass Launcher(val parentNode: Element) {\n    private val fakeDomContainer = FakeDomContainer()\n\n    fun add(name: String, onLaunch: () -> HostedWebApp): HTMLButtonElement {\n        return parentNode.appendElement(\"button\") {\n            appendText(name)\n\n            (this as HTMLElement).onclick = {\n                console.log(\"Launch $name\", this)\n                fakeDomContainer.createFrame(name, onLaunch())\n            }\n        } as HTMLButtonElement\n    }\n\n}\n","package baaahs\n\nimport org.w3c.dom.*\n\nvar Element.disabled: Boolean\n    get() = getAttribute(\"disabled\") == \"disabled\"\n    set(value) {\n        if (value) {\n            setAttribute(\"disabled\", \"disabled\")\n        } else {\n            removeAttribute(\"disabled\")\n        }\n    }\n\nfun <T> ItemArrayLike<T>.forEach(action: (T) -> Unit) {\n    for (i in 0 until length) {\n        action(item(i)!!)\n    }\n}\n\nfun DOMTokenList.clear() {\n    while (length > 0) {\n        remove(item(0)!!)\n    }\n}\n\n@Suppress(\"UNCHECKED_CAST\")\nfun <T : HTMLElement> HTMLElement.first(className: String) : T = (getElementsByClassName(className)[0] as T?)!!\n\nfun HTMLCanvasElement.context2d() = this.getContext(\"2d\")!! as CanvasRenderingContext2D\n\ninterface HostedWebApp {\n    @JsName(\"render\")\n    fun render(parentNode: HTMLElement)\n\n    @JsName(\"onClose\")\n    fun onClose()\n}\n\ninterface DomContainer {\n    fun createFrame(name: String, hostedWebApp: HostedWebApp): Frame\n\n    interface Frame {\n        @JsName(\"close\")\n        fun close()\n    }\n}\n\nclass FakeDomContainer : DomContainer {\n    override fun createFrame(name: String, hostedWebApp: HostedWebApp): DomContainer.Frame =\n        js(\"document.createFakeClientDevice\")(name, hostedWebApp)\n}","package baaahs\n\nimport baaahs.net.Network\nimport baaahs.proto.Ports\n\nobject WebUi {\n    @JsName(\"createPubSubClient\")\n    fun createPubSubClient(network: Network, pinkyAddress: Network.Address): PubSub.Client =\n        PubSub.Client(network.link(), pinkyAddress, Ports.PINKY_UI_TCP).apply {\n            install(gadgetModule)\n        }\n}","package baaahs.geom\n\nactual class Vector2 actual constructor(x: Double, y: Double) : info.laht.threekt.math.Vector2(x, y) {\n}","package baaahs.imaging\n\nimport baaahs.context2d\nimport kotlinx.html.dom.create\nimport kotlinx.html.js.canvas\nimport org.w3c.dom.CanvasRenderingContext2D\nimport org.w3c.dom.HTMLCanvasElement\nimport org.w3c.dom.ImageBitmap\nimport kotlin.browser.document\n\nactual class NativeBitmap actual constructor(override val width: Int, override val height: Int) : CanvasBitmap(\n    createCanvas(width, height)), Bitmap\n\nfun createCanvas(width: Int, height: Int) =\n    document.create.canvas {\n        this.width = \"${width}px\"\n        this.height = \"${height}px\"\n    }\n\nopen class CanvasBitmap(private val canvas: HTMLCanvasElement) : Bitmap {\n    override val width = canvas.width\n    override val height = canvas.height\n\n    internal val ctx = canvas.context2d()\n\n    override fun drawImage(image: Image) = (image as JsImage).draw(ctx, 0, 0)\n\n    override fun drawImage(\n        image: Image,\n        sX: Int, sY: Int, sWidth: Int, sHeight: Int,\n        dX: Int, dY: Int, dWidth: Int, dHeight: Int\n    ) = (image as JsImage).draw(ctx, sX, sY, sWidth, sHeight, dX, dY, dWidth, dHeight)\n\n    override fun copyFrom(other: Bitmap) {\n        assertSameSizeAs(other)\n\n        ctx.globalCompositeOperation = \"source-over\"\n        ctx.drawImage((other as CanvasBitmap).canvas, 0.0, 0.0)\n    }\n\n    override fun subtract(other: Bitmap) {\n        assertSameSizeAs(other)\n\n        ctx.globalCompositeOperation = \"difference\"\n        ctx.drawImage((other as CanvasBitmap).canvas, 0.0, 0.0)\n    }\n\n    override fun withData(fn: (data: ByteArray) -> Boolean) {\n        val imageData = ctx.getImageData(0.0, 0.0, width.toDouble(), height.toDouble())\n        if (fn(imageData.data.asDynamic())) {\n            ctx.putImageData(imageData, 0.0, 0.0)\n        }\n    }\n\n    override fun asImage(): Image {\n        return object: JsImage() {\n            override val width = this@CanvasBitmap.width\n            override val height = this@CanvasBitmap.height\n            override fun toBitmap(): Bitmap = this@CanvasBitmap\n\n            override fun draw(ctx: CanvasRenderingContext2D, x: Int, y: Int) {\n                ctx.drawImage(canvas, 0.0, 0.0)\n            }\n\n            override fun draw(\n                ctx: CanvasRenderingContext2D,\n                sX: Int, sY: Int, sWidth: Int, sHeight: Int,\n                dX: Int, dY: Int, dWidth: Int, dHeight: Int\n            ) {\n                ctx.drawImage(canvas,\n                    sX.toDouble(), sY.toDouble(), sWidth.toDouble(), sHeight.toDouble(),\n                    dX.toDouble(), dY.toDouble(), dWidth.toDouble(), dHeight.toDouble())\n            }\n        }\n    }\n\n    private fun assertSameSizeAs(other: Bitmap) {\n        if (width != other.width || height != other.height) {\n            throw IllegalArgumentException(\"other bitmap is not the same size\" +\n                    \" (${width}x${height} != ${other.width}x${other.height})\")\n        }\n    }\n}\n\nabstract class JsImage : Image {\n    abstract fun draw(ctx: CanvasRenderingContext2D, x: Int, y: Int)\n\n    abstract fun draw(ctx: CanvasRenderingContext2D,\n        sX: Int, sY: Int, sWidth: Int, sHeight: Int,\n        dX: Int, dY: Int, dWidth: Int, dHeight: Int)\n}\n\nclass ImageBitmapImage(private val imageBitmap: ImageBitmap) : JsImage() {\n    override val width = imageBitmap.width\n    override val height = imageBitmap.height\n\n    override fun toBitmap(): Bitmap {\n        val bitmap = NativeBitmap(imageBitmap.width, imageBitmap.height)\n        bitmap.drawImage(this)\n        return bitmap\n    }\n\n    override fun draw(ctx: CanvasRenderingContext2D, x: Int, y: Int) {\n        ctx.drawImage(imageBitmap, 0.0, 0.0)\n    }\n\n    override fun draw(ctx: CanvasRenderingContext2D,\n        sX: Int, sY: Int, sWidth: Int, sHeight: Int,\n        dX: Int, dY: Int, dWidth: Int, dHeight: Int\n    ) {\n        ctx.drawImage(imageBitmap,\n            sX.toDouble(), sY.toDouble(), sWidth.toDouble(), sHeight.toDouble(),\n            dX.toDouble(), dY.toDouble(), dWidth.toDouble(), dHeight.toDouble())\n    }\n}\n\n","package baaahs\n\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.promise\nimport org.w3c.xhr.XMLHttpRequest\nimport kotlin.js.Date\n\nactual fun doRunBlocking(block: suspend () -> Unit) {\n    GlobalScope.promise { block() }\n    return\n}\n\nactual fun getResource(name: String): String {\n    val xhr = XMLHttpRequest()\n    xhr.open(\"GET\", name, false)\n    xhr.send()\n\n    if (xhr.status.equals(200)) {\n        return xhr.responseText\n    }\n\n    throw Exception(\"failed to load resource ${name}: ${xhr.status} ${xhr.responseText}\")\n}\n\nactual fun getTimeMillis(): Long = Date.now().toLong()","package baaahs.net\n\nimport org.khronos.webgl.ArrayBuffer\nimport org.khronos.webgl.Int8Array\nimport org.khronos.webgl.get\nimport org.w3c.dom.ARRAYBUFFER\nimport org.w3c.dom.BinaryType\nimport org.w3c.dom.WebSocket\n\nclass BrowserNetwork : Network {\n    override fun link(): Network.Link = object : Network.Link {\n        override val myAddress: Network.Address = object : Network.Address {}\n\n        override val udpMtu = 1500\n        override fun listenUdp(port: Int, udpListener: Network.UdpListener): Unit =\n            TODO(\"BrowserNetwork.listenUdp not implemented\")\n        override fun sendUdp(toAddress: Network.Address, port: Int, bytes: ByteArray): Unit =\n            TODO(\"BrowserNetwork.sendUdp not implemented\")\n        override fun broadcastUdp(port: Int, bytes: ByteArray): Unit =\n            TODO(\"BrowserNetwork.broadcastUdp not implemented\")\n        override fun listenTcp(port: Int, tcpServerSocketListener: Network.TcpServerSocketListener): Unit =\n            TODO(\"BrowserNetwork.listenTcp not implemented\")\n\n        override fun connectTcp(\n            toAddress: Network.Address,\n            port: Int,\n            tcpListener: Network.TcpListener\n        ): Network.TcpConnection {\n            val webSocket = WebSocket((toAddress as BrowserAddress).urlString + \"sm/ws\")\n            webSocket.binaryType = BinaryType.ARRAYBUFFER\n\n            val tcpConnection = object : Network.TcpConnection {\n                override val fromAddress: Network.Address = myAddress\n                override val toAddress: Network.Address = myAddress\n                override val port: Int get() = port\n\n                override fun send(bytes: ByteArray) {\n                    webSocket.send(Int8Array(bytes.toTypedArray()))\n                }\n            }\n\n            webSocket.onopen = {\n                console.log(\"WebSocket open!\", it)\n                tcpListener.connected(tcpConnection)\n            }\n\n            webSocket.onmessage = {\n                // TODO: be less woefully inefficient...\n                val buf = it.data as ArrayBuffer\n                val byteBuf = Int8Array(buf)\n                val bytes = ByteArray(byteBuf.length)\n                for (i in 0 until byteBuf.length) {\n                    bytes[i] = byteBuf[i]\n                }\n                tcpListener.receive(tcpConnection, bytes)\n            }\n\n            webSocket.onerror = { console.log(\"WebSocket error!\", it) }\n            webSocket.onclose = { console.log(\"WebSocket close!\", it) }\n\n            return tcpConnection\n        }\n    }\n\n    class BrowserAddress(val urlString: String) : Network.Address\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See libraries/tools/idl2k for details\n\n@file:Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npackage org.khronos.webgl\n\nimport kotlin.js.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\npublic external interface WebGLContextAttributes {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var depth: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var stencil: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var antialias: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultipliedAlpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preserveDrawingBuffer: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var preferLowPowerToHighPerformance: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var failIfMajorPerformanceCaveat: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextAttributes(alpha: Boolean? = true, depth: Boolean? = true, stencil: Boolean? = false, antialias: Boolean? = true, premultipliedAlpha: Boolean? = true, preserveDrawingBuffer: Boolean? = false, preferLowPowerToHighPerformance: Boolean? = false, failIfMajorPerformanceCaveat: Boolean? = false): WebGLContextAttributes {\n    val o = js(\"({})\")\n\n    o[\"alpha\"] = alpha\n    o[\"depth\"] = depth\n    o[\"stencil\"] = stencil\n    o[\"antialias\"] = antialias\n    o[\"premultipliedAlpha\"] = premultipliedAlpha\n    o[\"preserveDrawingBuffer\"] = preserveDrawingBuffer\n    o[\"preferLowPowerToHighPerformance\"] = preferLowPowerToHighPerformance\n    o[\"failIfMajorPerformanceCaveat\"] = failIfMajorPerformanceCaveat\n\n    return o\n}\n\npublic external abstract class WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLBuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLBuffer) to Kotlin\n */\npublic external abstract class WebGLBuffer : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLFramebuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLFramebuffer) to Kotlin\n */\npublic external abstract class WebGLFramebuffer : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLProgram](https://developer.mozilla.org/en/docs/Web/API/WebGLProgram) to Kotlin\n */\npublic external abstract class WebGLProgram : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLRenderbuffer](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderbuffer) to Kotlin\n */\npublic external abstract class WebGLRenderbuffer : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLShader](https://developer.mozilla.org/en/docs/Web/API/WebGLShader) to Kotlin\n */\npublic external abstract class WebGLShader : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLTexture](https://developer.mozilla.org/en/docs/Web/API/WebGLTexture) to Kotlin\n */\npublic external abstract class WebGLTexture : WebGLObject {\n}\n\n/**\n * Exposes the JavaScript [WebGLUniformLocation](https://developer.mozilla.org/en/docs/Web/API/WebGLUniformLocation) to Kotlin\n */\npublic external abstract class WebGLUniformLocation {\n}\n\n/**\n * Exposes the JavaScript [WebGLActiveInfo](https://developer.mozilla.org/en/docs/Web/API/WebGLActiveInfo) to Kotlin\n */\npublic external abstract class WebGLActiveInfo {\n    open val size: Int\n    open val type: Int\n    open val name: String\n}\n\n/**\n * Exposes the JavaScript [WebGLShaderPrecisionFormat](https://developer.mozilla.org/en/docs/Web/API/WebGLShaderPrecisionFormat) to Kotlin\n */\npublic external abstract class WebGLShaderPrecisionFormat {\n    open val rangeMin: Int\n    open val rangeMax: Int\n    open val precision: Int\n}\n\npublic external interface WebGLRenderingContextBase {\n    val canvas: HTMLCanvasElement\n    val drawingBufferWidth: Int\n    val drawingBufferHeight: Int\n    fun getContextAttributes(): WebGLContextAttributes?\n    fun isContextLost(): Boolean\n    fun getSupportedExtensions(): Array<String>?\n    fun getExtension(name: String): dynamic\n    fun activeTexture(texture: Int): Unit\n    fun attachShader(program: WebGLProgram?, shader: WebGLShader?): Unit\n    fun bindAttribLocation(program: WebGLProgram?, index: Int, name: String): Unit\n    fun bindBuffer(target: Int, buffer: WebGLBuffer?): Unit\n    fun bindFramebuffer(target: Int, framebuffer: WebGLFramebuffer?): Unit\n    fun bindRenderbuffer(target: Int, renderbuffer: WebGLRenderbuffer?): Unit\n    fun bindTexture(target: Int, texture: WebGLTexture?): Unit\n    fun blendColor(red: Float, green: Float, blue: Float, alpha: Float): Unit\n    fun blendEquation(mode: Int): Unit\n    fun blendEquationSeparate(modeRGB: Int, modeAlpha: Int): Unit\n    fun blendFunc(sfactor: Int, dfactor: Int): Unit\n    fun blendFuncSeparate(srcRGB: Int, dstRGB: Int, srcAlpha: Int, dstAlpha: Int): Unit\n    fun bufferData(target: Int, size: Int, usage: Int): Unit\n    fun bufferData(target: Int, data: BufferDataSource?, usage: Int): Unit\n    fun bufferSubData(target: Int, offset: Int, data: BufferDataSource?): Unit\n    fun checkFramebufferStatus(target: Int): Int\n    fun clear(mask: Int): Unit\n    fun clearColor(red: Float, green: Float, blue: Float, alpha: Float): Unit\n    fun clearDepth(depth: Float): Unit\n    fun clearStencil(s: Int): Unit\n    fun colorMask(red: Boolean, green: Boolean, blue: Boolean, alpha: Boolean): Unit\n    fun compileShader(shader: WebGLShader?): Unit\n    fun compressedTexImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, data: ArrayBufferView): Unit\n    fun compressedTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, data: ArrayBufferView): Unit\n    fun copyTexImage2D(target: Int, level: Int, internalformat: Int, x: Int, y: Int, width: Int, height: Int, border: Int): Unit\n    fun copyTexSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, x: Int, y: Int, width: Int, height: Int): Unit\n    fun createBuffer(): WebGLBuffer?\n    fun createFramebuffer(): WebGLFramebuffer?\n    fun createProgram(): WebGLProgram?\n    fun createRenderbuffer(): WebGLRenderbuffer?\n    fun createShader(type: Int): WebGLShader?\n    fun createTexture(): WebGLTexture?\n    fun cullFace(mode: Int): Unit\n    fun deleteBuffer(buffer: WebGLBuffer?): Unit\n    fun deleteFramebuffer(framebuffer: WebGLFramebuffer?): Unit\n    fun deleteProgram(program: WebGLProgram?): Unit\n    fun deleteRenderbuffer(renderbuffer: WebGLRenderbuffer?): Unit\n    fun deleteShader(shader: WebGLShader?): Unit\n    fun deleteTexture(texture: WebGLTexture?): Unit\n    fun depthFunc(func: Int): Unit\n    fun depthMask(flag: Boolean): Unit\n    fun depthRange(zNear: Float, zFar: Float): Unit\n    fun detachShader(program: WebGLProgram?, shader: WebGLShader?): Unit\n    fun disable(cap: Int): Unit\n    fun disableVertexAttribArray(index: Int): Unit\n    fun drawArrays(mode: Int, first: Int, count: Int): Unit\n    fun drawElements(mode: Int, count: Int, type: Int, offset: Int): Unit\n    fun enable(cap: Int): Unit\n    fun enableVertexAttribArray(index: Int): Unit\n    fun finish(): Unit\n    fun flush(): Unit\n    fun framebufferRenderbuffer(target: Int, attachment: Int, renderbuffertarget: Int, renderbuffer: WebGLRenderbuffer?): Unit\n    fun framebufferTexture2D(target: Int, attachment: Int, textarget: Int, texture: WebGLTexture?, level: Int): Unit\n    fun frontFace(mode: Int): Unit\n    fun generateMipmap(target: Int): Unit\n    fun getActiveAttrib(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getActiveUniform(program: WebGLProgram?, index: Int): WebGLActiveInfo?\n    fun getAttachedShaders(program: WebGLProgram?): Array<WebGLShader>?\n    fun getAttribLocation(program: WebGLProgram?, name: String): Int\n    fun getBufferParameter(target: Int, pname: Int): Any?\n    fun getParameter(pname: Int): Any?\n    fun getError(): Int\n    fun getFramebufferAttachmentParameter(target: Int, attachment: Int, pname: Int): Any?\n    fun getProgramParameter(program: WebGLProgram?, pname: Int): Any?\n    fun getProgramInfoLog(program: WebGLProgram?): String?\n    fun getRenderbufferParameter(target: Int, pname: Int): Any?\n    fun getShaderParameter(shader: WebGLShader?, pname: Int): Any?\n    fun getShaderPrecisionFormat(shadertype: Int, precisiontype: Int): WebGLShaderPrecisionFormat?\n    fun getShaderInfoLog(shader: WebGLShader?): String?\n    fun getShaderSource(shader: WebGLShader?): String?\n    fun getTexParameter(target: Int, pname: Int): Any?\n    fun getUniform(program: WebGLProgram?, location: WebGLUniformLocation?): Any?\n    fun getUniformLocation(program: WebGLProgram?, name: String): WebGLUniformLocation?\n    fun getVertexAttrib(index: Int, pname: Int): Any?\n    fun getVertexAttribOffset(index: Int, pname: Int): Int\n    fun hint(target: Int, mode: Int): Unit\n    fun isBuffer(buffer: WebGLBuffer?): Boolean\n    fun isEnabled(cap: Int): Boolean\n    fun isFramebuffer(framebuffer: WebGLFramebuffer?): Boolean\n    fun isProgram(program: WebGLProgram?): Boolean\n    fun isRenderbuffer(renderbuffer: WebGLRenderbuffer?): Boolean\n    fun isShader(shader: WebGLShader?): Boolean\n    fun isTexture(texture: WebGLTexture?): Boolean\n    fun lineWidth(width: Float): Unit\n    fun linkProgram(program: WebGLProgram?): Unit\n    fun pixelStorei(pname: Int, param: Int): Unit\n    fun polygonOffset(factor: Float, units: Float): Unit\n    fun readPixels(x: Int, y: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?): Unit\n    fun renderbufferStorage(target: Int, internalformat: Int, width: Int, height: Int): Unit\n    fun sampleCoverage(value: Float, invert: Boolean): Unit\n    fun scissor(x: Int, y: Int, width: Int, height: Int): Unit\n    fun shaderSource(shader: WebGLShader?, source: String): Unit\n    fun stencilFunc(func: Int, ref: Int, mask: Int): Unit\n    fun stencilFuncSeparate(face: Int, func: Int, ref: Int, mask: Int): Unit\n    fun stencilMask(mask: Int): Unit\n    fun stencilMaskSeparate(face: Int, mask: Int): Unit\n    fun stencilOp(fail: Int, zfail: Int, zpass: Int): Unit\n    fun stencilOpSeparate(face: Int, fail: Int, zfail: Int, zpass: Int): Unit\n    fun texImage2D(target: Int, level: Int, internalformat: Int, width: Int, height: Int, border: Int, format: Int, type: Int, pixels: ArrayBufferView?): Unit\n    fun texImage2D(target: Int, level: Int, internalformat: Int, format: Int, type: Int, source: TexImageSource?): Unit\n    fun texParameterf(target: Int, pname: Int, param: Float): Unit\n    fun texParameteri(target: Int, pname: Int, param: Int): Unit\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, width: Int, height: Int, format: Int, type: Int, pixels: ArrayBufferView?): Unit\n    fun texSubImage2D(target: Int, level: Int, xoffset: Int, yoffset: Int, format: Int, type: Int, source: TexImageSource?): Unit\n    fun uniform1f(location: WebGLUniformLocation?, x: Float): Unit\n    fun uniform1fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform1fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform1i(location: WebGLUniformLocation?, x: Int): Unit\n    fun uniform1iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform1iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniform2f(location: WebGLUniformLocation?, x: Float, y: Float): Unit\n    fun uniform2fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform2fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform2i(location: WebGLUniformLocation?, x: Int, y: Int): Unit\n    fun uniform2iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform2iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniform3f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float): Unit\n    fun uniform3fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform3fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform3i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int): Unit\n    fun uniform3iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform3iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniform4f(location: WebGLUniformLocation?, x: Float, y: Float, z: Float, w: Float): Unit\n    fun uniform4fv(location: WebGLUniformLocation?, v: Float32Array): Unit\n    fun uniform4fv(location: WebGLUniformLocation?, v: Array<Float>): Unit\n    fun uniform4i(location: WebGLUniformLocation?, x: Int, y: Int, z: Int, w: Int): Unit\n    fun uniform4iv(location: WebGLUniformLocation?, v: Int32Array): Unit\n    fun uniform4iv(location: WebGLUniformLocation?, v: Array<Int>): Unit\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array): Unit\n    fun uniformMatrix2fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>): Unit\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array): Unit\n    fun uniformMatrix3fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>): Unit\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Float32Array): Unit\n    fun uniformMatrix4fv(location: WebGLUniformLocation?, transpose: Boolean, value: Array<Float>): Unit\n    fun useProgram(program: WebGLProgram?): Unit\n    fun validateProgram(program: WebGLProgram?): Unit\n    fun vertexAttrib1f(index: Int, x: Float): Unit\n    fun vertexAttrib1fv(index: Int, values: dynamic): Unit\n    fun vertexAttrib2f(index: Int, x: Float, y: Float): Unit\n    fun vertexAttrib2fv(index: Int, values: dynamic): Unit\n    fun vertexAttrib3f(index: Int, x: Float, y: Float, z: Float): Unit\n    fun vertexAttrib3fv(index: Int, values: dynamic): Unit\n    fun vertexAttrib4f(index: Int, x: Float, y: Float, z: Float, w: Float): Unit\n    fun vertexAttrib4fv(index: Int, values: dynamic): Unit\n    fun vertexAttribPointer(index: Int, size: Int, type: Int, normalized: Boolean, stride: Int, offset: Int): Unit\n    fun viewport(x: Int, y: Int, width: Int, height: Int): Unit\n\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLRenderingContext](https://developer.mozilla.org/en/docs/Web/API/WebGLRenderingContext) to Kotlin\n */\npublic external abstract class WebGLRenderingContext : WebGLRenderingContextBase, RenderingContext {\n\n    companion object {\n        val DEPTH_BUFFER_BIT: Int\n        val STENCIL_BUFFER_BIT: Int\n        val COLOR_BUFFER_BIT: Int\n        val POINTS: Int\n        val LINES: Int\n        val LINE_LOOP: Int\n        val LINE_STRIP: Int\n        val TRIANGLES: Int\n        val TRIANGLE_STRIP: Int\n        val TRIANGLE_FAN: Int\n        val ZERO: Int\n        val ONE: Int\n        val SRC_COLOR: Int\n        val ONE_MINUS_SRC_COLOR: Int\n        val SRC_ALPHA: Int\n        val ONE_MINUS_SRC_ALPHA: Int\n        val DST_ALPHA: Int\n        val ONE_MINUS_DST_ALPHA: Int\n        val DST_COLOR: Int\n        val ONE_MINUS_DST_COLOR: Int\n        val SRC_ALPHA_SATURATE: Int\n        val FUNC_ADD: Int\n        val BLEND_EQUATION: Int\n        val BLEND_EQUATION_RGB: Int\n        val BLEND_EQUATION_ALPHA: Int\n        val FUNC_SUBTRACT: Int\n        val FUNC_REVERSE_SUBTRACT: Int\n        val BLEND_DST_RGB: Int\n        val BLEND_SRC_RGB: Int\n        val BLEND_DST_ALPHA: Int\n        val BLEND_SRC_ALPHA: Int\n        val CONSTANT_COLOR: Int\n        val ONE_MINUS_CONSTANT_COLOR: Int\n        val CONSTANT_ALPHA: Int\n        val ONE_MINUS_CONSTANT_ALPHA: Int\n        val BLEND_COLOR: Int\n        val ARRAY_BUFFER: Int\n        val ELEMENT_ARRAY_BUFFER: Int\n        val ARRAY_BUFFER_BINDING: Int\n        val ELEMENT_ARRAY_BUFFER_BINDING: Int\n        val STREAM_DRAW: Int\n        val STATIC_DRAW: Int\n        val DYNAMIC_DRAW: Int\n        val BUFFER_SIZE: Int\n        val BUFFER_USAGE: Int\n        val CURRENT_VERTEX_ATTRIB: Int\n        val FRONT: Int\n        val BACK: Int\n        val FRONT_AND_BACK: Int\n        val CULL_FACE: Int\n        val BLEND: Int\n        val DITHER: Int\n        val STENCIL_TEST: Int\n        val DEPTH_TEST: Int\n        val SCISSOR_TEST: Int\n        val POLYGON_OFFSET_FILL: Int\n        val SAMPLE_ALPHA_TO_COVERAGE: Int\n        val SAMPLE_COVERAGE: Int\n        val NO_ERROR: Int\n        val INVALID_ENUM: Int\n        val INVALID_VALUE: Int\n        val INVALID_OPERATION: Int\n        val OUT_OF_MEMORY: Int\n        val CW: Int\n        val CCW: Int\n        val LINE_WIDTH: Int\n        val ALIASED_POINT_SIZE_RANGE: Int\n        val ALIASED_LINE_WIDTH_RANGE: Int\n        val CULL_FACE_MODE: Int\n        val FRONT_FACE: Int\n        val DEPTH_RANGE: Int\n        val DEPTH_WRITEMASK: Int\n        val DEPTH_CLEAR_VALUE: Int\n        val DEPTH_FUNC: Int\n        val STENCIL_CLEAR_VALUE: Int\n        val STENCIL_FUNC: Int\n        val STENCIL_FAIL: Int\n        val STENCIL_PASS_DEPTH_FAIL: Int\n        val STENCIL_PASS_DEPTH_PASS: Int\n        val STENCIL_REF: Int\n        val STENCIL_VALUE_MASK: Int\n        val STENCIL_WRITEMASK: Int\n        val STENCIL_BACK_FUNC: Int\n        val STENCIL_BACK_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_FAIL: Int\n        val STENCIL_BACK_PASS_DEPTH_PASS: Int\n        val STENCIL_BACK_REF: Int\n        val STENCIL_BACK_VALUE_MASK: Int\n        val STENCIL_BACK_WRITEMASK: Int\n        val VIEWPORT: Int\n        val SCISSOR_BOX: Int\n        val COLOR_CLEAR_VALUE: Int\n        val COLOR_WRITEMASK: Int\n        val UNPACK_ALIGNMENT: Int\n        val PACK_ALIGNMENT: Int\n        val MAX_TEXTURE_SIZE: Int\n        val MAX_VIEWPORT_DIMS: Int\n        val SUBPIXEL_BITS: Int\n        val RED_BITS: Int\n        val GREEN_BITS: Int\n        val BLUE_BITS: Int\n        val ALPHA_BITS: Int\n        val DEPTH_BITS: Int\n        val STENCIL_BITS: Int\n        val POLYGON_OFFSET_UNITS: Int\n        val POLYGON_OFFSET_FACTOR: Int\n        val TEXTURE_BINDING_2D: Int\n        val SAMPLE_BUFFERS: Int\n        val SAMPLES: Int\n        val SAMPLE_COVERAGE_VALUE: Int\n        val SAMPLE_COVERAGE_INVERT: Int\n        val COMPRESSED_TEXTURE_FORMATS: Int\n        val DONT_CARE: Int\n        val FASTEST: Int\n        val NICEST: Int\n        val GENERATE_MIPMAP_HINT: Int\n        val BYTE: Int\n        val UNSIGNED_BYTE: Int\n        val SHORT: Int\n        val UNSIGNED_SHORT: Int\n        val INT: Int\n        val UNSIGNED_INT: Int\n        val FLOAT: Int\n        val DEPTH_COMPONENT: Int\n        val ALPHA: Int\n        val RGB: Int\n        val RGBA: Int\n        val LUMINANCE: Int\n        val LUMINANCE_ALPHA: Int\n        val UNSIGNED_SHORT_4_4_4_4: Int\n        val UNSIGNED_SHORT_5_5_5_1: Int\n        val UNSIGNED_SHORT_5_6_5: Int\n        val FRAGMENT_SHADER: Int\n        val VERTEX_SHADER: Int\n        val MAX_VERTEX_ATTRIBS: Int\n        val MAX_VERTEX_UNIFORM_VECTORS: Int\n        val MAX_VARYING_VECTORS: Int\n        val MAX_COMBINED_TEXTURE_IMAGE_UNITS: Int\n        val MAX_VERTEX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_TEXTURE_IMAGE_UNITS: Int\n        val MAX_FRAGMENT_UNIFORM_VECTORS: Int\n        val SHADER_TYPE: Int\n        val DELETE_STATUS: Int\n        val LINK_STATUS: Int\n        val VALIDATE_STATUS: Int\n        val ATTACHED_SHADERS: Int\n        val ACTIVE_UNIFORMS: Int\n        val ACTIVE_ATTRIBUTES: Int\n        val SHADING_LANGUAGE_VERSION: Int\n        val CURRENT_PROGRAM: Int\n        val NEVER: Int\n        val LESS: Int\n        val EQUAL: Int\n        val LEQUAL: Int\n        val GREATER: Int\n        val NOTEQUAL: Int\n        val GEQUAL: Int\n        val ALWAYS: Int\n        val KEEP: Int\n        val REPLACE: Int\n        val INCR: Int\n        val DECR: Int\n        val INVERT: Int\n        val INCR_WRAP: Int\n        val DECR_WRAP: Int\n        val VENDOR: Int\n        val RENDERER: Int\n        val VERSION: Int\n        val NEAREST: Int\n        val LINEAR: Int\n        val NEAREST_MIPMAP_NEAREST: Int\n        val LINEAR_MIPMAP_NEAREST: Int\n        val NEAREST_MIPMAP_LINEAR: Int\n        val LINEAR_MIPMAP_LINEAR: Int\n        val TEXTURE_MAG_FILTER: Int\n        val TEXTURE_MIN_FILTER: Int\n        val TEXTURE_WRAP_S: Int\n        val TEXTURE_WRAP_T: Int\n        val TEXTURE_2D: Int\n        val TEXTURE: Int\n        val TEXTURE_CUBE_MAP: Int\n        val TEXTURE_BINDING_CUBE_MAP: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_X: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_X: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Y: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Y: Int\n        val TEXTURE_CUBE_MAP_POSITIVE_Z: Int\n        val TEXTURE_CUBE_MAP_NEGATIVE_Z: Int\n        val MAX_CUBE_MAP_TEXTURE_SIZE: Int\n        val TEXTURE0: Int\n        val TEXTURE1: Int\n        val TEXTURE2: Int\n        val TEXTURE3: Int\n        val TEXTURE4: Int\n        val TEXTURE5: Int\n        val TEXTURE6: Int\n        val TEXTURE7: Int\n        val TEXTURE8: Int\n        val TEXTURE9: Int\n        val TEXTURE10: Int\n        val TEXTURE11: Int\n        val TEXTURE12: Int\n        val TEXTURE13: Int\n        val TEXTURE14: Int\n        val TEXTURE15: Int\n        val TEXTURE16: Int\n        val TEXTURE17: Int\n        val TEXTURE18: Int\n        val TEXTURE19: Int\n        val TEXTURE20: Int\n        val TEXTURE21: Int\n        val TEXTURE22: Int\n        val TEXTURE23: Int\n        val TEXTURE24: Int\n        val TEXTURE25: Int\n        val TEXTURE26: Int\n        val TEXTURE27: Int\n        val TEXTURE28: Int\n        val TEXTURE29: Int\n        val TEXTURE30: Int\n        val TEXTURE31: Int\n        val ACTIVE_TEXTURE: Int\n        val REPEAT: Int\n        val CLAMP_TO_EDGE: Int\n        val MIRRORED_REPEAT: Int\n        val FLOAT_VEC2: Int\n        val FLOAT_VEC3: Int\n        val FLOAT_VEC4: Int\n        val INT_VEC2: Int\n        val INT_VEC3: Int\n        val INT_VEC4: Int\n        val BOOL: Int\n        val BOOL_VEC2: Int\n        val BOOL_VEC3: Int\n        val BOOL_VEC4: Int\n        val FLOAT_MAT2: Int\n        val FLOAT_MAT3: Int\n        val FLOAT_MAT4: Int\n        val SAMPLER_2D: Int\n        val SAMPLER_CUBE: Int\n        val VERTEX_ATTRIB_ARRAY_ENABLED: Int\n        val VERTEX_ATTRIB_ARRAY_SIZE: Int\n        val VERTEX_ATTRIB_ARRAY_STRIDE: Int\n        val VERTEX_ATTRIB_ARRAY_TYPE: Int\n        val VERTEX_ATTRIB_ARRAY_NORMALIZED: Int\n        val VERTEX_ATTRIB_ARRAY_POINTER: Int\n        val VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: Int\n        val IMPLEMENTATION_COLOR_READ_TYPE: Int\n        val IMPLEMENTATION_COLOR_READ_FORMAT: Int\n        val COMPILE_STATUS: Int\n        val LOW_FLOAT: Int\n        val MEDIUM_FLOAT: Int\n        val HIGH_FLOAT: Int\n        val LOW_INT: Int\n        val MEDIUM_INT: Int\n        val HIGH_INT: Int\n        val FRAMEBUFFER: Int\n        val RENDERBUFFER: Int\n        val RGBA4: Int\n        val RGB5_A1: Int\n        val RGB565: Int\n        val DEPTH_COMPONENT16: Int\n        val STENCIL_INDEX: Int\n        val STENCIL_INDEX8: Int\n        val DEPTH_STENCIL: Int\n        val RENDERBUFFER_WIDTH: Int\n        val RENDERBUFFER_HEIGHT: Int\n        val RENDERBUFFER_INTERNAL_FORMAT: Int\n        val RENDERBUFFER_RED_SIZE: Int\n        val RENDERBUFFER_GREEN_SIZE: Int\n        val RENDERBUFFER_BLUE_SIZE: Int\n        val RENDERBUFFER_ALPHA_SIZE: Int\n        val RENDERBUFFER_DEPTH_SIZE: Int\n        val RENDERBUFFER_STENCIL_SIZE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: Int\n        val FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: Int\n        val FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: Int\n        val COLOR_ATTACHMENT0: Int\n        val DEPTH_ATTACHMENT: Int\n        val STENCIL_ATTACHMENT: Int\n        val DEPTH_STENCIL_ATTACHMENT: Int\n        val NONE: Int\n        val FRAMEBUFFER_COMPLETE: Int\n        val FRAMEBUFFER_INCOMPLETE_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: Int\n        val FRAMEBUFFER_INCOMPLETE_DIMENSIONS: Int\n        val FRAMEBUFFER_UNSUPPORTED: Int\n        val FRAMEBUFFER_BINDING: Int\n        val RENDERBUFFER_BINDING: Int\n        val MAX_RENDERBUFFER_SIZE: Int\n        val INVALID_FRAMEBUFFER_OPERATION: Int\n        val UNPACK_FLIP_Y_WEBGL: Int\n        val UNPACK_PREMULTIPLY_ALPHA_WEBGL: Int\n        val CONTEXT_LOST_WEBGL: Int\n        val UNPACK_COLORSPACE_CONVERSION_WEBGL: Int\n        val BROWSER_DEFAULT_WEBGL: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [WebGLContextEvent](https://developer.mozilla.org/en/docs/Web/API/WebGLContextEvent) to Kotlin\n */\npublic external open class WebGLContextEvent(type: String, eventInit: WebGLContextEventInit = definedExternally) : Event {\n    open val statusMessage: String\n}\n\npublic external interface WebGLContextEventInit : EventInit {\n    var statusMessage: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WebGLContextEventInit(statusMessage: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): WebGLContextEventInit {\n    val o = js(\"({})\")\n\n    o[\"statusMessage\"] = statusMessage\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [ArrayBuffer](https://developer.mozilla.org/en/docs/Web/API/ArrayBuffer) to Kotlin\n */\npublic external open class ArrayBuffer(length: Int) : BufferDataSource {\n    open val byteLength: Int\n    fun slice(begin: Int, end: Int = definedExternally): ArrayBuffer\n\n    companion object {\n        fun isView(value: Any?): Boolean\n    }\n}\n\n/**\n * Exposes the JavaScript [ArrayBufferView](https://developer.mozilla.org/en/docs/Web/API/ArrayBufferView) to Kotlin\n */\npublic external interface ArrayBufferView : BufferDataSource {\n    val buffer: ArrayBuffer\n    val byteOffset: Int\n    val byteLength: Int\n}\n\n/**\n * Exposes the JavaScript [Int8Array](https://developer.mozilla.org/en/docs/Web/API/Int8Array) to Kotlin\n */\npublic external open class Int8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int8Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Byte>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Int8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Int8Array.get(index: Int): Byte = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Int8Array.set(index: Int, value: Byte): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint8Array](https://developer.mozilla.org/en/docs/Web/API/Uint8Array) to Kotlin\n */\npublic external open class Uint8Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8Array)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Byte>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint8Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint8Array.get(index: Int): Byte = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint8Array.set(index: Int, value: Byte): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint8ClampedArray](https://developer.mozilla.org/en/docs/Web/API/Uint8ClampedArray) to Kotlin\n */\npublic external open class Uint8ClampedArray : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint8ClampedArray)\n    constructor(array: Array<Byte>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint8ClampedArray, offset: Int = definedExternally): Unit\n    fun set(array: Array<Byte>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint8ClampedArray\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint8ClampedArray.get(index: Int): Byte = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint8ClampedArray.set(index: Int, value: Byte): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Int16Array](https://developer.mozilla.org/en/docs/Web/API/Int16Array) to Kotlin\n */\npublic external open class Int16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int16Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Short>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Int16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Int16Array.get(index: Int): Short = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Int16Array.set(index: Int, value: Short): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint16Array](https://developer.mozilla.org/en/docs/Web/API/Uint16Array) to Kotlin\n */\npublic external open class Uint16Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint16Array)\n    constructor(array: Array<Short>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint16Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Short>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint16Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint16Array.get(index: Int): Short = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint16Array.set(index: Int, value: Short): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Int32Array](https://developer.mozilla.org/en/docs/Web/API/Int32Array) to Kotlin\n */\npublic external open class Int32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Int32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Int32Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Int>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Int32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Int32Array.get(index: Int): Int = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Int32Array.set(index: Int, value: Int): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Uint32Array](https://developer.mozilla.org/en/docs/Web/API/Uint32Array) to Kotlin\n */\npublic external open class Uint32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Uint32Array)\n    constructor(array: Array<Int>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Uint32Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Int>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Uint32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Uint32Array.get(index: Int): Int = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Uint32Array.set(index: Int, value: Int): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Float32Array](https://developer.mozilla.org/en/docs/Web/API/Float32Array) to Kotlin\n */\npublic external open class Float32Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float32Array)\n    constructor(array: Array<Float>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float32Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Float>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Float32Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Float32Array.get(index: Int): Float = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Float32Array.set(index: Int, value: Float): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [Float64Array](https://developer.mozilla.org/en/docs/Web/API/Float64Array) to Kotlin\n */\npublic external open class Float64Array : ArrayBufferView {\n    constructor(length: Int)\n    constructor(array: Float64Array)\n    constructor(array: Array<Double>)\n    constructor(buffer: ArrayBuffer, byteOffset: Int = definedExternally, length: Int = definedExternally)\n    open val length: Int\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun set(array: Float64Array, offset: Int = definedExternally): Unit\n    fun set(array: Array<Double>, offset: Int = definedExternally): Unit\n    fun subarray(start: Int, end: Int): Float64Array\n\n    companion object {\n        val BYTES_PER_ELEMENT: Int\n    }\n}\n@kotlin.internal.InlineOnly inline operator fun Float64Array.get(index: Int): Double = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Float64Array.set(index: Int, value: Double): Unit { asDynamic()[index] = value; }\n\n/**\n * Exposes the JavaScript [DataView](https://developer.mozilla.org/en/docs/Web/API/DataView) to Kotlin\n */\npublic external open class DataView(buffer: ArrayBuffer, byteOffset: Int = definedExternally, byteLength: Int = definedExternally) : ArrayBufferView {\n    override val buffer: ArrayBuffer\n    override val byteOffset: Int\n    override val byteLength: Int\n    fun getInt8(byteOffset: Int): Byte\n    fun getUint8(byteOffset: Int): Byte\n    fun getInt16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getUint16(byteOffset: Int, littleEndian: Boolean = definedExternally): Short\n    fun getInt32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getUint32(byteOffset: Int, littleEndian: Boolean = definedExternally): Int\n    fun getFloat32(byteOffset: Int, littleEndian: Boolean = definedExternally): Float\n    fun getFloat64(byteOffset: Int, littleEndian: Boolean = definedExternally): Double\n    fun setInt8(byteOffset: Int, value: Byte): Unit\n    fun setUint8(byteOffset: Int, value: Byte): Unit\n    fun setInt16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally): Unit\n    fun setUint16(byteOffset: Int, value: Short, littleEndian: Boolean = definedExternally): Unit\n    fun setInt32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally): Unit\n    fun setUint32(byteOffset: Int, value: Int, littleEndian: Boolean = definedExternally): Unit\n    fun setFloat32(byteOffset: Int, value: Float, littleEndian: Boolean = definedExternally): Unit\n    fun setFloat64(byteOffset: Int, value: Double, littleEndian: Boolean = definedExternally): Unit\n}\n\npublic external @marker interface BufferDataSource {\n}\n\npublic external @marker interface TexImageSource {\n}\n\n","package baaahs.sim\n\nimport baaahs.MediaDevices\nimport baaahs.imaging.Image\nimport baaahs.imaging.ImageBitmapImage\nimport baaahs.visualizer.Visualizer\nimport info.laht.threekt.cameras.Camera\nimport info.laht.threekt.cameras.PerspectiveCamera\nimport info.laht.threekt.renderers.WebGLRenderer\nimport info.laht.threekt.scenes.Scene\nimport org.khronos.webgl.Uint8Array\nimport org.khronos.webgl.Uint8ClampedArray\nimport org.w3c.dom.*\nimport kotlin.browser.window\n\nclass FakeMediaDevices(private val visualizer: Visualizer) : MediaDevices {\n    var currentCam: MediaDevices.Camera? = null\n\n    @JsName(\"getCurrentCam\")\n    fun getCurrentCam() = currentCam\n\n    override fun getCamera(width: Int, height: Int): MediaDevices.Camera {\n        return FakeCamera(width, height).also {\n            visualizer.addFrameListener(it)\n        }\n    }\n\n    inner class FakeCamera(val width: Int, val height: Int) : MediaDevices.Camera, Visualizer.FrameListener {\n        // offscreen renderer for virtual camera:\n        var camRenderer = WebGLRenderer(js(\"{preserveDrawingBuffer: true}\")).apply {\n            setSize(width, height)\n        }\n\n        private val camCtx = (camRenderer.domElement as HTMLCanvasElement).getContext(\"webgl\")!!\n        private val altCamera = PerspectiveCamera(45, 1.0, 1, 1000)\n        private val pixelBuffer = Uint8ClampedArray(width * height * 4)\n        private val imageData = ImageData(pixelBuffer, width, height)\n\n        override fun onFrameReady(scene: Scene, camera: Camera) {\n            altCamera.copy(camera, true)\n            altCamera.aspect = width.toDouble() / height\n            altCamera.updateProjectionMatrix()\n            camRenderer.render(scene, altCamera)\n\n            camCtx.asDynamic().readPixels(\n                0, 0, width, height, camCtx.asDynamic().RGBA, camCtx.asDynamic().UNSIGNED_BYTE,\n                Uint8Array(pixelBuffer.buffer)\n            )\n\n            window.createImageBitmap(imageData, ImageBitmapOptions().apply {\n                imageOrientation = ImageOrientation.Companion.FLIPY\n            }).then { onImage.invoke(ImageBitmapImage(it)) }\n        }\n\n        override var onImage: (image: Image) -> Unit = { _ -> }\n\n        override fun close() {\n            onImage = { _ -> }\n            visualizer.removeFrameListener(this)\n        }\n    }\n}\n","package baaahs.visualizer\n\nimport info.laht.threekt.core.Face3\nimport info.laht.threekt.core.Geometry\nimport info.laht.threekt.math.Line3\nimport info.laht.threekt.math.Matrix4\nimport info.laht.threekt.math.Quaternion\nimport info.laht.threekt.math.Vector3\nimport kotlin.math.PI\nimport kotlin.math.cos\nimport kotlin.math.floor\nimport kotlin.math.sin\nimport kotlin.random.Random\n\nclass SwirlyPixelArranger(private val pixelDensity: Float = 0.2f, private val pixelSpacing : Int = 2) {\n\n    fun arrangePixels(vizPanel: VizPanel): Array<Vector3> = PanelArranger(vizPanel).arrangePixels()\n\n    inner class PanelArranger(vizPanel: VizPanel) {\n        private val pixelCount = floor(vizPanel.area * pixelDensity).toInt()\n        private val panelGeometry = vizPanel.geometry.clone()\n        private val vertices = panelGeometry.vertices\n        private val isMultiFaced = vizPanel.isMultiFaced\n        private val edgeNeighbors = vizPanel.edgeNeighbors\n\n        fun arrangePixels(): Array<Vector3> {\n            panelGeometry.computeFaceNormals()\n\n            val pixelsGeometry = Geometry()\n\n            val quaternion = Quaternion()\n\n            val panelFaces = panelGeometry.faces\n            var curFace = panelFaces[0]\n            var revertToNormal = curFace.normal!!.clone()\n            val straightOnNormal = Vector3(0, 0, 1)\n            quaternion.setFromUnitVectors(curFace.normal!!, straightOnNormal)\n            val matrix = Matrix4()\n            matrix.makeRotationFromQuaternion(quaternion)\n            panelGeometry.applyMatrix(matrix)\n            pixelsGeometry.applyMatrix(matrix)\n\n            val pos = randomLocation(curFace, vertices)\n            val nextPos = Vector3()\n\n            pixelsGeometry.vertices.asDynamic().push(pos.clone())\n\n            var tries = 1000\n            var angleRad = Random.nextFloat() * 2 * PI\n            var angleRadDelta = Random.nextFloat() * 0.5 - 0.5\n            var pixelsSinceEdge = 0\n            var pixelI = 1\n            while (pixelI < pixelCount) {\n                nextPos.x = pos.x + pixelSpacing * sin(angleRad)\n                nextPos.y = pos.y + pixelSpacing * cos(angleRad)\n                nextPos.z = pos.z\n\n                // console.log(\"cur face: \", this.faceVs(curFace, panelGeometry))\n\n                if (!isInsideFace(curFace, nextPos)) {\n                    val newFace = getFaceForPoint(curFace, nextPos)\n                    if (newFace != null) {\n                        // console.log(\"moving from\", curFace, \"to\", newFace)\n                        // console.log(\"prior face vs:\", this.faceVs(curFace, panelGeometry))\n\n                        quaternion.setFromUnitVectors(straightOnNormal, revertToNormal)\n                        matrix.makeRotationFromQuaternion(quaternion)\n                        panelGeometry.applyMatrix(matrix)\n                        pixelsGeometry.applyMatrix(matrix)\n                        nextPos.applyMatrix4(matrix)\n\n                        curFace = newFace\n                        revertToNormal = curFace.normal!!.clone()\n                        quaternion.setFromUnitVectors(curFace.normal!!, straightOnNormal)\n                        matrix.makeRotationFromQuaternion(quaternion)\n                        panelGeometry.applyMatrix(matrix)\n                        pixelsGeometry.applyMatrix(matrix)\n                        // console.log(\"pos was\", nextPos)\n                        nextPos.applyMatrix4(matrix)\n                        // console.log(\"pos is now\", nextPos)\n                        // console.log(\"new face vs:\", this.faceVs(newFace, panelGeometry))\n                        nextPos.z = panelGeometry.vertices[newFace.a].z\n                        if (!isInsideFace(curFace, nextPos)) {\n                            // console.log(nextPos, \"is not in\", this.faceVs(curFace, panelGeometry))\n                            nextPos.copy(randomLocation(curFace, vertices))\n                        } else {\n                            // console.log(\"AWESOME\", nextPos, \"is in\", this.faceVs(curFace, panelGeometry))\n                        }\n                    } else {\n                        angleRad = Random.nextFloat() * 2 * PI\n                        if (tries-- < 0) break\n                        pixelsSinceEdge = 0\n                        continue\n                    }\n                }\n\n                // console.log(\"pixel z = \", nextPos.z)\n                pixelsGeometry.vertices.asDynamic().push(nextPos.clone())\n\n                angleRad += angleRadDelta\n                angleRadDelta *= 1 - Random.nextFloat() * 0.2 + 0.1\n\n                // occasional disruption just in case we're in a tight loop...\n                if (pixelsSinceEdge > pixelCount / 10) {\n                    angleRad = Random.nextFloat() * 2 * PI\n                    angleRadDelta = Random.nextFloat() * 0.5 - 0.5\n                    pixelsSinceEdge = 0\n                }\n                pos.copy(nextPos)\n                pixelsSinceEdge++\n\n                pixelI++;\n            }\n\n            quaternion.setFromUnitVectors(straightOnNormal, revertToNormal)\n            matrix.makeRotationFromQuaternion(quaternion)\n            panelGeometry.applyMatrix(matrix)\n            pixelsGeometry.applyMatrix(matrix)\n\n            return pixelsGeometry.vertices\n        }\n\n\n        fun randomLocation(face: Face3, vertices: Array<Vector3>): Vector3 {\n            val v = Vector3().copy(vertices[face.a])\n            v.addScaledVector(Vector3().copy(vertices[face.b]).sub(v), Random.nextFloat())\n            v.addScaledVector(Vector3().copy(vertices[face.c]).sub(v), Random.nextFloat())\n            return v\n        }\n\n        fun isInsideFace(curFace: Face3, v: Vector3): Boolean {\n            val vertices = panelGeometry.vertices\n\n            return isInside(\n                xy(v),\n                arrayOf(\n                    xy(vertices[curFace.a]),\n                    xy(vertices[curFace.b]),\n                    xy(vertices[curFace.c])\n                )\n            )\n        }\n\n        fun isInside(point: VizPanel.Point2, vs: Array<VizPanel.Point2>): Boolean {\n            // ray-casting algorithm based on\n            // https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html\n\n            val (x, y) = point\n\n            var inside = false\n\n            var i = 0\n            var j = vs.size - 1\n            while (i < vs.size) {\n                val xi = vs[i].x\n                val yi = vs[i].y\n                val xj = vs[j].x\n                val yj = vs[j].y\n\n                val intersect = ((yi > y) != (yj > y))\n                        && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)\n                if (intersect) {\n                    inside = !inside\n                }\n\n                j = i++\n            }\n\n            return inside\n        }\n\n        fun xy(v: Vector3) = VizPanel.Point2(v.x.toFloat(), v.y.toFloat())\n\n        // we've tried to add a pixel that's not inside curFace; figure out which face it corresponds to...\n        internal fun getFaceForPoint(curFace: Face3, v: Vector3): Face3? {\n            if (isMultiFaced) {\n                val vertices = panelGeometry.vertices\n\n                // find the edge closest to v...\n                var closestEdge = arrayOf(-1, -1)\n                var bestDistance = Float.POSITIVE_INFINITY\n                curFace.segments().forEach { edgeVs ->\n                    val closestPointOnEdge = Vector3()\n                    val v0 = edgeVs[0]\n                    val v1 = edgeVs[1]\n                    Line3(vertices[v0], vertices[v1]).closestPointToPoint(v, true, closestPointOnEdge)\n                    val thisDistance = closestPointOnEdge.distanceTo(v).toFloat()\n                    if (thisDistance < bestDistance) {\n                        closestEdge = edgeVs\n                        bestDistance = thisDistance\n                    }\n                }\n\n                val edgeId = closestEdge.asKey()\n                // console.log(\"Closest edge to\", v, \"is\", edgeId, this.edgeNeighbors[edgeId])\n\n                val neighbors = edgeNeighbors[edgeId]\n                val neighbor = neighbors?.filter { f -> f !== curFace } ?: emptyList()\n                if (neighbor.size == 0) {\n                    return null\n                } else if (neighbor.size > 1) {\n//                console.warn(\"Found multiple neighbors for \", this.panel.name, \" edge \", edgeId, \": \", neighbors)\n                }\n\n                // console.log(\"Face for \", v, \"is\", edgeId, neighbor[0])\n                return neighbor[0]\n            }\n            return null\n        }\n    }\n}","package baaahs.visualizer\n\nimport baaahs.Config\nimport baaahs.SheepModel\nimport baaahs.Shenzarpy\nimport baaahs.sim.FakeDmxUniverse\nimport info.laht.threekt.cameras.Camera\nimport info.laht.threekt.cameras.PerspectiveCamera\nimport info.laht.threekt.core.Geometry\nimport info.laht.threekt.core.Object3D\nimport info.laht.threekt.core.Raycaster\nimport info.laht.threekt.external.controls.OrbitControls\nimport info.laht.threekt.geometries.ConeBufferGeometry\nimport info.laht.threekt.geometries.SphereBufferGeometry\nimport info.laht.threekt.materials.LineBasicMaterial\nimport info.laht.threekt.materials.Material\nimport info.laht.threekt.materials.MeshBasicMaterial\nimport info.laht.threekt.materials.PointsMaterial\nimport info.laht.threekt.math.Matrix4\nimport info.laht.threekt.math.Vector2\nimport info.laht.threekt.math.Vector3\nimport info.laht.threekt.objects.Mesh\nimport info.laht.threekt.objects.Points\nimport info.laht.threekt.renderers.WebGLRenderer\nimport info.laht.threekt.scenes.Scene\nimport org.w3c.dom.HTMLDivElement\nimport org.w3c.dom.HTMLInputElement\nimport org.w3c.dom.events.MouseEvent\nimport kotlin.browser.document\nimport kotlin.browser.window\nimport kotlin.math.PI\nimport kotlin.math.cos\nimport kotlin.math.sin\n\nclass Visualizer(sheepModel: SheepModel) {\n\n    private var rotate: Boolean\n        get() = getVizRotationEl().checked\n        set(value) {\n            getVizRotationEl().checked = value\n        }\n\n    var mapperIsRunning = false\n        set(isRunning) {\n            field = isRunning\n\n            vizPanels.forEach { panel -> panel.faceMaterial.transparent = !isRunning }\n\n            if (isRunning) {\n                rotate = false\n            }\n        }\n\n    private val frameListeners = mutableListOf<FrameListener>()\n    private val renderPixels = true\n\n    private val controls: OrbitControls\n    private val camera: PerspectiveCamera\n    private val scene: Scene\n    private val renderer: WebGLRenderer\n    private val geom: Geometry\n\n    private var obj: Object3D = Object3D()\n    private val pointMaterial: Material\n    private val lineMaterial: Material\n    private val panelMaterial: Material\n\n    private val raycaster: Raycaster\n    private val mouse = Vector2()\n    private val sphere: Mesh\n\n    private val rendererListeners = mutableListOf<() -> Unit>()\n\n    private var vizPanels = mutableListOf<VizPanel>()\n\n    private var sheepView = document.getElementById(\"sheepView\")!! as HTMLDivElement\n\n    private val pixelDensity = 0.2f\n\n    private var totalPixels = 0\n\n    init {\n        sheepView.addEventListener(\"mousemove\", { event -> onMouseMove(event as MouseEvent) }, false)\n        camera = PerspectiveCamera(45, sheepView.offsetWidth.toDouble() / sheepView.offsetHeight, 1, 10000)\n        camera.position.z = 1000.0\n        controls = OrbitControls(camera, sheepView)\n        controls.minPolarAngle = PI / 2 - .25 // radians\n        controls.maxPolarAngle = PI / 2 + .25 // radians\n\n        scene = Scene()\n        pointMaterial = PointsMaterial().apply { color.set(0xffffff) }\n        lineMaterial = LineBasicMaterial().apply { color.set(0xaaaaaa) }\n        panelMaterial = LineBasicMaterial().apply { color.set(0xaaaaaa); linewidth = 3.0 }\n        scene.add(camera)\n        renderer = WebGLRenderer()\n        renderer.setPixelRatio(window.devicePixelRatio)\n        renderer.setSize(sheepView.offsetWidth, sheepView.offsetHeight)\n        sheepView.appendChild(renderer.domElement)\n        geom = Geometry()\n        raycaster = Raycaster(js(\"undefined\"), js(\"undefined\"), js(\"undefined\"), js(\"undefined\"))\n        raycaster.asDynamic().params.Points.threshold = 1\n        sphere = Mesh(\n            SphereBufferGeometry(1, 32, 32),\n            MeshBasicMaterial().apply { color.set(0xff0000) }\n        )\n        scene.add(sphere)\n\n        // convert from SheepModel to THREE\n        sheepModel.vertices.forEach { v ->\n            geom.vertices.asDynamic().push(Vector3(v.x, v.y, v.z))\n        }\n\n        startRender()\n\n        var resizeTaskId: Int? = null\n        window.addEventListener(\"resize\", {\n            if (resizeTaskId !== null) {\n                window.clearTimeout(resizeTaskId!!)\n            }\n\n            resizeTaskId = window.setTimeout({\n                resizeTaskId = null\n                doResize()\n            }, resizeDelay)\n        })\n    }\n\n    fun addFrameListener(frameListener: FrameListener) {\n        frameListeners.add(frameListener)\n    }\n\n    fun removeFrameListener(frameListener: FrameListener) {\n        frameListeners.remove(frameListener)\n    }\n\n    fun onMouseMove(event: MouseEvent) {\n        event.preventDefault()\n        mouse.x = (event.clientX.toDouble() / sheepView.offsetWidth) * 2 - 1\n        mouse.y = -(event.clientY.toDouble() / sheepView.offsetHeight) * 2 + 1\n    }\n\n    fun addPanel(p: SheepModel.Panel): VizPanel {\n        // if (p.name !== '15R') return\n        // if (omitPanels.includes(p.name)) return\n\n        val vizPanel = VizPanel(p, geom, scene)\n        vizPanels.add(vizPanel)\n\n        // console.log(\"Panel \" + p.name + \" area is \" + vizPanel.area + \"; will add \" + pixelCount + \" pixels\")\n\n        // try to draw pixel-ish things...\n        if (renderPixels) {\n            val pixelArranger = SwirlyPixelArranger(pixelDensity, 2)\n            val pixelPositions = pixelArranger.arrangePixels(vizPanel)\n            vizPanel.vizPixels = VizPanel.VizPixels(pixelPositions)\n            totalPixels += pixelPositions.size\n        }\n\n        document.getElementById(\"visualizerPixelCount\").asDynamic().innerText = totalPixels.toString()\n\n        return vizPanel\n    }\n\n    fun addMovingHead(movingHead: SheepModel.MovingHead, dmxUniverse: FakeDmxUniverse): VizMovingHead {\n        return VizMovingHead(movingHead, dmxUniverse)\n    }\n\n    inner class VizMovingHead(movingHead: SheepModel.MovingHead, dmxUniverse: FakeDmxUniverse) {\n        private val baseChannel = Config.DMX_DEVICES[movingHead.name]!!\n        private val device = Shenzarpy(dmxUniverse.reader(baseChannel, 16) { receivedDmxFrame() })\n        private val geometry = ConeBufferGeometry(50, 1000)\n        private val material = MeshBasicMaterial().apply { color.set(0xffff00) }\n        private val cone = Mesh(geometry, material)\n\n\n        init {\n            geometry.applyMatrix(Matrix4().makeTranslation(0.0, -500.0, 0.0))\n            material.transparent = true\n            material.opacity = .75\n            cone.position.set(movingHead.origin.x, movingHead.origin.y, movingHead.origin.z)\n            cone.rotation.x = -PI / 2\n            scene.add(cone)\n        }\n\n        private fun receivedDmxFrame() {\n            val colorWheelV = device.colorWheel\n            val wheelColor = Shenzarpy.WheelColor.get(colorWheelV)\n\n            material.color.set(wheelColor.color.rgb)\n\n            material.visible = device.dimmer > .1\n\n            cone.rotation.x = -PI / 2 + device.tilt\n            cone.rotation.z = device.pan.toDouble()\n        }\n    }\n\n    private fun getVizRotationEl() = document.getElementById(\"vizRotation\") as HTMLInputElement\n\n    private fun startRender() {\n        geom.computeBoundingSphere()\n        this.obj = Points().apply { geometry = geom; material = pointMaterial }\n        scene.add(obj)\n        val target = geom.boundingSphere.asDynamic().center.clone()\n        controls.target = target\n        camera.lookAt(target)\n\n        render()\n    }\n\n    private val REFRESH_DELAY = 50 // ms\n\n    fun render() {\n        window.setTimeout(fun() {\n            window.requestAnimationFrame { render() }\n        }, REFRESH_DELAY)\n\n        if (!mapperIsRunning) {\n            if (getVizRotationEl().checked) {\n                val rotSpeed = .01\n                val x = camera.position.x\n                val z = camera.position.z\n                camera.position.x = x * cos(rotSpeed) + z * sin(rotSpeed)\n                camera.position.z = z * cos(rotSpeed * 2) - x * sin(rotSpeed * 2)\n                camera.lookAt(scene.position)\n            }\n        }\n\n        controls.update()\n\n        raycaster.setFromCamera(mouse, camera)\n        val intersections = raycaster.intersectObjects(scene.children.asDynamic(), false)\n        if (intersections.size > 0) {\n            val intersection = intersections[0]\n            if (intersection.`object`.asDynamic().panel) {\n                (document.getElementById(\"selectionInfo\") as HTMLDivElement).innerText =\n                    \"Selected: \" + intersections[0].`object`.asDynamic().panel.name\n            }\n        }\n\n        renderer.render(scene, camera)\n\n        frameListeners.forEach { f -> f.onFrameReady(scene, camera) }\n        rendererListeners.forEach { value -> value() }\n    }\n\n// vector.applyMatrix(object.matrixWorld).project(camera) to get 2d x,y coord\n\n    private val resizeDelay = 100\n\n    private fun doResize() {\n        camera.aspect = sheepView.offsetWidth.toDouble() / sheepView.offsetHeight\n        camera.updateProjectionMatrix()\n        renderer.setSize(sheepView.offsetWidth, sheepView.offsetHeight)\n    }\n\n    interface FrameListener {\n        @JsName(\"onFrameReady\")\n        fun onFrameReady(scene: Scene, camera: Camera)\n    }\n}\n","package baaahs.visualizer\n\nimport baaahs.Color\nimport baaahs.Pixels\nimport baaahs.SheepModel\nimport baaahs.geom.Vector2\nimport info.laht.threekt.THREE\nimport info.laht.threekt.THREE.FrontSide\nimport info.laht.threekt.core.BufferAttribute\nimport info.laht.threekt.core.BufferGeometry\nimport info.laht.threekt.core.Face3\nimport info.laht.threekt.core.Geometry\nimport info.laht.threekt.materials.LineBasicMaterial\nimport info.laht.threekt.materials.MeshBasicMaterial\nimport info.laht.threekt.materials.PointsMaterial\nimport info.laht.threekt.math.Matrix4\nimport info.laht.threekt.math.Triangle\nimport info.laht.threekt.math.Vector3\nimport info.laht.threekt.math.minus\nimport info.laht.threekt.objects.Line\nimport info.laht.threekt.objects.Mesh\nimport info.laht.threekt.objects.Points\nimport info.laht.threekt.scenes.Scene\nimport org.khronos.webgl.Float32Array\nimport org.khronos.webgl.get\nimport org.khronos.webgl.set\nimport org.w3c.dom.get\nimport three.Float32BufferAttribute\nimport kotlin.browser.document\nimport kotlin.math.max\nimport kotlin.math.min\n\nclass VizPanel(panel: SheepModel.Panel, private val geom: Geometry, private val scene: Scene) {\n    private val name = panel.name\n    internal val geometry = Geometry()\n    var area = 0.0f\n    private var panelNormal: Vector3\n    val isMultiFaced: Boolean\n    internal var edgeNeighbors: Map<String, List<Face3>>\n    private val lineMaterial = LineBasicMaterial().apply { color.set(0xaaaaaa) }\n    internal var faceMaterial: MeshBasicMaterial\n    private var mesh: Mesh\n    private var lines: List<Line>\n    var vizPixels: VizPixels? = null\n        set(value) {\n            field?.removeFromScene(scene)\n            value?.addToScene(scene)\n\n            field = value\n        }\n\n    init {\n        val panelGeometry = this.geometry\n        val panelVertices = panelGeometry.vertices\n\n        val triangle = Triangle() // for computing area...\n\n        val faceAreas = mutableListOf<Float>()\n        panelGeometry.faces = panel.faces.faces.map { face ->\n            val localVerts = face.vertexIds.map { vi ->\n                val v = geom.vertices[vi]\n                var lvi = panelVertices.indexOf(v)\n                if (lvi == -1) {\n                    lvi = panelVertices.size\n                    panelVertices.asDynamic().push(v)\n                }\n                lvi\n            }\n\n            triangle.set(\n                panelVertices[localVerts[0]],\n                panelVertices[localVerts[1]],\n                panelVertices[localVerts[2]]\n            )\n\n            val faceArea = triangle.asDynamic().getArea() as Float\n            faceAreas.add(faceArea)\n            this.area += faceArea\n\n            val normal: Vector3 = document[\"non-existant-key\"]\n            Face3(localVerts[0], localVerts[1], localVerts[2], normal)\n        }.toTypedArray()\n\n        isMultiFaced = panelGeometry.faces.size > 1\n\n        panelGeometry.computeFaceNormals()\n        val faceNormalSum = Vector3()\n        panelGeometry.faces.forEachIndexed { index, face ->\n            val faceArea = faceAreas[index]\n            faceNormalSum.addScaledVector(face.normal!!, faceArea)\n        }\n        panelNormal = faceNormalSum.divideScalar(area.toDouble())\n\n        val edgeNeighbors = mutableMapOf<String, MutableList<Face3>>()\n        panelGeometry.faces.forEach { face ->\n            face.segments().forEach { vs ->\n                val vsKey = vs.asKey()\n                val neighbors = edgeNeighbors.getOrPut(vsKey) { mutableListOf() }\n                neighbors.add(face)\n            }\n        }\n        this.edgeNeighbors = edgeNeighbors\n\n        geom.computeVertexNormals() // todo: why is this here?\n\n        val lines = panel.lines.map { line ->\n            val lineGeo = Geometry()\n            lineGeo.vertices = line.points.map { pt -> Vector3(pt.x, pt.y, pt.z) }.toTypedArray()\n            lineGeo\n        }\n\n        this.faceMaterial = MeshBasicMaterial().apply { color.set(0x222222) }\n        this.faceMaterial.side = FrontSide\n        this.faceMaterial.transparent = false\n\n        this.mesh = Mesh(panelGeometry, this.faceMaterial)\n        this.mesh.asDynamic().panel = this // so we can get back to the VizPanel from a raycaster intersection...\n        scene.add(this.mesh)\n\n        this.lines = lines.map { line -> Line(line.asDynamic(), lineMaterial) }\n\n        this.lines.forEach { line ->\n            scene.add(line)\n        }\n    }\n\n    class Point2(val x: Float, val y: Float) {\n        operator fun component1() = x\n        operator fun component2() = y\n    }\n\n\n    class VizPixels(positions: Array<Vector3>) : Pixels {\n        override val size = positions.size\n        private val points: Points\n        private val pixGeometry = BufferGeometry()\n        private val colorsBufferAttr: BufferAttribute\n        private val colorsAsInts = IntArray(size) // store colors as an int array too for Pixels.get()\n\n        init {\n            val positionsArray = Float32Array(size * 3)\n            positions.forEachIndexed { i, v ->\n                positionsArray[i * 3] = v.x.toFloat()\n                positionsArray[i * 3 + 1] = v.y.toFloat()\n                positionsArray[i * 3 + 2] = v.z.toFloat()\n            }\n            val positionsBufferAttr = Float32BufferAttribute(positionsArray, 3)\n            pixGeometry.addAttribute(\"position\", positionsBufferAttr)\n\n            colorsBufferAttr = Float32BufferAttribute(Float32Array(size * 3), 3)\n            colorsBufferAttr.dynamic = true\n            pixGeometry.addAttribute(\"color\", colorsBufferAttr)\n            val material = PointsMaterial()\n                .apply { size = 3; vertexColors = THREE.VertexColors }\n            points = Points().apply { geometry = pixGeometry; this.material = material }\n        }\n\n        fun addToScene(scene: Scene) {\n            scene.add(points)\n        }\n\n        fun removeFromScene(scene: Scene) {\n            scene.remove(points)\n        }\n\n        override fun get(i: Int): Color {\n            return Color(colorsAsInts[i])\n        }\n\n        override fun set(i: Int, color: Color) {\n            colorsAsInts[i] = color.argb\n\n            val rgbBuf = colorsBufferAttr.array\n            rgbBuf[i * 3] = color.redF\n            rgbBuf[i * 3 + 1] = color.greenF\n            rgbBuf[i * 3 + 2] = color.blueF\n            colorsBufferAttr.needsUpdate = true\n        }\n\n        override fun set(colors: Array<Color>) {\n            val maxCount = min(this.size, colors.size)\n            val rgbBuf = colorsBufferAttr.array\n            for (i in 0 until maxCount) {\n                colorsAsInts[i] = colors[i].argb\n\n                val pColor = colors[i]\n                rgbBuf[i * 3] = pColor.redF\n                rgbBuf[i * 3 + 1] = pColor.greenF\n                rgbBuf[i * 3 + 2] = pColor.blueF\n            }\n            colorsBufferAttr.needsUpdate = true\n        }\n\n        fun getPixelLocationsInPanelSpace(vizPanel: VizPanel): Array<Vector2> {\n            val panelGeom = vizPanel.geometry.clone()\n            val pixGeom = pixGeometry.clone()\n\n            val straightOnNormal = Vector3(0, 0, 1)\n\n            // Rotate to straight on.\n            val rotator = Rotator(vizPanel.panelNormal, straightOnNormal)\n            rotator.rotate(panelGeom)\n            rotator.rotate(pixGeom)\n\n            // Translate and scale pixels to panel space (0f..1f)\n            panelGeom.computeBoundingBox()\n            val boundingBox = panelGeom.boundingBox!!\n            val min = boundingBox.min\n            val size = boundingBox.max - boundingBox.min\n\n            val translate = Matrix4().makeTranslation(-min.x, -min.y, -min.z)\n            panelGeom.applyMatrix(translate)\n            pixGeom.applyMatrix(translate)\n\n            val scale = Matrix4().makeScale(1.0 / size.x, 1.0 / size.y, 1.0)\n            panelGeom.applyMatrix(scale)\n            pixGeom.applyMatrix(scale)\n\n            val pixelVs = mutableListOf<Vector2>()\n            val pixelPositions = pixGeom.getAttribute(\"position\")\n            val array = pixelPositions.array as Float32Array\n            for (i in 0 until pixelPositions.count * 3 step 3) {\n                val v = Vector2(clamp(array[i]).toDouble(), clamp(array[i + 1]).toDouble())\n                pixelVs.add(v)\n            }\n\n            return pixelVs.toTypedArray()\n        }\n\n        fun clamp(f: Float): Float = min(1f, max(f, 0f))\n    }\n\n    fun getPixelLocations(): Array<Vector2>? {\n        return vizPixels?.getPixelLocationsInPanelSpace(this)\n    }\n}\n","package baaahs.visualizer\n\nimport info.laht.threekt.core.BufferGeometry\nimport info.laht.threekt.core.Face3\nimport info.laht.threekt.core.Geometry\nimport info.laht.threekt.math.Matrix4\nimport info.laht.threekt.math.Quaternion\nimport info.laht.threekt.math.Vector3\n\nfun Face3.segments() = arrayOf(arrayOf(a, b), arrayOf(b, c), arrayOf(c, a))\nfun Array<Int>.asKey() = sorted().joinToString(\"-\")\n\nclass Rotator(val from: Vector3, val to: Vector3) {\n    private val quaternion = Quaternion()\n    private val matrix = Matrix4()\n\n    init {\n        quaternion.setFromUnitVectors(from, to)\n        matrix.makeRotationFromQuaternion(quaternion)\n    }\n\n    fun rotate(vararg geoms: Geometry) {\n        geoms.forEach { it.applyMatrix(matrix) }\n    }\n\n    fun rotate(vararg geoms: BufferGeometry) {\n        geoms.forEach { it.applyMatrix(matrix) }\n    }\n\n    fun invert(): Rotator = Rotator(to, from)\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAeqD,gB;;cAiDnC,yB;;;;;;;;;;;;;;;;;eCgpBlB,I;;;;;;;;;;;;;;;;;;;;;2BC9pBA,mD;qBCsCA,8C;uBCLA,+C;oBCrEA,qC;;;;2BFkDA,oD;gCGi9BA,yD;oBAAA,6C;sBAAA,0C;6BAAA,mD;;cCh2BkB,yB;aAtDJ,wB;aAfI,wB;YAgEI,uB;YAnCI,uB;;;eAwDJ,0B;aAQJ,wB;;;;yBDglClB,gD;;YE9sCkB,uB;;;;iCCpDlB,iC;;;;;;;;;;;;;;;aC4FA,+B;iBCxCA,mC;eLynCA,wC;gBM7rCA,oC;;;;;;;;;;;;;;;;;;;kBC8hBA,mC;;2CPsuCA,wD;;;gBQ9vDA,K;;;mBCwB8C,8B;2BT+gD9C,oD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBApqBA,4C;qBUlzBA,mB;mBCjFA,wB;;gBCoDkB,2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IlBxDd,Y;IACA,wB;IACA,wB;IACA,sB;IAEA,yC;IACA,wC;IACA,qBAAoC,I;IACpC,yBAAgC,+B;IAEhC,2BAA4C,I;IAC5C,2BAAgD,I;EAZzC,C;;;;;MAMP,0B;IAAA,C;;MAAA,0B;IAAA,C;;;;MAGA,6B;IAAA,C;;MACiB,yBAAQ,K;MAAO,yBAAkB,K;IAAM,C;;;IASlC,wC;IAAA,yB;IAAA,oC;EAGlB,C;;;;;;;;;;;;;YAFI,QAAQ,qBAAkB,wBAAlB,MAAR,C;YACA,gB;4BAAA,mC;gBAAA,kBmB5BZ,mB;qBnB4BY,mB;YAAA,Q;;;;YADA,OACA,a;;;;;;;;;;;;;;;;EACJ,C;;IAHkB,4C;qBAAA,4D;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IALtB,wC;IAAA,yB;IAAA,kB;EAWA,C;;;;;;;;;;;;;YAVI,oBAAO,uBAAmB,oBAAQ,OAA3B,C;YACP,iBAAK,mBAAU,IAAV,a;YACL,0BAAa,a;YACb,oBAAQ,kBAAS,iBAAT,C;YACR,+BAAkB,4B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"}